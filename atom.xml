<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>芋艿V的博客</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.yunai.me/"/>
  <updated>2017-08-01T03:39:19.000Z</updated>
  <id>http://www.yunai.me/</id>
  
  <author>
    <name>王文斌</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Sharding-JDBC 源码分析 —— SQL 路由（一）之分库分表配置</title>
    <link href="http://www.yunai.me/Sharding-JDBC/sql-route-1/"/>
    <id>http://www.yunai.me/Sharding-JDBC/sql-route-1/</id>
    <published>2017-08-03T16:00:00.000Z</published>
    <updated>2017-08-01T03:39:19.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><a href="#">1. 概述</a></li>
<li><a href="#">2. TableRule</a><ul>
<li><a href="#">2.1 logicTable</a></li>
<li><a href="#">2.2 数据单元</a><ul>
<li><a href="#">2.2.1 DataNode</a></li>
<li><a href="#">2.2.2 DynamicDataNode</a></li>
</ul>
</li>
<li><a href="#">2.3 分库/分表策略</a></li>
<li><a href="#">2.4 主键生成</a></li>
</ul>
</li>
<li><a href="#">3. ShardingRule</a><ul>
<li><a href="#">3.1 dataSourceRule</a></li>
<li><a href="#">3.2 tableRules</a></li>
<li><a href="#">3.3 bindingTableRules</a></li>
</ul>
</li>
<li><a href="#">4. ShardingStrategy</a></li>
<li><a href="#">5. ShardingAlgorithm</a></li>
<li><a href="#">666. 彩蛋</a></li>
</ul>
<hr>
<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><p>😆<a href="http://www.yunai.me/categories/Sharding-JDBC/?self">《SQL 解析》</a> 已经告于段落，我们要开始新的旅程：<a href="https://www.yunai.me/images/common/wechat_mp_2017_07_31.jpg">《SQL 路由》</a>。相比<strong>SQL解析</strong>，路由会容易理解很多，骗人是小🐷。整个系列预计会拆分成<strong>四小篇</strong>文章：</p>
<ol>
<li>《分库分表配置》</li>
<li>《分表分库路由》</li>
<li>《读写分离》</li>
<li>《Spring与YAML配置》</li>
</ol>
<p>第一、二篇会在<strong>近期</strong>更新。第三、四篇会在<a href="https://www.yunai.me/images/common/wechat_mp_2017_07_31.jpg">《SQL 改写》</a>、<a href="https://www.yunai.me/images/common/wechat_mp_2017_07_31.jpg">《SQL 执行》</a>完成后进行更新。😈改写和执行相对有趣。</p>
<p>👼道友，您看，逗比博主<strong>“很有规划”</strong>，是关注公众号一波<a href="https://www.yunai.me/images/common/wechat_mp_2017_07_31.jpg">【芋艿的后端小屋】</a>还是分享朋友圈。</p>
<hr>
<p>阅读本文之前，建议已经读过<strong>官方</strong>相关文章：</p>
<ul>
<li><a href="http://dangdangdotcom.github.io/sharding-jdbc/02-guide/concepts/" rel="external nofollow noopener noreferrer" target="_blank">《Sharding-JDBC 核心概念》</a></li>
<li><a href="http://dangdangdotcom.github.io/sharding-jdbc/02-guide/sharding/" rel="external nofollow noopener noreferrer" target="_blank">《Sharding-JDBC 分表分库》</a></li>
</ul>
<p>分表分库配置会涉及如下类：</p>
<ul>
<li>TableRule 表规则配置对象</li>
<li>ShardingRule 分库分表规则配置对象</li>
<li>ShardingStrategy 分片策略</li>
<li>ShardingAlgorithm 分片算法</li>
</ul>
<p>我们来一起逐个类往下看。</p>
<blockquote>
<p><strong>Sharding-JDBC 正在收集使用公司名单：<a href="https://github.com/dangdangdotcom/sharding-jdbc/issues/234" rel="external nofollow noopener noreferrer" target="_blank">传送门</a>。<br>🙂 你的登记，会让更多人参与和使用 Sharding-JDBC。<a href="https://github.com/dangdangdotcom/sharding-jdbc/issues/234" rel="external nofollow noopener noreferrer" target="_blank">传送门</a><br>Sharding-JDBC 也会因此，能够覆盖更多的业务场景。<a href="https://github.com/dangdangdotcom/sharding-jdbc/issues/234" rel="external nofollow noopener noreferrer" target="_blank">传送门</a><br>登记吧，骚年！<a href="https://github.com/dangdangdotcom/sharding-jdbc/issues/234" rel="external nofollow noopener noreferrer" target="_blank">传送门</a></strong></p>
</blockquote>
<h1 id="2-TableRule"><a href="#2-TableRule" class="headerlink" title="2. TableRule"></a>2. TableRule</h1><p>TableRule，表规则配置对象，内嵌 TableRuleBuilder 对象进行创建。</p>
<p><img src="http://www.yunai.me/images/Sharding-JDBC/2017_08_04/01.png" alt=""></p>
<h2 id="2-1-logicTable"><a href="#2-1-logicTable" class="headerlink" title="2.1 logicTable"></a>2.1 logicTable</h2><blockquote>
<p>数据分片的<strong>逻辑表</strong>，对于水平拆分的数据库(表)，同一类表的总称。<br>例：订单数据根据主键尾数拆分为10张表,分别是t_order_0到t_order_9，他们的逻辑表名为t_order。</p>
</blockquote>
<h2 id="2-2-数据单元"><a href="#2-2-数据单元" class="headerlink" title="2.2 数据单元"></a>2.2 数据单元</h2><p>Sharding-JDBC 有两种类型<strong>数据单元</strong>：</p>
<ul>
<li>DataNode ：<strong>静态</strong>分库分表数据单元</li>
</ul>
<blockquote>
<p>数据分片的最小单元，由数据源名称和数据表组成。<br>例：ds_1.t_order_0。配置时默认各个分片数据库的表结构均相同，直接配置逻辑表和真实表对应关系即可。<br>如果各数据库的表结果不同，可使用ds.actual_table配置。</p>
</blockquote>
<ul>
<li>DynamicDataNode ：<strong>动态</strong>表的分库分表数据单元</li>
</ul>
<blockquote>
<p>逻辑表和真实表不一定需要在配置规则中静态配置。<br>比如按照日期分片的场景，真实表的名称随着时间的推移会产生变化。<br>此类需求Sharding-JDBC是支持的，不过目前配置并不友好，会在新版本中提升。</p>
</blockquote>
<p><img src="http://www.yunai.me/images/Sharding-JDBC/2017_08_04/02.png" alt=""></p>
<p>TableRuleBuilder 调用 <code>#build()</code> 方法创建 TableRule。核心代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// TableRuleBuilder.java</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TableRuleBuilder</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> TableRule <span class="title">build</span><span class="params">()</span> </span>&#123;</div><div class="line">       KeyGenerator keyGenerator = <span class="keyword">null</span>;</div><div class="line">       <span class="keyword">if</span> (<span class="keyword">null</span> != generateKeyColumn &amp;&amp; <span class="keyword">null</span> != keyGeneratorClass) &#123;</div><div class="line">           keyGenerator = KeyGeneratorFactory.createKeyGenerator(keyGeneratorClass);</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">new</span> TableRule(logicTable, dynamic, actualTables, dataSourceRule, dataSourceNames, databaseShardingStrategy, tableShardingStrategy, generateKeyColumn, keyGenerator);</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// TableRule.java</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">TableRule</span><span class="params">(<span class="keyword">final</span> String logicTable, <span class="keyword">final</span> <span class="keyword">boolean</span> dynamic, <span class="keyword">final</span> List&lt;String&gt; actualTables, <span class="keyword">final</span> DataSourceRule dataSourceRule, <span class="keyword">final</span> Collection&lt;String&gt; dataSourceNames,</span></span></div><div class="line">                <span class="keyword">final</span> DatabaseShardingStrategy databaseShardingStrategy, <span class="keyword">final</span> TableShardingStrategy tableShardingStrategy,</div><div class="line">                <span class="keyword">final</span> String generateKeyColumn, <span class="keyword">final</span> KeyGenerator keyGenerator) &#123;</div><div class="line">   Preconditions.checkNotNull(logicTable);</div><div class="line">   <span class="keyword">this</span>.logicTable = logicTable;</div><div class="line">   <span class="keyword">this</span>.dynamic = dynamic;</div><div class="line">   <span class="keyword">this</span>.databaseShardingStrategy = databaseShardingStrategy;</div><div class="line">   <span class="keyword">this</span>.tableShardingStrategy = tableShardingStrategy;</div><div class="line">   <span class="keyword">if</span> (dynamic) &#123; <span class="comment">// 动态表的分库分表数据单元</span></div><div class="line">       Preconditions.checkNotNull(dataSourceRule);</div><div class="line">       <span class="keyword">this</span>.actualTables = generateDataNodes(dataSourceRule);</div><div class="line">   &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">null</span> == actualTables || actualTables.isEmpty()) &#123; <span class="comment">// 静态表的分库分表数据单元</span></div><div class="line">       Preconditions.checkNotNull(dataSourceRule);</div><div class="line">       <span class="keyword">this</span>.actualTables = generateDataNodes(Collections.singletonList(logicTable), dataSourceRule, dataSourceNames);</div><div class="line">   &#125; <span class="keyword">else</span> &#123; <span class="comment">// 静态表的分库分表数据单元</span></div><div class="line">       <span class="keyword">this</span>.actualTables = generateDataNodes(actualTables, dataSourceRule, dataSourceNames);</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">this</span>.generateKeyColumn = generateKeyColumn;</div><div class="line">   <span class="keyword">this</span>.keyGenerator = keyGenerator;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-2-1-DataNode"><a href="#2-2-1-DataNode" class="headerlink" title="2.2.1 DataNode"></a>2.2.1 DataNode</h3><p>大多数业务场景下，我们使用<strong>静态</strong>分库分表数据单元，即 DataNode。如上文注释处 <code>静态表的分库分表数据单元</code> 处所见，分成<strong>两</strong>种判断，实质上第一种是将 <code>logicTable</code> 作为 <code>actualTable</code>，即在<strong>库</strong>里不进行分表，是第二种的一种特例。</p>
<p>我们来看看 <code>#generateDataNodes()</code> 方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// TableRule.java</span></div><div class="line"><span class="comment">/**</span></div><div class="line">* 生成静态数据分片节点</div><div class="line">*</div><div class="line">* <span class="doctag">@param</span> actualTables 真实表</div><div class="line">* <span class="doctag">@param</span> dataSourceRule 数据源配置对象</div><div class="line">* <span class="doctag">@param</span> actualDataSourceNames 数据源名集合</div><div class="line">* <span class="doctag">@return</span> 静态数据分片节点</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">private</span> List&lt;DataNode&gt; <span class="title">generateDataNodes</span><span class="params">(<span class="keyword">final</span> List&lt;String&gt; actualTables, <span class="keyword">final</span> DataSourceRule dataSourceRule, <span class="keyword">final</span> Collection&lt;String&gt; actualDataSourceNames)</span> </span>&#123;</div><div class="line">   Collection&lt;String&gt; dataSourceNames = getDataSourceNames(dataSourceRule, actualDataSourceNames);</div><div class="line">   List&lt;DataNode&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;(actualTables.size() * (dataSourceNames.isEmpty() ? <span class="number">1</span> : dataSourceNames.size()));</div><div class="line">   <span class="keyword">for</span> (String actualTable : actualTables) &#123;</div><div class="line">       <span class="keyword">if</span> (DataNode.isValidDataNode(actualTable)) &#123; <span class="comment">// 当 actualTable 为 $&#123;dataSourceName&#125;.$&#123;tableName&#125; 时</span></div><div class="line">           result.add(<span class="keyword">new</span> DataNode(actualTable));</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           <span class="keyword">for</span> (String dataSourceName : dataSourceNames) &#123;</div><div class="line">               result.add(<span class="keyword">new</span> DataNode(dataSourceName, actualTable));</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line">* 根据 数据源配置对象 和 数据源名集合 获得 最终的数据源名集合</div><div class="line">*</div><div class="line">* <span class="doctag">@param</span> dataSourceRule 数据源配置对象</div><div class="line">* <span class="doctag">@param</span> actualDataSourceNames 数据源名集合</div><div class="line">* <span class="doctag">@return</span> 最终的数据源名集合</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">private</span> Collection&lt;String&gt; <span class="title">getDataSourceNames</span><span class="params">(<span class="keyword">final</span> DataSourceRule dataSourceRule, <span class="keyword">final</span> Collection&lt;String&gt; actualDataSourceNames)</span> </span>&#123;</div><div class="line">   <span class="keyword">if</span> (<span class="keyword">null</span> == dataSourceRule) &#123;</div><div class="line">       <span class="keyword">return</span> Collections.emptyList();</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">if</span> (<span class="keyword">null</span> == actualDataSourceNames || actualDataSourceNames.isEmpty()) &#123;</div><div class="line">       <span class="keyword">return</span> dataSourceRule.getDataSourceNames();</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> actualDataSourceNames;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>第一种情况，<strong>自定义分布</strong>。<code>actualTable</code> 为 <code>${dataSourceName}.${tableName}</code> 时，即已经明确真实表所在数据源。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line">TableRule.builder(<span class="string">"t_order"</span>).actualTables(Arrays.asList(<span class="string">"db0.t_order_0"</span>, <span class="string">"db1.t_order_1"</span>, <span class="string">"db1.t_order_2"</span>))</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">db0</div><div class="line">  └── t_order_0 </div><div class="line">db1</div><div class="line">  ├── t_order_1</div><div class="line">  └── t_order_2</div></pre></td></tr></table></figure>
<ul>
<li>第二种情况，<strong>均匀分布</strong>。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line">TableRule.builder(<span class="string">"t_order"</span>).actualTables(Arrays.asList(<span class="string">"t_order_0"</span>, <span class="string">"t_order_1"</span>))</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line">db0</div><div class="line">  ├── t_order_0 </div><div class="line">  └── t_order_1 </div><div class="line">db1</div><div class="line">  ├── t_order_0 </div><div class="line">  └── t_order_1</div></pre></td></tr></table></figure>
<p><code>#getDataSourceNames()</code> 使用 <code>dataSourceRule</code> 和 <code>actualDataSourceNames</code> 获取数据源的逻辑看起来有种“诡异”。<strong>实际 TableRuleBuilder 创建 TableRule 时，使用 <code>dataSourceRule</code> 而不要使用 <code>actualDataSourceNames</code></strong>。</p>
<h3 id="2-2-2-DynamicDataNode"><a href="#2-2-2-DynamicDataNode" class="headerlink" title="2.2.2 DynamicDataNode"></a>2.2.2 DynamicDataNode</h3><p>少数业务场景下，我们使用<strong>动态</strong>分库分表数据单元，即 DynamicDataNode。<br><strong>通过 <code>dynamic=true</code> 属性配置</strong>。生成代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// TableRule.java</span></div><div class="line"><span class="function"><span class="keyword">private</span> List&lt;DataNode&gt; <span class="title">generateDataNodes</span><span class="params">(<span class="keyword">final</span> DataSourceRule dataSourceRule)</span> </span>&#123;</div><div class="line">   Collection&lt;String&gt; dataSourceNames = dataSourceRule.getDataSourceNames();</div><div class="line">   List&lt;DataNode&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;(dataSourceNames.size());</div><div class="line">   <span class="keyword">for</span> (String each : dataSourceNames) &#123;</div><div class="line">       result.add(<span class="keyword">new</span> DynamicDataNode(each));</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>😂 从代码上看，貌似和<strong>动态</strong>分库分表数据单元没一毛钱关系？！别捉鸡，答案在<a href="https://www.yunai.me/images/common/wechat_mp_2017_07_31.jpg">《分表分库路由》</a> 上。</p>
<h2 id="2-3-分库-分表策略"><a href="#2-3-分库-分表策略" class="headerlink" title="2.3 分库/分表策略"></a>2.3 分库/分表策略</h2><ul>
<li><code>databaseShardingStrategy</code> ：分库策略</li>
<li><code>tableShardingStrategy</code> ：分表策略</li>
</ul>
<p>当分库/分表策略不配置时，使用 ShardingRule 配置的分库/分表策略。</p>
<h2 id="2-4-主键生成"><a href="#2-4-主键生成" class="headerlink" title="2.4 主键生成"></a>2.4 主键生成</h2><ul>
<li><code>generateKeyColumn</code> ：主键字段</li>
<li><code>keyGenerator</code> ：主键生成器</li>
</ul>
<p>当主键生成器不配置时，使用 ShardingRule 配置的主键生成器。</p>
<h1 id="3-ShardingRule"><a href="#3-ShardingRule" class="headerlink" title="3. ShardingRule"></a>3. ShardingRule</h1><p>ShardingRule，分库分表规则配置对象，内嵌 ShardingRuleBuilder 对象进行创建。</p>
<p><img src="http://www.yunai.me/images/Sharding-JDBC/2017_08_04/03.png" alt=""></p>
<p>其中 databaseShardingStrategy、tableShardingStrategy、keyGenerator、defaultGenerator 和 TableRule 属性重复，用于当 TableRule 未配置对应属性，使用 ShardingRule 提供的该属性。</p>
<h2 id="3-1-dataSourceRule"><a href="#3-1-dataSourceRule" class="headerlink" title="3.1 dataSourceRule"></a>3.1 dataSourceRule</h2><p><code>dataSourceRule</code>，数据源配置对象。ShardingRule 需要数据源配置正确。这点和 TableRule 是不同的。TableRule 对 <code>dataSourceRule</code> <strong>只使用数据源名字，最终执行SQL 使用数据源名字从 ShardingRule 获取数据源连接</strong>。大家可以回到本文【2.2.1 DataNode】细看下 DataNode 的生成过程。</p>
<h2 id="3-2-tableRules"><a href="#3-2-tableRules" class="headerlink" title="3.2 tableRules"></a>3.2 tableRules</h2><p><code>tableRules</code>，表规则配置对象<strong>集合</strong>。</p>
<h2 id="3-3-bindingTableRules"><a href="#3-3-bindingTableRules" class="headerlink" title="3.3 bindingTableRules"></a>3.3 bindingTableRules</h2><blockquote>
<p>指在任何场景下分片规则均一致的主表和子表。<br>例：订单表和订单项表，均按照订单ID分片，则此两张表互为BindingTable关系。<br>BindingTable关系的多表关联查询不会出现笛卡尔积关联，关联查询效率将大大提升。</p>
</blockquote>
<p>😈 这么说，可能不太容易理解。<a href="https://www.yunai.me/images/common/wechat_mp_2017_07_31.jpg">《分表分库路由》</a>，我们在源码的基础上，好好理解下。<strong>非常重要，特别是性能优化上面</strong>。</p>
<h1 id="4-ShardingStrategy"><a href="#4-ShardingStrategy" class="headerlink" title="4. ShardingStrategy"></a>4. ShardingStrategy</h1><p>ShardingStrategy，分片策略。</p>
<ul>
<li>针对分库、分表有两个子类。</li>
</ul>
<p><img src="http://www.yunai.me/images/Sharding-JDBC/2017_08_04/04.png" alt=""></p>
<ul>
<li>DatabaseShardingStrategy，使用<strong>分库</strong>算法进行分片</li>
<li>TableShardingStrategy，使用<strong>分表</strong>算法进行分片</li>
</ul>
<p><a href="https://www.yunai.me/images/common/wechat_mp_2017_07_31.jpg">《分表分库路由》</a> 会进一步说明。</p>
<h1 id="5-ShardingAlgorithm"><a href="#5-ShardingAlgorithm" class="headerlink" title="5. ShardingAlgorithm"></a>5. ShardingAlgorithm</h1><p>ShardingAlgorithm，分片算法。</p>
<ul>
<li>针对分库、分表有两个子<strong>接口</strong>。</li>
<li>针对<strong>分片键</strong>数量分成：无分片键算法、单片键算法、多片键算法。</li>
</ul>
<p><strong>其中 NoneKeyDatabaseShardingAlgorithm、NoneTableShardingAlgorithm 为 ShardingRule 在未设置分库、分表算法的默认值</strong>。代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// ShardingRule.java</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ShardingRule</span><span class="params">(</span></span></div><div class="line">       <span class="keyword">final</span> DataSourceRule dataSourceRule, <span class="keyword">final</span> Collection&lt;TableRule&gt; tableRules, <span class="keyword">final</span> Collection&lt;BindingTableRule&gt; bindingTableRules,</div><div class="line">       <span class="keyword">final</span> DatabaseShardingStrategy databaseShardingStrategy, <span class="keyword">final</span> TableShardingStrategy tableShardingStrategy, <span class="keyword">final</span> KeyGenerator keyGenerator) &#123;</div><div class="line">   <span class="comment">// ... 省略部分代码</span></div><div class="line">   <span class="keyword">this</span>.databaseShardingStrategy = <span class="keyword">null</span> == databaseShardingStrategy ? <span class="keyword">new</span> DatabaseShardingStrategy(</div><div class="line">           Collections.&lt;String&gt;emptyList(), <span class="keyword">new</span> NoneDatabaseShardingAlgorithm()) : databaseShardingStrategy;</div><div class="line">   <span class="keyword">this</span>.tableShardingStrategy = <span class="keyword">null</span> == tableShardingStrategy ? <span class="keyword">new</span> TableShardingStrategy(</div><div class="line">           Collections.&lt;String&gt;emptyList(), <span class="keyword">new</span> NoneTableShardingAlgorithm()) : tableShardingStrategy;</div><div class="line">   <span class="comment">// ... 省略部分代码</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="https://www.yunai.me/images/common/wechat_mp_2017_07_31.jpg">《分表分库路由》</a> 会进一步说明。</p>
<h1 id="666-彩蛋"><a href="#666-彩蛋" class="headerlink" title="666. 彩蛋"></a>666. 彩蛋</h1><p>本文看似在水更，实是为<a href="https://www.yunai.me/images/common/wechat_mp_2017_07_31.jpg">《分表分库路由》</a>做铺垫（一阵脸红😳）。</p>
<p>But，无论怎么说，道友，我做了新的关注二维码（感谢猫🐱先生），是不是可以推荐一波公众号给基佬。</p>
<p>恩，继续更新。</p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#&quot;&gt;1. 概述&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#&quot;&gt;2. TableRule&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#&quot;&gt;2.1 logicTable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#&quot;&gt;2.2 数据单元&lt;/a
    
    </summary>
    
      <category term="Sharding-JDBC" scheme="http://www.yunai.me/categories/Sharding-JDBC/"/>
    
    
  </entry>
  
  <entry>
    <title>Sharding-JDBC 源码分析 —— SQL 解析（六）之删除SQL</title>
    <link href="http://www.yunai.me/Sharding-JDBC/sql-parse-6/"/>
    <id>http://www.yunai.me/Sharding-JDBC/sql-parse-6/</id>
    <published>2017-08-01T16:00:00.000Z</published>
    <updated>2017-07-31T12:30:52.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://www.yunai.me/images/common/wechat_mp_2017_07_31.jpg" alt=""></p>
<blockquote>
<p>🙂🙂🙂关注**微信公众号：【芋艿的后端小屋】**有福利：</p>
<ol>
<li>RocketMQ / MyCAT / Sharding-JDBC <strong>所有</strong>源码分析文章列表</li>
<li>RocketMQ / MyCAT / Sharding-JDBC <strong>中文注释源码 GitHub 地址</strong></li>
<li>您对于源码的疑问每条留言<strong>都</strong>将得到<strong>认真</strong>回复。<strong>甚至不知道如何读源码也可以请教噢</strong>。</li>
<li><strong>新的</strong>源码解析文章<strong>实时</strong>收到通知。<strong>每周更新一篇左右</strong>。</li>
<li><strong>认真的</strong>源码交流微信群。</li>
</ol>
</blockquote>
<hr>
<ul>
<li><a href="#">1. 概述</a></li>
<li><a href="#">2. DeleteStatement</a></li>
<li><a href="#">3. #parse()</a>
<ul>
<li><a href="#">3.1 #skipBetweenDeleteAndTable()</a></li>
<li><a href="#">3.2 #parseSingleTable()</a></li>
<li><a href="#">3.3 #parseWhere()</a></li>
</ul>
</li>
<li><a href="#">666. 彩蛋</a></li>
</ul>
<hr>
<h1>1. 概述</h1>
<p>本文前置阅读：</p>
<ul>
<li><a href="http://www.yunai.me/Sharding-JDBC/sql-parse-1/?self">《SQL 解析（一）之词法解析》</a></li>
<li><a href="http://www.yunai.me/Sharding-JDBC/sql-parse-2/?self">《SQL 解析（二）之SQL解析》</a></li>
</ul>
<p>本文分享<strong>删除SQL解析</strong>的源码实现。</p>
<p>🙂 如果你已经理解<a href="http://www.yunai.me/Sharding-JDBC/sql-parse-3/?self">《SQL 解析（三）之查询SQL》</a>，那本文会是一篇水文，当成一种放松吧。还是跟前文一样，以 MySQL 举例子。我们来一起看看 MySQLDeleteParser。</p>
<p>MySQL DELETE 语法一共有 2 种 ：</p>
<ul>
<li>第一种：<strong>Single-table syntax</strong></li>
</ul>
<p><figure class="highlight sql"><table><tr><td class="code"><pre><div class="line"><span class="keyword">DELETE</span> [<span class="keyword">LOW_PRIORITY</span>] [<span class="keyword">QUICK</span>] [<span class="keyword">IGNORE</span>] <span class="keyword">FROM</span> tbl_name</div><div class="line">    [<span class="keyword">PARTITION</span> (partition_name,...)]</div><div class="line">    [<span class="keyword">WHERE</span> where_condition]</div><div class="line">    [<span class="keyword">ORDER</span> <span class="keyword">BY</span> ...]</div><div class="line">    [<span class="keyword">LIMIT</span> <span class="keyword">row_count</span>]</div></pre></td></tr></table></figure></p>
<ul>
<li>第二种：<strong>Multiple-table syntax</strong></li>
</ul>
<p><figure class="highlight sql"><table><tr><td class="code"><pre><div class="line"><span class="keyword">DELETE</span> [<span class="keyword">LOW_PRIORITY</span>] [<span class="keyword">QUICK</span>] [<span class="keyword">IGNORE</span>]</div><div class="line">    tbl_name[.*] [, tbl_name[.*]] ...</div><div class="line">    <span class="keyword">FROM</span> table_references</div><div class="line">    [<span class="keyword">WHERE</span> where_condition]</div><div class="line">    </div><div class="line">【<span class="keyword">OR</span>】</div><div class="line"></div><div class="line"><span class="keyword">DELETE</span> [<span class="keyword">LOW_PRIORITY</span>] [<span class="keyword">QUICK</span>] [<span class="keyword">IGNORE</span>]</div><div class="line">    <span class="keyword">FROM</span> tbl_name[.*] [, tbl_name[.*]] ...</div><div class="line">    <span class="keyword">USING</span> table_references</div><div class="line">    [<span class="keyword">WHERE</span> where_condition]</div></pre></td></tr></table></figure></p>
<p>Sharding-JDBC 目前仅支持第一种。业务场景上使用第二种的很少很少。</p>
<p>Sharding-JDBC 更新SQL解析主流程如下：</p>
<p><img src="http://www.yunai.me/images/Sharding-JDBC/2017_08_02/01.png" alt=""></p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// AbstractDeleteParser.java</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> DeleteStatement <span class="title">parse</span><span class="params">()</span> </span>&#123;</div><div class="line">   sqlParser.getLexer().nextToken(); <span class="comment">// 跳过 DELETE</span></div><div class="line">   skipBetweenDeleteAndTable(); <span class="comment">// // 跳过关键字，例如：MYSQL 里的 LOW_PRIORITY、IGNORE 和 FROM</span></div><div class="line">   sqlParser.parseSingleTable(deleteStatement); <span class="comment">// 解析表</span></div><div class="line">   sqlParser.skipUntil(DefaultKeyword.WHERE); <span class="comment">// 跳到 WHERE</span></div><div class="line">   sqlParser.parseWhere(deleteStatement); <span class="comment">// 解析 WHERE</span></div><div class="line">   <span class="keyword">return</span> deleteStatement;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>Sharding-JDBC 正在收集使用公司名单：<a href="https://github.com/dangdangdotcom/sharding-jdbc/issues/234" rel="external nofollow noopener noreferrer" target="_blank">传送门</a>。<br>
🙂 你的登记，会让更多人参与和使用 Sharding-JDBC。<a href="https://github.com/dangdangdotcom/sharding-jdbc/issues/234" rel="external nofollow noopener noreferrer" target="_blank">传送门</a><br>
Sharding-JDBC 也会因此，能够覆盖更多的业务场景。<a href="https://github.com/dangdangdotcom/sharding-jdbc/issues/234" rel="external nofollow noopener noreferrer" target="_blank">传送门</a><br>
登记吧，骚年！<a href="https://github.com/dangdangdotcom/sharding-jdbc/issues/234" rel="external nofollow noopener noreferrer" target="_blank">传送门</a></strong></p>
</blockquote>
<h1>2. DeleteStatement</h1>
<p>删除SQL 解析结果。</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">UpdateStatement</span> <span class="keyword">extends</span> <span class="title">AbstractSQLStatement</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>😈 对，没有其他属性。</p>
<p>我们来看下 <code>DELETE IGNORE FROM t_user WHERE user_id = ?</code> 的<strong>解析结果</strong>：</p>
<p><img src="http://www.yunai.me/images/Sharding-JDBC/2017_08_02/02.png" alt=""></p>
<h1>3. #parse()</h1>
<h2>3.1 #skipBetweenDeleteAndTable()</h2>
<p>在 <code>DELETE</code> 和 表名 之间有些词法，对 SQL 路由和改写无影响，进行跳过。</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// MySQLDeleteParser.java</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">skipBetweenDeleteAndTable</span><span class="params">()</span> </span>&#123;</div><div class="line">   getSqlParser().skipAll(MySQLKeyword.LOW_PRIORITY, MySQLKeyword.QUICK, MySQLKeyword.IGNORE);</div><div class="line">   getSqlParser().skipIfEqual(DefaultKeyword.FROM);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// OracleDeleteParser.java</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">skipBetweenDeleteAndTable</span><span class="params">()</span> </span>&#123;</div><div class="line">   getSqlParser().skipIfEqual(DefaultKeyword.FROM);</div><div class="line">   getSqlParser().skipIfEqual(OracleKeyword.ONLY);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2>3.2 #parseSingleTable()</h2>
<p>解析<strong>表</strong>，请看<a href="http://www.yunai.me/Sharding-JDBC/sql-parse-2/?self">《SQL 解析（二）之SQL解析》的 <code>#parseSingleTable()</code> 小节</a>。</p>
<h2>3.3 #parseWhere()</h2>
<p>解析 WHERE 条件。解析代码：<a href="http://www.yunai.me/Sharding-JDBC/sql-parse-2/?self">《SQL 解析（二）之SQL解析》的#parseWhere()小节</a>。</p>
<h1>666. 彩蛋</h1>
<p>道友，帮我分享一波怎么样？</p>
<p><strong>后面 SQL 路由和改写会更加有趣哟！</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://www.yunai.me/images/common/wechat_mp_2017_07_31.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;🙂🙂🙂关注**微信公众号：【芋艿的后端小屋】**有福利：&lt;/p&gt;
&lt;o
    
    </summary>
    
      <category term="Sharding-JDBC" scheme="http://www.yunai.me/categories/Sharding-JDBC/"/>
    
    
  </entry>
  
  <entry>
    <title>Sharding-JDBC 源码分析 —— SQL 解析（五）之更新SQL</title>
    <link href="http://www.yunai.me/Sharding-JDBC/sql-parse-5/"/>
    <id>http://www.yunai.me/Sharding-JDBC/sql-parse-5/</id>
    <published>2017-07-30T16:00:00.000Z</published>
    <updated>2017-07-31T12:30:52.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://www.yunai.me/images/common/wechat_mp_2017_07_31.jpg" alt=""></p>
<blockquote>
<p>🙂🙂🙂关注**微信公众号：【芋艿的后端小屋】**有福利：</p>
<ol>
<li>RocketMQ / MyCAT / Sharding-JDBC <strong>所有</strong>源码分析文章列表</li>
<li>RocketMQ / MyCAT / Sharding-JDBC <strong>中文注释源码 GitHub 地址</strong></li>
<li>您对于源码的疑问每条留言<strong>都</strong>将得到<strong>认真</strong>回复。<strong>甚至不知道如何读源码也可以请教噢</strong>。</li>
<li><strong>新的</strong>源码解析文章<strong>实时</strong>收到通知。<strong>每周更新一篇左右</strong>。</li>
<li><strong>认真的</strong>源码交流微信群。</li>
</ol>
</blockquote>
<hr>
<ul>
<li><a href="#">1. 概述</a></li>
<li><a href="#">2. UpdateStatement</a></li>
<li><a href="#">3. #parse()</a>
<ul>
<li><a href="#">3.1 #skipBetweenUpdateAndTable()</a></li>
<li><a href="#">3.2 #parseSingleTable()</a></li>
<li><a href="#">3.3 #parseSetItems()</a></li>
<li><a href="#">3.4 #parseWhere()</a></li>
</ul>
</li>
<li><a href="#">666. 彩蛋</a></li>
</ul>
<hr>
<h1>1. 概述</h1>
<p>本文前置阅读：</p>
<ul>
<li><a href="http://www.yunai.me/Sharding-JDBC/sql-parse-1/?self">《SQL 解析（一）之词法解析》</a></li>
<li><a href="http://www.yunai.me/Sharding-JDBC/sql-parse-2/?self">《SQL 解析（二）之SQL解析》</a></li>
</ul>
<p>本文分享<strong>更新SQL解析</strong>的源码实现。</p>
<p>更新SQL解析比查询SQL解析复杂度低的多的多。不同数据库在插入SQL语法上也统一的多。<strong>本文分享 MySQL 更新SQL解析器 MySQLUpdateParser</strong>。</p>
<p>MySQL UPDATE 语法一共有 2 种 ：</p>
<ul>
<li>第一种：<strong>Single-table syntax</strong></li>
</ul>
<p><figure class="highlight sql"><table><tr><td class="code"><pre><div class="line"><span class="keyword">UPDATE</span> [<span class="keyword">LOW_PRIORITY</span>] [<span class="keyword">IGNORE</span>] table_reference</div><div class="line">    <span class="keyword">SET</span> col_name1=&#123;expr1|<span class="keyword">DEFAULT</span>&#125; [, col_name2=&#123;expr2|<span class="keyword">DEFAULT</span>&#125;] ...</div><div class="line">    [<span class="keyword">WHERE</span> where_condition]</div><div class="line">    [<span class="keyword">ORDER</span> <span class="keyword">BY</span> ...]</div><div class="line">    [<span class="keyword">LIMIT</span> <span class="keyword">row_count</span>]</div></pre></td></tr></table></figure></p>
<ul>
<li>第二种：<strong>Multiple-table syntax</strong></li>
</ul>
<p><figure class="highlight sql"><table><tr><td class="code"><pre><div class="line"><span class="keyword">UPDATE</span> [<span class="keyword">LOW_PRIORITY</span>] [<span class="keyword">IGNORE</span>] table_references</div><div class="line">    <span class="keyword">SET</span> col_name1=&#123;expr1|<span class="keyword">DEFAULT</span>&#125; [, col_name2=&#123;expr2|<span class="keyword">DEFAULT</span>&#125;] ...</div><div class="line">    [<span class="keyword">WHERE</span> where_condition]</div></pre></td></tr></table></figure></p>
<p>Sharding-JDBC 目前仅支持第一种。业务场景上使用第二种的很少很少。</p>
<p>Sharding-JDBC 更新SQL解析主流程如下：</p>
<p><img src="http://www.yunai.me/images/Sharding-JDBC/2017_07_31/01.png" alt=""></p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// AbstractUpdateParser.java</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> UpdateStatement <span class="title">parse</span><span class="params">()</span> </span>&#123;</div><div class="line">   sqlParser.getLexer().nextToken(); <span class="comment">// 跳过 UPDATE</span></div><div class="line">   skipBetweenUpdateAndTable(); <span class="comment">// 跳过关键字，例如：MYSQL 里的 LOW_PRIORITY、IGNORE</span></div><div class="line">   sqlParser.parseSingleTable(updateStatement); <span class="comment">// 解析表</span></div><div class="line">   parseSetItems(); <span class="comment">// 解析 SET</span></div><div class="line">   sqlParser.skipUntil(DefaultKeyword.WHERE);</div><div class="line">   sqlParser.setParametersIndex(parametersIndex);</div><div class="line">   sqlParser.parseWhere(updateStatement);</div><div class="line">   <span class="keyword">return</span> updateStatement; <span class="comment">// 解析 WHERE</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>Sharding-JDBC 正在收集使用公司名单：<a href="https://github.com/dangdangdotcom/sharding-jdbc/issues/234" rel="external nofollow noopener noreferrer" target="_blank">传送门</a>。<br>
🙂 你的登记，会让更多人参与和使用 Sharding-JDBC。<a href="https://github.com/dangdangdotcom/sharding-jdbc/issues/234" rel="external nofollow noopener noreferrer" target="_blank">传送门</a><br>
Sharding-JDBC 也会因此，能够覆盖更多的业务场景。<a href="https://github.com/dangdangdotcom/sharding-jdbc/issues/234" rel="external nofollow noopener noreferrer" target="_blank">传送门</a><br>
登记吧，骚年！<a href="https://github.com/dangdangdotcom/sharding-jdbc/issues/234" rel="external nofollow noopener noreferrer" target="_blank">传送门</a></strong></p>
</blockquote>
<h1>2. UpdateStatement</h1>
<p>更新SQL 解析结果。</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">UpdateStatement</span> <span class="keyword">extends</span> <span class="title">AbstractSQLStatement</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>😈 对，没有其他属性。</p>
<p>我们来看下 <code>UPDATE t_user SET nickname = ?, age = ? WHERE user_id = ?</code> 的<strong>解析结果</strong>：</p>
<p><img src="http://www.yunai.me/images/Sharding-JDBC/2017_07_31/02.png" alt=""></p>
<h1>3. #parse()</h1>
<h2>3.1 #skipBetweenUpdateAndTable()</h2>
<p>在 <code>UPDATE</code> 和 表名 之间有些词法，对 SQL 路由和改写无影响，进行跳过。</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// MySQLUpdateParser.java</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">skipBetweenUpdateAndTable</span><span class="params">()</span> </span>&#123;</div><div class="line">   getSqlParser().skipAll(MySQLKeyword.LOW_PRIORITY, MySQLKeyword.IGNORE);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// OracleUpdateParser.java</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">skipBetweenUpdateAndTable</span><span class="params">()</span> </span>&#123;</div><div class="line">   getSqlParser().skipIfEqual(OracleKeyword.ONLY);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2>3.2 #parseSingleTable()</h2>
<p>解析<strong>表</strong>，请看<a href="http://www.yunai.me/Sharding-JDBC/sql-parse-2/?self">《SQL 解析（二）之SQL解析》的 <code>#parseSingleTable()</code> 小节</a>。</p>
<h2>3.3 #parseSetItems()</h2>
<p>解析<code>SET</code>后语句。</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// AbstractUpdateParser.java</span></div><div class="line"><span class="comment">/**</span></div><div class="line">* 解析多个 SET 项</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseSetItems</span><span class="params">()</span> </span>&#123;</div><div class="line">   sqlParser.accept(DefaultKeyword.SET);</div><div class="line">   <span class="keyword">do</span> &#123;</div><div class="line">       parseSetItem();</div><div class="line">   &#125; <span class="keyword">while</span> (sqlParser.skipIfEqual(Symbol.COMMA)); <span class="comment">// 以 "," 分隔</span></div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line">* 解析单个 SET 项</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseSetItem</span><span class="params">()</span> </span>&#123;</div><div class="line">   parseSetColumn();</div><div class="line">   sqlParser.skipIfEqual(Symbol.EQ, Symbol.COLON_EQ);</div><div class="line">   parseSetValue();</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line">* 解析单个 SET 项</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseSetColumn</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">if</span> (sqlParser.equalAny(Symbol.LEFT_PAREN)) &#123;</div><div class="line">       sqlParser.skipParentheses();</div><div class="line">       <span class="keyword">return</span>;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">int</span> beginPosition = sqlParser.getLexer().getCurrentToken().getEndPosition();</div><div class="line">   String literals = sqlParser.getLexer().getCurrentToken().getLiterals();</div><div class="line">   sqlParser.getLexer().nextToken();</div><div class="line">   <span class="keyword">if</span> (sqlParser.skipIfEqual(Symbol.DOT)) &#123; <span class="comment">// 字段有别名</span></div><div class="line">       <span class="comment">// TableToken</span></div><div class="line">       <span class="keyword">if</span> (updateStatement.getTables().getSingleTableName().equalsIgnoreCase(SQLUtil.getExactlyValue(literals))) &#123;</div><div class="line">           updateStatement.getSqlTokens().add(<span class="keyword">new</span> TableToken(beginPosition - literals.length(), literals));</div><div class="line">       &#125;</div><div class="line">       sqlParser.getLexer().nextToken();</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line">* 解析单个 SET 值</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseSetValue</span><span class="params">()</span> </span>&#123;</div><div class="line">   sqlParser.parseExpression(updateStatement);</div><div class="line">   parametersIndex = sqlParser.getParametersIndex();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2>3.4 #parseWhere()</h2>
<p>解析 WHERE 条件。解析代码：<a href="http://www.yunai.me/Sharding-JDBC/sql-parse-2/?self">《SQL 解析（二）之SQL解析》的#parseWhere()小节</a>。</p>
<h1>666. 彩蛋</h1>
<p>😝 比更新SQL解析是不是简单，更不用对比查询SQL解析。😳有一种在水更的感觉。嘿嘿，下一篇（<a href="http://www.yunai.me/images/common/wechat_mp_2017_07_31.jpg">《删除SQL解析》</a>）会更加容易。</p>
<p>道友，帮我分享一波怎么样？</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://www.yunai.me/images/common/wechat_mp_2017_07_31.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;🙂🙂🙂关注**微信公众号：【芋艿的后端小屋】**有福利：&lt;/p&gt;
&lt;o
    
    </summary>
    
      <category term="Sharding-JDBC" scheme="http://www.yunai.me/categories/Sharding-JDBC/"/>
    
    
  </entry>
  
  <entry>
    <title>Sharding-JDBC 源码分析 —— SQL 解析（四）之插入SQL</title>
    <link href="http://www.yunai.me/Sharding-JDBC/sql-parse-4/"/>
    <id>http://www.yunai.me/Sharding-JDBC/sql-parse-4/</id>
    <published>2017-07-28T16:00:00.000Z</published>
    <updated>2017-07-31T12:30:52.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://www.yunai.me/images/common/wechat_mp_2017_07_31.jpg" alt=""></p>
<blockquote>
<p>🙂🙂🙂关注**微信公众号：【芋艿的后端小屋】**有福利：</p>
<ol>
<li>RocketMQ / MyCAT / Sharding-JDBC <strong>所有</strong>源码分析文章列表</li>
<li>RocketMQ / MyCAT / Sharding-JDBC <strong>中文注释源码 GitHub 地址</strong></li>
<li>您对于源码的疑问每条留言<strong>都</strong>将得到<strong>认真</strong>回复。<strong>甚至不知道如何读源码也可以请教噢</strong>。</li>
<li><strong>新的</strong>源码解析文章<strong>实时</strong>收到通知。<strong>每周更新一篇左右</strong>。</li>
<li><strong>认真的</strong>源码交流微信群。</li>
</ol>
</blockquote>
<hr>
<ul>
<li><a href="#">1. 概述</a></li>
<li><a href="#">2. InsertStatement</a></li>
<li><a href="#">3. #parse()</a>
<ul>
<li><a href="#">3.1 #parseInfo()</a></li>
<li><a href="#">3.2 #parseColumns()</a></li>
<li><a href="#">3.3 #parseValues()</a></li>
<li><a href="#">3.4 #parseCustomizedInsert()</a></li>
<li><a href="#">3.5 #appendGenerateKey()</a></li>
</ul>
</li>
<li><a href="#">666. 彩蛋</a></li>
</ul>
<hr>
<h1>1. 概述</h1>
<p>本文前置阅读：</p>
<ul>
<li><a href="http://www.yunai.me/Sharding-JDBC/sql-parse-1/?self">《SQL 解析（一）之词法解析》</a></li>
<li><a href="http://www.yunai.me/Sharding-JDBC/sql-parse-2/?self">《SQL 解析（二）之SQL解析》</a></li>
</ul>
<p>本文分享<strong>插入SQL解析</strong>的源码实现。</p>
<p>不考虑 INSERT SELECT 情况下，插入SQL解析比查询SQL解析复杂度低的多的多。不同数据库在插入SQL语法上也统一的多。<strong>本文分享 MySQL 插入SQL解析器 MySQLInsertParser</strong>。</p>
<p>MySQL INSERT 语法一共有 3 种 ：</p>
<ul>
<li>第一种：<code>INSERT {VALUES | VALUES}</code></li>
</ul>
<p><figure class="highlight sql"><table><tr><td class="code"><pre><div class="line"><span class="keyword">INSERT</span> [<span class="keyword">LOW_PRIORITY</span> | <span class="keyword">DELAYED</span> | <span class="keyword">HIGH_PRIORITY</span>] [<span class="keyword">IGNORE</span>]</div><div class="line">    [<span class="keyword">INTO</span>] tbl_name</div><div class="line">    [<span class="keyword">PARTITION</span> (partition_name,...)]</div><div class="line">    [(col_name,...)]</div><div class="line">    &#123;<span class="keyword">VALUES</span> | <span class="keyword">VALUE</span>&#125; (&#123;expr | <span class="keyword">DEFAULT</span>&#125;,...),(...),...</div><div class="line">    [ <span class="keyword">ON</span> <span class="keyword">DUPLICATE</span> <span class="keyword">KEY</span> <span class="keyword">UPDATE</span></div><div class="line">      col_name=expr</div><div class="line">        [, col_name=expr] ... ]</div></pre></td></tr></table></figure></p>
<ul>
<li>第二种：<code>INSERT SET</code></li>
</ul>
<p><figure class="highlight sql"><table><tr><td class="code"><pre><div class="line"><span class="keyword">INSERT</span> [<span class="keyword">LOW_PRIORITY</span> | <span class="keyword">DELAYED</span> | <span class="keyword">HIGH_PRIORITY</span>] [<span class="keyword">IGNORE</span>]</div><div class="line">    [<span class="keyword">INTO</span>] tbl_name</div><div class="line">    [<span class="keyword">PARTITION</span> (partition_name,...)]</div><div class="line">    <span class="keyword">SET</span> col_name=&#123;expr | <span class="keyword">DEFAULT</span>&#125;, ...</div><div class="line">    [ <span class="keyword">ON</span> <span class="keyword">DUPLICATE</span> <span class="keyword">KEY</span> <span class="keyword">UPDATE</span></div><div class="line">      col_name=expr</div><div class="line">        [, col_name=expr] ... ]</div></pre></td></tr></table></figure></p>
<ul>
<li>第三种：<code>INSERT SELECT</code></li>
</ul>
<p><figure class="highlight sql"><table><tr><td class="code"><pre><div class="line"><span class="keyword">INSERT</span> [<span class="keyword">LOW_PRIORITY</span> | <span class="keyword">HIGH_PRIORITY</span>] [<span class="keyword">IGNORE</span>]</div><div class="line">    [<span class="keyword">INTO</span>] tbl_name</div><div class="line">    [<span class="keyword">PARTITION</span> (partition_name,...)]</div><div class="line">    [(col_name,...)]</div><div class="line">    <span class="keyword">SELECT</span> ...</div><div class="line">    [ <span class="keyword">ON</span> <span class="keyword">DUPLICATE</span> <span class="keyword">KEY</span> <span class="keyword">UPDATE</span></div><div class="line">      col_name=expr</div><div class="line">        [, col_name=expr] ... ]</div></pre></td></tr></table></figure></p>
<p>Sharding-JDBC 目前支持：</p>
<ul>
<li>第一种：<code>INSERT {VALUES | VALUES}</code> <strong>单条记录</strong></li>
<li>第二种：<code>INSERT SET</code></li>
</ul>
<p>Sharding-JDBC 插入SQL解析主流程如下：</p>
<p><img src="http://www.yunai.me/images/Sharding-JDBC/2017_07_29/01.png" alt=""></p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// AbstractInsertParser.java</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> InsertStatement <span class="title">parse</span><span class="params">()</span> </span>&#123;</div><div class="line">   sqlParser.getLexer().nextToken(); <span class="comment">// 跳过 INSERT 关键字</span></div><div class="line">   parseInto(); <span class="comment">// 解析INTO</span></div><div class="line">   parseColumns(); <span class="comment">// 解析表</span></div><div class="line">   <span class="keyword">if</span> (sqlParser.equalAny(DefaultKeyword.SELECT, Symbol.LEFT_PAREN)) &#123;</div><div class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"Cannot support subquery"</span>);</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">if</span> (getValuesKeywords().contains(sqlParser.getLexer().getCurrentToken().getType())) &#123; <span class="comment">// 第一种插入SQL情况</span></div><div class="line">       parseValues();</div><div class="line">   &#125; <span class="keyword">else</span> <span class="keyword">if</span> (getCustomizedInsertKeywords().contains(sqlParser.getLexer().getCurrentToken().getType())) &#123; <span class="comment">// 第二种插入SQL情况</span></div><div class="line">       parseCustomizedInsert();</div><div class="line">   &#125;</div><div class="line">   appendGenerateKey(); <span class="comment">// 自增主键</span></div><div class="line">   <span class="keyword">return</span> insertStatement;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>Sharding-JDBC 正在收集使用公司名单：<a href="https://github.com/dangdangdotcom/sharding-jdbc/issues/234" rel="external nofollow noopener noreferrer" target="_blank">传送门</a>。<br>
🙂 你的登记，会让更多人参与和使用 Sharding-JDBC。<a href="https://github.com/dangdangdotcom/sharding-jdbc/issues/234" rel="external nofollow noopener noreferrer" target="_blank">传送门</a><br>
Sharding-JDBC 也会因此，能够覆盖更多的业务场景。<a href="https://github.com/dangdangdotcom/sharding-jdbc/issues/234" rel="external nofollow noopener noreferrer" target="_blank">传送门</a><br>
登记吧，骚年！<a href="https://github.com/dangdangdotcom/sharding-jdbc/issues/234" rel="external nofollow noopener noreferrer" target="_blank">传送门</a></strong></p>
</blockquote>
<h1>2. InsertStatement</h1>
<p>插入SQL 解析结果。</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">InsertStatement</span> <span class="keyword">extends</span> <span class="title">AbstractSQLStatement</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 插入字段</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Collection&lt;Column&gt; columns = <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line">    <span class="comment">/**</span></div><div class="line">     *</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> GeneratedKey generatedKey;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 插入字段 下一个Token 开始位置</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> columnsListLastPosition;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 值字段 下一个Token 开始位置</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> valuesListLastPosition;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们来看下 <code>INSERT INTO t_order (uid, nickname) VALUES (?, ?)</code> 的<strong>解析结果</strong>：</p>
<p><img src="http://www.yunai.me/images/Sharding-JDBC/2017_07_29/02.png" alt=""></p>
<h1>3. #parse()</h1>
<h2>3.1 #parseInto()</h2>
<p>解析<strong>表</strong>。</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// AbstractInsertParser.java</span></div><div class="line"><span class="comment">/**</span></div><div class="line">* 解析表</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseInto</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="comment">// 例如，Oracle，INSERT FIRST/ALL 目前不支持</span></div><div class="line">   <span class="keyword">if</span> (getUnsupportedKeywords().contains(sqlParser.getLexer().getCurrentToken().getType())) &#123;</div><div class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> SQLParsingUnsupportedException(sqlParser.getLexer().getCurrentToken().getType());</div><div class="line">   &#125;</div><div class="line">   sqlParser.skipUntil(DefaultKeyword.INTO);</div><div class="line">   sqlParser.getLexer().nextToken();</div><div class="line">   <span class="comment">// 解析表</span></div><div class="line">   sqlParser.parseSingleTable(insertStatement);</div><div class="line">   skipBetweenTableAndValues();</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line">* 跳过 表 和 插入字段 中间的 Token</div><div class="line">* 例如 MySQL ：[PARTITION (partition_name,...)]</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">skipBetweenTableAndValues</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">while</span> (getSkippedKeywordsBetweenTableAndValues().contains(sqlParser.getLexer().getCurrentToken().getType())) &#123;</div><div class="line">       sqlParser.getLexer().nextToken();</div><div class="line">       <span class="keyword">if</span> (sqlParser.equalAny(Symbol.LEFT_PAREN)) &#123;</div><div class="line">           sqlParser.skipParentheses();</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其中 <code>#parseSingleTable()</code> 请看<a href="http://www.yunai.me/Sharding-JDBC/sql-parse-2/?self">《SQL 解析（二）之SQL解析》的 <code>#parseSingleTable()</code> 小节</a>。</p>
<h2>3.2 #parseColumns()</h2>
<p>解析<strong>插入字段</strong>。</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// AbstractInsertParser.java</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseColumns</span><span class="params">()</span> </span>&#123;</div><div class="line">   Collection&lt;Column&gt; result = <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line">   <span class="keyword">if</span> (sqlParser.equalAny(Symbol.LEFT_PAREN)) &#123;</div><div class="line">       String tableName = insertStatement.getTables().getSingleTableName();</div><div class="line">       Optional&lt;String&gt; generateKeyColumn = shardingRule.getGenerateKeyColumn(tableName); <span class="comment">// 自动生成键信息</span></div><div class="line">       <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">       <span class="keyword">do</span> &#123;</div><div class="line">           <span class="comment">// Column 插入字段</span></div><div class="line">           sqlParser.getLexer().nextToken();</div><div class="line">           String columnName = SQLUtil.getExactlyValue(sqlParser.getLexer().getCurrentToken().getLiterals());</div><div class="line">           result.add(<span class="keyword">new</span> Column(columnName, tableName));</div><div class="line">           sqlParser.getLexer().nextToken();</div><div class="line">           <span class="comment">// 自动生成键</span></div><div class="line">           <span class="keyword">if</span> (generateKeyColumn.isPresent() &amp;&amp; generateKeyColumn.get().equalsIgnoreCase(columnName)) &#123;</div><div class="line">               generateKeyColumnIndex = count;</div><div class="line">           &#125;</div><div class="line">           count++;</div><div class="line">       &#125; <span class="keyword">while</span> (!sqlParser.equalAny(Symbol.RIGHT_PAREN) &amp;&amp; !sqlParser.equalAny(Assist.END));</div><div class="line">       <span class="comment">//</span></div><div class="line">       insertStatement.setColumnsListLastPosition(sqlParser.getLexer().getCurrentToken().getEndPosition() - sqlParser.getLexer().getCurrentToken().getLiterals().length());</div><div class="line">       <span class="comment">//</span></div><div class="line">       sqlParser.getLexer().nextToken();</div><div class="line">   &#125;</div><div class="line">   insertStatement.getColumns().addAll(result);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2>3.3 #parseValues()</h2>
<p>解析<strong>值字段</strong></p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 解析值字段</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseValues</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">boolean</span> parsed = <span class="keyword">false</span>;</div><div class="line">   <span class="keyword">do</span> &#123;</div><div class="line">       <span class="keyword">if</span> (parsed) &#123; <span class="comment">// 只允许INSERT INTO 一条</span></div><div class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"Cannot support multiple insert"</span>);</div><div class="line">       &#125;</div><div class="line">       sqlParser.getLexer().nextToken();</div><div class="line">       sqlParser.accept(Symbol.LEFT_PAREN);</div><div class="line">       <span class="comment">// 解析表达式</span></div><div class="line">       List&lt;SQLExpression&gt; sqlExpressions = <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line">       <span class="keyword">do</span> &#123;</div><div class="line">           sqlExpressions.add(sqlParser.parseExpression());</div><div class="line">       &#125; <span class="keyword">while</span> (sqlParser.skipIfEqual(Symbol.COMMA));</div><div class="line">       <span class="comment">//</span></div><div class="line">       insertStatement.setValuesListLastPosition(sqlParser.getLexer().getCurrentToken().getEndPosition() - sqlParser.getLexer().getCurrentToken().getLiterals().length());</div><div class="line">       <span class="comment">// 解析值字段</span></div><div class="line">       <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">       <span class="keyword">for</span> (Column each : insertStatement.getColumns()) &#123;</div><div class="line">           SQLExpression sqlExpression = sqlExpressions.get(count);</div><div class="line">           insertStatement.getConditions().add(<span class="keyword">new</span> Condition(each, sqlExpression), shardingRule);</div><div class="line">           <span class="keyword">if</span> (generateKeyColumnIndex == count) &#123; <span class="comment">// 自动生成键</span></div><div class="line">               insertStatement.setGeneratedKey(createGeneratedKey(each, sqlExpression));</div><div class="line">           &#125;</div><div class="line">           count++;</div><div class="line">       &#125;</div><div class="line">       sqlParser.accept(Symbol.RIGHT_PAREN);</div><div class="line">       parsed = <span class="keyword">true</span>;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">while</span> (sqlParser.equalAny(Symbol.COMMA)); <span class="comment">// 字段以 "," 分隔</span></div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line">* 创建 自动生成键</div><div class="line">*</div><div class="line">* <span class="doctag">@param</span> column 字段</div><div class="line">* <span class="doctag">@param</span> sqlExpression 表达式</div><div class="line">* <span class="doctag">@return</span> 自动生成键</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">private</span> GeneratedKey <span class="title">createGeneratedKey</span><span class="params">(<span class="keyword">final</span> Column column, <span class="keyword">final</span> SQLExpression sqlExpression)</span> </span>&#123;</div><div class="line">   GeneratedKey result;</div><div class="line">   <span class="keyword">if</span> (sqlExpression <span class="keyword">instanceof</span> SQLPlaceholderExpression) &#123; <span class="comment">// 占位符</span></div><div class="line">       result = <span class="keyword">new</span> GeneratedKey(column.getName(), ((SQLPlaceholderExpression) sqlExpression).getIndex(), <span class="keyword">null</span>);</div><div class="line">   &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sqlExpression <span class="keyword">instanceof</span> SQLNumberExpression) &#123; <span class="comment">// 数字</span></div><div class="line">       result = <span class="keyword">new</span> GeneratedKey(column.getName(), -<span class="number">1</span>, ((SQLNumberExpression) sqlExpression).getNumber());</div><div class="line">   &#125; <span class="keyword">else</span> &#123;</div><div class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> ShardingJdbcException(<span class="string">"Generated key only support number."</span>);</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3>3.4.1 GeneratedKey</h3>
<p>自动生成键，<strong>属于分片上下文信息</strong>。</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">GeneratedKey</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 字段</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String column;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 第几个占位符</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> index;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 值</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Number value;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3>3.4.2 Condition</h3>
<p>条件对象，<strong>属于分片上下文信息</strong>。在<strong>插入SQL解析</strong>里存储<strong>影响分片的值字段</strong>。后续<a href="http://www.yunai.me/images/common/wechat_mp_2017_07_31.jpg">《SQL 路由》</a> 会专门分享这块。</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Condition</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 字段</div><div class="line">     */</div><div class="line">    <span class="meta">@Getter</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Column column;</div><div class="line">    </div><div class="line">    <span class="comment">// ... 省略其它属性</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Column</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 列名</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 表名</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String tableName;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2>3.4 #parseCustomizedInsert()</h2>
<p>解析<strong>第二种插入SQL</strong>：<code>INSERT SET</code>。例如：</p>
<p><figure class="highlight sql"><table><tr><td class="code"><pre><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">test</span> <span class="keyword">SET</span> <span class="keyword">id</span> = <span class="number">4</span>  <span class="keyword">ON</span> <span class="keyword">DUPLICATE</span> <span class="keyword">KEY</span> <span class="keyword">UPDATE</span> <span class="keyword">name</span> = <span class="string">'doubi'</span>, <span class="keyword">name</span> = <span class="string">'hehe'</span>;</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">test</span> <span class="keyword">SET</span> <span class="keyword">id</span> = <span class="number">4</span>, <span class="keyword">name</span> = <span class="string">'hehe'</span>;</div></pre></td></tr></table></figure></p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseInsertSet</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">do</span> &#123;</div><div class="line">       getSqlParser().getLexer().nextToken();</div><div class="line">       <span class="comment">// 插入字段</span></div><div class="line">       Column column = <span class="keyword">new</span> Column(SQLUtil.getExactlyValue(getSqlParser().getLexer().getCurrentToken().getLiterals()), getInsertStatement().getTables().getSingleTableName());</div><div class="line">       getSqlParser().getLexer().nextToken();</div><div class="line">       <span class="comment">// 等号</span></div><div class="line">       getSqlParser().accept(Symbol.EQ);</div><div class="line">       <span class="comment">// 【值】表达式</span></div><div class="line">       SQLExpression sqlExpression;</div><div class="line">       <span class="keyword">if</span> (getSqlParser().equalAny(Literals.INT)) &#123;</div><div class="line">           sqlExpression = <span class="keyword">new</span> SQLNumberExpression(Integer.parseInt(getSqlParser().getLexer().getCurrentToken().getLiterals()));</div><div class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (getSqlParser().equalAny(Literals.FLOAT)) &#123;</div><div class="line">           sqlExpression = <span class="keyword">new</span> SQLNumberExpression(Double.parseDouble(getSqlParser().getLexer().getCurrentToken().getLiterals()));</div><div class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (getSqlParser().equalAny(Literals.CHARS)) &#123;</div><div class="line">           sqlExpression = <span class="keyword">new</span> SQLTextExpression(getSqlParser().getLexer().getCurrentToken().getLiterals());</div><div class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (getSqlParser().equalAny(DefaultKeyword.NULL)) &#123;</div><div class="line">           sqlExpression = <span class="keyword">new</span> SQLIgnoreExpression();</div><div class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (getSqlParser().equalAny(Symbol.QUESTION)) &#123;</div><div class="line">           sqlExpression = <span class="keyword">new</span> SQLPlaceholderExpression(getSqlParser().getParametersIndex());</div><div class="line">           getSqlParser().increaseParametersIndex();</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">""</span>);</div><div class="line">       &#125;</div><div class="line">       getSqlParser().getLexer().nextToken();</div><div class="line">       <span class="comment">// Condition</span></div><div class="line">       <span class="keyword">if</span> (getSqlParser().equalAny(Symbol.COMMA, DefaultKeyword.ON, Assist.END)) &#123;</div><div class="line">           getInsertStatement().getConditions().add(<span class="keyword">new</span> Condition(column, sqlExpression), getShardingRule());</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           getSqlParser().skipUntil(Symbol.COMMA, DefaultKeyword.ON);</div><div class="line">       &#125;</div><div class="line">   &#125; <span class="keyword">while</span> (getSqlParser().equalAny(Symbol.COMMA)); <span class="comment">// 字段以 "," 分隔</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2>3.5 #appendGenerateKey()</h2>
<p>当表设置<strong>自动生成键</strong>，并且插入SQL<strong>没</strong>写自增字段，增加该字段。例如：</p>
<p><figure class="highlight sql"><table><tr><td class="code"><pre><div class="line">// 主键为user_id</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_user(nickname, age) <span class="keyword">VALUES</span> (?, ?)</div></pre></td></tr></table></figure></p>
<p>后续 SQL 改写会生成该自增编号，并改写该 SQL。后续<a href="http://www.yunai.me/images/common/wechat_mp_2017_07_31.jpg">《SQL 改写》</a> 会专门分享这块。</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">appendGenerateKey</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="comment">// 当表设置自动生成键，并且插入SQL没写自增字段</span></div><div class="line">   String tableName = insertStatement.getTables().getSingleTableName();</div><div class="line">   Optional&lt;String&gt; generateKeyColumn = shardingRule.getGenerateKeyColumn(tableName);</div><div class="line">   <span class="keyword">if</span> (!generateKeyColumn.isPresent() || <span class="keyword">null</span> != insertStatement.getGeneratedKey()) &#123;</div><div class="line">       <span class="keyword">return</span>;</div><div class="line">   &#125;</div><div class="line">   <span class="comment">// ItemsToken</span></div><div class="line">   ItemsToken columnsToken = <span class="keyword">new</span> ItemsToken(insertStatement.getColumnsListLastPosition());</div><div class="line">   columnsToken.getItems().add(generateKeyColumn.get());</div><div class="line">   insertStatement.getSqlTokens().add(columnsToken);</div><div class="line">   <span class="comment">// GeneratedKeyToken</span></div><div class="line">   insertStatement.getSqlTokens().add(<span class="keyword">new</span> GeneratedKeyToken(insertStatement.getValuesListLastPosition()));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3>3.5.1 GeneratedKeyToken</h3>
<p>自增主键标记对象。</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">GeneratedKeyToken</span> <span class="keyword">implements</span> <span class="title">SQLToken</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 开始位置</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> beginPosition;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1>666. 彩蛋</h1>
<p>😈 是不是比<a href="http://www.yunai.me/Sharding-JDBC/sql-parse-3/?self">《SQL 解析（三）之插入SQL》</a>简单很多。</p>
<p><strong>道友，可否分享一波【本文】到朋友圈</strong>。</p>
<p><strong>继续加油更新！</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://www.yunai.me/images/common/wechat_mp_2017_07_31.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;🙂🙂🙂关注**微信公众号：【芋艿的后端小屋】**有福利：&lt;/p&gt;
&lt;o
    
    </summary>
    
      <category term="Sharding-JDBC" scheme="http://www.yunai.me/categories/Sharding-JDBC/"/>
    
    
  </entry>
  
  <entry>
    <title>Sharding-JDBC 源码分析 —— SQL 解析（三）之查询SQL</title>
    <link href="http://www.yunai.me/Sharding-JDBC/sql-parse-3/"/>
    <id>http://www.yunai.me/Sharding-JDBC/sql-parse-3/</id>
    <published>2017-07-26T16:00:00.000Z</published>
    <updated>2017-07-31T12:30:52.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://www.yunai.me/images/common/wechat_mp_2017_07_31.jpg" alt=""></p>
<blockquote>
<p>🙂🙂🙂关注**微信公众号：【芋艿的后端小屋】**有福利：</p>
<ol>
<li>RocketMQ / MyCAT / Sharding-JDBC <strong>所有</strong>源码分析文章列表</li>
<li>RocketMQ / MyCAT / Sharding-JDBC <strong>中文注释源码 GitHub 地址</strong></li>
<li>您对于源码的疑问每条留言<strong>都</strong>将得到<strong>认真</strong>回复。<strong>甚至不知道如何读源码也可以请教噢</strong>。</li>
<li><strong>新的</strong>源码解析文章<strong>实时</strong>收到通知。<strong>每周更新一篇左右</strong>。</li>
<li><strong>认真的</strong>源码交流微信群。</li>
</ol>
</blockquote>
<hr>
<ul>
<li><a href="#">1. 概述</a></li>
<li><a href="#">2. SelectStatement</a>
<ul>
<li><a href="#">2.1 AbstractSQLStatement</a></li>
<li><a href="#">2.2 SQLToken</a></li>
</ul>
</li>
<li><a href="#">3. #query()</a>
<ul>
<li><a href="#">3.1 #parseDistinct()</a></li>
<li><a href="#">3.2 #parseSelectList()</a></li>
<li><a href="#">3.3 #skipToFrom()</a></li>
<li><a href="#">3.4 #parseFrom()</a></li>
<li><a href="#">3.5 #parseWhere()</a></li>
<li><a href="#">3.6 #parseGroupBy()</a></li>
<li><a href="#">3.7 #parseOrderBy()</a></li>
<li><a href="#">3.8 #parseLimit()</a></li>
<li><a href="#">3.9 #queryRest()</a></li>
</ul>
</li>
<li><a href="#">4. appendDerived等方法</a>
<ul>
<li><a href="#">4.1 appendAvgDerivedColumns</a></li>
<li><a href="#">4.2 appendDerivedOrderColumns</a></li>
<li><a href="#">4.3 ItemsToken</a></li>
<li><a href="#">4.4 appendDerivedOrderBy()</a></li>
</ul>
</li>
<li><a href="#">666. 彩蛋</a></li>
</ul>
<hr>
<h1>1. 概述</h1>
<p>本文前置阅读：</p>
<ul>
<li><a href="http://www.yunai.me/Sharding-JDBC/sql-parse-1/?self">《SQL 解析（一）之词法解析》</a></li>
<li><a href="http://www.yunai.me/Sharding-JDBC/sql-parse-2/?self">《SQL 解析（二）之SQL解析》</a></li>
</ul>
<p>本文分享<strong>插入SQL解析</strong>的源码实现。</p>
<p>由于每个数据库在遵守 SQL 语法规范的同时，又有各自独特的语法。因此，在 Sharding-JDBC 里每个数据库都有自己的 SELECT 语句的解析器实现方式，当然绝大部分逻辑是相同的。<strong>本文主要分享笔者最常用的 MySQL 查询</strong>。</p>
<p>查询 SQL 解析主流程如下：</p>
<p><img src="http://www.yunai.me/images/Sharding-JDBC/2017_07_27/03.png" alt=""></p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// AbstractSelectParser.java</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> SelectStatement <span class="title">parse</span><span class="params">()</span> </span>&#123;</div><div class="line">   query();</div><div class="line">   parseOrderBy();</div><div class="line">   customizedSelect();</div><div class="line">   appendDerivedColumns();</div><div class="line">   appendDerivedOrderBy();</div><div class="line">   <span class="keyword">return</span> selectStatement;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li><code>#parseOrderBy()</code> ：对于 MySQL 查询语句解析器无效果，因为已经在 <code>#query()</code> 方法里面已经调用 <code>#parseOrderBy()</code>，因此图中省略该方法。</li>
<li><code>#customizedSelect()</code> ：Oracle、SQLServer 查询语句解析器重写了该方法，对于 MySQL 查询解析器是个空方法，进行省略。有兴趣的同学可以单独去研究研究。</li>
</ul>
<blockquote>
<p><strong>Sharding-JDBC 正在收集使用公司名单：<a href="https://github.com/dangdangdotcom/sharding-jdbc/issues/234" rel="external nofollow noopener noreferrer" target="_blank">传送门</a>。<br>
🙂 你的登记，会让更多人参与和使用 Sharding-JDBC。<a href="https://github.com/dangdangdotcom/sharding-jdbc/issues/234" rel="external nofollow noopener noreferrer" target="_blank">传送门</a><br>
Sharding-JDBC 也会因此，能够覆盖更多的业务场景。<a href="https://github.com/dangdangdotcom/sharding-jdbc/issues/234" rel="external nofollow noopener noreferrer" target="_blank">传送门</a><br>
登记吧，骚年！<a href="https://github.com/dangdangdotcom/sharding-jdbc/issues/234" rel="external nofollow noopener noreferrer" target="_blank">传送门</a></strong></p>
</blockquote>
<p>👼 查询语句解析是增删改查里面<strong>最灵活也是最复杂的</strong>，希望大家有耐心看完本文。理解查询语句解析，另外三种语句理解起来简直是 SO EASY。骗人是小狗🐶。<br>
🙂如果对本文有不理解的地方，可以给我的公众号**（<a href="http://www.yunai.me/images/common/wechat_mp_2017_07_31.jpg">芋艿的后端小屋</a>）<strong>留言，我会</strong>逐条认真耐心**回复。骗人是小猪🐷。</p>
<p>OK，不废话啦，开始我们这段痛并快乐的旅途。</p>
<h1>2. SelectStatement</h1>
<p>🙂 <strong>本节只介绍这些类，方便本文下节分析源码实现大家能知道认识它们</strong> 🙂</p>
<p>SelectStatement，查询语句解析结果对象。</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// SelectStatement.java</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">SelectStatement</span> <span class="keyword">extends</span> <span class="title">AbstractSQLStatement</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 是否行 DISTINCT / DISTINCTROW / UNION</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> distinct;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 是否查询所有字段，即 SELECT *</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> containStar;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 最后一个查询项下一个 Token 的开始位置</div><div class="line">     *</div><div class="line">     * <span class="doctag">@see</span> #items</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> selectListLastPosition;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 最后一个分组项下一个 Token 的开始位置</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> groupByLastPosition;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 查询项</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;SelectItem&gt; items = <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 分组项</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;OrderItem&gt; groupByItems = <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 排序项</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;OrderItem&gt; orderByItems = <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 分页</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> Limit limit;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们对属性按照类型进行归类：</p>
<ul>
<li>特殊
<ul>
<li>distinct</li>
</ul>
</li>
<li>查询字段
<ul>
<li>containStar</li>
<li>items</li>
<li>selectListLastPosition</li>
</ul>
</li>
<li>分组条件
<ul>
<li>groupByItems</li>
<li>groupByLastPosition</li>
</ul>
</li>
<li>排序条件
<ul>
<li>orderByItems</li>
</ul>
</li>
<li>分页条件
<ul>
<li>limit</li>
</ul>
</li>
</ul>
<h2>2.1 AbstractSQLStatement</h2>
<p>增删改查解析结果对象的<strong>抽象父类</strong>。</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractSQLStatement</span> <span class="keyword">implements</span> <span class="title">SQLStatement</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * SQL 类型</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SQLType type;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 表</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Tables tables = <span class="keyword">new</span> Tables();</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 过滤条件。</div><div class="line">     * 只有对路由结果有影响的条件，才添加进数组</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Conditions conditions = <span class="keyword">new</span> Conditions();</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * SQL标记对象</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;SQLToken&gt; sqlTokens = <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2>2.2 SQLToken</h2>
<p>SQLToken，SQL标记对象接口，SQL 改写时使用到。下面都是它的实现类：</p>
<table>
<thead>
<tr>
<th style="text-align:left">类</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">GeneratedKeyToken</td>
<td style="text-align:left">自增主键标记对象</td>
</tr>
<tr>
<td style="text-align:left">TableToken</td>
<td style="text-align:left">表标记对象</td>
</tr>
<tr>
<td style="text-align:left">ItemsToken</td>
<td style="text-align:left">选择项标记对象</td>
</tr>
<tr>
<td style="text-align:left">OffsetToken</td>
<td style="text-align:left">分页偏移量标记对象</td>
</tr>
<tr>
<td style="text-align:left">OrderByToken</td>
<td style="text-align:left">排序标记对象</td>
</tr>
<tr>
<td style="text-align:left">RowCountToken</td>
<td style="text-align:left">分页长度标记对象</td>
</tr>
</tbody>
</table>
<h1>3. #query()</h1>
<p><code>#query()</code>，查询 SQL 解析。</p>
<p><strong>MySQL SELECT Syntax</strong>：</p>
<p><figure class="highlight sql"><table><tr><td class="code"><pre><div class="line">// https://dev.mysql.com/doc/refman/5.7/en/select.html</div><div class="line"><span class="keyword">SELECT</span></div><div class="line">    [ALL | <span class="keyword">DISTINCT</span> | <span class="keyword">DISTINCTROW</span> ]</div><div class="line">      [<span class="keyword">HIGH_PRIORITY</span>]</div><div class="line">      [<span class="keyword">STRAIGHT_JOIN</span>]</div><div class="line">      [<span class="keyword">SQL_SMALL_RESULT</span>] [<span class="keyword">SQL_BIG_RESULT</span>] [<span class="keyword">SQL_BUFFER_RESULT</span>]</div><div class="line">      [<span class="keyword">SQL_CACHE</span> | SQL_NO_CACHE] [<span class="keyword">SQL_CALC_FOUND_ROWS</span>]</div><div class="line">    select_expr [, select_expr ...]</div><div class="line">    [<span class="keyword">FROM</span> table_references</div><div class="line">      [<span class="keyword">PARTITION</span> partition_list]</div><div class="line">    [<span class="keyword">WHERE</span> where_condition]</div><div class="line">    [<span class="keyword">GROUP</span> <span class="keyword">BY</span> &#123;col_name | expr | <span class="keyword">position</span>&#125;</div><div class="line">      [<span class="keyword">ASC</span> | <span class="keyword">DESC</span>], ... [<span class="keyword">WITH</span> <span class="keyword">ROLLUP</span>]]</div><div class="line">    [<span class="keyword">HAVING</span> where_condition]</div><div class="line">    [<span class="keyword">ORDER</span> <span class="keyword">BY</span> &#123;col_name | expr | <span class="keyword">position</span>&#125;</div><div class="line">      [<span class="keyword">ASC</span> | <span class="keyword">DESC</span>], ...]</div><div class="line">    [<span class="keyword">LIMIT</span> &#123;[<span class="keyword">offset</span>,] <span class="keyword">row_count</span> | <span class="keyword">row_count</span> <span class="keyword">OFFSET</span> <span class="keyword">offset</span>&#125;]</div><div class="line">    [<span class="keyword">PROCEDURE</span> procedure_name(argument_list)]</div><div class="line">    [<span class="keyword">INTO</span> <span class="keyword">OUTFILE</span> <span class="string">'file_name'</span></div><div class="line">        [<span class="built_in">CHARACTER</span> <span class="keyword">SET</span> charset_name]</div><div class="line">        export_options</div><div class="line">      | <span class="keyword">INTO</span> <span class="keyword">DUMPFILE</span> <span class="string">'file_name'</span></div><div class="line">      | <span class="keyword">INTO</span> var_name [, var_name]]</div><div class="line">    [<span class="keyword">FOR</span> <span class="keyword">UPDATE</span> | <span class="keyword">LOCK</span> <span class="keyword">IN</span> <span class="keyword">SHARE</span> <span class="keyword">MODE</span>]]</div></pre></td></tr></table></figure></p>
<p>大体流程如下：</p>
<p><img src="http://www.yunai.me/images/Sharding-JDBC/2017_07_27/04.png" alt=""></p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// MySQLSelectParser.java</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">if</span> (getSqlParser().equalAny(DefaultKeyword.SELECT)) &#123;</div><div class="line">       getSqlParser().getLexer().nextToken();</div><div class="line">       parseDistinct();</div><div class="line">       getSqlParser().skipAll(MySQLKeyword.HIGH_PRIORITY, DefaultKeyword.STRAIGHT_JOIN, MySQLKeyword.SQL_SMALL_RESULT, MySQLKeyword.SQL_BIG_RESULT, MySQLKeyword.SQL_BUFFER_RESULT,</div><div class="line">               MySQLKeyword.SQL_CACHE, MySQLKeyword.SQL_NO_CACHE, MySQLKeyword.SQL_CALC_FOUND_ROWS);</div><div class="line">       parseSelectList(); <span class="comment">// 解析 查询字段</span></div><div class="line">       skipToFrom(); <span class="comment">// 跳到 FROM 处</span></div><div class="line">   &#125;</div><div class="line">   parseFrom();<span class="comment">// 解析 表（JOIN ON / FROM 单&amp;多表）</span></div><div class="line">   parseWhere(); <span class="comment">// 解析 WHERE 条件</span></div><div class="line">   parseGroupBy(); <span class="comment">// 解析 Group By 和 Having（目前不支持）条件</span></div><div class="line">   parseOrderBy(); <span class="comment">// 解析 Order By 条件</span></div><div class="line">   parseLimit(); <span class="comment">// 解析 分页 Limit 条件</span></div><div class="line">   <span class="comment">// [PROCEDURE] 暂不支持</span></div><div class="line">   <span class="keyword">if</span> (getSqlParser().equalAny(DefaultKeyword.PROCEDURE)) &#123;</div><div class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> SQLParsingUnsupportedException(getSqlParser().getLexer().getCurrentToken().getType());</div><div class="line">   &#125;</div><div class="line">   queryRest();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2>3.1 #parseDistinct()</h2>
<p>解析 DISTINCT、DISTINCTROW、UNION 谓语。</p>
<p>核心代码：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// AbstractSelectParser.java</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">parseDistinct</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">if</span> (sqlParser.equalAny(DefaultKeyword.DISTINCT, DefaultKeyword.DISTINCTROW, DefaultKeyword.UNION)) &#123;</div><div class="line">       selectStatement.setDistinct(<span class="keyword">true</span>);</div><div class="line">       sqlParser.getLexer().nextToken();</div><div class="line">       <span class="keyword">if</span> (hasDistinctOn() &amp;&amp; sqlParser.equalAny(DefaultKeyword.ON)) &#123; <span class="comment">// PostgreSQL 独有语法： DISTINCT ON</span></div><div class="line">           sqlParser.getLexer().nextToken();</div><div class="line">           sqlParser.skipParentheses();</div><div class="line">       &#125;</div><div class="line">   &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sqlParser.equalAny(DefaultKeyword.ALL)) &#123;</div><div class="line">       sqlParser.getLexer().nextToken();</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>此处 DISTINCT 和 DISTINCT(字段) 不同，它是针对查询结果做去重，即整行重复。举个例子：</p>
<p><figure class="highlight"><table><tr><td class="code"><pre><div class="line">mysql&gt; SELECT item_id, order_id FROM t_order_item;</div><div class="line">+---------+----------+</div><div class="line">| item_id | order_id |</div><div class="line">+---------+----------+</div><div class="line">| 1       | 1        |</div><div class="line">| 1       | 1        |</div><div class="line">+---------+----------+</div><div class="line">2 rows in set (0.03 sec)</div><div class="line"></div><div class="line">mysql&gt; SELECT DISTINCT item_id, order_id FROM t_order_item;</div><div class="line">+---------+----------+</div><div class="line">| item_id | order_id |</div><div class="line">+---------+----------+</div><div class="line">| 1       | 1        |</div><div class="line">+---------+----------+</div><div class="line">1 rows in set (0.02 sec)</div></pre></td></tr></table></figure></p>
<h2>3.2 #parseSelectList()</h2>
<table>
<thead>
<tr>
<th>SELECT</th>
<th>o.user_id</th>
<th>COUNT(DISTINCT i.item_id) AS item_count</th>
<th>MAX(i.item_id)</th>
<th>FROM</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td>SelectItem</td>
<td>SelectItem</td>
<td>SelectItem</td>
<td></td>
</tr>
</tbody>
</table>
<p>将 SQL <strong>查询字段</strong> 按照<strong>逗号( , )<strong>切割成</strong>多个</strong>选择项( SelectItem)。核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// AbstractSelectParser.java</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">parseSelectList</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">do</span> &#123;</div><div class="line">       <span class="comment">// 解析单个选择项</span></div><div class="line">       parseSelectItem();</div><div class="line">   &#125; <span class="keyword">while</span> (sqlParser.skipIfEqual(Symbol.COMMA));</div><div class="line">   <span class="comment">// 设置 最后一个查询项下一个 Token 的开始位置</span></div><div class="line">   selectStatement.setSelectListLastPosition(sqlParser.getLexer().getCurrentToken().getEndPosition() - sqlParser.getLexer().getCurrentToken().getLiterals().length());</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3>3.2.1 SelectItem 选择项</h3>
<p>SelectItem 接口，<strong>属于分片上下文信息</strong>，有 2 个实现类：</p>
<ul>
<li>CommonSelectItem ：通用选择项</li>
<li>AggregationSelectItem ：聚合选择项</li>
</ul>
<p><img src="http://www.yunai.me/images/Sharding-JDBC/2017_07_27/01.png" alt=""></p>
<p>解析单个 SelectItem 核心代码：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// AbstractSelectParser.java</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseSelectItem</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="comment">// 第四种情况，SQL Server 独有</span></div><div class="line">   <span class="keyword">if</span> (isRowNumberSelectItem()) &#123;</div><div class="line">       selectStatement.getItems().add(parseRowNumberSelectItem());</div><div class="line">       <span class="keyword">return</span>;</div><div class="line">   &#125;</div><div class="line">   sqlParser.skipIfEqual(DefaultKeyword.CONNECT_BY_ROOT); <span class="comment">// Oracle 独有：https://docs.oracle.com/cd/B19306_01/server.102/b14200/operators004.htm</span></div><div class="line">   String literals = sqlParser.getLexer().getCurrentToken().getLiterals();</div><div class="line">   <span class="comment">// 第一种情况，* 通用选择项，SELECT *</span></div><div class="line">   <span class="keyword">if</span> (sqlParser.equalAny(Symbol.STAR) || Symbol.STAR.getLiterals().equals(SQLUtil.getExactlyValue(literals))) &#123;</div><div class="line">       sqlParser.getLexer().nextToken();</div><div class="line">       selectStatement.getItems().add(<span class="keyword">new</span> CommonSelectItem(Symbol.STAR.getLiterals(), sqlParser.parseAlias()));</div><div class="line">       selectStatement.setContainStar(<span class="keyword">true</span>);</div><div class="line">       <span class="keyword">return</span>;</div><div class="line">   &#125;</div><div class="line">   <span class="comment">// 第二种情况，聚合选择项</span></div><div class="line">   <span class="keyword">if</span> (sqlParser.skipIfEqual(DefaultKeyword.MAX, DefaultKeyword.MIN, DefaultKeyword.SUM, DefaultKeyword.AVG, DefaultKeyword.COUNT)) &#123;</div><div class="line">       selectStatement.getItems().add(<span class="keyword">new</span> AggregationSelectItem(AggregationType.valueOf(literals.toUpperCase()), sqlParser.skipParentheses(), sqlParser.parseAlias()));</div><div class="line">       <span class="keyword">return</span>;</div><div class="line">   &#125;</div><div class="line">   <span class="comment">// 第三种情况，非 * 通用选择项</span></div><div class="line">   StringBuilder expression = <span class="keyword">new</span> StringBuilder();</div><div class="line">   Token lastToken = <span class="keyword">null</span>;</div><div class="line">   <span class="keyword">while</span> (!sqlParser.equalAny(DefaultKeyword.AS) &amp;&amp; !sqlParser.equalAny(Symbol.COMMA) &amp;&amp; !sqlParser.equalAny(DefaultKeyword.FROM) &amp;&amp; !sqlParser.equalAny(Assist.END)) &#123;</div><div class="line">       String value = sqlParser.getLexer().getCurrentToken().getLiterals();</div><div class="line">       <span class="keyword">int</span> position = sqlParser.getLexer().getCurrentToken().getEndPosition() - value.length();</div><div class="line">       expression.append(value);</div><div class="line">       lastToken = sqlParser.getLexer().getCurrentToken();</div><div class="line">       sqlParser.getLexer().nextToken();</div><div class="line">       <span class="keyword">if</span> (sqlParser.equalAny(Symbol.DOT)) &#123;</div><div class="line">           selectStatement.getSqlTokens().add(<span class="keyword">new</span> TableToken(position, value));</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">   <span class="comment">// 不带 AS，并且有别名，并且别名不等于自己（tips：这里重点看。判断这么复杂的原因：防止substring操作截取结果错误）</span></div><div class="line">   <span class="keyword">if</span> (<span class="keyword">null</span> != lastToken &amp;&amp; Literals.IDENTIFIER == lastToken.getType()</div><div class="line">           &amp;&amp; !isSQLPropertyExpression(expression, lastToken) <span class="comment">// 过滤掉，别名是自己的情况【1】（例如，SELECT u.user_id u.user_id FROM t_user）</span></div><div class="line">           &amp;&amp; !expression.toString().equals(lastToken.getLiterals())) &#123; <span class="comment">// 过滤掉，无别名的情况【2】（例如，SELECT user_id FROM t_user）</span></div><div class="line">       selectStatement.getItems().add(</div><div class="line">               <span class="keyword">new</span> CommonSelectItem(SQLUtil.getExactlyValue(expression.substring(<span class="number">0</span>, expression.lastIndexOf(lastToken.getLiterals()))), Optional.of(lastToken.getLiterals())));</div><div class="line">       <span class="keyword">return</span>;</div><div class="line">   &#125;</div><div class="line">   <span class="comment">// 带 AS（例如，SELECT user_id AS userId） 或者 无别名（例如，SELECT user_id）</span></div><div class="line">   selectStatement.getItems().add(<span class="keyword">new</span> CommonSelectItem(SQLUtil.getExactlyValue(expression.toString()), sqlParser.parseAlias()));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>一共分成 4 种大的情况，我们来逐条梳理：</p>
<ul>
<li>第一种：<strong><code>*</code> 通用选择项</strong>：<br>
例如，<code>SELECT * FROM t_user</code> 的 <code>*</code>。<br>
为什么要加   <code>Symbol.STAR.getLiterals().equals(SQLUtil.getExactlyValue(literals))</code> 判断呢？</li>
</ul>
<p><figure class="highlight sql"><table><tr><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> <span class="string">`*`</span> <span class="keyword">FROM</span> t_user; // 也能达到查询所有字段的效果</div></pre></td></tr></table></figure></p>
<ul>
<li>第二种：<strong>聚合选择项</strong>：<br>
例如，<code>SELECT COUNT(user_id) FROM t_user</code> 的 <code>COUNT(user_id)</code>。</li>
</ul>
<p>解析结果 AggregationSelectItem：<br>
<img src="http://www.yunai.me/images/Sharding-JDBC/2017_07_27/05.png" alt=""></p>
<p><code>sqlParser.skipParentheses()</code> 解析见<a href="http://www.yunai.me/Sharding-JDBC/sql-parse-2/?self">《SQL 解析（二）之SQL解析》的AbstractParser小节</a>。</p>
<ul>
<li>第三种：<strong>非 <code>*</code> 通用选择项</strong>：</li>
</ul>
<p>例如，<code>SELECT user_id FROM t_user</code>。</p>
<p>从实现上，逻辑会复杂很多。相比第一种，可以根据 <code>*</code> 做字段判断；相比第二种，可以使用 <code>(</code> 和 <code>)</code> 做字段判断。能够判断一个<strong>包含别名的</strong> SelectItem 结束有 4 种 Token，根据结束方式我们分成 2 种：</p>
<ul>
<li>DefaultKeyword.AS ：能够接触出 SelectItem 字段，<strong>即不包含别名</strong>。例如，<code>SELECT user_id AS uid FROM t_user</code>，能够直接解析出 <code>user_id</code>。</li>
<li>Symbol.COMMA / DefaultKeyword.FROM / Assist.END ：<strong>包含别名</strong>。例如，<code>SELECT user_id uid FROM t_user</code>，解析结果为 <code>user_id uid</code>。</li>
</ul>
<p>基于这个在配合上面的代码注释，大家再重新理解下第三种情况的实现。</p>
<ul>
<li>第四种：SQLServer ROW_NUMBER：</li>
</ul>
<p>ROW_NUMBER 是 SQLServer 独有的。由于本文大部分的读者使用的 MySQL / Oracle，就跳过了。有兴趣的同学可以看 <a href="https://github.com/dangdangdotcom/sharding-jdbc/blob/9354031743b63e44cbded5618980ae71a15f0260/sharding-jdbc-core/src/main/java/com/dangdang/ddframe/rdb/sharding/parsing/parser/dialect/sqlserver/SQLServerSelectParser.java" rel="external nofollow noopener noreferrer" target="_blank">SQLServerSelectParser#parseRowNumberSelectItem()</a> 方法。</p>
<h3>3.2.2 #parseAlias() 解析别名</h3>
<p>解析别名，分成是否带 <code>AS</code> 两种情况。解析代码：<a href="http://www.yunai.me/Sharding-JDBC/sql-parse-2/?self">《SQL 解析（二）之SQL解析》的#parseAlias()小节</a>。</p>
<h3>3.2.3 TableToken 表标记对象</h3>
<p>TableToken，记录表名在 SQL 里出现的<strong>位置</strong>和<strong>名字</strong>。</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TableToken</span> <span class="keyword">implements</span> <span class="title">SQLToken</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 开始位置</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> beginPosition;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 表达式</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String originalLiterals;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取表名称.</div><div class="line">     * <span class="doctag">@return</span> 表名称</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTableName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> SQLUtil.getExactlyValue(originalLiterals);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>例如上文第三种情况。
<img src="http://www.yunai.me/images/Sharding-JDBC/2017_07_27/06.png" alt=""></p>
<h2>3.3 #skipToFrom()</h2>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 跳到 FROM 处</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">skipToFrom</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">while</span> (!getSqlParser().equalAny(DefaultKeyword.FROM) &amp;&amp; !getSqlParser().equalAny(Assist.END)) &#123;</div><div class="line">       getSqlParser().getLexer().nextToken();</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2>3.4 #parseFrom()</h2>
<p>解析表以及表连接关系。<strong>这块相对比较复杂，请大家耐心+耐心+耐心。</strong></p>
<p><strong>MySQL JOIN Syntax</strong>：</p>
<p><figure class="highlight"><table><tr><td class="code"><pre><div class="line">// https://dev.mysql.com/doc/refman/5.7/en/join.html</div><div class="line">table_references:</div><div class="line">    escaped_table_reference [, escaped_table_reference] ...</div><div class="line"></div><div class="line">escaped_table_reference:</div><div class="line">    table_reference</div><div class="line">  | &#123; OJ table_reference &#125;</div><div class="line"></div><div class="line">table_reference:</div><div class="line">    table_factor</div><div class="line">  | join_table</div><div class="line"></div><div class="line">table_factor:</div><div class="line">    tbl_name [PARTITION (partition_names)]</div><div class="line">        [[AS] alias] [index_hint_list]</div><div class="line">  | table_subquery [AS] alias</div><div class="line">  | ( table_references )</div><div class="line"></div><div class="line">join_table:</div><div class="line">    table_reference [INNER | CROSS] JOIN table_factor [join_condition]</div><div class="line">  | table_reference STRAIGHT_JOIN table_factor</div><div class="line">  | table_reference STRAIGHT_JOIN table_factor ON conditional_expr</div><div class="line">  | table_reference &#123;LEFT|RIGHT&#125; [OUTER] JOIN table_reference join_condition</div><div class="line">  | table_reference NATURAL [&#123;LEFT|RIGHT&#125; [OUTER]] JOIN table_factor</div><div class="line"></div><div class="line">join_condition:</div><div class="line">    ON conditional_expr</div><div class="line">  | USING (column_list)</div><div class="line"></div><div class="line">index_hint_list:</div><div class="line">    index_hint [, index_hint] ...</div><div class="line"></div><div class="line">index_hint:</div><div class="line">    USE &#123;INDEX|KEY&#125;</div><div class="line">      [FOR &#123;JOIN|ORDER BY|GROUP BY&#125;] ([index_list])</div><div class="line">  | IGNORE &#123;INDEX|KEY&#125;</div><div class="line">      [FOR &#123;JOIN|ORDER BY|GROUP BY&#125;] (index_list)</div><div class="line">  | FORCE &#123;INDEX|KEY&#125;</div><div class="line">      [FOR &#123;JOIN|ORDER BY|GROUP BY&#125;] (index_list)</div><div class="line"></div><div class="line">index_list:</div><div class="line">    index_name [, index_name] ...</div></pre></td></tr></table></figure></p>
<h3>3.4.1 JOIN ON / FROM TABLE</h3>
<p>先抛开<strong>子查询</strong>的情况，只考虑如下两种 SQL 情况。</p>
<p><figure class="highlight sql"><table><tr><td class="code"><pre><div class="line">// JOIN ON ： 实际可以继续 JOIN ON 更多表</div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t_order o <span class="keyword">JOIN</span> t_order_item i <span class="keyword">ON</span> o.order_id = i.order_id; </div><div class="line">// FROM 多表 ：实际可以继续 FROM 多更表</div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t_order o, t_order_item i</div></pre></td></tr></table></figure></p>
<p>在看实现代码之前，先一起看下调用顺序图：</p>
<p><img src="http://www.yunai.me/images/Sharding-JDBC/2017_07_27/02.png" alt=""></p>
<p>看懂上图后，来继续看下实现代码（🙂<strong>代码有点多，不要方！</strong>）：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// AbstractSelectParser.java</span></div><div class="line"><span class="comment">/**</span></div><div class="line">* 解析所有表名和表别名</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">parseFrom</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">if</span> (sqlParser.skipIfEqual(DefaultKeyword.FROM)) &#123;</div><div class="line">       parseTable();</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line">* 解析所有表名和表别名</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parseTable</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="comment">// 解析子查询</span></div><div class="line">   <span class="keyword">if</span> (sqlParser.skipIfEqual(Symbol.LEFT_PAREN)) &#123;</div><div class="line">       <span class="keyword">if</span> (!selectStatement.getTables().isEmpty()) &#123;</div><div class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"Cannot support subquery for nested tables."</span>);</div><div class="line">       &#125;</div><div class="line">       selectStatement.setContainStar(<span class="keyword">false</span>);</div><div class="line">       sqlParser.skipUselessParentheses(); <span class="comment">// 去掉子查询左括号</span></div><div class="line">       parse(); <span class="comment">// 解析子查询 SQL</span></div><div class="line">       sqlParser.skipUselessParentheses(); <span class="comment">// 去掉子查询右括号</span></div><div class="line">       <span class="comment">//</span></div><div class="line">       <span class="keyword">if</span> (!selectStatement.getTables().isEmpty()) &#123;</div><div class="line">           <span class="keyword">return</span>;</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">   parseTableFactor(); <span class="comment">// 解析当前表</span></div><div class="line">   parseJoinTable(); <span class="comment">// 解析下一个表</span></div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line">* 解析单个表名和表别名</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">parseTableFactor</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">int</span> beginPosition = sqlParser.getLexer().getCurrentToken().getEndPosition() - sqlParser.getLexer().getCurrentToken().getLiterals().length();</div><div class="line">   String literals = sqlParser.getLexer().getCurrentToken().getLiterals();</div><div class="line">   sqlParser.getLexer().nextToken();</div><div class="line">   <span class="comment">// TODO 包含Schema解析</span></div><div class="line">   <span class="keyword">if</span> (sqlParser.skipIfEqual(Symbol.DOT)) &#123; <span class="comment">// https://dev.mysql.com/doc/refman/5.7/en/information-schema.html ：SELECT table_name, table_type, engine FROM information_schema.tables</span></div><div class="line">       sqlParser.getLexer().nextToken();</div><div class="line">       sqlParser.parseAlias();</div><div class="line">       <span class="keyword">return</span>;</div><div class="line">   &#125;</div><div class="line">   <span class="comment">// FIXME 根据shardingRule过滤table</span></div><div class="line">   selectStatement.getSqlTokens().add(<span class="keyword">new</span> TableToken(beginPosition, literals));</div><div class="line">   <span class="comment">// 表 以及 表别名</span></div><div class="line">   selectStatement.getTables().add(<span class="keyword">new</span> Table(SQLUtil.getExactlyValue(literals), sqlParser.parseAlias()));</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line">* 解析 Join Table 或者 FROM 下一张 Table</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">parseJoinTable</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">if</span> (sqlParser.skipJoin()) &#123;</div><div class="line">       <span class="comment">// 这里调用 parseJoinTable() 而不是 parseTableFactor() ：下一个 Table 可能是子查询</span></div><div class="line">       <span class="comment">// 例如：SELECT * FROM t_order JOIN (SELECT * FROM t_order_item JOIN t_order_other ON ) .....</span></div><div class="line">       parseTable();</div><div class="line">       <span class="keyword">if</span> (sqlParser.skipIfEqual(DefaultKeyword.ON)) &#123; <span class="comment">// JOIN 表时 ON 条件</span></div><div class="line">           <span class="keyword">do</span> &#123;</div><div class="line">               parseTableCondition(sqlParser.getLexer().getCurrentToken().getEndPosition());</div><div class="line">               sqlParser.accept(Symbol.EQ);</div><div class="line">               parseTableCondition(sqlParser.getLexer().getCurrentToken().getEndPosition() - sqlParser.getLexer().getCurrentToken().getLiterals().length());</div><div class="line">           &#125; <span class="keyword">while</span> (sqlParser.skipIfEqual(DefaultKeyword.AND));</div><div class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sqlParser.skipIfEqual(DefaultKeyword.USING)) &#123; <span class="comment">// JOIN 表时 USING 为使用两表相同字段相同时对 ON 的简化。例如以下两条 SQL 等价：</span></div><div class="line">                                                                   <span class="comment">// SELECT * FROM t_order o JOIN t_order_item i USING (order_id);</span></div><div class="line">                                                                   <span class="comment">// SELECT * FROM t_order o JOIN t_order_item i ON o.order_id = i.order_id</span></div><div class="line">           sqlParser.skipParentheses();</div><div class="line">       &#125;</div><div class="line">       parseJoinTable(); <span class="comment">// 继续递归</span></div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line">* 解析 ON 条件里的 TableToken</div><div class="line">*</div><div class="line">* <span class="doctag">@param</span> startPosition 开始位置</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseTableCondition</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> startPosition)</span> </span>&#123;</div><div class="line">   SQLExpression sqlExpression = sqlParser.parseExpression();</div><div class="line">   <span class="keyword">if</span> (!(sqlExpression <span class="keyword">instanceof</span> SQLPropertyExpression)) &#123;</div><div class="line">       <span class="keyword">return</span>;</div><div class="line">   &#125;</div><div class="line">   SQLPropertyExpression sqlPropertyExpression = (SQLPropertyExpression) sqlExpression;</div><div class="line">   <span class="keyword">if</span> (selectStatement.getTables().getTableNames().contains(SQLUtil.getExactlyValue(sqlPropertyExpression.getOwner().getName()))) &#123;</div><div class="line">       selectStatement.getSqlTokens().add(<span class="keyword">new</span> TableToken(startPosition, sqlPropertyExpression.getOwner().getName()));</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>OK，递归因为平时日常中写的比较少，可能理解起来可能会困难一些，努力看懂！🙂<strong>如果真的看不懂，可以加微信公众号（<a href="http://www.yunai.me/images/common/wechat_mp_2017_07_31.jpg">芋艿的后端小屋</a>），我来帮你一起理解。</strong></p>
<h3>3.4.2 子查询</h3>
<p>Sharding-JDBC 目前支持<strong>第一个</strong>包含多层级的数据子查询。例如：</p>
<p><figure class="highlight sql"><table><tr><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> o3.* <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t_order o) o2) o3;</div><div class="line"><span class="keyword">SELECT</span> o3.* <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t_order o) o2) o3 <span class="keyword">JOIN</span> t_order_item i <span class="keyword">ON</span> o3.order_id = i.order_id;</div></pre></td></tr></table></figure></p>
<p>不支持<strong>第二个开始</strong>包含多层级的数据子查询。例如：</p>
<p><figure class="highlight sql"><table><tr><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> o3.* <span class="keyword">FROM</span> t_order_item i <span class="keyword">JOIN</span> (<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t_order o) o2) o3 <span class="keyword">ON</span> o3.order_id = i.order_id; // 此条 SQL 是上面第二条 SQL 左右量表颠倒</div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t_order o <span class="keyword">WHERE</span> o.id <span class="keyword">IN</span> (<span class="keyword">SELECT</span> <span class="keyword">id</span> <span class="keyword">FROM</span> t_order <span class="keyword">WHERE</span> <span class="keyword">status</span> = ?)) // <span class="keyword">FROM</span> 官方不支持 <span class="keyword">SQL</span> 举例</div></pre></td></tr></table></figure></p>
<p>使用<strong>第二个开始</strong>的子查询会抛出异常，代码如下：</p>
<p><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">// AbstractSelectParser.java#parseTable()片段</div><div class="line">if (!selectStatement.getTables().isEmpty()) &#123;</div><div class="line">    throw new UnsupportedOperationException(&quot;Cannot support subquery for nested tables.&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>使用子查询，建议认真阅读官方<a href="http://dangdangdotcom.github.io/sharding-jdbc/02-guide/subquery/" rel="external nofollow noopener noreferrer" target="_blank">《分页及子查询》</a>文档。</p>
<h3>3.4.3 #parseJoinTable()</h3>
<p>MySQLSelectParser 重写了 <code>#parseJoinTable()</code> 方法用于解析 USE / IGNORE / FORCE index_hint。具体语法见上文 <strong>JOIN Syntax</strong>。这里就跳过，有兴趣的同学可以去看看。</p>
<h3>3.4.4 Tables 表集合对象</h3>
<p><strong>属于分片上下文信息</strong></p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// Tables.java</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Tables</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Table&gt; tables = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Table.java</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Table</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 表</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 别名</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Optional&lt;String&gt; alias;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// AbstractSelectParser.java#parseTableFactor()片段</span></div><div class="line">selectStatement.getTables().add(<span class="keyword">new</span> Table(SQLUtil.getExactlyValue(literals), sqlParser.parseAlias()));</div></pre></td></tr></table></figure></p>
<h2>3.5 #parseWhere()</h2>
<p>解析 WHERE 条件。解析代码：<a href="http://www.yunai.me/Sharding-JDBC/sql-parse-2/?self">《SQL 解析（二）之SQL解析》的#parseWhere()小节</a>。</p>
<h2>3.6 #parseGroupBy()</h2>
<p>解析分组条件，实现上比较类似 <code>#parseSelectList</code>，会更加简单一些。</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// AbstractSelectParser.java</span></div><div class="line"><span class="comment">/**</span></div><div class="line">* 解析 Group By 和 Having（暂时不支持）</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">parseGroupBy</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">if</span> (sqlParser.skipIfEqual(DefaultKeyword.GROUP)) &#123;</div><div class="line">       sqlParser.accept(DefaultKeyword.BY);</div><div class="line">       <span class="comment">// 解析 Group By 每个字段</span></div><div class="line">       <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">           addGroupByItem(sqlParser.parseExpression(selectStatement));</div><div class="line">           <span class="keyword">if</span> (!sqlParser.equalAny(Symbol.COMMA)) &#123;</div><div class="line">               <span class="keyword">break</span>;</div><div class="line">           &#125;</div><div class="line">           sqlParser.getLexer().nextToken();</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">while</span> (sqlParser.equalAny(DefaultKeyword.WITH) || sqlParser.getLexer().getCurrentToken().getLiterals().equalsIgnoreCase(<span class="string">"ROLLUP"</span>)) &#123;</div><div class="line">           sqlParser.getLexer().nextToken();</div><div class="line">       &#125;</div><div class="line">       <span class="comment">// Having（暂时不支持）</span></div><div class="line">       <span class="keyword">if</span> (sqlParser.skipIfEqual(DefaultKeyword.HAVING)) &#123;</div><div class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"Cannot support Having"</span>);</div><div class="line">       &#125;</div><div class="line">       selectStatement.setGroupByLastPosition(sqlParser.getLexer().getCurrentToken().getEndPosition());</div><div class="line">   &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sqlParser.skipIfEqual(DefaultKeyword.HAVING)) &#123;</div><div class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"Cannot support Having"</span>);</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line">* 解析 Group By 单个字段</div><div class="line">* Group By 条件是带有排序功能，默认ASC</div><div class="line">*</div><div class="line">* <span class="doctag">@param</span> sqlExpression 表达式</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">addGroupByItem</span><span class="params">(<span class="keyword">final</span> SQLExpression sqlExpression)</span> </span>&#123;</div><div class="line">   <span class="comment">// Group By 字段 DESC / ASC / ;默认是 ASC。</span></div><div class="line">   OrderType orderByType = OrderType.ASC;</div><div class="line">   <span class="keyword">if</span> (sqlParser.equalAny(DefaultKeyword.ASC)) &#123;</div><div class="line">       sqlParser.getLexer().nextToken();</div><div class="line">   &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sqlParser.skipIfEqual(DefaultKeyword.DESC)) &#123;</div><div class="line">       orderByType = OrderType.DESC;</div><div class="line">   &#125;</div><div class="line">   <span class="comment">// 解析 OrderItem</span></div><div class="line">   OrderItem orderItem;</div><div class="line">   <span class="keyword">if</span> (sqlExpression <span class="keyword">instanceof</span> SQLPropertyExpression) &#123;</div><div class="line">       SQLPropertyExpression sqlPropertyExpression = (SQLPropertyExpression) sqlExpression;</div><div class="line">       orderItem = <span class="keyword">new</span> OrderItem(SQLUtil.getExactlyValue(sqlPropertyExpression.getOwner().getName()), SQLUtil.getExactlyValue(sqlPropertyExpression.getName()), orderByType,</div><div class="line">               getAlias(SQLUtil.getExactlyValue(sqlPropertyExpression.getOwner() + <span class="string">"."</span> + SQLUtil.getExactlyValue(sqlPropertyExpression.getName()))));</div><div class="line">   &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sqlExpression <span class="keyword">instanceof</span> SQLIdentifierExpression) &#123;</div><div class="line">       SQLIdentifierExpression sqlIdentifierExpression = (SQLIdentifierExpression) sqlExpression;</div><div class="line">       orderItem = <span class="keyword">new</span> OrderItem(SQLUtil.getExactlyValue(sqlIdentifierExpression.getName()), orderByType, getAlias(SQLUtil.getExactlyValue(sqlIdentifierExpression.getName())));</div><div class="line">   &#125; <span class="keyword">else</span> &#123;</div><div class="line">       <span class="keyword">return</span>;</div><div class="line">   &#125;</div><div class="line">   selectStatement.getGroupByItems().add(orderItem);</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line">* 字段在查询项里的别名</div><div class="line">*</div><div class="line">* <span class="doctag">@param</span> name 字段</div><div class="line">* <span class="doctag">@return</span> 别名</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">private</span> Optional&lt;String&gt; <span class="title">getAlias</span><span class="params">(<span class="keyword">final</span> String name)</span> </span>&#123;</div><div class="line">   <span class="keyword">if</span> (selectStatement.isContainStar()) &#123;</div><div class="line">       <span class="keyword">return</span> Optional.absent();</div><div class="line">   &#125;</div><div class="line">   String rawName = SQLUtil.getExactlyValue(name);</div><div class="line">   <span class="keyword">for</span> (SelectItem each : selectStatement.getItems()) &#123;</div><div class="line">       <span class="keyword">if</span> (rawName.equalsIgnoreCase(SQLUtil.getExactlyValue(each.getExpression()))) &#123;</div><div class="line">           <span class="keyword">return</span> each.getAlias();</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">if</span> (rawName.equalsIgnoreCase(each.getAlias().orNull())) &#123;</div><div class="line">           <span class="keyword">return</span> Optional.of(rawName);</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> Optional.absent();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3>3.6.1 OrderItem 排序项</h3>
<p><strong>属于分片上下文信息</strong></p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderItem</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">    * 所属表别名</div><div class="line">    */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Optional&lt;String&gt; owner;</div><div class="line">    <span class="comment">/**</span></div><div class="line">    * 排序字段</div><div class="line">    */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Optional&lt;String&gt; name;</div><div class="line">    <span class="comment">/**</span></div><div class="line">    * 排序类型</div><div class="line">    */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> OrderType type;</div><div class="line">    <span class="comment">/**</span></div><div class="line">    * 按照第几个查询字段排序</div><div class="line">    * ORDER BY 数字 的 数字代表的是第几个字段</div><div class="line">    */</div><div class="line">    <span class="meta">@Setter</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> index = -<span class="number">1</span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">    * 字段在查询项(&#123;<span class="doctag">@link</span> com.dangdang.ddframe.rdb.sharding.parsing.parser.context.selectitem.SelectItem&#125; 的别名</div><div class="line">    */</div><div class="line">    <span class="meta">@Setter</span></div><div class="line">    <span class="keyword">private</span> Optional&lt;String&gt; alias;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2>3.7 #parseOrderBy()</h2>
<p>解析排序条件。实现逻辑类似 <code>#parseGroupBy()</code>，这里就跳过，有兴趣的同学可以去看看。</p>
<h2>3.8 #parseLimit()</h2>
<p>解析分页 Limit 条件。相对简单，这里就跳过，有兴趣的同学可以去看看。注意下，分成 3 种情况：</p>
<ul>
<li>LIMIT row_count</li>
<li>LIMIT offset, row_count</li>
<li>LIMIT row_count OFFSET offset</li>
</ul>
<h3>3.8.1 Limit</h3>
<p>分页对象。<strong>属于分片上下文信息</strong>。</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// Limit.java</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Limit</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 是否重写rowCount</div><div class="line">     * TODO 待补充：预计和内存分页合并有关</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> rowCountRewriteFlag;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * offset</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> LimitValue offset;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * row</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> LimitValue rowCount;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// LimitValue.java</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">LimitValue</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 值</div><div class="line">     * 当 value == -1 时，为占位符</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> value;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 第几个占位符</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> index;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3>3.8.2 OffsetToken RowCountToken</h3>
<ul>
<li>OffsetToken：分页偏移量标记对象</li>
<li>RowCountToken：分页长度标记对象</li>
</ul>
<p><strong>只有在对应位置非占位符才有该 SQLToken</strong>。</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// OffsetToken.java</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">OffsetToken</span> <span class="keyword">implements</span> <span class="title">SQLToken</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * SQL 所在开始位置</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> beginPosition;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 偏移值</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> offset;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// RowCountToken.java</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">RowCountToken</span> <span class="keyword">implements</span> <span class="title">SQLToken</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * SQL 所在开始位置</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> beginPosition;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 行数</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> rowCount;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2>3.9 #queryRest()</h2>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// AbstractSelectParser.java</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">queryRest</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">if</span> (sqlParser.equalAny(DefaultKeyword.UNION, DefaultKeyword.EXCEPT, DefaultKeyword.INTERSECT, DefaultKeyword.MINUS)) &#123;</div><div class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> SQLParsingUnsupportedException(sqlParser.getLexer().getCurrentToken().getType());</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>不支持 UNION / EXCEPT / INTERSECT / MINUS ，调用会抛出异常。</p>
<h1>4. appendDerived等方法</h1>
<p>因为 Sharding-JDBC 对表做了分片，在 AVG , GROUP BY , ORDER BY 需要对 SQL 进行一些改写，<strong>以达到能在内存里对结果做进一步处理</strong>，例如求平均值、分组、排序等。</p>
<p>😈：打起精神，此块是非常有趣的。</p>
<h2>4.1 appendAvgDerivedColumns</h2>
<p>解决 AVG 查询。</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// AbstractSelectParser.java</span></div><div class="line"><span class="comment">/**</span></div><div class="line">* 针对 AVG 聚合字段，增加推导字段</div><div class="line">* AVG 改写成 SUM + COUNT 查询，内存计算出 AVG 结果。</div><div class="line">*</div><div class="line">* <span class="doctag">@param</span> itemsToken 选择项标记对象</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">appendAvgDerivedColumns</span><span class="params">(<span class="keyword">final</span> ItemsToken itemsToken)</span> </span>&#123;</div><div class="line">   <span class="keyword">int</span> derivedColumnOffset = <span class="number">0</span>;</div><div class="line">   <span class="keyword">for</span> (SelectItem each : selectStatement.getItems()) &#123;</div><div class="line">       <span class="keyword">if</span> (!(each <span class="keyword">instanceof</span> AggregationSelectItem) || AggregationType.AVG != ((AggregationSelectItem) each).getType()) &#123;</div><div class="line">           <span class="keyword">continue</span>;</div><div class="line">       &#125;</div><div class="line">       AggregationSelectItem avgItem = (AggregationSelectItem) each;</div><div class="line">       <span class="comment">// COUNT 字段</span></div><div class="line">       String countAlias = String.format(DERIVED_COUNT_ALIAS, derivedColumnOffset);</div><div class="line">       AggregationSelectItem countItem = <span class="keyword">new</span> AggregationSelectItem(AggregationType.COUNT, avgItem.getInnerExpression(), Optional.of(countAlias));</div><div class="line">       <span class="comment">// SUM 字段</span></div><div class="line">       String sumAlias = String.format(DERIVED_SUM_ALIAS, derivedColumnOffset);</div><div class="line">       AggregationSelectItem sumItem = <span class="keyword">new</span> AggregationSelectItem(AggregationType.SUM, avgItem.getInnerExpression(), Optional.of(sumAlias));</div><div class="line">       <span class="comment">// AggregationSelectItem 设置</span></div><div class="line">       avgItem.getDerivedAggregationSelectItems().add(countItem);</div><div class="line">       avgItem.getDerivedAggregationSelectItems().add(sumItem);</div><div class="line">       <span class="comment">// TODO 将AVG列替换成常数，避免数据库再计算无用的AVG函数</span></div><div class="line">       <span class="comment">// ItemsToken</span></div><div class="line">       itemsToken.getItems().add(countItem.getExpression() + <span class="string">" AS "</span> + countAlias + <span class="string">" "</span>);</div><div class="line">       itemsToken.getItems().add(sumItem.getExpression() + <span class="string">" AS "</span> + sumAlias + <span class="string">" "</span>);</div><div class="line">       <span class="comment">//</span></div><div class="line">       derivedColumnOffset++;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2>4.2 appendDerivedOrderColumns</h2>
<p>解决 GROUP BY , ORDER BY。</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// AbstractSelectParser.java</span></div><div class="line"><span class="comment">/**</span></div><div class="line">* 针对 GROUP BY 或 ORDER BY 字段，增加推导字段</div><div class="line">* 如果该字段不在查询字段里，需要额外查询该字段，这样才能在内存里 GROUP BY 或 ORDER BY</div><div class="line">*</div><div class="line">* <span class="doctag">@param</span> itemsToken 选择项标记对象</div><div class="line">* <span class="doctag">@param</span> orderItems 排序字段</div><div class="line">* <span class="doctag">@param</span> aliasPattern 别名模式</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">appendDerivedOrderColumns</span><span class="params">(<span class="keyword">final</span> ItemsToken itemsToken, <span class="keyword">final</span> List&lt;OrderItem&gt; orderItems, <span class="keyword">final</span> String aliasPattern)</span> </span>&#123;</div><div class="line">   <span class="keyword">int</span> derivedColumnOffset = <span class="number">0</span>;</div><div class="line">   <span class="keyword">for</span> (OrderItem each : orderItems) &#123;</div><div class="line">       <span class="keyword">if</span> (!isContainsItem(each)) &#123;</div><div class="line">           String alias = String.format(aliasPattern, derivedColumnOffset++);</div><div class="line">           each.setAlias(Optional.of(alias));</div><div class="line">           itemsToken.getItems().add(each.getQualifiedName().get() + <span class="string">" AS "</span> + alias + <span class="string">" "</span>);</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line">* 查询字段是否包含排序字段</div><div class="line">*</div><div class="line">* <span class="doctag">@param</span> orderItem 排序字段</div><div class="line">* <span class="doctag">@return</span> 是否</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isContainsItem</span><span class="params">(<span class="keyword">final</span> OrderItem orderItem)</span> </span>&#123;</div><div class="line">   <span class="keyword">if</span> (selectStatement.isContainStar()) &#123; <span class="comment">// SELECT *</span></div><div class="line">       <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">for</span> (SelectItem each : selectStatement.getItems()) &#123;</div><div class="line">       <span class="keyword">if</span> (-<span class="number">1</span> != orderItem.getIndex()) &#123; <span class="comment">// ORDER BY 使用数字</span></div><div class="line">           <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">if</span> (each.getAlias().isPresent() &amp;&amp; orderItem.getAlias().isPresent() &amp;&amp; each.getAlias().get().equalsIgnoreCase(orderItem.getAlias().get())) &#123; <span class="comment">// 字段别名比较</span></div><div class="line">           <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">if</span> (!each.getAlias().isPresent() &amp;&amp; orderItem.getQualifiedName().isPresent() &amp;&amp; each.getExpression().equalsIgnoreCase(orderItem.getQualifiedName().get())) &#123; <span class="comment">// 字段原名比较</span></div><div class="line">           <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2>4.3 ItemsToken</h2>
<p>选择项标记对象，<strong>属于分片上下文信息</strong>，目前有 3 个情况会创建：</p>
<ol>
<li><code>AVG</code> 查询额外 COUNT 和 SUM：<code>#appendAvgDerivedColumns()</code></li>
<li><code>GROUP BY</code> 不在 查询字段，额外查询该字段 ：<code>#appendDerivedOrderColumns()</code></li>
<li><code>ORDER BY</code> 不在 查询字段，额外查询该字段 ：<code>#appendDerivedOrderColumns()</code></li>
</ol>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemsToken</span> <span class="keyword">implements</span> <span class="title">SQLToken</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * SQL 开始位置</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> beginPosition;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 字段名数组</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;String&gt; items = <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2>4.4 appendDerivedOrderBy()</h2>
<p>当 SQL 有聚合条件而无排序条件，根据聚合条件进行排序。这是数据库自己的执行规则。</p>
<p><figure class="highlight"><table><tr><td class="code"><pre><div class="line">mysql&gt; SELECT order_id FROM t_order GROUP BY order_id;</div><div class="line">+----------+</div><div class="line">| order_id |</div><div class="line">+----------+</div><div class="line">| 1        |</div><div class="line">| 2        |</div><div class="line">| 3        |</div><div class="line">+----------+</div><div class="line">3 rows in set (0.05 sec)</div><div class="line"></div><div class="line">mysql&gt; SELECT order_id FROM t_order GROUP BY order_id DESC;</div><div class="line">+----------+</div><div class="line">| order_id |</div><div class="line">+----------+</div><div class="line">| 3        |</div><div class="line">| 2        |</div><div class="line">| 1        |</div><div class="line">+----------+</div><div class="line">3 rows in set (0.02 sec)</div></pre></td></tr></table></figure></p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// AbstractSelectParser.java</span></div><div class="line"><span class="comment">/**</span></div><div class="line">* 当无 Order By 条件时，使用 Group By 作为排序条件（数据库本身规则）</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">appendDerivedOrderBy</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">if</span> (!getSelectStatement().getGroupByItems().isEmpty() &amp;&amp; getSelectStatement().getOrderByItems().isEmpty()) &#123;</div><div class="line">       getSelectStatement().getOrderByItems().addAll(getSelectStatement().getGroupByItems());</div><div class="line">       getSelectStatement().getSqlTokens().add(<span class="keyword">new</span> OrderByToken(getSelectStatement().getGroupByLastPosition()));</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3>4.3.1 OrderByToken</h3>
<p>排序标记对象。当无 Order By 条件时，使用 Group By 作为排序条件（数据库本身规则）。</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// OrderByToken.java</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderByToken</span> <span class="keyword">implements</span> <span class="title">SQLToken</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * SQL 所在开始位置</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> beginPosition;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1>666. 彩蛋</h1>
<p>咳咳咳，确实有一些略长。但请相信，INSERT / UPDATE / DELETE 会简单很多很多。考试考的 SQL 最多的是什么？SELECT 语句呀！为啥，难呗。恩，我相信看到此处的你，一定是能看懂的，加油！</p>
<p>🙂如果对本文有不理解的地方，可以关注我的公众号**（<a href="http://www.yunai.me/images/common/wechat_mp_2017_07_31.jpg">芋艿的后端小屋</a>）<strong>获得</strong>微信号**，我们来一场，1 对 1 的搞基吧，不不不，是交流交流。</p>
<p>道友，帮我分享一波怎么样？</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://www.yunai.me/images/common/wechat_mp_2017_07_31.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;🙂🙂🙂关注**微信公众号：【芋艿的后端小屋】**有福利：&lt;/p&gt;
&lt;o
    
    </summary>
    
      <category term="Sharding-JDBC" scheme="http://www.yunai.me/categories/Sharding-JDBC/"/>
    
    
  </entry>
  
  <entry>
    <title>Sharding-JDBC 源码分析 —— SQL 解析（二）之SQL解析</title>
    <link href="http://www.yunai.me/Sharding-JDBC/sql-parse-2/"/>
    <id>http://www.yunai.me/Sharding-JDBC/sql-parse-2/</id>
    <published>2017-07-25T16:00:00.000Z</published>
    <updated>2017-07-31T12:30:52.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://www.yunai.me/images/common/wechat_mp_2017_07_31.jpg" alt=""></p>
<blockquote>
<p>🙂🙂🙂关注**微信公众号：<a href="http://www.yunai.me/images/common/wechat_mp_2017_07_31.jpg">【芋艿的后端小屋】</a>**有福利：</p>
<ol>
<li>RocketMQ / MyCAT / Sharding-JDBC <strong>所有</strong>源码分析文章列表</li>
<li>RocketMQ / MyCAT / Sharding-JDBC <strong>中文注释源码 GitHub 地址</strong></li>
<li>您对于源码的疑问每条留言<strong>都</strong>将得到<strong>认真</strong>回复。<strong>甚至不知道如何读源码也可以请教噢</strong>。</li>
<li><strong>新的</strong>源码解析文章<strong>实时</strong>收到通知。<strong>每周更新一篇左右</strong>。</li>
<li><strong>认真的</strong>源码交流微信群。</li>
</ol>
</blockquote>
<hr>
<ul>
<li><a href="#">1. 概述</a></li>
<li><a href="#">2. SQLParsingEngine</a></li>
<li><a href="#">3. SQLParser SQL解析器</a>
<ul>
<li><a href="#">3.1 AbstractParser</a></li>
<li><a href="#">3.2 SQLParser</a>
<ul>
<li><a href="#">3.2.1 #parseExpression() 和 SQLExpression</a></li>
<li><a href="#">3.2.2 #parseAlias()</a></li>
<li><a href="#">3.2.3 #parseSingleTable()</a></li>
<li><a href="#">3.2.4 #skipJoin()</a></li>
<li><a href="#">3.2.5 #parseWhere()</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#">4. StatementParser SQL语句解析器</a>
<ul>
<li><a href="#">4.1 StatementParser</a></li>
<li><a href="#">4.2 Statement</a></li>
</ul>
</li>
<li><a href="#">5. 彩蛋</a></li>
</ul>
<hr>
<h1>1. 概述</h1>
<p>上篇文章<a href="http://www.yunai.me/Sharding-JDBC/sql-parse-1/">《词法解析》</a>分享了<strong>词法解析器Lexer</strong>是如何解析 SQL 里的词法。本文分享<strong>SQL解析引擎</strong>是如何解析与理解 SQL的。因为本文建立在<a href="http://www.yunai.me/Sharding-JDBC/sql-parse-1/">《词法解析》</a>之上，你需要阅读它后在开始这段旅程。🙂如果对词法解析不完全理解，请给我的公众号**（<a href="http://www.yunai.me/images/common/wechat_mp_2017_07_31.jpg">芋艿的后端小屋</a>）<strong>留言，我会</strong>逐条认真耐心**回复。</p>
<p>区别于 Lexer，Parser <strong>理解SQL</strong>：</p>
<ul>
<li><strong>提炼分片上下文</strong></li>
<li><strong>标记需要SQL改写的部分</strong></li>
</ul>
<p>Parser 有三个组件：</p>
<ul>
<li>SQLParsingEngine ：SQL 解析引擎</li>
<li>SQLParser ：SQL 解析器</li>
<li>StatementParser ：SQL语句解析器</li>
</ul>
<p>SQLParsingEngine 调用 StatementParser 解析 SQL。<br>
StatementParser 调用 SQLParser 解析 SQL 表达式。<br>
SQLParser 调用 Lexer 解析 SQL 词法。</p>
<p><img src="http://www.yunai.me/images/Sharding-JDBC/2017_07_26/01.png" alt=""></p>
<p>😜 是不是觉得 SQLParser 和 StatementParser 看起来很接近？下文为你揭开这个答案。</p>
<blockquote>
<p><strong>Sharding-JDBC 正在收集使用公司名单：<a href="https://github.com/dangdangdotcom/sharding-jdbc/issues/234" rel="external nofollow noopener noreferrer" target="_blank">传送门</a>。<br>
🙂 你的登记，会让更多人参与和使用 Sharding-JDBC。<a href="https://github.com/dangdangdotcom/sharding-jdbc/issues/234" rel="external nofollow noopener noreferrer" target="_blank">传送门</a><br>
Sharding-JDBC 也会因此，能够覆盖更多的业务场景。<a href="https://github.com/dangdangdotcom/sharding-jdbc/issues/234" rel="external nofollow noopener noreferrer" target="_blank">传送门</a><br>
登记吧，骚年！<a href="https://github.com/dangdangdotcom/sharding-jdbc/issues/234" rel="external nofollow noopener noreferrer" target="_blank">传送门</a></strong></p>
</blockquote>
<h1>2. SQLParsingEngine</h1>
<p>SQLParsingEngine，SQL 解析引擎。其 <code>#parse()</code> 方法作为 SQL 解析入口，本身不带复杂逻辑，通过调用 SQL 对应的 StatementParser 进行 SQL 解析。</p>
<p>核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// SQLParsingEngine.java</span></div><div class="line"><span class="function"><span class="keyword">public</span> SQLStatement <span class="title">parse</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="comment">// 获取 SQL解析器</span></div><div class="line">   SQLParser sqlParser = getSQLParser();</div><div class="line">   <span class="comment">//</span></div><div class="line">   sqlParser.skipIfEqual(Symbol.SEMI); <span class="comment">// 跳过 ";"</span></div><div class="line">   <span class="keyword">if</span> (sqlParser.equalAny(DefaultKeyword.WITH)) &#123; <span class="comment">// WITH Syntax</span></div><div class="line">       skipWith(sqlParser);</div><div class="line">   &#125;</div><div class="line">   <span class="comment">// 获取对应 SQL语句解析器 解析SQL</span></div><div class="line">   <span class="keyword">if</span> (sqlParser.equalAny(DefaultKeyword.SELECT)) &#123;</div><div class="line">       <span class="keyword">return</span> SelectParserFactory.newInstance(sqlParser).parse();</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">if</span> (sqlParser.equalAny(DefaultKeyword.INSERT)) &#123;</div><div class="line">       <span class="keyword">return</span> InsertParserFactory.newInstance(shardingRule, sqlParser).parse();</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">if</span> (sqlParser.equalAny(DefaultKeyword.UPDATE)) &#123;</div><div class="line">       <span class="keyword">return</span> UpdateParserFactory.newInstance(sqlParser).parse();</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">if</span> (sqlParser.equalAny(DefaultKeyword.DELETE)) &#123;</div><div class="line">       <span class="keyword">return</span> DeleteParserFactory.newInstance(sqlParser).parse();</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">throw</span> <span class="keyword">new</span> SQLParsingUnsupportedException(sqlParser.getLexer().getCurrentToken().getType());</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1>3. SQLParser SQL解析器</h1>
<p>SQLParser，SQL 解析器。和词法解析器 Lexer 一样，不同数据库有不同的实现。</p>
<p>类图如下（<strong>包含所有属性和方法</strong>）（<strong><a href="http://www.yunai.me/images/Sharding-JDBC/2017_07_26/02.png">放大图片</a></strong>）：</p>
<p><img src="http://www.yunai.me/images/Sharding-JDBC/2017_07_26/02.png" alt=""></p>
<h2>3.1 AbstractParser</h2>
<p>AbstractParser，SQLParser 的抽象父类，对 Lexer 简单封装。例如：</p>
<ul>
<li><code>#skipIfEqual()</code>：判断当前词法标记类型是否与其中一个传入值相等</li>
<li><code>#equalAny()</code>：判断当前词法标记类型是否与其中一个传入值相等</li>
</ul>
<p><em><strong>这里有一点我们需要注意，SQLParser 并不是等 Lexer 解析完词法( Token )，再根据词法去理解 SQL。而是，在理解 SQL 的过程中，调用 Lexer 进行分词。</strong></em></p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// SQLParsingEngine.java#parse()片段</span></div><div class="line"><span class="keyword">if</span> (sqlParser.equalAny(DefaultKeyword.SELECT)) &#123;</div><div class="line">    <span class="keyword">return</span> SelectParserFactory.newInstance(sqlParser).parse();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// AbstractParser.java</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equalAny</span><span class="params">(<span class="keyword">final</span> TokenType... tokenTypes)</span> </span>&#123;</div><div class="line">   <span class="keyword">for</span> (TokenType each : tokenTypes) &#123;</div><div class="line">       <span class="keyword">if</span> (each == lexer.getCurrentToken().getType()) &#123;</div><div class="line">           <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>↑↑↑ 判断当前<strong>词法</strong>是否为 SELECT。实际 AbstractParser 只知道当前词法，并<strong>不知道</strong>后面还有哪些词法，也<strong>不知道</strong>之前有哪些词法。</li>
</ul>
<p>我们来看 AbstractParser 里比较复杂的方法 <code>#skipParentheses()</code> 帮助大家再理解下。请认真看代码注释噢。</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// AbstractParser.java</span></div><div class="line"><span class="comment">/**</span></div><div class="line">* 跳过小括号内所有的词法标记.</div><div class="line">*</div><div class="line">* <span class="doctag">@return</span> 小括号内所有的词法标记</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">skipParentheses</span><span class="params">()</span> </span>&#123;</div><div class="line">   StringBuilder result = <span class="keyword">new</span> StringBuilder(<span class="string">""</span>);</div><div class="line">   <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">   <span class="keyword">if</span> (Symbol.LEFT_PAREN == getLexer().getCurrentToken().getType()) &#123;</div><div class="line">       <span class="keyword">final</span> <span class="keyword">int</span> beginPosition = getLexer().getCurrentToken().getEndPosition();</div><div class="line">       result.append(Symbol.LEFT_PAREN.getLiterals());</div><div class="line">       getLexer().nextToken();</div><div class="line">       <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">           <span class="keyword">if</span> (equalAny(Symbol.QUESTION)) &#123;</div><div class="line">               increaseParametersIndex();</div><div class="line">           &#125;</div><div class="line">           <span class="comment">// 到达结尾 或者 匹配合适数的)右括号</span></div><div class="line">           <span class="keyword">if</span> (Assist.END == getLexer().getCurrentToken().getType() || (Symbol.RIGHT_PAREN == getLexer().getCurrentToken().getType() &amp;&amp; <span class="number">0</span> == count)) &#123;</div><div class="line">               <span class="keyword">break</span>;</div><div class="line">           &#125;</div><div class="line">           <span class="comment">// 处理里面有多个括号的情况，例如：SELECT COUNT(DISTINCT(order_id) FROM t_order</span></div><div class="line">           <span class="keyword">if</span> (Symbol.LEFT_PAREN == getLexer().getCurrentToken().getType()) &#123;</div><div class="line">               count++;</div><div class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Symbol.RIGHT_PAREN == getLexer().getCurrentToken().getType()) &#123;</div><div class="line">               count--;</div><div class="line">           &#125;</div><div class="line">           <span class="comment">// 下一个词法</span></div><div class="line">           getLexer().nextToken();</div><div class="line">       &#125;</div><div class="line">       <span class="comment">// 获得括号内的内容</span></div><div class="line">       result.append(getLexer().getInput().substring(beginPosition, getLexer().getCurrentToken().getEndPosition()));</div><div class="line">       <span class="comment">// 下一个词法</span></div><div class="line">       getLexer().nextToken();</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> result.toString();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这个类其它方法很重要，逻辑相对简单，我们就不占用篇幅了。大家一定要看哟，后面调用非常非常多。<a href="https://github.com/dangdangdotcom/sharding-jdbc/blob/master/sharding-jdbc-core/src/main/java/com/dangdang/ddframe/rdb/sharding/parsing/parser/AbstractParser.java" rel="external nofollow noopener noreferrer" target="_blank">AbstractParser.java 传送门</a>。👼也可以关注我的公众号**（<a href="http://www.yunai.me/images/common/wechat_mp_2017_07_31.jpg">芋艿的后端小屋</a>）<strong>发送关键字【sjdbc】获取</strong>增加方法内注释的项目地址**。</p>
<h2>3.2 SQLParser</h2>
<p>SQLParser，SQL 解析器，<strong>主要提供只考虑 SQL 块的解析方法，<em>不考虑 SQL 上下文</em></strong>。下文即将提到的 StatementParser 将 SQL 拆成对应的<strong>块</strong>，调用 SQLParser 进行解析。🤓 这么说，可能会有些抽象，我们下面来一起看。</p>
<p>SQLParser 看起来方法特别多，合并下一共 5 种：</p>
<table>
<thead>
<tr>
<th style="text-align:left">方法</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">#parseExpression()</td>
<td style="text-align:left">解析表达式</td>
</tr>
<tr>
<td style="text-align:left">#parseAlias()</td>
<td style="text-align:left">解析别名</td>
</tr>
<tr>
<td style="text-align:left">#parseSingleTable()</td>
<td style="text-align:left">解析单表</td>
</tr>
<tr>
<td style="text-align:left">#skipJoin()</td>
<td style="text-align:left">跳过表关联词法</td>
</tr>
<tr>
<td style="text-align:left">#parseWhere()</td>
<td style="text-align:left">解析查询条件</td>
</tr>
</tbody>
</table>
<p><img src="http://www.yunai.me/images/Sharding-JDBC/2017_07_26/03.png" alt=""></p>
<p>看了这 5 个方法是否有点理解了？SQLParser 不考虑 SQL 是 SELECT / INSERT / UPDATE / DELETE ，它考虑的是，<strong>给我的是 WHERE 处解析查询条件，或是 INSERT INTO 解析单表 等</strong>，提供 SELECT / INSERT / UPDATE / DELETE 需要的 SQL 块公用解析。</p>
<h3>3.2.1 #parseExpression() 和 SQLExpression</h3>
<p>SQLExpression，SQL表达式接口。目前 6 种实现：</p>
<table>
<thead>
<tr>
<th style="text-align:left">类</th>
<th style="text-align:left">说明</th>
<th style="text-align:left">对应Token</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">SQLIdentifierExpression</td>
<td style="text-align:left">标识表达式</td>
<td style="text-align:left">Literals.IDENTIFIER</td>
</tr>
<tr>
<td style="text-align:left">SQLPropertyExpression</td>
<td style="text-align:left">属性表达式</td>
<td style="text-align:left">无</td>
</tr>
<tr>
<td style="text-align:left">SQLNumberExpression</td>
<td style="text-align:left">数字表达式</td>
<td style="text-align:left">Literals.INT, Literals.HEX</td>
</tr>
<tr>
<td style="text-align:left">SQLPlaceholderExpression</td>
<td style="text-align:left">占位符表达式</td>
<td style="text-align:left">Symbol.QUESTION</td>
</tr>
<tr>
<td style="text-align:left">SQLTextExpression</td>
<td style="text-align:left">字符表达式</td>
<td style="text-align:left">Literals.CHARS</td>
</tr>
<tr>
<td style="text-align:left">SQLIgnoreExpression</td>
<td style="text-align:left">分片中无需关注的SQL表达式</td>
<td style="text-align:left">无</td>
</tr>
</tbody>
</table>
<p><img src="http://www.yunai.me/images/Sharding-JDBC/2017_07_26/04.png" alt=""></p>
<ul>
<li>SQLPropertyExpression 例如：<code>SELECT * FROM t_order o ORDER BY o.order_id</code> 中的 <code>o.order_id</code>。<strong>SQLPropertyExpression 从 SQLIdentifierExpression 进一步判断解析而来。</strong>
<img src="http://www.yunai.me/images/Sharding-JDBC/2017_07_26/05.png" alt=""></li>
<li>SQLIgnoreExpression 例如：<code>SELECT * FROM t_order o ORDER BY o.order_id % 2</code> 中的<code>o.order_id % 2</code>。<strong>复合表达式都会解析成 SQLIgnoreExpression。</strong></li>
</ul>
<p>解析 SQLExpression 核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// SQLParser.java</span></div><div class="line"><span class="comment">/**</span></div><div class="line">* 解析表达式.</div><div class="line">*</div><div class="line">* <span class="doctag">@return</span> 表达式</div><div class="line">*/</div><div class="line"><span class="comment">// TODO 完善Expression解析的各种场景</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> SQLExpression <span class="title">parseExpression</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="comment">// 解析表达式</span></div><div class="line">   String literals = getLexer().getCurrentToken().getLiterals();</div><div class="line">   <span class="keyword">final</span> SQLExpression expression = getExpression(literals);</div><div class="line">   <span class="comment">// SQLIdentifierExpression 需要特殊处理。考虑自定义函数，表名.属性情况。</span></div><div class="line">   <span class="keyword">if</span> (skipIfEqual(Literals.IDENTIFIER)) &#123;</div><div class="line">       <span class="keyword">if</span> (skipIfEqual(Symbol.DOT)) &#123; <span class="comment">// 例如，ORDER BY o.uid 中的 "o.uid"</span></div><div class="line">           String property = getLexer().getCurrentToken().getLiterals();</div><div class="line">           getLexer().nextToken();</div><div class="line">           <span class="keyword">return</span> skipIfCompositeExpression() ? <span class="keyword">new</span> SQLIgnoreExpression() : <span class="keyword">new</span> SQLPropertyExpression(<span class="keyword">new</span> SQLIdentifierExpression(literals), property);</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">if</span> (equalAny(Symbol.LEFT_PAREN)) &#123; <span class="comment">// 例如，GROUP BY DATE(create_time) 中的 "DATE(create_time)"</span></div><div class="line">           skipParentheses();</div><div class="line">           skipRestCompositeExpression();</div><div class="line">           <span class="keyword">return</span> <span class="keyword">new</span> SQLIgnoreExpression();</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> skipIfCompositeExpression() ? <span class="keyword">new</span> SQLIgnoreExpression() : expression;</div><div class="line">   &#125;</div><div class="line">   getLexer().nextToken();</div><div class="line">   <span class="keyword">return</span> skipIfCompositeExpression() ? <span class="keyword">new</span> SQLIgnoreExpression() : expression;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line">* 获得 词法Token 对应的 SQLExpression</div><div class="line">*</div><div class="line">* <span class="doctag">@param</span> literals 词法字面量标记</div><div class="line">* <span class="doctag">@return</span> SQLExpression</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">private</span> SQLExpression <span class="title">getExpression</span><span class="params">(<span class="keyword">final</span> String literals)</span> </span>&#123;</div><div class="line">   <span class="keyword">if</span> (equalAny(Symbol.QUESTION)) &#123;</div><div class="line">       increaseParametersIndex();</div><div class="line">       <span class="keyword">return</span> <span class="keyword">new</span> SQLPlaceholderExpression(getParametersIndex() - <span class="number">1</span>);</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">if</span> (equalAny(Literals.CHARS)) &#123;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">new</span> SQLTextExpression(literals);</div><div class="line">   &#125;</div><div class="line">   <span class="comment">// TODO 考虑long的情况</span></div><div class="line">   <span class="keyword">if</span> (equalAny(Literals.INT)) &#123;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">new</span> SQLNumberExpression(Integer.parseInt(literals));</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">if</span> (equalAny(Literals.FLOAT)) &#123;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">new</span> SQLNumberExpression(Double.parseDouble(literals));</div><div class="line">   &#125;</div><div class="line">   <span class="comment">// TODO 考虑long的情况</span></div><div class="line">   <span class="keyword">if</span> (equalAny(Literals.HEX)) &#123;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">new</span> SQLNumberExpression(Integer.parseInt(literals, <span class="number">16</span>));</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">if</span> (equalAny(Literals.IDENTIFIER)) &#123;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">new</span> SQLIdentifierExpression(SQLUtil.getExactlyValue(literals));</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> <span class="keyword">new</span> SQLIgnoreExpression();</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line">* 如果是 复合表达式，跳过。</div><div class="line">*</div><div class="line">* <span class="doctag">@return</span> 是否跳过</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">skipIfCompositeExpression</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">if</span> (equalAny(Symbol.PLUS, Symbol.SUB, Symbol.STAR, Symbol.SLASH, Symbol.PERCENT, Symbol.AMP, Symbol.BAR, Symbol.DOUBLE_AMP, Symbol.DOUBLE_BAR, Symbol.CARET, Symbol.DOT, Symbol.LEFT_PAREN)) &#123;</div><div class="line">       skipParentheses();</div><div class="line">       skipRestCompositeExpression();</div><div class="line">       <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line">* 跳过剩余复合表达式</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">skipRestCompositeExpression</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">while</span> (skipIfEqual(Symbol.PLUS, Symbol.SUB, Symbol.STAR, Symbol.SLASH, Symbol.PERCENT, Symbol.AMP, Symbol.BAR, Symbol.DOUBLE_AMP, Symbol.DOUBLE_BAR, Symbol.CARET, Symbol.DOT)) &#123;</div><div class="line">       <span class="keyword">if</span> (equalAny(Symbol.QUESTION)) &#123;</div><div class="line">           increaseParametersIndex();</div><div class="line">       &#125;</div><div class="line">       getLexer().nextToken();</div><div class="line">       skipParentheses();</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>解析了 SQLExpression 有什么用呢？我们会在<a href="http://www.yunai.me/images/common/wechat_mp_2017_07_31.jpg">《查询SQL解析》</a>、<a href="http://www.yunai.me/images/common/wechat_mp_2017_07_31.jpg">《插入SQL解析》</a>、<a href="http://www.yunai.me/images/common/wechat_mp_2017_07_31.jpg">《更新SQL解析》</a>、<a href="http://www.yunai.me/images/common/wechat_mp_2017_07_31.jpg">《删除SQL解析》</a>。留个悬念😈，关注我的公众号**（<a href="http://www.yunai.me/images/common/wechat_mp_2017_07_31.jpg">芋艿的后端小屋</a>）**，<strong>实时收到新文更新通知</strong>。</p>
<h3>3.2.2 #parseAlias()</h3>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 解析别名.不仅仅是字段的别名，也可以是表的别名。</div><div class="line">*</div><div class="line">* <span class="doctag">@return</span> 别名</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> Optional&lt;String&gt; <span class="title">parseAlias</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="comment">// 解析带 AS 情况</span></div><div class="line">   <span class="keyword">if</span> (skipIfEqual(DefaultKeyword.AS)) &#123;</div><div class="line">       <span class="keyword">if</span> (equalAny(Symbol.values())) &#123;</div><div class="line">           <span class="keyword">return</span> Optional.absent();</div><div class="line">       &#125;</div><div class="line">       String result = SQLUtil.getExactlyValue(getLexer().getCurrentToken().getLiterals());</div><div class="line">       getLexer().nextToken();</div><div class="line">       <span class="keyword">return</span> Optional.of(result);</div><div class="line">   &#125;</div><div class="line">   <span class="comment">// 解析别名</span></div><div class="line">   <span class="comment">// TODO 增加哪些数据库识别哪些关键字作为别名的配置</span></div><div class="line">   <span class="keyword">if</span> (equalAny(Literals.IDENTIFIER, Literals.CHARS, DefaultKeyword.USER, DefaultKeyword.END, DefaultKeyword.CASE, DefaultKeyword.KEY, DefaultKeyword.INTERVAL, DefaultKeyword.CONSTRAINT)) &#123;</div><div class="line">       String result = SQLUtil.getExactlyValue(getLexer().getCurrentToken().getLiterals());</div><div class="line">       getLexer().nextToken();</div><div class="line">       <span class="keyword">return</span> Optional.of(result);</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> Optional.absent();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3>3.2.3 #parseSingleTable()</h3>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 解析单表.</div><div class="line">*</div><div class="line">* <span class="doctag">@param</span> sqlStatement SQL语句对象</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">parseSingleTable</span><span class="params">(<span class="keyword">final</span> SQLStatement sqlStatement)</span> </span>&#123;</div><div class="line">   <span class="keyword">boolean</span> hasParentheses = <span class="keyword">false</span>;</div><div class="line">   <span class="keyword">if</span> (skipIfEqual(Symbol.LEFT_PAREN)) &#123;</div><div class="line">       <span class="keyword">if</span> (equalAny(DefaultKeyword.SELECT)) &#123; <span class="comment">// multiple-update 或者 multiple-delete</span></div><div class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"Cannot support subquery"</span>);</div><div class="line">       &#125;</div><div class="line">       hasParentheses = <span class="keyword">true</span>;</div><div class="line">   &#125;</div><div class="line">   Table table;</div><div class="line">   <span class="keyword">final</span> <span class="keyword">int</span> beginPosition = getLexer().getCurrentToken().getEndPosition() - getLexer().getCurrentToken().getLiterals().length();</div><div class="line">   String literals = getLexer().getCurrentToken().getLiterals();</div><div class="line">   getLexer().nextToken();</div><div class="line">   <span class="keyword">if</span> (skipIfEqual(Symbol.DOT)) &#123;</div><div class="line">       getLexer().nextToken();</div><div class="line">       <span class="keyword">if</span> (hasParentheses) &#123;</div><div class="line">           accept(Symbol.RIGHT_PAREN);</div><div class="line">       &#125;</div><div class="line">       table = <span class="keyword">new</span> Table(SQLUtil.getExactlyValue(literals), parseAlias());</div><div class="line">   &#125; <span class="keyword">else</span> &#123;</div><div class="line">       <span class="keyword">if</span> (hasParentheses) &#123;</div><div class="line">           accept(Symbol.RIGHT_PAREN);</div><div class="line">       &#125;</div><div class="line">       table = <span class="keyword">new</span> Table(SQLUtil.getExactlyValue(literals), parseAlias());</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">if</span> (skipJoin()) &#123; <span class="comment">// multiple-update 或者 multiple-delete</span></div><div class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"Cannot support Multiple-Table."</span>);</div><div class="line">   &#125;</div><div class="line">   sqlStatement.getSqlTokens().add(<span class="keyword">new</span> TableToken(beginPosition, literals));</div><div class="line">   sqlStatement.getTables().add(table);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3>3.2.4 #skipJoin()</h3>
<p>跳过表关联词法，支持 <code>SELECT * FROM t_user, t_order WHERE ...</code>, <code>SELECT * FROM t_user JOIN t_order ON ...</code>。下篇<a href="http://www.yunai.me/images/common/wechat_mp_2017_07_31.jpg">《查询SQL解析》</a><strong>解析表</strong>会用到这个方法。</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// SQLParser.java</span></div><div class="line"><span class="comment">/**</span></div><div class="line">* 跳过表关联词法.</div><div class="line">*</div><div class="line">* <span class="doctag">@return</span> 是否表关联.</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">skipJoin</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">if</span> (skipIfEqual(DefaultKeyword.LEFT, DefaultKeyword.RIGHT, DefaultKeyword.FULL)) &#123;</div><div class="line">       skipIfEqual(DefaultKeyword.OUTER);</div><div class="line">       accept(DefaultKeyword.JOIN);</div><div class="line">       <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">   &#125; <span class="keyword">else</span> <span class="keyword">if</span> (skipIfEqual(DefaultKeyword.INNER)) &#123;</div><div class="line">       accept(DefaultKeyword.JOIN);</div><div class="line">       <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">   &#125; <span class="keyword">else</span> <span class="keyword">if</span> (skipIfEqual(DefaultKeyword.JOIN, Symbol.COMMA, DefaultKeyword.STRAIGHT_JOIN)) &#123;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">   &#125; <span class="keyword">else</span> <span class="keyword">if</span> (skipIfEqual(DefaultKeyword.CROSS)) &#123;</div><div class="line">       <span class="keyword">if</span> (skipIfEqual(DefaultKeyword.JOIN, DefaultKeyword.APPLY)) &#123;</div><div class="line">           <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">       &#125;</div><div class="line">   &#125; <span class="keyword">else</span> <span class="keyword">if</span> (skipIfEqual(DefaultKeyword.OUTER)) &#123;</div><div class="line">       <span class="keyword">if</span> (skipIfEqual(DefaultKeyword.APPLY)) &#123;</div><div class="line">           <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3>3.2.5 #parseWhere()</h3>
<p>解析 WHERE 查询条件。目前支持 AND 条件，不支持 OR 条件。近期 OR 条件支持的可能性比较低。另外条件这块对括号解析需要继续优化，实际使用请勿写冗余的括号。例如：<code>SELECT * FROM tbl_name1 WHERE ((val1=?) AND (val2=?)) AND val3 =?</code>。</p>
<p>根据不同的运算操作符，分成如下情况：</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>附加条件</th>
<th>方法</th>
</tr>
</thead>
<tbody>
<tr>
<td>=</td>
<td></td>
<td>#parseEqualCondition()</td>
</tr>
<tr>
<td>IN</td>
<td></td>
<td>#parseInCondition()</td>
</tr>
<tr>
<td>BETWEEN</td>
<td></td>
<td>#parseBetweenCondition()</td>
</tr>
<tr>
<td>&lt;, &lt;=, &gt;, &gt;=</td>
<td>Oracle 或 SQLServer 分页</td>
<td>#parseRowNumberCondition()</td>
</tr>
<tr>
<td>&lt;, &lt;=, &gt;, &gt;=</td>
<td></td>
<td>#parseOtherCondition()</td>
</tr>
<tr>
<td>LIKE</td>
<td></td>
<td>parseOtherCondition</td>
</tr>
</tbody>
</table>
<p>代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// SQLParser.java</span></div><div class="line"><span class="comment">/**</span></div><div class="line">* 解析所有查询条件。</div><div class="line">* 目前不支持 OR 条件。</div><div class="line">*</div><div class="line">* <span class="doctag">@param</span> sqlStatement SQL</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseConditions</span><span class="params">(<span class="keyword">final</span> SQLStatement sqlStatement)</span> </span>&#123;</div><div class="line">   <span class="comment">// AND 查询</span></div><div class="line">   <span class="keyword">do</span> &#123;</div><div class="line">       parseComparisonCondition(sqlStatement);</div><div class="line">   &#125; <span class="keyword">while</span> (skipIfEqual(DefaultKeyword.AND));</div><div class="line">   <span class="comment">// 目前不支持 OR 条件</span></div><div class="line">   <span class="keyword">if</span> (equalAny(DefaultKeyword.OR)) &#123;</div><div class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> SQLParsingUnsupportedException(getLexer().getCurrentToken().getType());</div><div class="line">   &#125;</div><div class="line">&#125; </div><div class="line"><span class="comment">// TODO 解析组合expr</span></div><div class="line"><span class="comment">/**</span></div><div class="line">* 解析单个查询条件</div><div class="line">*</div><div class="line">* <span class="doctag">@param</span> sqlStatement SQL</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">parseComparisonCondition</span><span class="params">(<span class="keyword">final</span> SQLStatement sqlStatement)</span> </span>&#123;</div><div class="line">   skipIfEqual(Symbol.LEFT_PAREN);</div><div class="line">   SQLExpression left = parseExpression(sqlStatement);</div><div class="line">   <span class="keyword">if</span> (equalAny(Symbol.EQ)) &#123;</div><div class="line">       parseEqualCondition(sqlStatement, left);</div><div class="line">       skipIfEqual(Symbol.RIGHT_PAREN);</div><div class="line">       <span class="keyword">return</span>;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">if</span> (equalAny(DefaultKeyword.IN)) &#123;</div><div class="line">       parseInCondition(sqlStatement, left);</div><div class="line">       skipIfEqual(Symbol.RIGHT_PAREN);</div><div class="line">       <span class="keyword">return</span>;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">if</span> (equalAny(DefaultKeyword.BETWEEN)) &#123;</div><div class="line">       parseBetweenCondition(sqlStatement, left);</div><div class="line">       skipIfEqual(Symbol.RIGHT_PAREN);</div><div class="line">       <span class="keyword">return</span>;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">if</span> (equalAny(Symbol.LT, Symbol.GT, Symbol.LT_EQ, Symbol.GT_EQ)) &#123;</div><div class="line">       <span class="keyword">if</span> (left <span class="keyword">instanceof</span> SQLIdentifierExpression &amp;&amp; sqlStatement <span class="keyword">instanceof</span> SelectStatement</div><div class="line">               &amp;&amp; isRowNumberCondition((SelectStatement) sqlStatement, ((SQLIdentifierExpression) left).getName())) &#123;</div><div class="line">           parseRowNumberCondition((SelectStatement) sqlStatement);</div><div class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (left <span class="keyword">instanceof</span> SQLPropertyExpression &amp;&amp; sqlStatement <span class="keyword">instanceof</span> SelectStatement</div><div class="line">               &amp;&amp; isRowNumberCondition((SelectStatement) sqlStatement, ((SQLPropertyExpression) left).getName())) &#123;</div><div class="line">           parseRowNumberCondition((SelectStatement) sqlStatement);</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           parseOtherCondition(sqlStatement);</div><div class="line">       &#125;</div><div class="line">   &#125; <span class="keyword">else</span> <span class="keyword">if</span> (equalAny(DefaultKeyword.LIKE)) &#123;</div><div class="line">       parseOtherCondition(sqlStatement);</div><div class="line">   &#125;</div><div class="line">   skipIfEqual(Symbol.RIGHT_PAREN);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>#parseComparisonCondition()</code> 解析到 <code>左SQL表达式(left)</code> 和 运算符，调用相应方法进一步处理。我们选择 <code>#parseEqualCondition()</code> 看下，其他方法有兴趣跳转 <a href="https://github.com/dangdangdotcom/sharding-jdbc/blob/master/sharding-jdbc-core/src/main/java/com/dangdang/ddframe/rdb/sharding/parsing/parser/SQLParser.java" rel="external nofollow noopener noreferrer" target="_blank">SQLParser</a> 查看。</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// SQLParser.java</span></div><div class="line"><span class="comment">/**</span></div><div class="line">* 解析 = 条件</div><div class="line">*</div><div class="line">* <span class="doctag">@param</span> sqlStatement SQL</div><div class="line">* <span class="doctag">@param</span> left 左SQLExpression</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseEqualCondition</span><span class="params">(<span class="keyword">final</span> SQLStatement sqlStatement, <span class="keyword">final</span> SQLExpression left)</span> </span>&#123;</div><div class="line">   getLexer().nextToken();</div><div class="line">   SQLExpression right = parseExpression(sqlStatement);</div><div class="line">   <span class="comment">// 添加列</span></div><div class="line">   <span class="comment">// TODO 如果有多表,且找不到column是哪个表的,则不加入condition,以后需要解析binding table</span></div><div class="line">   <span class="keyword">if</span> ((sqlStatement.getTables().isSingleTable() || left <span class="keyword">instanceof</span> SQLPropertyExpression)</div><div class="line">           <span class="comment">// 只有对路由结果有影响的才会添加到 conditions。SQLPropertyExpression 和 SQLIdentifierExpression 无法判断，所以未加入 conditions</span></div><div class="line">           &amp;&amp; (right <span class="keyword">instanceof</span> SQLNumberExpression || right <span class="keyword">instanceof</span> SQLTextExpression || right <span class="keyword">instanceof</span> SQLPlaceholderExpression)) &#123;</div><div class="line">       Optional&lt;Column&gt; column = find(sqlStatement.getTables(), left);</div><div class="line">       <span class="keyword">if</span> (column.isPresent()) &#123;</div><div class="line">           sqlStatement.getConditions().add(<span class="keyword">new</span> Condition(column.get(), right), shardingRule);</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>#parseEqualCondition()</code> 解析到 <code>右SQL表达式(right)</code>，并判断 <code>左右SQL表达式</code> 与路由逻辑是否有影响，如果有，则加入到 Condition。<strong>这个就是 <code>#parseWhere()</code> 的目的：解析 WHERE 查询条件对路由有影响的条件。</strong><a href="http://www.yunai.me/images/common/wechat_mp_2017_07_31.jpg">《路由》</a>相关的逻辑，会单独开文章介绍。这里，我们先留有映像。</p>
<h1>4. StatementParser SQL语句解析器</h1>
<h2>4.1 StatementParser</h2>
<p>StatementParser，SQL语句解析器。每种 SQL，都有相应的 SQL语句解析器实现。不同数据库，继承这些 SQL语句解析器，实现各自 SQL 上的差异。大体结构如下：</p>
<p><img src="http://www.yunai.me/images/Sharding-JDBC/2017_07_26/06.png" alt=""></p>
<p>SQLParsingEngine 根据不同 SQL 调用对应工厂创建 StatementParser。核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">SelectParserFactory</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 创建Select语句解析器.</div><div class="line">     * </div><div class="line">     * <span class="doctag">@param</span> sqlParser SQL解析器</div><div class="line">     * <span class="doctag">@return</span> Select语句解析器</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AbstractSelectParser <span class="title">newInstance</span><span class="params">(<span class="keyword">final</span> SQLParser sqlParser)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (sqlParser <span class="keyword">instanceof</span> MySQLParser) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> MySQLSelectParser(sqlParser);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (sqlParser <span class="keyword">instanceof</span> OracleParser) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> OracleSelectParser(sqlParser);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (sqlParser <span class="keyword">instanceof</span> SQLServerParser) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SQLServerSelectParser(sqlParser);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (sqlParser <span class="keyword">instanceof</span> PostgreSQLParser) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> PostgreSQLSelectParser(sqlParser);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(String.format(<span class="string">"Cannot support sqlParser class [%s]."</span>, sqlParser.getClass()));</div><div class="line">    &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>调用 <code>StatementParser#parse()</code> 实现方法，对 SQL 进行解析。具体解析过程，另开文章分享。</p>
<h2>4.2 Statement</h2>
<p>不同 SQL 解析后，返回对应的 SQL 结果,即 Statement。大体结构如下：</p>
<p><img src="http://www.yunai.me/images/Sharding-JDBC/2017_07_26/07.png" alt=""></p>
<p>Statement 包含两部分信息：</p>
<ul>
<li>
<p>分片上下文：用于 SQL 路由。</p>
<p><img src="http://www.yunai.me/images/Sharding-JDBC/2017_07_26/08.png" alt=""></p>
</li>
<li>
<p>SQL 标记对象：用于 SQL 改写。</p>
<p><img src="http://www.yunai.me/images/Sharding-JDBC/2017_07_26/09.png" alt=""></p>
</li>
</ul>
<p>我们会在后文增删改查SQL解析的过程中分享到它们。</p>
<h2>4.3 预告</h2>
<table>
<thead>
<tr>
<th>Parser</th>
<th>Statement</th>
<th>分享文章</th>
</tr>
</thead>
<tbody>
<tr>
<td>SelectStatementParser</td>
<td>SelectStatement + AbstractSQLStatement</td>
<td><a href="http://www.yunai.me/images/common/wechat_mp_2017_07_31.jpg">《查询SQL解析》</a></td>
</tr>
<tr>
<td>InsertStatementParser</td>
<td>InsertStatement</td>
<td><a href="http://www.yunai.me/images/common/wechat_mp_2017_07_31.jpg">《插入SQL解析》</a></td>
</tr>
<tr>
<td>UpdateStatementParser</td>
<td>UpdateStatement</td>
<td><a href="http://www.yunai.me/images/common/wechat_mp_2017_07_31.jpg">《更新SQL解析》</a></td>
</tr>
<tr>
<td>DeleteStatementParser</td>
<td>DeleteStatement</td>
<td><a href="http://www.yunai.me/images/common/wechat_mp_2017_07_31.jpg">《删除SQL解析》</a></td>
</tr>
</tbody>
</table>
<h1>5. 彩蛋</h1>
<p>老铁，是不是有丢丢长？<br>
如果有地方错误，烦请指出🙂。<br>
如果有地方不是很理解，可以加我的公众号**（<a href="http://www.yunai.me/images/common/wechat_mp_2017_07_31.jpg">芋艿的后端小屋</a>）<strong>留言，我会</strong>逐条认真耐心**回复。<br>
如果觉得还凑合，劳驾分享朋友圈或者基佬。</p>
<p><a href="http://www.yunai.me/images/common/wechat_mp_2017_07_31.jpg">《查询SQL解析》</a>已经写了一半，预计很快...</p>
<p><img src="https://www.yunai.me/images/common/wechat_mp_2017_07_31.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://www.yunai.me/images/common/wechat_mp_2017_07_31.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;🙂🙂🙂关注**微信公众号：&lt;a href=&quot;http://www.yu
    
    </summary>
    
      <category term="Sharding-JDBC" scheme="http://www.yunai.me/categories/Sharding-JDBC/"/>
    
    
  </entry>
  
  <entry>
    <title>Sharding-JDBC 源码分析 —— SQL 解析（一）之词法解析</title>
    <link href="http://www.yunai.me/Sharding-JDBC/sql-parse-1/"/>
    <id>http://www.yunai.me/Sharding-JDBC/sql-parse-1/</id>
    <published>2017-07-22T16:00:00.000Z</published>
    <updated>2017-07-31T12:30:52.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://www.yunai.me/images/common/wechat_mp_2017_07_31.jpg" alt=""></p>
<blockquote>
<p>🙂🙂🙂关注**微信公众号：【芋艿的后端小屋】**有福利：</p>
<ol>
<li>RocketMQ / MyCAT / Sharding-JDBC <strong>所有</strong>源码分析文章列表</li>
<li>RocketMQ / MyCAT / Sharding-JDBC <strong>中文注释源码 GitHub 地址</strong></li>
<li>您对于源码的疑问每条留言<strong>都</strong>将得到<strong>认真</strong>回复。<strong>甚至不知道如何读源码也可以请教噢</strong>。</li>
<li><strong>新的</strong>源码解析文章<strong>实时</strong>收到通知。<strong>每周更新一篇左右</strong>。</li>
<li><strong>认真的</strong>源码交流微信群。</li>
</ol>
</blockquote>
<hr>
<ul>
<li><a href="#">1. 概述</a></li>
<li><a href="#">2. Lexer 词法解析器</a></li>
<li><a href="#">3. Token 词法标记</a>
<ul>
<li><a href="#">3.1 DefaultKeyword 词法关键词</a></li>
<li><a href="#">3.2 Literals 词法字面量标记</a>
<ul>
<li><a href="#">3.2.1 Literals.IDENTIFIER 词法关键词</a></li>
<li><a href="#">3.2.2 Literals.VARIABLE 变量</a></li>
<li><a href="#">3.2.3 Literals.CHARS 字符串</a></li>
<li><a href="#">3.2.4 Literals.HEX 十六进制</a></li>
<li><a href="#">3.2.5 Literals.INT 整数</a></li>
<li><a href="#">3.2.6 Literals.FLOAT 浮点数</a></li>
</ul>
</li>
<li><a href="#">3.3 Symbol 词法符号标记</a></li>
<li><a href="#">3.4 Assist 词法辅助标记</a></li>
</ul>
</li>
<li><a href="#">4. 彩蛋</a></li>
</ul>
<hr>
<h1>1. 概述</h1>
<p><strong>SQL 解析引擎</strong>，数据库中间件必备的功能和流程。Sharding-JDBC 在 <code>1.5.0.M1</code> 正式发布时，将 SQL 解析引擎从 Druid 替换成了自研的。<strong>新引擎仅解析分片上下文，对于 SQL 采用&quot;半理解&quot;理念，进一步提升性能和兼容性，同时降低了代码复杂度</strong>（不理解没关系，我们后续会更新文章解释该优点）。 国内另一款数据库中间件 MyCAT SQL 解析引擎也是 Druid，目前也在开发属于自己的 SQL 解析引擎。</p>
<p>可能有同学看到<strong>SQL 解析</strong>会被吓到，请淡定，耐心往下看。《SQL 解析》内容我们会分成 5 篇相对简短的文章，让大家能够相对轻松愉快的去理解：</p>
<ol>
<li>词法解析</li>
<li>插入 SQL 解析</li>
<li>查询 SQL 解析</li>
<li>更新 SQL 解析</li>
<li>删除 SQL 解析</li>
</ol>
<hr>
<p><img src="http://www.yunai.me/images/Sharding-JDBC/2017_07_23/01.png" alt=""></p>
<p><strong>SQL 解析引擎</strong>在 <code>parsing</code> 包下，如上图所见包含两大组件：</p>
<ol>
<li>Lexer：<strong>词法</strong>解析器。</li>
<li>Parser：<strong>SQL</strong>解析器。</li>
</ol>
<p>两者都是解析器，区别在于 Lexer 只做词法的解析，不关注上下文，将字符串拆解成 N 个词法。而 Parser 在 Lexer 的基础上，还需要理解 SQL 。打个比方：</p>
<p><figure class="highlight sql"><table><tr><td class="code"><pre><div class="line">SQL ：<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t_user  </div><div class="line">Lexer ：[<span class="keyword">SELECT</span>] [ * ] [<span class="keyword">FROM</span>] [t_user]  </div><div class="line">Parser ：这是一条 [<span class="keyword">SELECT</span>] 查询表为 [t_user] ，并且返回 [ * ] 所有字段的 <span class="keyword">SQL</span>。</div></pre></td></tr></table></figure></p>
<p>🙂不完全懂？没关系，本文的主角是 Lexer，我们通过源码一点一点理解。一共 1400 行左右代码左右，还包含注释等等，实际更少噢。</p>
<h1>2. Lexer 词法解析器</h1>
<p><strong>Lexer 原理</strong>：<strong>顺序顺序顺序</strong> 解析 SQL，将字符串拆解成 N 个词法。</p>
<p>核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// Lexer.java</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Lexer</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 输出字符串</div><div class="line">     * 比如：SQL</div><div class="line">     */</div><div class="line">    <span class="meta">@Getter</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String input;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 词法标记字典</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Dictionary dictionary;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 解析到 SQL 的 offset</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> offset;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 当前 词法标记</div><div class="line">     */</div><div class="line">    <span class="meta">@Getter</span></div><div class="line">    <span class="keyword">private</span> Token currentToken;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 分析下一个词法标记.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@see</span> #currentToken</div><div class="line">     * <span class="doctag">@see</span> #offset</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">nextToken</span><span class="params">()</span> </span>&#123;</div><div class="line">        skipIgnoredToken();</div><div class="line">        <span class="keyword">if</span> (isVariableBegin()) &#123; <span class="comment">// 变量</span></div><div class="line">            currentToken = <span class="keyword">new</span> Tokenizer(input, dictionary, offset).scanVariable();</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isNCharBegin()) &#123; <span class="comment">// N\</span></div><div class="line">            currentToken = <span class="keyword">new</span> Tokenizer(input, dictionary, ++offset).scanChars();</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isIdentifierBegin()) &#123; <span class="comment">// Keyword + Literals.IDENTIFIER</span></div><div class="line">            currentToken = <span class="keyword">new</span> Tokenizer(input, dictionary, offset).scanIdentifier();</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isHexDecimalBegin()) &#123; <span class="comment">// 十六进制</span></div><div class="line">            currentToken = <span class="keyword">new</span> Tokenizer(input, dictionary, offset).scanHexDecimal();</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isNumberBegin()) &#123; <span class="comment">// 数字（整数+浮点数）</span></div><div class="line">            currentToken = <span class="keyword">new</span> Tokenizer(input, dictionary, offset).scanNumber();</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isSymbolBegin()) &#123; <span class="comment">// 符号</span></div><div class="line">            currentToken = <span class="keyword">new</span> Tokenizer(input, dictionary, offset).scanSymbol();</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isCharsBegin()) &#123; <span class="comment">// 字符串，例如："abc"</span></div><div class="line">            currentToken = <span class="keyword">new</span> Tokenizer(input, dictionary, offset).scanChars();</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isEnd()) &#123; <span class="comment">// 结束</span></div><div class="line">            currentToken = <span class="keyword">new</span> Token(Assist.END, <span class="string">""</span>, offset);</div><div class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 分析错误，无符合条件的词法标记</span></div><div class="line">            currentToken = <span class="keyword">new</span> Token(Assist.ERROR, <span class="string">""</span>, offset);</div><div class="line">        &#125;</div><div class="line">        offset = currentToken.getEndPosition();</div><div class="line">        <span class="comment">// System.out.println("| " + currentToken.getLiterals() + " | " + currentToken.getType() + " | " + currentToken.getEndPosition() + " |");</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 跳过忽略的词法标记</div><div class="line">     * 1. 空格</div><div class="line">     * 2. SQL Hint</div><div class="line">     * 3. SQL 注释</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">skipIgnoredToken</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// 空格</span></div><div class="line">        offset = <span class="keyword">new</span> Tokenizer(input, dictionary, offset).skipWhitespace();</div><div class="line">        <span class="comment">// SQL Hint</span></div><div class="line">        <span class="keyword">while</span> (isHintBegin()) &#123;</div><div class="line">            offset = <span class="keyword">new</span> Tokenizer(input, dictionary, offset).skipHint();</div><div class="line">            offset = <span class="keyword">new</span> Tokenizer(input, dictionary, offset).skipWhitespace();</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// SQL 注释</span></div><div class="line">        <span class="keyword">while</span> (isCommentBegin()) &#123;</div><div class="line">            offset = <span class="keyword">new</span> Tokenizer(input, dictionary, offset).skipComment();</div><div class="line">            offset = <span class="keyword">new</span> Tokenizer(input, dictionary, offset).skipWhitespace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>通过 <code>#nextToken()</code> 方法，不断解析出 Token(<em>词法标记</em>)。我们来执行一次，看看 SQL 会被拆解成哪些 Token。</p>
<p><figure class="highlight sql"><table><tr><td class="code"><pre><div class="line">SQL ：<span class="keyword">SELECT</span> i.* <span class="keyword">FROM</span> t_order o <span class="keyword">JOIN</span> t_order_item i <span class="keyword">ON</span> o.order_id=i.order_id <span class="keyword">WHERE</span> o.user_id=? <span class="keyword">AND</span> o.order_id=?</div></pre></td></tr></table></figure></p>
<table>
<thead>
<tr>
<th>literals</th>
<th>TokenType类</th>
<th>TokenType值</th>
<th>endPosition</th>
</tr>
</thead>
<tbody>
<tr>
<td>SELECT</td>
<td>DefaultKeyword</td>
<td>SELECT</td>
<td>6</td>
</tr>
<tr>
<td>i</td>
<td>Literals</td>
<td>IDENTIFIER</td>
<td>8</td>
</tr>
<tr>
<td>.</td>
<td>Symbol</td>
<td>DOT</td>
<td>9</td>
</tr>
<tr>
<td>*</td>
<td>Symbol</td>
<td>STAR</td>
<td>10</td>
</tr>
<tr>
<td>FROM</td>
<td>DefaultKeyword</td>
<td>FROM</td>
<td>15</td>
</tr>
<tr>
<td>t_order</td>
<td>Literals</td>
<td>IDENTIFIER</td>
<td>23</td>
</tr>
<tr>
<td>o</td>
<td>Literals</td>
<td>IDENTIFIER</td>
<td>25</td>
</tr>
<tr>
<td>JOIN</td>
<td>DefaultKeyword</td>
<td>JOIN</td>
<td>30</td>
</tr>
<tr>
<td>t_order_item</td>
<td>Literals</td>
<td>IDENTIFIER</td>
<td>43</td>
</tr>
<tr>
<td>i</td>
<td>Literals</td>
<td>IDENTIFIER</td>
<td>45</td>
</tr>
<tr>
<td>ON</td>
<td>DefaultKeyword</td>
<td>ON</td>
<td>48</td>
</tr>
<tr>
<td>o</td>
<td>Literals</td>
<td>IDENTIFIER</td>
<td>50</td>
</tr>
<tr>
<td>.</td>
<td>Symbol</td>
<td>DOT</td>
<td>51</td>
</tr>
<tr>
<td>order_id</td>
<td>Literals</td>
<td>IDENTIFIER</td>
<td>59</td>
</tr>
<tr>
<td>=</td>
<td>Symbol</td>
<td>EQ</td>
<td>60</td>
</tr>
<tr>
<td>i</td>
<td>Literals</td>
<td>IDENTIFIER</td>
<td>61</td>
</tr>
<tr>
<td>.</td>
<td>Symbol</td>
<td>DOT</td>
<td>62</td>
</tr>
<tr>
<td>order_id</td>
<td>Literals</td>
<td>IDENTIFIER</td>
<td>70</td>
</tr>
<tr>
<td>WHERE</td>
<td>DefaultKeyword</td>
<td>WHERE</td>
<td>76</td>
</tr>
<tr>
<td>o</td>
<td>Literals</td>
<td>IDENTIFIER</td>
<td>78</td>
</tr>
<tr>
<td>.</td>
<td>Symbol</td>
<td>DOT</td>
<td>79</td>
</tr>
<tr>
<td>user_id</td>
<td>Literals</td>
<td>IDENTIFIER</td>
<td>86</td>
</tr>
<tr>
<td>=</td>
<td>Symbol</td>
<td>EQ</td>
<td>87</td>
</tr>
<tr>
<td>?</td>
<td>Symbol</td>
<td>QUESTION</td>
<td>88</td>
</tr>
<tr>
<td>AND</td>
<td>DefaultKeyword</td>
<td>AND</td>
<td>92</td>
</tr>
<tr>
<td>o</td>
<td>Literals</td>
<td>IDENTIFIER</td>
<td>94</td>
</tr>
<tr>
<td>.</td>
<td>Symbol</td>
<td>DOT</td>
<td>95</td>
</tr>
<tr>
<td>order_id</td>
<td>Literals</td>
<td>IDENTIFIER</td>
<td>103</td>
</tr>
<tr>
<td>=</td>
<td>Symbol</td>
<td>EQ</td>
<td>104</td>
</tr>
<tr>
<td>?</td>
<td>Symbol</td>
<td>QUESTION</td>
<td>105</td>
</tr>
<tr>
<td></td>
<td>Assist</td>
<td>END</td>
<td>105</td>
</tr>
</tbody>
</table>
<p>眼尖的同学可能看到了 Tokenizer。对的，它是 Lexer 的好基佬，负责<strong>分词</strong>。</p>
<p><em>我们来总结下，<code>Lexer#nextToken()</code> 方法里，使用 <code>#skipIgnoredToken()</code> 方法跳过忽略的 Token，通过 <code>#isXXXX()</code> 方法判断好下一个 Token 的类型后，<strong>交给 Tokenizer 进行分词返回 Token</strong>。‼️此处可以考虑做个优化，不需要每次都 <code>new Tokenizer(...)</code> 出来，一个 Lexer 搭配一个 Tokenizer。</em></p>
<hr>
<p>由于不同数据库遵守 SQL 规范略有不同，所以不同的数据库对应不同的 Lexer。</p>
<p><img src="http://www.yunai.me/images/Sharding-JDBC/2017_07_23/02.png" alt=""></p>
<p>子 Lexer 通过重写方法实现自己独有的 SQL 语法。</p>
<h1>3. Token 词法标记</h1>
<p>上文我们已经看过 Token 的例子，一共有 3 个属性：</p>
<ul>
<li>TokenType type ：词法标记类型</li>
<li>String literals ：词法字面量标记</li>
<li>int endPosition ：<code>literals</code> 在 SQL 里的结束位置</li>
</ul>
<p>TokenType 词法标记类型，一共分成 4 个大类：</p>
<ul>
<li>DefaultKeyword ：词法关键词</li>
<li>Literals ：词法字面量标记</li>
<li>Symbol ：词法符号标记</li>
<li>Assist ：词法辅助标记</li>
</ul>
<p><img src="http://www.yunai.me/images/Sharding-JDBC/2017_07_23/03.png" alt=""></p>
<h2>3.1 DefaultKeyword 词法关键词</h2>
<p><img src="http://www.yunai.me/images/Sharding-JDBC/2017_07_23/04.png" alt=""></p>
<p><strong>不同数据库有自己独有的_词法关键词_，例如 MySQL 熟知的分页 Limit。</strong></p>
<p>我们以 MySQL 举个例子，当创建 MySQLLexer 时，会加载 DefaultKeyword 和 MySQLKeyword（ <em>OracleLexer、PostgreSQLLexer、SQLServerLexer 同 MySQLLexer</em> ）。核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// MySQLLexer.java</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MySQLLexer</span> <span class="keyword">extends</span> <span class="title">Lexer</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 字典</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Dictionary dictionary = <span class="keyword">new</span> Dictionary(MySQLKeyword.values());</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MySQLLexer</span><span class="params">(<span class="keyword">final</span> String input)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(input, dictionary);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Dictionary.java</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Dictionary</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 词法关键词Map</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Keyword&gt; tokens = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">1024</span>);</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dictionary</span><span class="params">(<span class="keyword">final</span> Keyword... dialectKeywords)</span> </span>&#123;</div><div class="line">        fill(dialectKeywords);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 装上默认词法关键词 + 方言词法关键词</div><div class="line">     * 不同的数据库有相同的默认词法关键词，有有不同的方言关键词</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> dialectKeywords 方言词法关键词</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fill</span><span class="params">(<span class="keyword">final</span> Keyword... dialectKeywords)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (DefaultKeyword each : DefaultKeyword.values()) &#123;</div><div class="line">            tokens.put(each.name(), each);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (Keyword each : dialectKeywords) &#123;</div><div class="line">            tokens.put(each.toString(), each);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Keyword 与 Literals.IDENTIFIER 是一起解析的，我们放在 Literals.IDENTIFIER 处一起分析。</p>
<h2>3.2 Literals 词法字面量标记</h2>
<p>Literals 词法字面量标记，一共分成 6 种：</p>
<ul>
<li>IDENTIFIER ：词法关键词</li>
<li>VARIABLE ：变量</li>
<li>CHARS ：字符串</li>
<li>HEX ：十六进制</li>
<li>INT ：整数</li>
<li>FLOAT ：浮点数</li>
</ul>
<h3>3.2.1 Literals.IDENTIFIER 词法关键词</h3>
<p>词法关键词。例如：表名，查询字段 等等。</p>
<p>解析 Literals.IDENTIFIER 与 Keyword 核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// Lexer.java</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isIdentifierBegin</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">return</span> isIdentifierBegin(getCurrentChar(<span class="number">0</span>));</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isIdentifierBegin</span><span class="params">(<span class="keyword">final</span> <span class="keyword">char</span> ch)</span> </span>&#123;</div><div class="line">   <span class="keyword">return</span> CharType.isAlphabet(ch) || <span class="string">'`'</span> == ch || <span class="string">'_'</span> == ch || <span class="string">'$'</span> == ch;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Tokenizer.java</span></div><div class="line"><span class="comment">/**</span></div><div class="line">* 扫描标识符.</div><div class="line">*</div><div class="line">* <span class="doctag">@return</span> 标识符标记</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> Token <span class="title">scanIdentifier</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="comment">// `字段`，例如：SELECT `id` FROM t_user 中的 `id`</span></div><div class="line">   <span class="keyword">if</span> (<span class="string">'`'</span> == charAt(offset)) &#123;</div><div class="line">       <span class="keyword">int</span> length = getLengthUntilTerminatedChar(<span class="string">'`'</span>);</div><div class="line">       <span class="keyword">return</span> <span class="keyword">new</span> Token(Literals.IDENTIFIER, input.substring(offset, offset + length), offset + length);</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">int</span> length = <span class="number">0</span>;</div><div class="line">   <span class="keyword">while</span> (isIdentifierChar(charAt(offset + length))) &#123;</div><div class="line">       length++;</div><div class="line">   &#125;</div><div class="line">   String literals = input.substring(offset, offset + length);</div><div class="line">   <span class="comment">// 处理 order / group 作为表名</span></div><div class="line">   <span class="keyword">if</span> (isAmbiguousIdentifier(literals)) &#123;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">new</span> Token(processAmbiguousIdentifier(offset + length, literals), literals, offset + length);</div><div class="line">   &#125;</div><div class="line">   <span class="comment">// 从 词法关键词 查找是否是 Keyword，如果是，则返回 Keyword，否则返回 Literals.IDENTIFIER</span></div><div class="line">   <span class="keyword">return</span> <span class="keyword">new</span> Token(dictionary.findTokenType(literals, Literals.IDENTIFIER), literals, offset + length);</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line">* 计算到结束字符的长度</div><div class="line">*</div><div class="line">* <span class="doctag">@see</span> #hasEscapeChar(char, int) 处理类似 SELECT a AS `b``c` FROM table。此处连续的 "``" 不是结尾，如果传递的是 "`" 会产生误判，所以加了这个判断</div><div class="line">* <span class="doctag">@param</span> terminatedChar 结束字符</div><div class="line">* <span class="doctag">@return</span> 长度</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getLengthUntilTerminatedChar</span><span class="params">(<span class="keyword">final</span> <span class="keyword">char</span> terminatedChar)</span> </span>&#123;</div><div class="line">   <span class="keyword">int</span> length = <span class="number">1</span>;</div><div class="line">   <span class="keyword">while</span> (terminatedChar != charAt(offset + length) || hasEscapeChar(terminatedChar, offset + length)) &#123;</div><div class="line">       <span class="keyword">if</span> (offset + length &gt;= input.length()) &#123;</div><div class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> UnterminatedCharException(terminatedChar);</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">if</span> (hasEscapeChar(terminatedChar, offset + length)) &#123;</div><div class="line">           length++;</div><div class="line">       &#125;</div><div class="line">       length++;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> length + <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line">* 是否是 Escape 字符</div><div class="line">*</div><div class="line">* <span class="doctag">@param</span> charIdentifier 字符</div><div class="line">* <span class="doctag">@param</span> offset 位置</div><div class="line">* <span class="doctag">@return</span> 是否</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">hasEscapeChar</span><span class="params">(<span class="keyword">final</span> <span class="keyword">char</span> charIdentifier, <span class="keyword">final</span> <span class="keyword">int</span> offset)</span> </span>&#123;</div><div class="line">   <span class="keyword">return</span> charIdentifier == charAt(offset) &amp;&amp; charIdentifier == charAt(offset + <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isIdentifierChar</span><span class="params">(<span class="keyword">final</span> <span class="keyword">char</span> ch)</span> </span>&#123;</div><div class="line">   <span class="keyword">return</span> CharType.isAlphabet(ch) || CharType.isDigital(ch) || <span class="string">'_'</span> == ch || <span class="string">'$'</span> == ch || <span class="string">'#'</span> == ch;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line">* 是否是引起歧义的标识符</div><div class="line">* 例如 "SELECT * FROM group"，此时 "group" 代表的是表名，而非词法关键词</div><div class="line">*</div><div class="line">* <span class="doctag">@param</span> literals 标识符</div><div class="line">* <span class="doctag">@return</span> 是否</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isAmbiguousIdentifier</span><span class="params">(<span class="keyword">final</span> String literals)</span> </span>&#123;</div><div class="line">   <span class="keyword">return</span> DefaultKeyword.ORDER.name().equalsIgnoreCase(literals) || DefaultKeyword.GROUP.name().equalsIgnoreCase(literals);</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line">* 获取引起歧义的标识符对应的词法标记类型</div><div class="line">*</div><div class="line">* <span class="doctag">@param</span> offset 位置</div><div class="line">* <span class="doctag">@param</span> literals 标识符</div><div class="line">* <span class="doctag">@return</span> 词法标记类型</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">private</span> TokenType <span class="title">processAmbiguousIdentifier</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> offset, <span class="keyword">final</span> String literals)</span> </span>&#123;</div><div class="line">   <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">   <span class="keyword">while</span> (CharType.isWhitespace(charAt(offset + i))) &#123;</div><div class="line">       i++;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">if</span> (DefaultKeyword.BY.name().equalsIgnoreCase(String.valueOf(<span class="keyword">new</span> <span class="keyword">char</span>[] &#123;charAt(offset + i), charAt(offset + i + <span class="number">1</span>)&#125;))) &#123;</div><div class="line">       <span class="keyword">return</span> dictionary.findTokenType(literals);</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> Literals.IDENTIFIER;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3>3.2.2 Literals.VARIABLE 变量</h3>
<p>变量。例如：<code>SELECT @@VERSION</code> 。</p>
<p>解析核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// Lexer.java</span></div><div class="line"><span class="comment">/**</span></div><div class="line">* 是否是 变量</div><div class="line">* MySQL 与 SQL Server 支持</div><div class="line">* </div><div class="line">* <span class="doctag">@see</span> Tokenizer#scanVariable()</div><div class="line">* <span class="doctag">@return</span> 是否</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isVariableBegin</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Tokenizer.java</span></div><div class="line"><span class="comment">/**</span></div><div class="line">* 扫描变量.</div><div class="line">* 在 MySQL 里，@代表用户变量；@@代表系统变量。</div><div class="line">* 在 SQLServer 里，有 @@。</div><div class="line">*</div><div class="line">* <span class="doctag">@return</span> 变量标记</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> Token <span class="title">scanVariable</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">int</span> length = <span class="number">1</span>;</div><div class="line">   <span class="keyword">if</span> (<span class="string">'@'</span> == charAt(offset + <span class="number">1</span>)) &#123;</div><div class="line">       length++;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">while</span> (isVariableChar(charAt(offset + length))) &#123;</div><div class="line">       length++;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> <span class="keyword">new</span> Token(Literals.VARIABLE, input.substring(offset, offset + length), offset + length);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3>3.2.3 Literals.CHARS 字符串</h3>
<p>字符串。例如：<code>SELECT &quot;123&quot;</code> 。</p>
<p>解析核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// Lexer.java</span></div><div class="line"><span class="comment">/**</span></div><div class="line">* 是否 N\</div><div class="line">* 目前 SQLServer 独有：在 SQL Server 中處理 Unicode 字串常數時，必需為所有的 Unicode 字串加上前置詞 N</div><div class="line">*</div><div class="line">* <span class="doctag">@see</span> Tokenizer#scanChars()</div><div class="line">* <span class="doctag">@return</span> 是否</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isNCharBegin</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">return</span> isSupportNChars() &amp;&amp; <span class="string">'N'</span> == getCurrentChar(<span class="number">0</span>) &amp;&amp; <span class="string">'\''</span> == getCurrentChar(<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isCharsBegin</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">return</span> <span class="string">'\''</span> == getCurrentChar(<span class="number">0</span>) || <span class="string">'\"'</span> == getCurrentChar(<span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Tokenizer.java</span></div><div class="line"><span class="comment">/**</span></div><div class="line">* 扫描字符串.</div><div class="line">*</div><div class="line">* <span class="doctag">@return</span> 字符串标记</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> Token <span class="title">scanChars</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">return</span> scanChars(charAt(offset));</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">private</span> Token <span class="title">scanChars</span><span class="params">(<span class="keyword">final</span> <span class="keyword">char</span> terminatedChar)</span> </span>&#123;</div><div class="line">   <span class="keyword">int</span> length = getLengthUntilTerminatedChar(terminatedChar);</div><div class="line">   <span class="keyword">return</span> <span class="keyword">new</span> Token(Literals.CHARS, input.substring(offset + <span class="number">1</span>, offset + length - <span class="number">1</span>), offset + length);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3>3.2.4 Literals.HEX 十六进制</h3>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// Lexer.java</span></div><div class="line"><span class="comment">/**</span></div><div class="line">* 是否是 十六进制</div><div class="line">*</div><div class="line">* <span class="doctag">@see</span> Tokenizer#scanHexDecimal()</div><div class="line">* <span class="doctag">@return</span> 是否</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isHexDecimalBegin</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">return</span> <span class="string">'0'</span> == getCurrentChar(<span class="number">0</span>) &amp;&amp; <span class="string">'x'</span> == getCurrentChar(<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Tokenizer.java</span></div><div class="line"><span class="comment">/**</span></div><div class="line">* 扫描十六进制数.</div><div class="line">*</div><div class="line">* <span class="doctag">@return</span> 十六进制数标记</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> Token <span class="title">scanHexDecimal</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">int</span> length = HEX_BEGIN_SYMBOL_LENGTH;</div><div class="line">   <span class="comment">// 负数</span></div><div class="line">   <span class="keyword">if</span> (<span class="string">'-'</span> == charAt(offset + length)) &#123;</div><div class="line">       length++;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">while</span> (isHex(charAt(offset + length))) &#123;</div><div class="line">       length++;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> <span class="keyword">new</span> Token(Literals.HEX, input.substring(offset, offset + length), offset + length);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3>3.2.5 Literals.INT 整数</h3>
<p>整数。例如：<code>SELECT * FROM t_user WHERE id = 1</code>。</p>
<p>Literals.INT 与 Literals.FLOAT 是一起解析的，我们放在 Literals.FLOAT 处一起分析。</p>
<h3>3.2.6 Literals.FLOAT 浮点数</h3>
<p>浮点数。例如：<code>SELECT * FROM t_user WHERE id = 1.0</code>。
浮点数包含几种：&quot;1.0&quot;，&quot;1.0F&quot;，&quot;7.823E5&quot;（科学计数法）。</p>
<p>解析核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// Lexer.java</span></div><div class="line"><span class="comment">/**</span></div><div class="line">* 是否是 数字</div><div class="line">* '-' 需要特殊处理。".2" 被处理成省略0的小数，"-.2" 不能被处理成省略的小数，否则会出问题。</div><div class="line">* 例如说，"SELECT a-.2" 处理的结果是 "SELECT" / "a" / "-" / ".2"</div><div class="line">*</div><div class="line">* <span class="doctag">@return</span> 是否</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isNumberBegin</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">return</span> CharType.isDigital(getCurrentChar(<span class="number">0</span>)) <span class="comment">// 数字</span></div><div class="line">           || (<span class="string">'.'</span> == getCurrentChar(<span class="number">0</span>) &amp;&amp; CharType.isDigital(getCurrentChar(<span class="number">1</span>)) &amp;&amp; !isIdentifierBegin(getCurrentChar(-<span class="number">1</span>)) <span class="comment">// 浮点数</span></div><div class="line">           || (<span class="string">'-'</span> == getCurrentChar(<span class="number">0</span>) &amp;&amp; (<span class="string">'.'</span> == getCurrentChar(<span class="number">0</span>) || CharType.isDigital(getCurrentChar(<span class="number">1</span>))))); <span class="comment">// 负数</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Tokenizer.java</span></div><div class="line"><span class="comment">/**</span></div><div class="line">* 扫描数字.</div><div class="line">* 解析数字的结果会有两种：整数 和 浮点数.</div><div class="line">*</div><div class="line">* <span class="doctag">@return</span> 数字标记</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> Token <span class="title">scanNumber</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">int</span> length = <span class="number">0</span>;</div><div class="line">   <span class="comment">// 负数</span></div><div class="line">   <span class="keyword">if</span> (<span class="string">'-'</span> == charAt(offset + length)) &#123;</div><div class="line">       length++;</div><div class="line">   &#125;</div><div class="line">   <span class="comment">// 浮点数</span></div><div class="line">   length += getDigitalLength(offset + length);</div><div class="line">   <span class="keyword">boolean</span> isFloat = <span class="keyword">false</span>;</div><div class="line">   <span class="keyword">if</span> (<span class="string">'.'</span> == charAt(offset + length)) &#123;</div><div class="line">       isFloat = <span class="keyword">true</span>;</div><div class="line">       length++;</div><div class="line">       length += getDigitalLength(offset + length);</div><div class="line">   &#125;</div><div class="line">   <span class="comment">// 科学计数表示，例如：SELECT 7.823E5</span></div><div class="line">   <span class="keyword">if</span> (isScientificNotation(offset + length)) &#123;</div><div class="line">       isFloat = <span class="keyword">true</span>;</div><div class="line">       length++;</div><div class="line">       <span class="keyword">if</span> (<span class="string">'+'</span> == charAt(offset + length) || <span class="string">'-'</span> == charAt(offset + length)) &#123;</div><div class="line">           length++;</div><div class="line">       &#125;</div><div class="line">       length += getDigitalLength(offset + length);</div><div class="line">   &#125;</div><div class="line">   <span class="comment">// 浮点数，例如：SELECT 1.333F</span></div><div class="line">   <span class="keyword">if</span> (isBinaryNumber(offset + length)) &#123;</div><div class="line">       isFloat = <span class="keyword">true</span>;</div><div class="line">       length++;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> <span class="keyword">new</span> Token(isFloat ? Literals.FLOAT : Literals.INT, input.substring(offset, offset + length), offset + length);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里要特别注意下：<strong>&quot;-&quot;</strong>。在数字表达实例，可以判定为 负号 和 减号（不考虑科学计数法）。</p>
<ul>
<li>&quot;.2&quot;  解析结果是 &quot;.2&quot;</li>
<li>&quot;-.2&quot; 解析结果不能是 &quot;-.2&quot;，而是 &quot;-&quot; 和 &quot;.2&quot;。</li>
</ul>
<h2>3.3 Symbol 词法符号标记</h2>
<p>词法符号标记。例如：&quot;{&quot;, &quot;}&quot;, &quot;&gt;=&quot; 等等。</p>
<p>解析核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// Lexer.java</span></div><div class="line"><span class="comment">/**</span></div><div class="line">* 是否是 符号</div><div class="line">*</div><div class="line">* <span class="doctag">@see</span> Tokenizer#scanSymbol()</div><div class="line">* <span class="doctag">@return</span> 是否</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isSymbolBegin</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">return</span> CharType.isSymbol(getCurrentChar(<span class="number">0</span>));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// CharType.java</span></div><div class="line"><span class="comment">/**</span></div><div class="line">* 判断是否为符号.</div><div class="line">*</div><div class="line">* <span class="doctag">@param</span> ch 待判断的字符</div><div class="line">* <span class="doctag">@return</span> 是否为符号</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isSymbol</span><span class="params">(<span class="keyword">final</span> <span class="keyword">char</span> ch)</span> </span>&#123;</div><div class="line">   <span class="keyword">return</span> <span class="string">'('</span> == ch || <span class="string">')'</span> == ch || <span class="string">'['</span> == ch || <span class="string">']'</span> == ch || <span class="string">'&#123;'</span> == ch || <span class="string">'&#125;'</span> == ch || <span class="string">'+'</span> == ch || <span class="string">'-'</span> == ch || <span class="string">'*'</span> == ch || <span class="string">'/'</span> == ch || <span class="string">'%'</span> == ch || <span class="string">'^'</span> == ch || <span class="string">'='</span> == ch</div><div class="line">           || <span class="string">'&gt;'</span> == ch || <span class="string">'&lt;'</span> == ch || <span class="string">'~'</span> == ch || <span class="string">'!'</span> == ch || <span class="string">'?'</span> == ch || <span class="string">'&amp;'</span> == ch || <span class="string">'|'</span> == ch || <span class="string">'.'</span> == ch || <span class="string">':'</span> == ch || <span class="string">'#'</span> == ch || <span class="string">','</span> == ch || <span class="string">';'</span> == ch;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Tokenizer.java</span></div><div class="line"><span class="comment">/**</span></div><div class="line">* 扫描符号.</div><div class="line">*</div><div class="line">* <span class="doctag">@return</span> 符号标记</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> Token <span class="title">scanSymbol</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">int</span> length = <span class="number">0</span>;</div><div class="line">   <span class="keyword">while</span> (CharType.isSymbol(charAt(offset + length))) &#123;</div><div class="line">       length++;</div><div class="line">   &#125;</div><div class="line">   String literals = input.substring(offset, offset + length);</div><div class="line">   <span class="comment">// 倒序遍历，查询符合条件的 符号。例如 literals = ";;"，会是拆分成两个 ";"。如果基于正序，literals = "&lt;="，会被解析成 "&lt;" + "="。</span></div><div class="line">   Symbol symbol;</div><div class="line">   <span class="keyword">while</span> (<span class="keyword">null</span> == (symbol = Symbol.literalsOf(literals))) &#123;</div><div class="line">       literals = input.substring(offset, offset + --length);</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> <span class="keyword">new</span> Token(symbol, literals, offset + length);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2>3.4 Assist 词法辅助标记</h2>
<p>Assist 词法辅助标记，一共分成 2 种：</p>
<ul>
<li>END ：分析结束</li>
<li>ERROR ：分析错误。</li>
</ul>
<h1>4. 彩蛋</h1>
<p>老铁，是不是比想象中简单一些？！继续加油写 Parser 相关的文章！来一波微信公众号关注吧。</p>
<hr>
<p><strong>Sharding-JDBC 正在收集使用公司名单：<a href="https://github.com/dangdangdotcom/sharding-jdbc/issues/234" rel="external nofollow noopener noreferrer" target="_blank">传送门</a>。🙂 你的登记，会让更多人参与和使用 Sharding-JDBC。Sharding-JDBC 也会因此，能够覆盖更广的场景。登记吧，少年！</strong></p>
<hr>
<p><strong>我创建了一个微信群【源码圈】，希望和大家分享交流读源码的经验。<br>
读源码先难后易，掌握方法后，可以做更有深度的学习。<br>
而且掌握方法并不难噢。<br>
加群方式：微信公众号发送关键字【qun】。</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://www.yunai.me/images/common/wechat_mp_2017_07_31.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;🙂🙂🙂关注**微信公众号：【芋艿的后端小屋】**有福利：&lt;/p&gt;
&lt;ol
    
    </summary>
    
      <category term="Sharding-JDBC" scheme="http://www.yunai.me/categories/Sharding-JDBC/"/>
    
    
  </entry>
  
  <entry>
    <title>MyCAT 源码分析  —— SQL ON MongoDB</title>
    <link href="http://www.yunai.me/MyCAT/connect-mongodb/"/>
    <id>http://www.yunai.me/MyCAT/connect-mongodb/</id>
    <published>2017-07-18T16:00:00.000Z</published>
    <updated>2017-07-31T12:30:52.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://www.yunai.me/images/common/wechat_mp_2017_07_31.jpg" alt=""></p>
<blockquote>
<p>🙂🙂🙂关注**微信公众号：【芋艿的后端小屋】**有福利：</p>
<ol>
<li>RocketMQ / MyCAT / Sharding-JDBC <strong>所有</strong>源码分析文章列表</li>
<li>RocketMQ / MyCAT / Sharding-JDBC <strong>中文注释源码 GitHub 地址</strong></li>
<li>您对于源码的疑问每条留言<strong>都</strong>将得到<strong>认真</strong>回复。<strong>甚至不知道如何读源码也可以请教噢</strong>。</li>
<li><strong>新的</strong>源码解析文章<strong>实时</strong>收到通知。<strong>每周更新一篇左右</strong>。</li>
<li><strong>认真的</strong>源码交流微信群。</li>
</ol>
</blockquote>
<hr>
<ul>
<li><a href="#">1. 概述</a></li>
<li><a href="#">2. 主流程</a></li>
<li><a href="#">3. 查询操作</a></li>
<li><a href="#">4. 插入操作</a></li>
<li><a href="#">5. 彩蛋</a></li>
</ul>
<hr>
<h1>1. 概述</h1>
<p>可能你在看到这个标题会小小的吃惊，MyCAT 能使用 MongoDB 做数据节点。是的，没错，确实可以。<br>
吼吼吼，让我们开启这段神奇的“旅途”。</p>
<p>本文主要分成四部分：</p>
<ol>
<li>总体流程，让你有个整体的认识</li>
<li>查询操作</li>
<li>插入操作</li>
<li>彩蛋，😈彩蛋，🙂彩蛋</li>
</ol>
<p>建议你看过这两篇文章（<em>非必须</em>）：</p>
<ol>
<li><a href="http://www.yunai.me/MyCAT/single-db-single-table-insert/?self">《MyCAT 源码分析 —— 【单库单表】插入》</a></li>
<li><a href="http://www.yunai.me/MyCAT/single-db-single-table-select/?self">《MyCAT 源码分析 —— 【单库单表】查询》</a></li>
</ol>
<h1>2. 主流程</h1>
<p><img src="http://www.yunai.me/images/MyCAT/2017_07_19/01.png" alt=""></p>
<ol>
<li><code>MyCAT Server</code> 接收 <code>MySQL Client</code> 基于 <strong>MySQL协议</strong> 的请求，翻译 <strong>SQL</strong> 成 <strong>MongoDB操作</strong> 发送给 <code>MongoDB Server</code>。</li>
<li><code>MyCAT Server</code> 接收 <code>MongoDB Server</code> 返回的 <strong>MongoDB数据</strong>，翻译成 <code>MySQL数据结果</code> 返回给 <code>MySQL Client</code>。</li>
</ol>
<p>这样一看，MyCAT 连接 MongoDB 是不是少神奇一点列。</p>
<hr>
<p><img src="http://www.yunai.me/images/MyCAT/2017_07_19/02.png" alt=""></p>
<blockquote>
<p>Java数据库连接，（Java Database Connectivity，简称JDBC）是Java语言中用来规范客户端程序如何来访问数据库的应用程序接口，提供了诸如查询和更新数据库中数据的方法。JDBC也是Sun Microsystems的商标。JDBC是面向关系型数据库的。</p>
</blockquote>
<p>MyCAT 使用 JDBC 规范，抽象了对 MongoDB 的访问。通过这样的方式，MyCAT 也抽象了 SequoiaDB 的访问。可能这样说法有些抽象，看个类图压压惊。</p>
<p><img src="http://www.yunai.me/images/MyCAT/2017_07_19/03.png" alt=""></p>
<p>是不是熟悉的味道。<strong>不得不说 JDBC 规范的精妙。</strong></p>
<h1>3. 查询操作</h1>
<p><figure class="highlight sql"><table><tr><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>, <span class="keyword">name</span> <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> <span class="keyword">name</span> &gt; <span class="string">''</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> _id <span class="keyword">DESC</span>;</div></pre></td></tr></table></figure></p>
<p><img src="http://www.yunai.me/images/MyCAT/2017_07_19/04.png" alt=""></p>
<p>看顺序图已经很方便的理解整体逻辑，我就不多废话啦。我们来看几个核心的代码逻辑。</p>
<p><strong>1、查询 MongoDB</strong></p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// MongoSQLParser.java</span></div><div class="line"><span class="function"><span class="keyword">public</span> MongoData <span class="title">query</span><span class="params">()</span> <span class="keyword">throws</span> MongoSQLException </span>&#123;</div><div class="line">   <span class="keyword">if</span> (!(statement <span class="keyword">instanceof</span> SQLSelectStatement)) &#123;</div><div class="line">       <span class="comment">//return null;</span></div><div class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"not a query sql statement"</span>);</div><div class="line">   &#125;</div><div class="line">   MongoData mongo = <span class="keyword">new</span> MongoData();</div><div class="line">   DBCursor c = <span class="keyword">null</span>;</div><div class="line">   SQLSelectStatement selectStmt = (SQLSelectStatement) statement;</div><div class="line">   SQLSelectQuery sqlSelectQuery = selectStmt.getSelect().getQuery();</div><div class="line">   <span class="keyword">int</span> icount = <span class="number">0</span>;</div><div class="line">   <span class="keyword">if</span> (sqlSelectQuery <span class="keyword">instanceof</span> MySqlSelectQueryBlock) &#123;</div><div class="line">       MySqlSelectQueryBlock mysqlSelectQuery = (MySqlSelectQueryBlock) selectStmt.getSelect().getQuery();</div><div class="line"></div><div class="line">       BasicDBObject fields = <span class="keyword">new</span> BasicDBObject();</div><div class="line"></div><div class="line">       <span class="comment">// 显示（返回）的字段</span></div><div class="line">       <span class="keyword">for</span> (SQLSelectItem item : mysqlSelectQuery.getSelectList()) &#123;</div><div class="line">           <span class="comment">//System.out.println(item.toString());</span></div><div class="line">           <span class="keyword">if</span> (!(item.getExpr() <span class="keyword">instanceof</span> SQLAllColumnExpr)) &#123;</div><div class="line">               <span class="keyword">if</span> (item.getExpr() <span class="keyword">instanceof</span> SQLAggregateExpr) &#123;</div><div class="line">                   SQLAggregateExpr expr = (SQLAggregateExpr) item.getExpr();</div><div class="line">                   <span class="keyword">if</span> (expr.getMethodName().equals(<span class="string">"COUNT"</span>)) &#123; <span class="comment">// TODO 待读：count（*）</span></div><div class="line">                       icount = <span class="number">1</span>;</div><div class="line">                       mongo.setField(getExprFieldName(expr), Types.BIGINT);</div><div class="line">                   &#125;</div><div class="line">                   fields.put(getExprFieldName(expr), <span class="number">1</span>);</div><div class="line">               &#125; <span class="keyword">else</span> &#123;</div><div class="line">                   fields.put(getFieldName(item), <span class="number">1</span>);</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line"></div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="comment">// 表名</span></div><div class="line">       SQLTableSource table = mysqlSelectQuery.getFrom();</div><div class="line">       DBCollection coll = <span class="keyword">this</span>._db.getCollection(table.toString());</div><div class="line">       mongo.setTable(table.toString());</div><div class="line"></div><div class="line">       <span class="comment">// WHERE</span></div><div class="line">       SQLExpr expr = mysqlSelectQuery.getWhere();</div><div class="line">       DBObject query = parserWhere(expr);</div><div class="line"></div><div class="line">       <span class="comment">// GROUP BY</span></div><div class="line">       SQLSelectGroupByClause groupby = mysqlSelectQuery.getGroupBy();</div><div class="line">       BasicDBObject gbkey = <span class="keyword">new</span> BasicDBObject();</div><div class="line">       <span class="keyword">if</span> (groupby != <span class="keyword">null</span>) &#123;</div><div class="line">           <span class="keyword">for</span> (SQLExpr gbexpr : groupby.getItems()) &#123;</div><div class="line">               <span class="keyword">if</span> (gbexpr <span class="keyword">instanceof</span> SQLIdentifierExpr) &#123;</div><div class="line">                   String name = ((SQLIdentifierExpr) gbexpr).getName();</div><div class="line">                   gbkey.put(name, Integer.valueOf(<span class="number">1</span>));</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">           icount = <span class="number">2</span>;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="comment">// SKIP / LIMIT</span></div><div class="line">       <span class="keyword">int</span> limitoff = <span class="number">0</span>;</div><div class="line">       <span class="keyword">int</span> limitnum = <span class="number">0</span>;</div><div class="line">       <span class="keyword">if</span> (mysqlSelectQuery.getLimit() != <span class="keyword">null</span>) &#123;</div><div class="line">           limitoff = getSQLExprToInt(mysqlSelectQuery.getLimit().getOffset());</div><div class="line">           limitnum = getSQLExprToInt(mysqlSelectQuery.getLimit().getRowCount());</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">if</span> (icount == <span class="number">1</span>) &#123; <span class="comment">// COUNT（*）</span></div><div class="line">           mongo.setCount(coll.count(query));</div><div class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (icount == <span class="number">2</span>) &#123; <span class="comment">// MapReduce</span></div><div class="line">           BasicDBObject initial = <span class="keyword">new</span> BasicDBObject();</div><div class="line">           initial.put(<span class="string">"num"</span>, <span class="number">0</span>);</div><div class="line">           String reduce = <span class="string">"function (obj, prev) &#123; "</span> + <span class="string">"  prev.num++&#125;"</span>;</div><div class="line">           mongo.setGrouyBy(coll.group(gbkey, query, initial, reduce));</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           <span class="keyword">if</span> ((limitoff &gt; <span class="number">0</span>) || (limitnum &gt; <span class="number">0</span>)) &#123;</div><div class="line">               c = coll.find(query, fields).skip(limitoff).limit(limitnum);</div><div class="line">           &#125; <span class="keyword">else</span> &#123;</div><div class="line">               c = coll.find(query, fields);</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           <span class="comment">// order by</span></div><div class="line">           SQLOrderBy orderby = mysqlSelectQuery.getOrderBy();</div><div class="line">           <span class="keyword">if</span> (orderby != <span class="keyword">null</span>) &#123;</div><div class="line">               BasicDBObject order = <span class="keyword">new</span> BasicDBObject();</div><div class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; orderby.getItems().size(); i++) &#123;</div><div class="line">                   SQLSelectOrderByItem orderitem = orderby.getItems().get(i);</div><div class="line">                   order.put(orderitem.getExpr().toString(), getSQLExprToAsc(orderitem.getType()));</div><div class="line">               &#125;</div><div class="line">               c.sort(order);</div><div class="line">               <span class="comment">// System.out.println(order);</span></div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">       mongo.setCursor(c);</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> mongo;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>2、查询条件</strong></p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// MongoSQLParser.java</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parserWhere</span><span class="params">(SQLExpr aexpr, BasicDBObject o)</span> </span>&#123;</div><div class="line">   <span class="keyword">if</span> (aexpr <span class="keyword">instanceof</span> SQLBinaryOpExpr) &#123;</div><div class="line">       SQLBinaryOpExpr expr = (SQLBinaryOpExpr) aexpr;</div><div class="line">       SQLExpr exprL = expr.getLeft();</div><div class="line">       <span class="keyword">if</span> (!(exprL <span class="keyword">instanceof</span> SQLBinaryOpExpr)) &#123;</div><div class="line">           <span class="keyword">if</span> (expr.getOperator().getName().equals(<span class="string">"="</span>)) &#123;</div><div class="line">               o.put(exprL.toString(), getExpValue(expr.getRight()));</div><div class="line">           &#125; <span class="keyword">else</span> &#123;</div><div class="line">               String op = <span class="string">""</span>;</div><div class="line">               <span class="keyword">if</span> (expr.getOperator().getName().equals(<span class="string">"&lt;"</span>)) &#123;</div><div class="line">                   op = <span class="string">"$lt"</span>;</div><div class="line">               &#125; <span class="keyword">else</span> <span class="keyword">if</span> (expr.getOperator().getName().equals(<span class="string">"&lt;="</span>)) &#123;</div><div class="line">                   op = <span class="string">"$lte"</span>;</div><div class="line">               &#125; <span class="keyword">else</span> <span class="keyword">if</span> (expr.getOperator().getName().equals(<span class="string">"&gt;"</span>)) &#123;</div><div class="line">                   op = <span class="string">"$gt"</span>;</div><div class="line">               &#125; <span class="keyword">else</span> <span class="keyword">if</span> (expr.getOperator().getName().equals(<span class="string">"&gt;="</span>)) &#123;</div><div class="line">                   op = <span class="string">"$gte"</span>;</div><div class="line">               &#125; <span class="keyword">else</span> <span class="keyword">if</span> (expr.getOperator().getName().equals(<span class="string">"!="</span>)) &#123;</div><div class="line">                   op = <span class="string">"$ne"</span>;</div><div class="line">               &#125; <span class="keyword">else</span> <span class="keyword">if</span> (expr.getOperator().getName().equals(<span class="string">"&lt;&gt;"</span>)) &#123;</div><div class="line">                   op = <span class="string">"$ne"</span>;</div><div class="line">               &#125;</div><div class="line">               parserDBObject(o, exprL.toString(), op, getExpValue(expr.getRight()));</div><div class="line">           &#125;</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           <span class="keyword">if</span> (expr.getOperator().getName().equals(<span class="string">"AND"</span>)) &#123;</div><div class="line">               parserWhere(exprL, o);</div><div class="line">               parserWhere(expr.getRight(), o);</div><div class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (expr.getOperator().getName().equals(<span class="string">"OR"</span>)) &#123;</div><div class="line">               orWhere(exprL, expr.getRight(), o);</div><div class="line">           &#125; <span class="keyword">else</span> &#123;</div><div class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Can't identify the operation of  of where"</span>);</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">orWhere</span><span class="params">(SQLExpr exprL, SQLExpr exprR, BasicDBObject ob)</span> </span>&#123;</div><div class="line">   BasicDBObject xo = <span class="keyword">new</span> BasicDBObject();</div><div class="line">   BasicDBObject yo = <span class="keyword">new</span> BasicDBObject();</div><div class="line">   parserWhere(exprL, xo);</div><div class="line">   parserWhere(exprR, yo);</div><div class="line">   ob.put(<span class="string">"$or"</span>, <span class="keyword">new</span> Object[]&#123;xo, yo&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>3、解析 MongoDB 数据</strong></p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// MongoResultSet.java</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">MongoResultSet</span><span class="params">(MongoData mongo, String schema)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">   <span class="keyword">this</span>._cursor = mongo.getCursor();</div><div class="line">   <span class="keyword">this</span>._schema = schema;</div><div class="line">   <span class="keyword">this</span>._table = mongo.getTable();</div><div class="line">   <span class="keyword">this</span>.isSum = mongo.getCount() &gt; <span class="number">0</span>;</div><div class="line">   <span class="keyword">this</span>._sum = mongo.getCount();</div><div class="line">   <span class="keyword">this</span>.isGroupBy = mongo.getType();</div><div class="line"></div><div class="line">   <span class="keyword">if</span> (<span class="keyword">this</span>.isGroupBy) &#123;</div><div class="line">       dblist = mongo.getGrouyBys();</div><div class="line">       <span class="keyword">this</span>.isSum = <span class="keyword">true</span>;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">if</span> (<span class="keyword">this</span>._cursor != <span class="keyword">null</span>) &#123;</div><div class="line">       select = _cursor.getKeysWanted().keySet().toArray(<span class="keyword">new</span> String[<span class="number">0</span>]);</div><div class="line">       <span class="comment">// 解析 fields</span></div><div class="line">       <span class="keyword">if</span> (<span class="keyword">this</span>._cursor.hasNext()) &#123;</div><div class="line">           _cur = _cursor.next();</div><div class="line">           <span class="keyword">if</span> (_cur != <span class="keyword">null</span>) &#123;</div><div class="line">               <span class="keyword">if</span> (select.length == <span class="number">0</span>) &#123;</div><div class="line">                   SetFields(_cur.keySet());</div><div class="line">               &#125;</div><div class="line">               _row = <span class="number">1</span>;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">       <span class="comment">// 设置 fields 类型</span></div><div class="line">       <span class="keyword">if</span> (select.length == <span class="number">0</span>) &#123;</div><div class="line">           select = <span class="keyword">new</span> String[]&#123;<span class="string">"_id"</span>&#125;;</div><div class="line">           SetFieldType(<span class="keyword">true</span>);</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           SetFieldType(<span class="keyword">false</span>);</div><div class="line">       &#125;</div><div class="line">   &#125; <span class="keyword">else</span> &#123;</div><div class="line">       SetFields(mongo.getFields().keySet());<span class="comment">//new String[]&#123;"COUNT(*)"&#125;;</span></div><div class="line">       SetFieldType(mongo.getFields());</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>当使用 <code>SELECT *</code> 查询字段时，fields 使用第一条数据返回的 fields。即使，后面的数据有其他 fields，也不返回。</li>
</ul>
<p><strong>4、返回数据给 MySQL Client</strong></p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// JDBCConnection.java</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ouputResultSet</span><span class="params">(ServerConnection sc, String sql)</span></span></div><div class="line">       <span class="keyword">throws</span> SQLException &#123;</div><div class="line">   ResultSet rs = <span class="keyword">null</span>;</div><div class="line">   Statement stmt = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">   <span class="keyword">try</span> &#123;</div><div class="line">       stmt = con.createStatement();</div><div class="line">       rs = stmt.executeQuery(sql);</div><div class="line"></div><div class="line">       <span class="comment">// header</span></div><div class="line">       List&lt;FieldPacket&gt; fieldPks = <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line">       ResultSetUtil.resultSetToFieldPacket(sc.getCharset(), fieldPks, rs, <span class="keyword">this</span>.isSpark);</div><div class="line">       <span class="keyword">int</span> colunmCount = fieldPks.size();</div><div class="line">       ByteBuffer byteBuf = sc.allocate();</div><div class="line">       ResultSetHeaderPacket headerPkg = <span class="keyword">new</span> ResultSetHeaderPacket();</div><div class="line">       headerPkg.fieldCount = fieldPks.size();</div><div class="line">       headerPkg.packetId = ++packetId;</div><div class="line">       byteBuf = headerPkg.write(byteBuf, sc, <span class="keyword">true</span>);</div><div class="line">       byteBuf.flip();</div><div class="line">       <span class="keyword">byte</span>[] header = <span class="keyword">new</span> <span class="keyword">byte</span>[byteBuf.limit()];</div><div class="line">       byteBuf.get(header);</div><div class="line">       byteBuf.clear();</div><div class="line">       List&lt;<span class="keyword">byte</span>[]&gt; fields = <span class="keyword">new</span> ArrayList&lt;<span class="keyword">byte</span>[]&gt;(fieldPks.size());</div><div class="line">       <span class="keyword">for</span> (FieldPacket curField : fieldPks) &#123;</div><div class="line">           curField.packetId = ++packetId;</div><div class="line">           byteBuf = curField.write(byteBuf, sc, <span class="keyword">false</span>);</div><div class="line">           byteBuf.flip();</div><div class="line">           <span class="keyword">byte</span>[] field = <span class="keyword">new</span> <span class="keyword">byte</span>[byteBuf.limit()];</div><div class="line">           byteBuf.get(field);</div><div class="line">           byteBuf.clear();</div><div class="line">           fields.add(field);</div><div class="line">       &#125;</div><div class="line">       <span class="comment">// header eof</span></div><div class="line">       EOFPacket eofPckg = <span class="keyword">new</span> EOFPacket();</div><div class="line">       eofPckg.packetId = ++packetId;</div><div class="line">       byteBuf = eofPckg.write(byteBuf, sc, <span class="keyword">false</span>);</div><div class="line">       byteBuf.flip();</div><div class="line">       <span class="keyword">byte</span>[] eof = <span class="keyword">new</span> <span class="keyword">byte</span>[byteBuf.limit()];</div><div class="line">       byteBuf.get(eof);</div><div class="line">       byteBuf.clear();</div><div class="line">       <span class="keyword">this</span>.respHandler.fieldEofResponse(header, fields, eof, <span class="keyword">this</span>);</div><div class="line"></div><div class="line">       <span class="comment">// row</span></div><div class="line">       <span class="keyword">while</span> (rs.next()) &#123;</div><div class="line">           RowDataPacket curRow = <span class="keyword">new</span> RowDataPacket(colunmCount);</div><div class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; colunmCount; i++) &#123;</div><div class="line">               <span class="keyword">int</span> j = i + <span class="number">1</span>;</div><div class="line">               <span class="keyword">if</span> (MysqlDefs.isBianry((<span class="keyword">byte</span>) fieldPks.get(i).type)) &#123;</div><div class="line">                   curRow.add(rs.getBytes(j));</div><div class="line">               &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fieldPks.get(i).type == MysqlDefs.FIELD_TYPE_DECIMAL ||</div><div class="line">                       fieldPks.get(i).type == (MysqlDefs.FIELD_TYPE_NEW_DECIMAL - <span class="number">256</span>)) &#123; <span class="comment">// field type is unsigned byte</span></div><div class="line">                   <span class="comment">// ensure that do not use scientific notation format</span></div><div class="line">                   BigDecimal val = rs.getBigDecimal(j);</div><div class="line">                   curRow.add(StringUtil.encode(val != <span class="keyword">null</span> ? val.toPlainString() : <span class="keyword">null</span>, sc.getCharset()));</div><div class="line">               &#125; <span class="keyword">else</span> &#123;</div><div class="line">                   curRow.add(StringUtil.encode(rs.getString(j), sc.getCharset()));</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">           curRow.packetId = ++packetId;</div><div class="line">           byteBuf = curRow.write(byteBuf, sc, <span class="keyword">false</span>);</div><div class="line">           byteBuf.flip();</div><div class="line">           <span class="keyword">byte</span>[] row = <span class="keyword">new</span> <span class="keyword">byte</span>[byteBuf.limit()];</div><div class="line">           byteBuf.get(row);</div><div class="line">           byteBuf.clear();</div><div class="line">           <span class="keyword">this</span>.respHandler.rowResponse(row, <span class="keyword">this</span>);</div><div class="line">       &#125;</div><div class="line">       fieldPks.clear();</div><div class="line">       <span class="comment">// row eof</span></div><div class="line">       eofPckg = <span class="keyword">new</span> EOFPacket();</div><div class="line">       eofPckg.packetId = ++packetId;</div><div class="line">       byteBuf = eofPckg.write(byteBuf, sc, <span class="keyword">false</span>);</div><div class="line">       byteBuf.flip();</div><div class="line">       eof = <span class="keyword">new</span> <span class="keyword">byte</span>[byteBuf.limit()];</div><div class="line">       byteBuf.get(eof);</div><div class="line">       sc.recycle(byteBuf);</div><div class="line">       <span class="keyword">this</span>.respHandler.rowEofResponse(eof, <span class="keyword">this</span>);</div><div class="line">   &#125; <span class="keyword">finally</span> &#123;</div><div class="line">       <span class="keyword">if</span> (rs != <span class="keyword">null</span>) &#123;</div><div class="line">           <span class="keyword">try</span> &#123;</div><div class="line">               rs.close();</div><div class="line">           &#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">if</span> (stmt != <span class="keyword">null</span>) &#123;</div><div class="line">           <span class="keyword">try</span> &#123;</div><div class="line">               stmt.close();</div><div class="line">           &#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// MongoResultSet.java</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getString</span><span class="params">(String columnLabel)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">   Object x = getObject(columnLabel);</div><div class="line">   <span class="keyword">if</span> (x == <span class="keyword">null</span>) &#123;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> x.toString();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>当返回字段值是 Object 时，返回该对象.toString()。例如：</li>
</ul>
<p><figure class="highlight"><table><tr><td class="code"><pre><div class="line">mysql&gt; select * from user order by _id asc;</div><div class="line">+--------------------------+------+-------------------------------+</div><div class="line">| _id                      | name | profile                       |</div><div class="line">+--------------------------+------+-------------------------------+</div><div class="line">| 1                        | 123  | &#123; "age" : 1 , "height" : 100&#125; |</div></pre></td></tr></table></figure></p>
<h1>4. 插入操作</h1>
<p><img src="http://www.yunai.me/images/MyCAT/2017_07_19/05.png" alt=""></p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// MongoSQLParser.java</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">executeUpdate</span><span class="params">()</span> <span class="keyword">throws</span> MongoSQLException </span>&#123;</div><div class="line">   <span class="keyword">if</span> (statement <span class="keyword">instanceof</span> SQLInsertStatement) &#123;</div><div class="line">       <span class="keyword">return</span> InsertData((SQLInsertStatement) statement);</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">if</span> (statement <span class="keyword">instanceof</span> SQLUpdateStatement) &#123;</div><div class="line">       <span class="keyword">return</span> UpData((SQLUpdateStatement) statement);</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">if</span> (statement <span class="keyword">instanceof</span> SQLDropTableStatement) &#123;</div><div class="line">       <span class="keyword">return</span> dropTable((SQLDropTableStatement) statement);</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">if</span> (statement <span class="keyword">instanceof</span> SQLDeleteStatement) &#123;</div><div class="line">       <span class="keyword">return</span> DeleteDate((SQLDeleteStatement) statement);</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">if</span> (statement <span class="keyword">instanceof</span> SQLCreateTableStatement) &#123;</div><div class="line">       <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">InsertData</span><span class="params">(SQLInsertStatement state)</span> </span>&#123;</div><div class="line">   <span class="keyword">if</span> (state.getValues().getValues().size() == <span class="number">0</span>) &#123;</div><div class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"number of  columns error"</span>);</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">if</span> (state.getValues().getValues().size() != state.getColumns().size()) &#123;</div><div class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"number of values and columns have to match"</span>);</div><div class="line">   &#125;</div><div class="line">   SQLTableSource table = state.getTableSource();</div><div class="line">   BasicDBObject o = <span class="keyword">new</span> BasicDBObject();</div><div class="line">   <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">   <span class="keyword">for</span> (SQLExpr col : state.getColumns()) &#123;</div><div class="line">       o.put(getFieldName2(col), getExpValue(state.getValues().getValues().get(i)));</div><div class="line">       i++;</div><div class="line">   &#125;</div><div class="line">   DBCollection coll = <span class="keyword">this</span>._db.getCollection(table.toString());</div><div class="line">   coll.insert(o);</div><div class="line">   <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1>5. 彩蛋</h1>
<p>老铁，看到这里，来一波微信公众号关注吧？！</p>
<p><img src="http://www.yunai.me/images/common/wechat_mp_2017_07_31.jpg" alt="wechat_mp"></p>
<p><strong>1、支持多 MongoDB ，并使用 MyCAT 进行分片。</strong></p>
<p>MyCAT 配置：<a href="https://github.com/YunaiV/Mycat-Server/tree/1.6/src/test/resources/multi_mongodb" rel="external nofollow noopener noreferrer" target="_blank">multi_mongodb</a></p>
<p><strong>2、支持 MongoDB + MySQL 作为同一个 MyCAT Table 的数据节点。查询时，可以合并数据结果。</strong></p>
<p>查询时，返回 MySQL 数据记录字段要比 MongoDB 数据记录字段全，否则，合并结果时会报错。</p>
<p>MyCAT 配置：<a href="https://github.com/YunaiV/Mycat-Server/tree/1.6/src/test/resources/single_mongodb_mysql" rel="external nofollow noopener noreferrer" target="_blank">single_mongodb_mysql</a></p>
<p><strong>3、MongoDB 作为数据节点时，可以使用 MyCAT 提供的数据库主键字段功能。</strong></p>
<p>MyCAT 配置：<a href="https://github.com/YunaiV/Mycat-Server/tree/1.6/src/test/resources/single_mongodb" rel="external nofollow noopener noreferrer" target="_blank">single_mongodb</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://www.yunai.me/images/common/wechat_mp_2017_07_31.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;🙂🙂🙂关注**微信公众号：【芋艿的后端小屋】**有福利：&lt;/p&gt;
&lt;ol
    
    </summary>
    
      <category term="MyCAT" scheme="http://www.yunai.me/categories/MyCAT/"/>
    
    
  </entry>
  
  <entry>
    <title>MyCAT 源码分析  —— PreparedStatement 重新入门</title>
    <link href="http://www.yunai.me/MyCAT/what-is-PreparedStatement/"/>
    <id>http://www.yunai.me/MyCAT/what-is-PreparedStatement/</id>
    <published>2017-07-16T16:00:00.000Z</published>
    <updated>2017-07-31T12:30:52.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://www.yunai.me/images/common/wechat_mp_2017_07_31.jpg" alt=""></p>
<blockquote>
<p>🙂🙂🙂关注**微信公众号：【芋艿的后端小屋】**有福利：</p>
<ol>
<li>RocketMQ / MyCAT / Sharding-JDBC <strong>所有</strong>源码分析文章列表</li>
<li>RocketMQ / MyCAT / Sharding-JDBC <strong>中文注释源码 GitHub 地址</strong></li>
<li>您对于源码的疑问每条留言<strong>都</strong>将得到<strong>认真</strong>回复。<strong>甚至不知道如何读源码也可以请教噢</strong>。</li>
<li><strong>新的</strong>源码解析文章<strong>实时</strong>收到通知。<strong>每周更新一篇左右</strong>。</li>
<li><strong>认真的</strong>源码交流微信群。</li>
</ol>
</blockquote>
<hr>
<ul>
<li><a href="#">1. 概述</a></li>
<li><a href="#">2. JDBC Client 实现</a></li>
<li><a href="#">3. MyCAT Server 实现</a>
<ul>
<li><a href="#">3.1 创建 PreparedStatement</a></li>
<li><a href="#">3.2 执行 SQL</a></li>
</ul>
</li>
<li><a href="#">4. 彩蛋</a></li>
</ul>
<hr>
<h1>1. 概述</h1>
<p>相信很多同学在学习 JDBC 时，都碰到 <code>PreparedStatement</code> 和 <code>Statement</code>。究竟该使用哪个呢？最终很可能是<strong>懵里懵懂</strong>的看了各种总结，使用 <code>PreparedStatement</code>。那么本文，通过 MyCAT 对 <code>PreparedStatement</code> 的实现对大家能够重新理解下。</p>
<p>本文主要分成两部分：</p>
<ol>
<li>JDBC Client 如何实现 <code>PreparedStatement</code>。</li>
<li>MyCAT Server 如何处理 <code>PreparedStatement</code>。</li>
</ol>
<p>😈 Let's Go。</p>
<h1>2. JDBC Client 实现</h1>
<p>首先，我们来看一段大家最喜欢复制粘贴之一的代码，JDBC PreparedStatement 查询 MySQL 数据库：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PreparedStatementDemo</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;</div><div class="line">        <span class="comment">// 1. 获得数据库连接</span></div><div class="line">        Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</div><div class="line">        Connection conn = DriverManager.getConnection(<span class="string">"jdbc:mysql://127.0.0.1:8066/dbtest?useServerPrepStmts=true"</span>, <span class="string">"root"</span>, <span class="string">"123456"</span>);</div><div class="line"></div><div class="line">        <span class="comment">// PreparedStatement</span></div><div class="line">        PreparedStatement ps = conn.prepareStatement(<span class="string">"SELECT id, username, password FROM t_user WHERE id = ?"</span>);</div><div class="line">        ps.setLong(<span class="number">1</span>, Math.abs(<span class="keyword">new</span> Random().nextLong()));</div><div class="line"></div><div class="line">        <span class="comment">// execute</span></div><div class="line">        ps.executeQuery();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>获取 MySQL 连接时，<code>useServerPrepStmts=true</code>  是<strong>非常非常非常重要</strong>的参数。如果不配置，<code>PreparedStatement</code> 实际是个<strong>假</strong>的 <code>PreparedStatement</code>（新版本默认为 FALSE，据说部分老版本默认为 TRUE），未开启服务端级别的 SQL 预编译。</p>
<p>WHY ？来看下 JDBC 里面是怎么实现的。</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// com.mysql.jdbc.ConnectionImpl.java</span></div><div class="line"><span class="function"><span class="keyword">public</span> PreparedStatement <span class="title">prepareStatement</span><span class="params">(String sql, <span class="keyword">int</span> resultSetType, <span class="keyword">int</span> resultSetConcurrency)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">   <span class="keyword">synchronized</span> (getConnectionMutex()) &#123;</div><div class="line">       checkClosed();</div><div class="line">       </div><div class="line">       PreparedStatement pStmt = <span class="keyword">null</span>;</div><div class="line">       <span class="keyword">boolean</span> canServerPrepare = <span class="keyword">true</span>;</div><div class="line">       String nativeSql = getProcessEscapeCodesForPrepStmts() ? nativeSQL(sql) : sql;</div><div class="line"></div><div class="line">       <span class="keyword">if</span> (<span class="keyword">this</span>.useServerPreparedStmts &amp;&amp; getEmulateUnsupportedPstmts()) &#123;</div><div class="line">           canServerPrepare = canHandleAsServerPreparedStatement(nativeSql);</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="keyword">if</span> (<span class="keyword">this</span>.useServerPreparedStmts &amp;&amp; canServerPrepare) &#123;</div><div class="line">           <span class="keyword">if</span> (<span class="keyword">this</span>.getCachePreparedStatements()) &#123; <span class="comment">// 从缓存中获取 pStmt</span></div><div class="line">               <span class="keyword">synchronized</span> (<span class="keyword">this</span>.serverSideStatementCache) &#123;</div><div class="line">                   pStmt = (com.mysql.jdbc.ServerPreparedStatement) <span class="keyword">this</span>.serverSideStatementCache</div><div class="line">                           .remove(makePreparedStatementCacheKey(<span class="keyword">this</span>.database, sql));</div><div class="line"></div><div class="line">                   <span class="keyword">if</span> (pStmt != <span class="keyword">null</span>) &#123;</div><div class="line">                       ((com.mysql.jdbc.ServerPreparedStatement) pStmt).setClosed(<span class="keyword">false</span>);</div><div class="line">                       pStmt.clearParameters(); <span class="comment">// 清理上次留下的参数</span></div><div class="line">                   &#125;</div><div class="line"></div><div class="line">                   <span class="keyword">if</span> (pStmt == <span class="keyword">null</span>) &#123;</div><div class="line">                        <span class="comment">// .... 省略代码 ：向 Server 提交 SQL 预编译。</span></div><div class="line">                   &#125;</div><div class="line">               &#125;</div><div class="line">           &#125; <span class="keyword">else</span> &#123;</div><div class="line">               <span class="keyword">try</span> &#123;</div><div class="line">                   <span class="comment">// 向 Server 提交 SQL 预编译。</span></div><div class="line">                   pStmt = ServerPreparedStatement.getInstance(getMultiHostSafeProxy(), nativeSql, <span class="keyword">this</span>.database, resultSetType, resultSetConcurrency);</div><div class="line"></div><div class="line">                   pStmt.setResultSetType(resultSetType);</div><div class="line">                   pStmt.setResultSetConcurrency(resultSetConcurrency);</div><div class="line">               &#125; <span class="keyword">catch</span> (SQLException sqlEx) &#123;</div><div class="line">                   <span class="comment">// Punt, if necessary</span></div><div class="line">                   <span class="keyword">if</span> (getEmulateUnsupportedPstmts()) &#123;</div><div class="line">                       pStmt = (PreparedStatement) clientPrepareStatement(nativeSql, resultSetType, resultSetConcurrency, <span class="keyword">false</span>);</div><div class="line">                   &#125; <span class="keyword">else</span> &#123;</div><div class="line">                       <span class="keyword">throw</span> sqlEx;</div><div class="line">                   &#125;</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           pStmt = (PreparedStatement) clientPrepareStatement(nativeSql, resultSetType, resultSetConcurrency, <span class="keyword">false</span>);</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="keyword">return</span> pStmt;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>【前者】当 Client 开启 <code>useServerPreparedStmts</code> 并且 Server 支持 <code>ServerPrepare</code>，<strong>Client 会向 Server 提交 SQL 预编译请求</strong>。</li>
</ul>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.useServerPreparedStmts &amp;&amp; canServerPrepare) &#123;</div><div class="line">    pStmt = ServerPreparedStatement.getInstance(getMultiHostSafeProxy(), nativeSql, <span class="keyword">this</span>.database, resultSetType, resultSetConcurrency);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>【后者】当 Client 未开启 <code>useServerPreparedStmts</code> 或者 Server 不支持 <code>ServerPrepare</code>，Client 创建 <code>PreparedStatement</code>，<strong>_不会_向 Server 提交 SQL 预编译请求</strong>。</li>
</ul>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">pStmt = (PreparedStatement) clientPrepareStatement(nativeSql, resultSetType, resultSetConcurrency, <span class="keyword">false</span>);</div></pre></td></tr></table></figure></p>
<p><strong>即使这样，究竟为什么性能会更好呢？</strong></p>
<ul>
<li>【前者】返回的 <code>PreparedStatement</code> 对象类是 <code>JDBC42ServerPreparedStatement.java</code>，后续每次执行 SQL 只需将对应占位符?对应的值提交给 Server即可，减少网络传输和 SQL 解析开销。</li>
<li>【后者】返回的 <code>PreparedStatement</code> 对象类是 <code>JDBC42PreparedStatement.java</code>，后续每次执行 SQL 需要将<strong>完整</strong>的 SQL 提交给 Server，增加了网络传输和 SQL 解析开销。</li>
</ul>
<p><em>🌚：【前者】性能一定比【后者】好吗？相信你已经有了正确的答案。</em></p>
<h1>3. MyCAT Server 实现</h1>
<h2>3.1 创建 PreparedStatement</h2>
<p>该操作对应 Client <code>conn.prepareStatement(....)</code>。</p>
<p><img src="http://www.yunai.me/images/MyCAT/2017_07_17/01.png" alt=""></p>
<p>MyCAT 接收到请求后，创建 <code>PreparedStatement</code>，并返回 <code>statementId</code> 等信息。Client 发起 SQL 执行时，需要将 <code>statementId</code> 带给 MyCAT。核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// ServerPrepareHandler.java</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">(String sql)</span> </span>&#123;</div><div class="line">LOGGER.debug(<span class="string">"use server prepare, sql: "</span> + sql);</div><div class="line"></div><div class="line">   PreparedStatement pstmt = pstmtForSql.get(sql);</div><div class="line">   <span class="keyword">if</span> (pstmt == <span class="keyword">null</span>) &#123; <span class="comment">// 缓存中获取</span></div><div class="line">   	<span class="comment">// 解析获取字段个数和参数个数</span></div><div class="line">   	<span class="keyword">int</span> columnCount = getColumnCount(sql);</div><div class="line">   	<span class="keyword">int</span> paramCount = getParamCount(sql);</div><div class="line">       pstmt = <span class="keyword">new</span> PreparedStatement(++pstmtId, sql, columnCount, paramCount);</div><div class="line">       pstmtForSql.put(pstmt.getStatement(), pstmt);</div><div class="line">       pstmtForId.put(pstmt.getId(), pstmt);</div><div class="line">   &#125;</div><div class="line">   PreparedStmtResponse.response(pstmt, source);</div><div class="line">&#125;</div><div class="line"><span class="comment">// PreparedStmtResponse.java</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">response</span><span class="params">(PreparedStatement pstmt, FrontendConnection c)</span> </span>&#123;</div><div class="line">   <span class="keyword">byte</span> packetId = <span class="number">0</span>;</div><div class="line"></div><div class="line">   <span class="comment">// write preparedOk packet</span></div><div class="line">   PreparedOkPacket preparedOk = <span class="keyword">new</span> PreparedOkPacket();</div><div class="line">   preparedOk.packetId = ++packetId;</div><div class="line">   preparedOk.statementId = pstmt.getId();</div><div class="line">   preparedOk.columnsNumber = pstmt.getColumnsNumber();</div><div class="line">   preparedOk.parametersNumber = pstmt.getParametersNumber();</div><div class="line">   ByteBuffer buffer = preparedOk.write(c.allocate(), c,<span class="keyword">true</span>);</div><div class="line"></div><div class="line">   <span class="comment">// write parameter field packet</span></div><div class="line">   <span class="keyword">int</span> parametersNumber = preparedOk.parametersNumber;</div><div class="line">   <span class="keyword">if</span> (parametersNumber &gt; <span class="number">0</span>) &#123;</div><div class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; parametersNumber; i++) &#123;</div><div class="line">           FieldPacket field = <span class="keyword">new</span> FieldPacket();</div><div class="line">           field.packetId = ++packetId;</div><div class="line">           buffer = field.write(buffer, c,<span class="keyword">true</span>);</div><div class="line">       &#125;</div><div class="line">       EOFPacket eof = <span class="keyword">new</span> EOFPacket();</div><div class="line">       eof.packetId = ++packetId;</div><div class="line">       buffer = eof.write(buffer, c,<span class="keyword">true</span>);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="comment">// write column field packet</span></div><div class="line">   <span class="keyword">int</span> columnsNumber = preparedOk.columnsNumber;</div><div class="line">   <span class="keyword">if</span> (columnsNumber &gt; <span class="number">0</span>) &#123;</div><div class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; columnsNumber; i++) &#123;</div><div class="line">           FieldPacket field = <span class="keyword">new</span> FieldPacket();</div><div class="line">           field.packetId = ++packetId;</div><div class="line">           buffer = field.write(buffer, c,<span class="keyword">true</span>);</div><div class="line">       &#125;</div><div class="line">       EOFPacket eof = <span class="keyword">new</span> EOFPacket();</div><div class="line">       eof.packetId = ++packetId;</div><div class="line">       buffer = eof.write(buffer, c,<span class="keyword">true</span>);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="comment">// send buffer</span></div><div class="line">   c.write(buffer);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>每个连接之间，PreparedStatement 不共享，即不同连接，即使 SQL相同，对应的 PreparedStatement 不同。</strong></p>
<h2>3.2 执行 SQL</h2>
<p>该操作对应 Client <code>conn.execute(....)</code>。</p>
<p><img src="http://www.yunai.me/images/MyCAT/2017_07_17/02.png" alt=""></p>
<p>MyCAT 接收到请求后，将 PreparedStatement 使用请求的参数格式化成可执行的 SQL 进行执行。伪代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">String sql = pstmt.sql.format(request.params);</div><div class="line">execute(sql);</div></pre></td></tr></table></figure></p>
<p>核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// ServerPrepareHandler.java</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(<span class="keyword">byte</span>[] data)</span> </span>&#123;</div><div class="line">   <span class="keyword">long</span> pstmtId = ByteUtil.readUB4(data, <span class="number">5</span>);</div><div class="line">   PreparedStatement pstmt = <span class="keyword">null</span>;</div><div class="line">   <span class="keyword">if</span> ((pstmt = pstmtForId.get(pstmtId)) == <span class="keyword">null</span>) &#123;</div><div class="line">       source.writeErrMessage(ErrorCode.ER_ERROR_WHEN_EXECUTING_COMMAND, <span class="string">"Unknown pstmtId when executing."</span>);</div><div class="line">   &#125; <span class="keyword">else</span> &#123;</div><div class="line">       <span class="comment">// 参数读取</span></div><div class="line">       ExecutePacket packet = <span class="keyword">new</span> ExecutePacket(pstmt);</div><div class="line">       <span class="keyword">try</span> &#123;</div><div class="line">           packet.read(data, source.getCharset());</div><div class="line">       &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</div><div class="line">           source.writeErrMessage(ErrorCode.ER_ERROR_WHEN_EXECUTING_COMMAND, e.getMessage());</div><div class="line">           <span class="keyword">return</span>;</div><div class="line">       &#125;</div><div class="line">       BindValue[] bindValues = packet.values;</div><div class="line">       <span class="comment">// 还原sql中的动态参数为实际参数值</span></div><div class="line">       String sql = prepareStmtBindValue(pstmt, bindValues);</div><div class="line">       <span class="comment">// 执行sql</span></div><div class="line">       source.getSession2().setPrepared(<span class="keyword">true</span>);</div><div class="line">       source.query(sql);</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> String <span class="title">prepareStmtBindValue</span><span class="params">(PreparedStatement pstmt, BindValue[] bindValues)</span> </span>&#123;</div><div class="line">   String sql = pstmt.getStatement();</div><div class="line">   <span class="keyword">int</span>[] paramTypes = pstmt.getParametersType();</div><div class="line"></div><div class="line">   StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">   <span class="keyword">int</span> idx = <span class="number">0</span>;</div><div class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, len = sql.length(); i &lt; len; i++) &#123;</div><div class="line">       <span class="keyword">char</span> c = sql.charAt(i);</div><div class="line">       <span class="keyword">if</span> (c != <span class="string">'?'</span>) &#123;</div><div class="line">           sb.append(c);</div><div class="line">           <span class="keyword">continue</span>;</div><div class="line">       &#125;</div><div class="line">       <span class="comment">// 处理占位符?</span></div><div class="line">       <span class="keyword">int</span> paramType = paramTypes[idx];</div><div class="line">       BindValue bindValue = bindValues[idx];</div><div class="line">       idx++;</div><div class="line">       <span class="comment">// 处理字段为空的情况</span></div><div class="line">       <span class="keyword">if</span> (bindValue.isNull) &#123;</div><div class="line">           sb.append(<span class="string">"NULL"</span>);</div><div class="line">           <span class="keyword">continue</span>;</div><div class="line">       &#125;</div><div class="line">       <span class="comment">// 非空情况, 根据字段类型获取值</span></div><div class="line">       <span class="keyword">switch</span> (paramType &amp; <span class="number">0xff</span>) &#123;</div><div class="line">           <span class="keyword">case</span> Fields.FIELD_TYPE_TINY:</div><div class="line">               sb.append(String.valueOf(bindValue.byteBinding));</div><div class="line">               <span class="keyword">break</span>;</div><div class="line">           <span class="keyword">case</span> Fields.FIELD_TYPE_SHORT:</div><div class="line">               sb.append(String.valueOf(bindValue.shortBinding));</div><div class="line">               <span class="keyword">break</span>;</div><div class="line">           <span class="keyword">case</span> Fields.FIELD_TYPE_LONG:</div><div class="line">               sb.append(String.valueOf(bindValue.intBinding));</div><div class="line">               <span class="keyword">break</span>;</div><div class="line">           <span class="comment">// .... 省略非核心代码</span></div><div class="line">        &#125;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="keyword">return</span> sb.toString();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1>4. 彩蛋</h1>
<p>💯 看到此处是不是真爱？！反正我信了。<br>
给老铁们额外加个🍗。</p>
<p>细心的同学们可能已经注意到 JDBC Client 是支持缓存 <code>PreparedStatement</code>，无需每次都让 Server 进行创建。</p>
<p>当配置 MySQL 数据连接 <code>cachePrepStmts=true</code> 时开启 Client 级别的缓存。But，<strong>此处的缓存又和一般的缓存不一样</strong>，是使用 <code>remove</code> 的方式获得的，并且创建好 <code>PreparedStatement</code> 时也不添加到缓存。那什么时候添加缓存呢？在 <code>pstmt.close()</code> 时，并且**<code>pstmt</code> 是通过缓存获取时**，添加到缓存。核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// ServerPreparedStatement.java</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">   MySQLConnection locallyScopedConn = <span class="keyword">this</span>.connection;</div><div class="line"></div><div class="line">   <span class="keyword">if</span> (locallyScopedConn == <span class="keyword">null</span>) &#123;</div><div class="line">       <span class="keyword">return</span>; <span class="comment">// already closed</span></div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="keyword">synchronized</span> (locallyScopedConn.getConnectionMutex()) &#123;</div><div class="line">       <span class="keyword">if</span> (<span class="keyword">this</span>.isCached &amp;&amp; isPoolable() &amp;&amp; !<span class="keyword">this</span>.isClosed) &#123;</div><div class="line">           clearParameters();</div><div class="line">           <span class="keyword">this</span>.isClosed = <span class="keyword">true</span>;</div><div class="line">           <span class="keyword">this</span>.connection.recachePreparedStatement(<span class="keyword">this</span>);</div><div class="line">           <span class="keyword">return</span>;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       realClose(<span class="keyword">true</span>, <span class="keyword">true</span>);</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// ConnectionImpl.java</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recachePreparedStatement</span><span class="params">(ServerPreparedStatement pstmt)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">   <span class="keyword">synchronized</span> (getConnectionMutex()) &#123;</div><div class="line">       <span class="keyword">if</span> (getCachePreparedStatements() &amp;&amp; pstmt.isPoolable()) &#123;</div><div class="line">           <span class="keyword">synchronized</span> (<span class="keyword">this</span>.serverSideStatementCache) &#123;</div><div class="line">               <span class="keyword">this</span>.serverSideStatementCache.put(makePreparedStatementCacheKey(pstmt.currentCatalog, pstmt.originalSql), pstmt);</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>为什么要这么实现？<code>PreparedStatement</code> 是有状态的变量，我们会去 <code>setXXX(pos, value)</code>，一旦多线程共享，会导致错乱。</p>
<p>🗿 这个“彩蛋”还满意么？<strong>请关注我的公众号：芋艿的后端小屋</strong>。下一篇更新：《MyCAT源码解析 —— MongoDB》，极大可能就在本周噢。</p>
<p><img src="http://www.yunai.me/images/common/wechat_mp_2017_07_31.jpg" alt="wechat_mp"></p>
<p>另外推荐一篇文章：<a href="https://www.zybuluo.com/stefanlu/note/254899" rel="external nofollow noopener noreferrer" target="_blank">《JDBC PreparedStatement》</a>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://www.yunai.me/images/common/wechat_mp_2017_07_31.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;🙂🙂🙂关注**微信公众号：【芋艿的后端小屋】**有福利：&lt;/p&gt;
&lt;ol
    
    </summary>
    
      <category term="MyCAT" scheme="http://www.yunai.me/categories/MyCAT/"/>
    
    
  </entry>
  
  <entry>
    <title>为什么阅读 Sharding-JDBC 源码？</title>
    <link href="http://www.yunai.me/Sharding-JDBC/why-read-Sharding-JDBC-source-code/"/>
    <id>http://www.yunai.me/Sharding-JDBC/why-read-Sharding-JDBC-source-code/</id>
    <published>2017-07-15T16:00:00.000Z</published>
    <updated>2017-07-31T13:05:22.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://www.yunai.me/images/common/wechat_mp_2017_07_31.jpg" alt=""></p>
<blockquote>
<p>🙂🙂🙂关注**微信公众号：【芋艿的后端小屋】**有福利：</p>
<ol>
<li>RocketMQ / MyCAT / Sharding-JDBC <strong>所有</strong>源码分析文章列表</li>
<li>RocketMQ / MyCAT / Sharding-JDBC <strong>中文注释源码 GitHub 地址</strong></li>
<li>您对于源码的疑问每条留言<strong>都</strong>将得到<strong>认真</strong>回复。<strong>甚至不知道如何读源码也可以请教噢</strong>。</li>
<li><strong>新的</strong>源码解析文章<strong>实时</strong>收到通知。<strong>每周更新一篇左右</strong>。</li>
<li><strong>认真的</strong>源码交流微信群。</li>
</ol>
</blockquote>
<hr>
<h2>为什么阅读 Sharding-JDBC 源码？</h2>
<ol>
<li>看完大部分的 MyCAT 源码，有惊喜的地方，也有失望的地方，因而想看看 Sharding-JDBC 进行下对比。尽管，Sharding-JDBC 是 Client 端级别，MyCAT 是 Server 级别。</li>
<li>Sharding-JDBC 经历过当当本身业务的考验，从可靠性上来说会更让人有信赖感。</li>
<li>文档更加完善，开发体系更加健全。</li>
<li>Sharding-JDBC 1.5.0.M3 发布。</li>
<li><strong>最大努力送达型</strong>事务支持，想要进一步了解分布式事务的解决方案。Last But Very Importment。</li>
</ol>
<h2>步骤</h2>
<ul>
<li>
<p>FROM MyCAT</p>
<p><strong>从 MyCAT 阅读计划复制，用于对比。</strong></p>
</li>
<li>
<p>[ ] <s>NIO</s></p>
</li>
<li>
<p>[ ] <s>分布式事务</s></p>
</li>
<li>
<p>[ ] <s>MyCAT 主从</s></p>
</li>
<li>
<p>[ ] <s>支持prepare预编译指令</s></p>
</li>
<li>
<p>[ ] 自增序列</p>
</li>
<li>
<p>[ ] 单库任意 Join</p>
</li>
<li>
<p>[ ] 跨库2表 Join</p>
</li>
<li>
<p>[ ] <s>跨库多表 Join</s></p>
</li>
<li>
<p>[ ] SQL 解析</p>
</li>
<li>
<p>[ ] 读写分离</p>
</li>
<li>
<p>[ ] MySQL 主从</p>
</li>
<li>
<p>[ ] <s>自动故障切换</s></p>
</li>
<li>
<p>[ ] <s>Galera Cluster 集群</s></p>
</li>
<li>
<p>[ ] <s>MHA 集群</s></p>
</li>
<li>
<p>[ ] <s>Percona 集群</s></p>
</li>
<li>
<p>[ ] <s>服务降级</s></p>
</li>
<li>
<p>[ ] <s>多租户</s></p>
</li>
<li>
<p>[ ] 路由</p>
</li>
<li>
<p>[ ] <s>MyCAT 集群</s></p>
</li>
<li>
<p>[ ] 注解</p>
</li>
<li>
<p>[ ] <s>缓存</s></p>
</li>
<li>
<p>[ ] 监控</p>
</li>
<li>
<p>[ ] <s>Mongodb</s></p>
</li>
<li>
<p>[ ] 内存管理</p>
</li>
<li>
<p>[ ] 数据聚合</p>
</li>
<li>
<p>[ ] 数据排序</p>
</li>
<li>
<p>[ ] 分表</p>
</li>
<li>
<p>[ ] 分库</p>
</li>
<li>
<p>[ ] 全局表</p>
</li>
<li>
<p>[ ] <s>E/R关系</s></p>
</li>
<li>
<p>[ ] 服务降级</p>
</li>
<li>
<p>[ ] SQL 注入攻击拦截</p>
</li>
<li>
<p>[ ] <s>MySQL 协议</s></p>
</li>
<li>
<p>[ ] <s>PostgreSQL 协议</s></p>
</li>
<li>
<p>[ ] 存储过程</p>
</li>
<li>
<p>FROM Sharding-JDBC</p>
<p><strong>从 官网 介绍获取。</strong></p>
</li>
<li>
<p>[ ] 分布式事务 ：最大努力送达型事务</p>
</li>
<li>
<p>[ ] 分布式事务 ：TCC型事务(TBD)</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://www.yunai.me/images/common/wechat_mp_2017_07_31.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;🙂🙂🙂关注**微信公众号：【芋艿的后端小屋】**有福利：&lt;/p&gt;
&lt;ol
    
    </summary>
    
      <category term="Sharding-JDBC" scheme="http://www.yunai.me/categories/Sharding-JDBC/"/>
    
    
  </entry>
  
  <entry>
    <title>MyCAT 源码分析  —— XA分布式事务</title>
    <link href="http://www.yunai.me/MyCAT/xa-distributed-transaction/"/>
    <id>http://www.yunai.me/MyCAT/xa-distributed-transaction/</id>
    <published>2017-07-14T16:00:00.000Z</published>
    <updated>2017-07-31T12:30:52.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://www.yunai.me/images/common/wechat_mp_2017_07_31.jpg" alt=""></p>
<blockquote>
<p>🙂🙂🙂关注**微信公众号：【芋艿的后端小屋】**有福利：</p>
<ol>
<li>RocketMQ / MyCAT / Sharding-JDBC <strong>所有</strong>源码分析文章列表</li>
<li>RocketMQ / MyCAT / Sharding-JDBC <strong>中文注释源码 GitHub 地址</strong></li>
<li>您对于源码的疑问每条留言<strong>都</strong>将得到<strong>认真</strong>回复。<strong>甚至不知道如何读源码也可以请教噢</strong>。</li>
<li><strong>新的</strong>源码解析文章<strong>实时</strong>收到通知。<strong>每周更新一篇左右</strong>。</li>
<li><strong>认真的</strong>源码交流微信群。</li>
</ol>
</blockquote>
<hr>
<ul>
<li><a href="#">1. 概述</a></li>
<li><a href="#">2. XA 概念</a></li>
<li><a href="#">3. MyCAT 代码实现</a>
<ul>
<li><a href="#">3.1 JDBC Demo 代码</a></li>
<li><a href="#">3.2 MyCAT 开启 XA 事务</a></li>
<li><a href="#">3.3 MyCAT 接收 SQL</a></li>
<li><a href="#">3.4 MySQL 接收 COMMIT</a>
<ul>
<li><a href="#">3.4.1 单节点事务 or 多节点事务</a></li>
<li><a href="#">3.4.2 协调日志</a></li>
<li><a href="#">3.4.3 MultiNodeCoordinator</a></li>
</ul>
</li>
<li><a href="#">3.5 MyCAT 启动回滚 XA事务</a></li>
</ul>
</li>
<li><a href="#">4. MyCAT 实现缺陷</a>
<ul>
<li><a href="#">4.1 协调日志写入性能</a></li>
<li><a href="#">4.2 数据节点未全部 PREPARE 就进行 COMMIT</a></li>
<li><a href="#">4.3 MyCAT 启动回滚 PREPARE 的 XA事务</a></li>
<li><a href="#">4.4 单节点事务未记录协调日志</a></li>
<li><a href="#">4.5 XA COMMIT 部分节点挂了重新恢复后，未进一步处理</a></li>
</ul>
</li>
<li><a href="#">5. 彩蛋</a></li>
</ul>
<hr>
<h1>1. 概述</h1>
<p>数据库拆分后，业务上会碰到需要分布式事务的场景。MyCAT 基于 XA 实现分布式事务。国内目前另外一款很火的数据库中间件 Sharding-JDBC 准备基于 TCC 实现分布式事务。</p>
<p>本文内容分成三部分：</p>
<ol>
<li>XA 概念简述</li>
<li>MyCAT 代码如何实现 XA</li>
<li>MyCAT 在实现 XA 存在的一些缺陷</li>
</ol>
<h1>2. XA 概念</h1>
<blockquote></blockquote>
<p>X/Open 组织（即现在的 Open Group ）定义了分布式事务处理模型。 X/Open DTP 模型（ 1994 ）包括：</p>
<ol>
<li>应用程序（ <strong>AP</strong> ）</li>
<li>事务管理器（ <strong>TM</strong> ）</li>
<li>资源管理器（ <strong>RM</strong> ）</li>
<li>通信资源管理器（ <strong>CRM</strong> ）<br>
一般，常见的事务管理器（ TM ）是交易中间件，常见的资源管理器（ <strong>RM</strong> ）是数据库，常见的通信资源管理器（ <strong>CRM</strong> ）是消息中间件，下图是X/Open DTP模型：</li>
</ol>
<p><img src="http://www.yunai.me/images/MyCAT/2017_07_15/01.png" alt=""></p>
<blockquote>
<p>一般的编程方式是这样的：</p>
</blockquote>
<ol>
<li>配置 <strong>TM</strong> ，通过 <strong>TM</strong> 或者 <strong>RM</strong> 提供的方式，把 <strong>RM</strong> 注册到 <strong>TM</strong>。可以理解为给 <strong>TM</strong> 注册 <strong>RM</strong> 作为数据源。一个 <strong>TM</strong> 可以注册多个 <strong>RM</strong>。</li>
<li><strong>AP</strong> 从 <strong>TM</strong> 获取资源管理器的代理（例如：使用JTA接口，从TM管理的上下文中，获取出这个TM所管理的RM的JDBC连接或JMS连接）<br>
<strong>AP</strong> 向 <strong>TM</strong> 发起一个全局事务。这时，<strong>TM</strong> 会通知各个 <strong>RM</strong>。<strong>XID</strong>（全局事务ID）会通知到各个RM。</li>
<li><strong>AP</strong> 通过 <strong>TM</strong> 中获取的连接，<strong>间接</strong>操作 <strong>RM</strong> 进行业务操作。这时，<strong>TM</strong> 在每次 <strong>AP</strong> 操作时把 <strong>XID</strong>(包括所属分支的信息)传递给 <strong>RM</strong>，<strong>RM</strong> 正是通过这个 <strong>XID</strong> 关联来操作和事务的关系的。</li>
<li><strong>AP</strong> 结束全局事务时，<strong>TM</strong> 会通知 <strong>RM</strong> 全局事务结束。开始二段提交，也就是prepare - commit的过程。</li>
</ol>
<hr>
<blockquote>
<p>XA协议指的是TM（事务管理器）和RM（资源管理器）之间的接口。目前主流的关系型数据库产品都是实现了XA接口的。JTA(Java Transaction API)是符合X/Open DTP模型的，事务管理器和资源管理器之间也使用了XA协议。 本质上也是借助两阶段提交协议来实现分布式事务的，下面分别来看看XA事务成功和失败的模型图：</p>
</blockquote>
<p><img src="http://www.yunai.me/images/MyCAT/2017_07_15/02.png" alt="成功"></p>
<p><img src="http://www.yunai.me/images/MyCAT/2017_07_15/03.png" alt="失败"></p>
<hr>
<p>😈 看到这里是不是有种黑人问号的感觉？淡定！我们接下来看 MyCAT 代码层面是如何实现 XA 的。另外，有兴趣对概念了解更多的，可以参看如下文章：</p>
<ol>
<li><a href="http://www.infoq.com/cn/articles/xa-transactions-handle" rel="external nofollow noopener noreferrer" target="_blank">《XA事务处理》</a></li>
<li><a href="https://dev.mysql.com/doc/refman/5.7/en/xa-statements.html" rel="external nofollow noopener noreferrer" target="_blank">《XA Transaction SQL Syntax》</a></li>
<li><a href="http://www.voidcn.com/blog/gao1738/article/p-4554083.html" rel="external nofollow noopener noreferrer" target="_blank">《MySQL XA 事务支持调研》</a></li>
</ol>
<h1>3. MyCAT 代码实现</h1>
<ul>
<li>MyCAT ：TM，协调者。</li>
<li>数据节点 ：RM，参与者。</li>
</ul>
<h2>3.1 JDBC Demo 代码</h2>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCATXAClientDemo</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;</div><div class="line">        <span class="comment">// 1. 获得数据库连接</span></div><div class="line">        Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</div><div class="line">        Connection conn = DriverManager.getConnection(<span class="string">"jdbc:mysql://127.0.0.1:8066/dbtest"</span>, <span class="string">"root"</span>, <span class="string">"123456"</span>);</div><div class="line">        conn.setAutoCommit(<span class="keyword">false</span>);</div><div class="line"></div><div class="line">        <span class="comment">// 2. 开启 MyCAT XA 事务</span></div><div class="line">        conn.prepareStatement(<span class="string">"set xa=on"</span>).execute();</div><div class="line"></div><div class="line">        <span class="comment">// 3. 插入 SQL</span></div><div class="line">        <span class="comment">// 3.1 SQL1 A库</span></div><div class="line">        <span class="keyword">long</span> uid = Math.abs(<span class="keyword">new</span> Random().nextLong());</div><div class="line">        String username = UUID.randomUUID().toString();</div><div class="line">        String password = UUID.randomUUID().toString();</div><div class="line">        String sql1 = String.format(<span class="string">"insert into t_user(id, username, password) VALUES (%d, '%s', '%s')"</span>,</div><div class="line">                uid, username, password);</div><div class="line">        conn.prepareStatement(sql1).execute();</div><div class="line">        <span class="comment">// 3.2 SQL2 B库</span></div><div class="line">        <span class="keyword">long</span> orderId = Math.abs(<span class="keyword">new</span> Random().nextLong());</div><div class="line">        String nickname = UUID.randomUUID().toString();</div><div class="line">        String sql2 = String.format(<span class="string">"insert into t_order(id, uid, nickname) VALUES(%d, %s, '%s')"</span>, orderId, uid, nickname);</div><div class="line">        conn.prepareStatement(sql2).execute();</div><div class="line"></div><div class="line">        <span class="comment">// 4. 提交 XA 事务</span></div><div class="line">        conn.commit();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li><code>set xa=on</code> MyCAT 开启 XA 事务。</li>
<li><code>conn.commit</code> 提交 XA 事务。</li>
</ul>
<h2>3.2 MyCAT 开启 XA 事务</h2>
<p>当 MyCAT 接收到 <code>set xa = on</code> 命令时，开启 XA 事务，并生成 XA 事务编号。XA 事务编号生成算法为 UUID。核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// SetHandler.java</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(String stmt, ServerConnection c, <span class="keyword">int</span> offset)</span> </span>&#123;</div><div class="line">		<span class="keyword">int</span> rs = ServerParseSet.parse(stmt, offset);</div><div class="line">		<span class="keyword">switch</span> (rs &amp; <span class="number">0xff</span>) &#123;</div><div class="line">		<span class="comment">// ... 省略代码</span></div><div class="line">		<span class="keyword">case</span> XA_FLAG_ON: &#123;</div><div class="line">			<span class="keyword">if</span> (c.isAutocommit()) &#123;</div><div class="line">				c.writeErrMessage(ErrorCode.ERR_WRONG_USED, <span class="string">"set xa cmd on can't used in autocommit connection "</span>);</div><div class="line">				<span class="keyword">return</span>;</div><div class="line">			&#125;</div><div class="line">			c.getSession2().setXATXEnabled(<span class="keyword">true</span>);</div><div class="line">			c.write(c.writeToBuffer(OkPacket.OK, c.allocate()));</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">case</span> XA_FLAG_OFF: &#123;</div><div class="line">			c.writeErrMessage(ErrorCode.ERR_WRONG_USED,</div><div class="line">					<span class="string">"set xa cmd off not for external use "</span>);</div><div class="line">			<span class="keyword">return</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="comment">// ... 省略代码</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// NonBlockingSession.java</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setXATXEnabled</span><span class="params">(<span class="keyword">boolean</span> xaTXEnabled)</span> </span>&#123;</div><div class="line">   <span class="keyword">if</span> (xaTXEnabled) &#123;</div><div class="line">       <span class="keyword">if</span> (<span class="keyword">this</span>.xaTXID == <span class="keyword">null</span>) &#123;</div><div class="line">           xaTXID = genXATXID(); <span class="comment">// 😈😈😈获得 XA 事务编号</span></div><div class="line">       &#125;</div><div class="line">   &#125; <span class="keyword">else</span> &#123;</div><div class="line">       <span class="keyword">this</span>.xaTXID = <span class="keyword">null</span>;</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">private</span> String <span class="title">genXATXID</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">return</span> MycatServer.getInstance().getXATXIDGLOBAL();</div><div class="line">&#125;</div><div class="line"><span class="comment">// MycatServer.java</span></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getXATXIDGLOBAL</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">return</span> <span class="string">"'"</span> + getUUID() + <span class="string">"'"</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getUUID</span><span class="params">()</span> </span>&#123; <span class="comment">// 😈😈😈</span></div><div class="line">   String s = UUID.randomUUID().toString();</div><div class="line">   <span class="keyword">return</span> s.substring(<span class="number">0</span>, <span class="number">8</span>) + s.substring(<span class="number">9</span>, <span class="number">13</span>) + s.substring(<span class="number">14</span>, <span class="number">18</span>) + s.substring(<span class="number">19</span>, <span class="number">23</span>) + s.substring(<span class="number">24</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2>3.3 MyCAT 接收 SQL</h2>
<p>此处 SQL 指的是 <code>insert</code>、<code>update</code>、<code>delete</code> 操作。</p>
<p>当向某个数据节点<strong>第一次</strong>发起 SQL 时，会在 SQL 前面附加 <code>XA START 'xaTranId'</code>，并设置该数据节点<strong>连接</strong>事务状态为 <code>TxState.TX_STARTED_STATE</code>（<em>分布式事务状态，下文会专门整理</em>）。核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// MySQLConnection.java</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">synAndDoExecute</span><span class="params">(String xaTxID, RouteResultsetNode rrn,</span></span></div><div class="line">                                 <span class="keyword">int</span> clientCharSetIndex, <span class="keyword">int</span> clientTxIsoLation,</div><div class="line">                                 <span class="keyword">boolean</span> clientAutoCommit) &#123;</div><div class="line">   String xaCmd = <span class="keyword">null</span>;</div><div class="line">   <span class="keyword">boolean</span> conAutoComit = <span class="keyword">this</span>.autocommit;</div><div class="line">   String conSchema = <span class="keyword">this</span>.schema;</div><div class="line">   <span class="comment">// never executed modify sql,so auto commit</span></div><div class="line">   <span class="keyword">boolean</span> expectAutocommit = !modifiedSQLExecuted || isFromSlaveDB() || clientAutoCommit;</div><div class="line">   <span class="keyword">if</span> (expectAutocommit == <span class="keyword">false</span> &amp;&amp; xaTxID != <span class="keyword">null</span> &amp;&amp; xaStatus == TxState.TX_INITIALIZE_STATE) &#123; <span class="comment">// 😈😈😈</span></div><div class="line">       xaCmd = <span class="string">"XA START "</span> + xaTxID + <span class="string">';'</span>;</div><div class="line">       <span class="keyword">this</span>.xaStatus = TxState.TX_STARTED_STATE;</div><div class="line">   &#125;</div><div class="line">   <span class="comment">// .... 省略代码</span></div><div class="line">   StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">   <span class="comment">// .... 省略代码</span></div><div class="line">   <span class="keyword">if</span> (xaCmd != <span class="keyword">null</span>) &#123;</div><div class="line">       sb.append(xaCmd);</div><div class="line">   &#125;</div><div class="line">   <span class="comment">// and our query sql to multi command at last</span></div><div class="line">   sb.append(rrn.getStatement() + <span class="string">";"</span>);</div><div class="line">   <span class="comment">// syn and execute others</span></div><div class="line">   <span class="keyword">this</span>.sendQueryCmd(sb.toString());</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>举个 变量<code>sb</code> 的例子：</p>
<p><figure class="highlight sql"><table><tr><td class="code"><pre><div class="line"><span class="keyword">SET</span> <span class="keyword">names</span> utf8;<span class="keyword">SET</span> autocommit=<span class="number">0</span>;XA <span class="keyword">START</span> <span class="string">'1f2da7353e8846e5833b8d8dd041cfb1'</span>,<span class="string">'db2'</span>;<span class="keyword">insert</span> <span class="keyword">into</span> t_user(<span class="keyword">id</span>, username, <span class="keyword">password</span>) <span class="keyword">VALUES</span> (<span class="number">3400</span>, <span class="string">'b7c5ec1f-11cc-4599-851c-06ad617fec42'</span>, <span class="string">'d2694679-f6a2-4623-a339-48d4a868be90'</span>);</div></pre></td></tr></table></figure></p>
<h2>3.4 MySQL 接收 COMMIT</h2>
<h3>3.4.1 单节点事务 or 多节点事务</h3>
<p><code>COMMIT</code> 执行时，MyCAT 会判断 XA 事务里，涉及到的数据库节点数量。</p>
<ul>
<li>如果节点数量为 1，单节点事务，使用 <code>CommitNodeHandler</code> 处理。</li>
<li>如果节点数量 &gt; 1，多节点事务，使用 <code>MultiNodeCoordinator</code> 处理。</li>
</ul>
<p><code>CommitNodeHandler</code> 相比 <code>MultiNodeCoordinator</code> 来说，只有一个数据节点，不需要进行多节点协调，逻辑会相对简单，有兴趣的同学可以另外看。我们主要分析 <code>MultiNodeCoordinator</code>。</p>
<h3>3.4.2 协调日志</h3>
<p><strong>协调日志</strong>，记录协调过程中各数据节点 XA 事务状态，处理<strong>MyCAT异常奔溃</strong>或者<strong>数据节点部分XA COMMIT，另外部分 XA PREPARE</strong>下的状态恢复。</p>
<p><strong>XA 事务共有种</strong>：</p>
<ol>
<li>TX_INITIALIZE_STATE ：事务初始化</li>
<li>TX_STARTED_STATE ：事务开始完成</li>
<li>TX_PREPARED_STATE ：事务准备完成</li>
<li>TX_COMMITED_STATE ：事务提交完成</li>
<li>TX_ROLLBACKED_STATE ：事务回滚完成</li>
</ol>
<p><strong>状态变更流</strong> ：TX_INITIALIZE_STATE =&gt; TX_STARTED_STATE =&gt; TX_PREPARED_STATE =&gt; TX_COMMITED_STATE / TX_ROLLBACKED_STATE 。</p>
<p><strong>协调日志包含两个部分</strong>：</p>
<ol>
<li>CoordinatorLogEntry ：协调者日志</li>
<li>ParticipantLogEntry ：参与者日志。<strong>此处，数据节点扮演参与者的角色。下文中，可能会出现参与者与数据节点混用的情况，望见谅。</strong></li>
</ol>
<p><em>一次 XA 事务，对应一条 <code>CoordinatorLogEntry</code>。一条<code>CoordinatorLogEntry</code> 包含 N条<code>ParticipantLogEntry</code></em>。 核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// CoordinatorLogEntry ：协调者日志</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CoordinatorLogEntry</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * XA 事务编号</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String id;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 参与者日志数组</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> ParticipantLogEntry[] participants;</div><div class="line">&#125;</div><div class="line"><span class="comment">// ParticipantLogEntry ：参与者日志</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParticipantLogEntry</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * XA 事务编号</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> String coordinatorId;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 数据库 uri</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> String uri;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 过期描述</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">long</span> expires;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * XA 事务状态</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> txState;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 参与者名字</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> String resourceName;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>MyCAT 记录协调日志以 JSON格式 到文件</strong>。<strong>每行</strong>包含一条<code>CoordinatorLogEntry</code>。举个例子：</p>
<p><figure class="highlight json"><table><tr><td class="code"><pre><div class="line">&#123;<span class="attr">"id"</span>:<span class="string">"'e827b3fe666c4d968961350d19adda31'"</span>,<span class="attr">"participants"</span>:[&#123;<span class="attr">"uri"</span>:<span class="string">"127.0.0.1"</span>,<span class="attr">"state"</span>:<span class="string">"3"</span>,<span class="attr">"expires"</span>:<span class="number">0</span>,<span class="attr">"resourceName"</span>:<span class="string">"db3"</span>&#125;,&#123;<span class="attr">"uri"</span>:<span class="string">"127.0.0.1"</span>,<span class="attr">"state"</span>:<span class="string">"3"</span>,<span class="attr">"expires"</span>:<span class="number">0</span>,<span class="attr">"resourceName"</span>:<span class="string">"db1"</span>&#125;]&#125;</div><div class="line">&#123;<span class="attr">"id"</span>:<span class="string">"'f00b61fa17cb4ec5b8264a6d82f847d0'"</span>,<span class="attr">"participants"</span>:[&#123;<span class="attr">"uri"</span>:<span class="string">"127.0.0.1"</span>,<span class="attr">"state"</span>:<span class="string">"3"</span>,<span class="attr">"expires"</span>:<span class="number">0</span>,<span class="attr">"resourceName"</span>:<span class="string">"db2"</span>&#125;,&#123;<span class="attr">"uri"</span>:<span class="string">"127.0.0.1"</span>,<span class="attr">"state"</span>:<span class="string">"3"</span>,<span class="attr">"expires"</span>:<span class="number">0</span>,<span class="attr">"resourceName"</span>:<span class="string">"db1"</span>&#125;]&#125;</div></pre></td></tr></table></figure></p>
<p>实现类为：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// XA 协调者日志 存储接口：https://github.com/YunaiV/Mycat-Server/blob/1.6/src/main/java/io/mycat/backend/mysql/xa/recovery/Repository.java</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Repository</span> </span>&#123;&#125;</div><div class="line"><span class="comment">// XA 协调者日志 文件存储：https://github.com/YunaiV/Mycat-Server/blob/1.6/src/main/java/io/mycat/backend/mysql/xa/recovery/impl/FileSystemRepository.java</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileSystemRepository</span> <span class="keyword">implements</span> <span class="title">Repository</span> </span>&#123;&#125;</div><div class="line"><span class="comment">// XA 协调者日志 文件存储：https://github.com/YunaiV/Mycat-Server/blob/1.6/src/main/java/io/mycat/backend/mysql/xa/recovery/impl/InMemoryRepository.java</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InMemoryRepository</span> <span class="keyword">implements</span> <span class="title">Repository</span> </span>&#123;&#125;</div></pre></td></tr></table></figure></p>
<p>目前日志文件写入的方式性能较差，这里我们不做分析，在【4. MyCAT 实现缺陷】里一起讲。</p>
<h3>3.4.3 MultiNodeCoordinator</h3>
<p>敲敲敲，这里是本文的重点之一噢。😈</p>
<p><strong>第一阶段：发起 PREPARE。</strong></p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">executeBatchNodeCmd</span><span class="params">(SQLCtrlCommand cmdHandler)</span> </span>&#123;</div><div class="line">   <span class="keyword">this</span>.cmdHandler = cmdHandler;</div><div class="line">   <span class="keyword">final</span> <span class="keyword">int</span> initCount = session.getTargetCount();</div><div class="line">   runningCount.set(initCount);</div><div class="line">   nodeCount = initCount;</div><div class="line">   failed.set(<span class="keyword">false</span>);</div><div class="line">   faileCount.set(<span class="number">0</span>);</div><div class="line">   <span class="comment">//recovery nodes log</span></div><div class="line">   ParticipantLogEntry[] participantLogEntry = <span class="keyword">new</span> ParticipantLogEntry[initCount];</div><div class="line">   <span class="comment">// 执行</span></div><div class="line">   <span class="keyword">int</span> started = <span class="number">0</span>;</div><div class="line">   <span class="keyword">for</span> (RouteResultsetNode rrn : session.getTargetKeys()) &#123;</div><div class="line">       <span class="keyword">if</span> (rrn == <span class="keyword">null</span>) &#123;</div><div class="line">           <span class="keyword">continue</span>;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">final</span> BackendConnection conn = session.getTarget(rrn);</div><div class="line">       <span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</div><div class="line">           conn.setResponseHandler(<span class="keyword">this</span>);</div><div class="line">           <span class="comment">//process the XA_END XA_PREPARE Command</span></div><div class="line">           MySQLConnection mysqlCon = (MySQLConnection) conn;</div><div class="line">           String xaTxId = <span class="keyword">null</span>;</div><div class="line">           <span class="keyword">if</span> (session.getXaTXID() != <span class="keyword">null</span>) &#123;</div><div class="line">               xaTxId = session.getXaTXID() + <span class="string">",'"</span> + mysqlCon.getSchema() + <span class="string">"'"</span>;</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">if</span> (mysqlCon.getXaStatus() == TxState.TX_STARTED_STATE) &#123; <span class="comment">// XA 事务</span></div><div class="line">               <span class="comment">//recovery Log</span></div><div class="line">               participantLogEntry[started] = <span class="keyword">new</span> ParticipantLogEntry(xaTxId, conn.getHost(), <span class="number">0</span>, conn.getSchema(), ((MySQLConnection) conn).getXaStatus());</div><div class="line">               String[] cmds = <span class="keyword">new</span> String[]&#123;<span class="string">"XA END "</span> + xaTxId, <span class="comment">// XA END 命令</span></div><div class="line">                       <span class="string">"XA PREPARE "</span> + xaTxId&#125;; <span class="comment">// XA PREPARE 命令</span></div><div class="line">               mysqlCon.execBatchCmd(cmds);</div><div class="line">           &#125; <span class="keyword">else</span> &#123; <span class="comment">// 非 XA 事务</span></div><div class="line">               <span class="comment">// recovery Log</span></div><div class="line">               participantLogEntry[started] = <span class="keyword">new</span> ParticipantLogEntry(xaTxId, conn.getHost(), <span class="number">0</span>, conn.getSchema(), ((MySQLConnection) conn).getXaStatus());</div><div class="line">               cmdHandler.sendCommand(session, conn);</div><div class="line">           &#125;</div><div class="line">           ++started;</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">   <span class="comment">// xa recovery log</span></div><div class="line">   <span class="keyword">if</span> (session.getXaTXID() != <span class="keyword">null</span>) &#123;</div><div class="line">       CoordinatorLogEntry coordinatorLogEntry = <span class="keyword">new</span> CoordinatorLogEntry(session.getXaTXID(), <span class="keyword">false</span>, participantLogEntry);</div><div class="line">       inMemoryRepository.put(session.getXaTXID(), coordinatorLogEntry);</div><div class="line">       fileRepository.writeCheckpoint(inMemoryRepository.getAllCoordinatorLogEntries());</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">if</span> (started &lt; nodeCount) &#123; <span class="comment">// TODO 疑问：如何触发</span></div><div class="line">       runningCount.set(started);</div><div class="line">       LOGGER.warn(<span class="string">"some connection failed to execute "</span> + (nodeCount - started));</div><div class="line">       <span class="comment">/**</span></div><div class="line">        * assumption: only caused by front-end connection close. &lt;br/&gt;</div><div class="line">        * Otherwise, packet must be returned to front-end</div><div class="line">        */</div><div class="line">       failed.set(<span class="keyword">true</span>);</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>向各数据节点发送 <code>XA END</code> + <code>XA PREPARE</code> 指令。举个 变量<code>cmds</code> 例子：</li>
</ul>
<p><figure class="highlight sql"><table><tr><td class="code"><pre><div class="line">XA <span class="keyword">END</span> <span class="string">'4cbb18214d0b47adbdb0658598666677'</span>,<span class="string">'db3'</span>;XA <span class="keyword">PREPARE</span> <span class="string">'4cbb18214d0b47adbdb0658598666677'</span>,<span class="string">'db3'</span>;</div></pre></td></tr></table></figure></p>
<ul>
<li>记录协调日志。每条参与者日志状态为 <code>TxState.TX_STARTED_STATE</code>。</li>
</ul>
<hr>
<p><strong>第二阶段：发起 COMMIT。</strong></p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">okResponse</span><span class="params">(<span class="keyword">byte</span>[] ok, BackendConnection conn)</span> </span>&#123;</div><div class="line">   <span class="comment">// process the XA Transatcion 2pc commit</span></div><div class="line">   <span class="keyword">if</span> (conn <span class="keyword">instanceof</span> MySQLConnection) &#123;</div><div class="line">       MySQLConnection mysqlCon = (MySQLConnection) conn;</div><div class="line">       <span class="keyword">switch</span> (mysqlCon.getXaStatus()) &#123;</div><div class="line">           <span class="keyword">case</span> TxState.TX_STARTED_STATE:</div><div class="line">               <span class="comment">//if there have many SQL execute wait the okResponse,will come to here one by one</span></div><div class="line">               <span class="comment">//should be wait all nodes ready ,then send xa commit to all nodes.</span></div><div class="line">               <span class="keyword">if</span> (mysqlCon.batchCmdFinished()) &#123;</div><div class="line">                   String xaTxId = session.getXaTXID();</div><div class="line">                   String cmd = <span class="string">"XA COMMIT "</span> + xaTxId + <span class="string">",'"</span> + mysqlCon.getSchema() + <span class="string">"'"</span>;</div><div class="line">                   <span class="keyword">if</span> (LOGGER.isDebugEnabled()) &#123;</div><div class="line">                       LOGGER.debug(<span class="string">"Start execute the cmd :"</span> + cmd + <span class="string">",current host:"</span> + mysqlCon.getHost() + <span class="string">":"</span> + mysqlCon.getPort());</div><div class="line">                   &#125;</div><div class="line">                   <span class="comment">// recovery log</span></div><div class="line">                   CoordinatorLogEntry coordinatorLogEntry = inMemoryRepository.get(xaTxId);</div><div class="line">                   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; coordinatorLogEntry.participants.length; i++) &#123;</div><div class="line">                       LOGGER.debug(<span class="string">"[In Memory CoordinatorLogEntry]"</span> + coordinatorLogEntry.participants[i]);</div><div class="line">                       <span class="keyword">if</span> (coordinatorLogEntry.participants[i].resourceName.equals(conn.getSchema())) &#123;</div><div class="line">                           coordinatorLogEntry.participants[i].txState = TxState.TX_PREPARED_STATE;</div><div class="line">                       &#125;</div><div class="line">                   &#125;</div><div class="line">                   inMemoryRepository.put(xaTxId, coordinatorLogEntry);</div><div class="line">                   fileRepository.writeCheckpoint(inMemoryRepository.getAllCoordinatorLogEntries());</div><div class="line">                   <span class="comment">// send commit</span></div><div class="line">                   mysqlCon.setXaStatus(TxState.TX_PREPARED_STATE);</div><div class="line">                   mysqlCon.execCmd(cmd);</div><div class="line">               &#125;</div><div class="line">               <span class="keyword">return</span>;</div><div class="line">           <span class="keyword">case</span> TxState.TX_PREPARED_STATE: &#123;</div><div class="line">               <span class="comment">// recovery log</span></div><div class="line">               String xaTxId = session.getXaTXID();</div><div class="line">               CoordinatorLogEntry coordinatorLogEntry = inMemoryRepository.get(xaTxId);</div><div class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; coordinatorLogEntry.participants.length; i++) &#123;</div><div class="line">                   <span class="keyword">if</span> (coordinatorLogEntry.participants[i].resourceName.equals(conn.getSchema())) &#123;</div><div class="line">                       coordinatorLogEntry.participants[i].txState = TxState.TX_COMMITED_STATE;</div><div class="line">                   &#125;</div><div class="line">               &#125;</div><div class="line">               inMemoryRepository.put(xaTxId, coordinatorLogEntry);</div><div class="line">               fileRepository.writeCheckpoint(inMemoryRepository.getAllCoordinatorLogEntries());</div><div class="line">               <span class="comment">// XA reset status now</span></div><div class="line">               mysqlCon.setXaStatus(TxState.TX_INITIALIZE_STATE);</div><div class="line">               <span class="keyword">break</span>;</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">default</span>:</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">   <span class="comment">// 释放连接</span></div><div class="line">   <span class="keyword">if</span> (<span class="keyword">this</span>.cmdHandler.relaseConOnOK()) &#123;</div><div class="line">       session.releaseConnection(conn);</div><div class="line">   &#125; <span class="keyword">else</span> &#123;</div><div class="line">       session.releaseConnectionIfSafe(conn, LOGGER.isDebugEnabled(), <span class="keyword">false</span>);</div><div class="line">   &#125;</div><div class="line">   <span class="comment">// 是否所有节点都完成commit，如果是，则返回Client 成功</span></div><div class="line">   <span class="keyword">if</span> (<span class="keyword">this</span>.finished()) &#123;</div><div class="line">       cmdHandler.okResponse(session, ok);</div><div class="line">       <span class="keyword">if</span> (cmdHandler.isAutoClearSessionCons()) &#123;</div><div class="line">           session.clearResources(<span class="keyword">false</span>);</div><div class="line">       &#125;</div><div class="line">       <span class="comment">/* 1.  事务提交后,xa 事务结束   */</span></div><div class="line">       <span class="keyword">if</span> (session.getXaTXID() != <span class="keyword">null</span>) &#123;</div><div class="line">           session.setXATXEnabled(<span class="keyword">false</span>);</div><div class="line">       &#125;</div><div class="line">       <span class="comment">/* 2. preAcStates 为true,事务结束后,需要设置为true。preAcStates 为ac上一个状态    */</span></div><div class="line">       <span class="keyword">if</span> (session.getSource().isPreAcStates()) &#123;</div><div class="line">           session.getSource().setAutocommit(<span class="keyword">true</span>);</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li><code>mysqlCon.batchCmdFinished()</code> 每个数据节点，第一次返回的是 <code>XA END</code> 成功，第二次返回的是 <code>XA PREPARE</code>。在 <code>XA PREPARE</code> 成功后，记录该数据节点的<strong>参与者日志</strong>状态为 <code>TxState.TX_PREPARED_STATE</code>。之后，向该数据节点发起 <code>XA COMMIT</code> 命令。</li>
<li><code>XA COMMIT</code> 返回成功后，记录该数据节点的<strong>事务参与者日志</strong>状态为 <code>TxState.TX_COMMITED_STATE</code>。</li>
<li>当所有数据节点（参与者）都执行完成 <code>XA COMMIT</code> 返回，即 <code>this.finished() == true</code>，返回 MySQL Client XA 事务提交成功。</li>
</ul>
<p>[x] <code>XA PREPARE</code> 和 <code>XA COMMIT</code>，数据节点可能返回失败，目前暂时没模拟出来，对应方法为 <code>#errorResponse(....)</code>。</p>
<h2>3.5 MyCAT 启动回滚 XA事务</h2>
<p>MyCAT 启动时，会<strong>回滚处于TxState.TX_PREPARED_STATE</strong>的 <code>ParticipantLogEntry</code> 对应的数据节点的 XA 事务。代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// MycatServer.java</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">performXARecoveryLog</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="comment">// fetch the recovery log</span></div><div class="line">   CoordinatorLogEntry[] coordinatorLogEntries = getCoordinatorLogEntries();</div><div class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; coordinatorLogEntries.length; i++) &#123;</div><div class="line">       CoordinatorLogEntry coordinatorLogEntry = coordinatorLogEntries[i];</div><div class="line">       <span class="keyword">boolean</span> needRollback = <span class="keyword">false</span>;</div><div class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; coordinatorLogEntry.participants.length; j++) &#123;</div><div class="line">           ParticipantLogEntry participantLogEntry = coordinatorLogEntry.participants[j];</div><div class="line">           <span class="keyword">if</span> (participantLogEntry.txState == TxState.TX_PREPARED_STATE) &#123;</div><div class="line">               needRollback = <span class="keyword">true</span>;</div><div class="line">               <span class="keyword">break</span>;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">if</span> (needRollback) &#123;</div><div class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; coordinatorLogEntry.participants.length; j++) &#123;</div><div class="line">               ParticipantLogEntry participantLogEntry = coordinatorLogEntry.participants[j];</div><div class="line">               <span class="comment">//XA rollback</span></div><div class="line">               String xacmd = <span class="string">"XA ROLLBACK "</span> + coordinatorLogEntry.id + <span class="string">';'</span>;</div><div class="line">               OneRawSQLQueryResultHandler resultHandler = <span class="keyword">new</span> OneRawSQLQueryResultHandler(<span class="keyword">new</span> String[<span class="number">0</span>], <span class="keyword">new</span> XARollbackCallback());</div><div class="line">               outloop:</div><div class="line">               <span class="keyword">for</span> (SchemaConfig schema : MycatServer.getInstance().getConfig().getSchemas().values()) &#123;</div><div class="line">                   <span class="keyword">for</span> (TableConfig table : schema.getTables().values()) &#123;</div><div class="line">                       <span class="keyword">for</span> (String dataNode : table.getDataNodes()) &#123;</div><div class="line">                           PhysicalDBNode dn = MycatServer.getInstance().getConfig().getDataNodes().get(dataNode);</div><div class="line">                           <span class="keyword">if</span> (dn.getDbPool().getSource().getConfig().getIp().equals(participantLogEntry.uri)</div><div class="line">                                   &amp;&amp; dn.getDatabase().equals(participantLogEntry.resourceName)) &#123;</div><div class="line">                               <span class="comment">//XA STATE ROLLBACK</span></div><div class="line">                               participantLogEntry.txState = TxState.TX_ROLLBACKED_STATE;</div><div class="line">                               SQLJob sqlJob = <span class="keyword">new</span> SQLJob(xacmd, dn.getDatabase(), resultHandler, dn.getDbPool().getSource());</div><div class="line">                               sqlJob.run();</div><div class="line">                               <span class="keyword">break</span> outloop;</div><div class="line">                           &#125;</div><div class="line">                       &#125;</div><div class="line">                   &#125;</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">   <span class="comment">// init into in memory cached</span></div><div class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; coordinatorLogEntries.length; i++) &#123;</div><div class="line">  MultiNodeCoordinator.inMemoryRepository.put(coordinatorLogEntries[i].id, coordinatorLogEntries[i]);</div><div class="line">   &#125;</div><div class="line">   <span class="comment">// discard the recovery log</span></div><div class="line">    MultiNodeCoordinator.fileRepository.writeCheckpoint(MultiNodeCoordinator.inMemoryRepository.getAllCoordinatorLogEntries());</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1>4. MyCAT 实现缺陷</h1>
<p>MyCAT 1.6.5 版本实现弱XA事务，相对来说，笔者认为距离实际生产使用存在一些差距。下面罗列可能存在的缺陷，如有错误，麻烦指出。🙂希望 MyCAT 在分布式事务的实现上，能够越来越给力。</p>
<h2>4.1 协调日志写入性能</h2>
<p>1、<code>CoordinatorLogEntry</code>、<code>ParticipantLogEntry</code> 在每次写入文件时，是将内存中所有的日志<strong>全部重新</strong>写入，导致写入性能随着 XA 事务次数的增加，性能会越来越糟糕，导致 XA 事务整体性能会非常差。另外，该方法是<strong>同步</strong>的，也加大了写入的延迟。</p>
<p>建议：先获得可写入文件的 OFFSET，写入协调日志到文件，内存维护好 XA事务编号 与 OFFSET 的映射关系，从而实现<strong>顺序写入</strong> + <strong>并行写入</strong>。</p>
<p>2、内存里维护了所有的协调日志，占用内存会越来越大，并且无释放机制。即使重启，协调日志也会重新加载到内存。</p>
<p>建议：已完全回滚或者提交的协调日志不放入内存。另外有文件存储好 XA事务编号 与 OFFSET 的映射关系。</p>
<p>3、协调日志只写入单个文件。</p>
<p>建议：分拆协调日志文件。</p>
<p>PS：有兴趣的同学可以看下 <code>RocketMQ</code> 对 <code>CommitLog</code> 的存储，性能上很赞！</p>
<h2>4.2 数据节点未全部 PREPARE 就进行 COMMIT</h2>
<p>XA 事务定义，需要等待所有参与者<strong>全部</strong> <code>XA PREPARE</code> 成功完成后发起 <code>XA COMMIT</code>。目前 MyCAT 是某个数据节点 <code>XA PREPARE</code> 完成后<strong>立即</strong>进行 <code>XA COMMIT</code>。比如说：第一个数据节点提交了 <code>XA END;XA PREPARE</code> 时，第二个数据节在进行 <code>XA END;XA PREAPRE;</code> 前挂了，第一个节点依然会 <code>XA COMMIT</code> 成功。</p>
<p>建议：按照严格的 XA 事务定义。</p>
<h2>4.3 MyCAT 启动回滚 PREPARE 的 XA事务</h2>
<p>1、MyCAT 启动时，回滚所有的 <code>PREPARE</code> 的 XA 事务，可能某个 XA 事务，部分 <code>COMMIT</code>，部分 <code>PREPARE</code>。此时直接回滚，会导致数据不一致。</p>
<p>建议：当判断到某个 XA 事务存在 <code>PREPARE</code> 的参与者，<strong>同时判断该 XA 事务里其他参与者的事务状态</strong>以及<strong>数据节点里 XA 事务状态</strong>，比如参与者为 <code>MySQL</code>时，可以使用 <code>XA RECOVER</code> 查询处于 <code>PREPARE</code> 所有的 XA 事务。</p>
<p>2、回滚 <code>PREPARE</code> 是异步进行的，在未进行完成时已经设置文件里回滚成功。如果异步过程中失败，会导致 XA 事务状态不一致。</p>
<p>建议：回调成功后，更新该 XA 事务状态。</p>
<h2>4.4 单节点事务未记录协调日志</h2>
<p>该情况较为极端。发起 <code>XA PREPARE</code>完后，MyCAT 挂了。重启后，该 XA 事务在 MyCAT 里就“消失“了，参与者的该 XA 事务一直处于 <code>PREPARE</code> 状态。从理论上来说，需要回滚该 XA 事务。</p>
<p>建议：记录协调日志。</p>
<h2>4.5 XA COMMIT 部分节点挂了重新恢复后，未进一步处理</h2>
<p>当一部分节点 <code>XA COMMIT</code> 完成，另外一部分此时挂了。在管理员重启挂掉的节点，其对应的 XA 事务未进一步处理，导致数据不一致。</p>
<p>建议：😈木有建议。也很好奇，如果是这样的情况，如何处理较为合适。如有大大知道，烦请告知下。</p>
<h1>5. 彩蛋</h1>
<p>例行“彩蛋”？</p>
<ul>
<li><a href="http://blog.csdn.net/d6619309/article/details/52330334" rel="external nofollow noopener noreferrer" target="_blank">《Mycat源码篇 : MyCat事务管理机制分析》</a> 来自 MyCAT Committer 的文章</li>
<li><a href="http://mysql.taobao.org/monthly/2015/04/05/" rel="external nofollow noopener noreferrer" target="_blank">《MySQL · 捉虫动态 · 连接断开导致XA事务丢失》</a></li>
<li><a href="http://www.infoq.com/cn/articles/solution-of-distributed-system-transaction-consistency" rel="external nofollow noopener noreferrer" target="_blank">《分布式系统事务一致性解决方案》</a></li>
<li><a href="http://blog.csdn.net/fly2749/article/details/44998203" rel="external nofollow noopener noreferrer" target="_blank">《MySQL数据库分布式事务XA优缺点与改进方案》</a></li>
<li><a href="http://www.hollischuang.com/archives/1580" rel="external nofollow noopener noreferrer" target="_blank">《深入理解分布式系统的2PC和3PC》</a></li>
<li><a href="https://github.com/YunaiV/yunaiv.github.io/blob/master/source/_drafts/MyCAT/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1.xmind" rel="external nofollow noopener noreferrer" target="_blank">【分布式事务.xmind】</a> 笔者拙作</li>
<li><a href="http://www.yunai.me/RocketMQ/message-transaction/?self">《RocketMQ 源码分析 —— 事务消息》</a> 笔者拙作</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://www.yunai.me/images/common/wechat_mp_2017_07_31.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;🙂🙂🙂关注**微信公众号：【芋艿的后端小屋】**有福利：&lt;/p&gt;
&lt;ol
    
    </summary>
    
      <category term="MyCAT" scheme="http://www.yunai.me/categories/MyCAT/"/>
    
    
  </entry>
  
  <entry>
    <title>MyCAT 源码分析  —— 跨库两表Join</title>
    <link href="http://www.yunai.me/MyCAT/two-table-share-join/"/>
    <id>http://www.yunai.me/MyCAT/two-table-share-join/</id>
    <published>2017-07-11T16:00:00.000Z</published>
    <updated>2017-07-31T12:30:52.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://www.yunai.me/images/common/wechat_mp_2017_07_31.jpg" alt=""></p>
<blockquote>
<p>🙂🙂🙂关注**微信公众号：【芋艿的后端小屋】**有福利：</p>
<ol>
<li>RocketMQ / MyCAT / Sharding-JDBC <strong>所有</strong>源码分析文章列表</li>
<li>RocketMQ / MyCAT / Sharding-JDBC <strong>中文注释源码 GitHub 地址</strong></li>
<li>您对于源码的疑问每条留言<strong>都</strong>将得到<strong>认真</strong>回复。<strong>甚至不知道如何读源码也可以请教噢</strong>。</li>
<li><strong>新的</strong>源码解析文章<strong>实时</strong>收到通知。<strong>每周更新一篇左右</strong>。</li>
<li><strong>认真的</strong>源码交流微信群。</li>
</ol>
</blockquote>
<hr>
<ul>
<li><a href="#">1. 概述</a></li>
<li><a href="#">2. 主流程</a></li>
<li><a href="#">3. ShareJoin</a>
<ul>
<li><a href="#">3.1 JoinParser</a></li>
<li><a href="#">3.2 ShareJoin.processSQL(...)</a></li>
<li><a href="#">3.3 BatchSQLJob</a></li>
<li><a href="#">3.4 ShareDBJoinHandler</a></li>
<li><a href="#">3.5 ShareRowOutPutDataHandler</a></li>
</ul>
</li>
<li><a href="#">4. 彩蛋</a></li>
</ul>
<hr>
<h1>1. 概述</h1>
<p>MyCAT 支持跨库表 Join，目前版本仅支持跨库<strong>两</strong>表 Join。虽然如此，已经能够满足我们大部分的业务场景。况且，Join 过多的表可能带来的性能问题也是很麻烦的。</p>
<p>本文主要分享：</p>
<ol>
<li>整体流程、调用顺序图</li>
<li>核心代码的分析</li>
</ol>
<p>前置阅读：<a href="http://www.yunai.me/MyCAT/single-db-single-table-select/?yunai">《MyCAT 源码分析 —— 【单库单表】查询》</a>。</p>
<p>OK，Let's Go。</p>
<h1>2. 主流程</h1>
<p>当执行跨库两表 Join SQL 时，经历的大体流程如下：</p>
<p><img src="http://www.yunai.me/images/MyCAT/2017_07_12/01.png" alt=""></p>
<p>SQL 上，需要添加注解 <code>/*!mycat:catlet=io.mycat.catlets.ShareJoin */ ${SQL}</code> 。<code>RouteService#route(...)</code> 解析注解 <code>mycat:catlet</code> 后，路由给 <code>HintCatletHandler</code> 作进一步处理。</p>
<p><code>HintCatletHandler</code> 获取注解对应的 <code>Catlet</code> 实现类，<code>io.mycat.catlets.ShareJoin</code> 就是其中一种实现（目前也只有这一种实现），提供了跨库两表 Join 的功能。从类命名上看，<code>ShareJoin</code> 很大可能性后续会提供<strong>完整</strong>的跨库多表的 Join 功能。</p>
<p>核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// HintCatletHandler.java</span></div><div class="line"><span class="function"><span class="keyword">public</span> RouteResultset <span class="title">route</span><span class="params">(SystemConfig sysConfig, SchemaConfig schema,</span></span></div><div class="line">                           <span class="keyword">int</span> sqlType, String realSQL, String charset, ServerConnection sc,</div><div class="line">                           LayerCachePool cachePool, String hintSQLValue, <span class="keyword">int</span> hintSqlType, Map hintMap)</div><div class="line">       <span class="keyword">throws</span> SQLNonTransientException &#123;</div><div class="line">   String cateletClass = hintSQLValue;</div><div class="line">   <span class="keyword">if</span> (LOGGER.isDebugEnabled()) &#123;</div><div class="line">       LOGGER.debug(<span class="string">"load catelet class:"</span> + hintSQLValue + <span class="string">" to run sql "</span> + realSQL);</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">try</span> &#123;</div><div class="line">       Catlet catlet = (Catlet) MycatServer.getInstance().getCatletClassLoader().getInstanceofClass(cateletClass);</div><div class="line">       catlet.route(sysConfig, schema, sqlType, realSQL, charset, sc, cachePool);</div><div class="line">       catlet.processSQL(realSQL, <span class="keyword">new</span> EngineCtx(sc.getSession2()));</div><div class="line">   &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">       LOGGER.warn(<span class="string">"catlet error "</span> + e);</div><div class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> SQLNonTransientException(e);</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1>3. ShareJoin</h1>
<p>目前支持跨库<strong>两</strong>表 Join。<code>ShareJoin</code> 将 SQL 拆分成左表 SQL 和 右表 SQL，发送给各数据节点执行，汇总数据结果进行合后返回。</p>
<p>伪代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// SELECT u.id, o.id FROM t_order o </span></div><div class="line"><span class="comment">// INNER JOIN t_user u ON o.uid = u.id</span></div><div class="line"><span class="comment">// 【顺序】查询左表</span></div><div class="line">String leftSQL = <span class="string">"SELECT o.id, u.id FROM t_order o"</span>;</div><div class="line">List leftList = dn[<span class="number">0</span>].select(leftSQL) + dn[<span class="number">1</span>].select(leftSQL) + ... + dn[n].select(leftsql);</div><div class="line"><span class="comment">// 【并行】查询右表</span></div><div class="line">String rightSQL = <span class="string">"SELECT u.id FROM t_user u WHERE u.id IN ($&#123;leftList.uid&#125;)"</span>;</div><div class="line"><span class="keyword">for</span> (dn : dns) &#123; <span class="comment">// 此处是并行执行，使用回调逻辑</span></div><div class="line">    <span class="keyword">for</span> (rightRecord : dn.select(rightSQL)) &#123; <span class="comment">// 查询右表</span></div><div class="line">        <span class="comment">// 合并结果</span></div><div class="line">        <span class="keyword">for</span> (leftRecord : leftList) &#123;</div><div class="line">            <span class="keyword">if</span> (leftRecord.uid == rightRecord.id) &#123;</div><div class="line">                write(leftRecord + leftRecord.uid 拼接结果);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>实际情况会更加复杂，我们接下来一点点往下看。</p>
<h2>3.1 JoinParser</h2>
<p><code>JoinParser</code> 负责对 SQL 进行解析。整体流程如下：</p>
<p><img src="http://www.yunai.me/images/MyCAT/2017_07_12/02.png" alt=""></p>
<p>举个例子，<code>/*!mycat:catlet=io.mycat.catlets.ShareJoin */ SELECT o.id, u.username from t_order o join t_user u on o.uid = u.id;</code> 解析后，<code>TableFilter</code> 结果如下：</p>
<p><img src="http://www.yunai.me/images/MyCAT/2017_07_12/03.png" alt=""></p>
<ul>
<li>tName ：表名</li>
<li>tAlia ：表自定义命名</li>
<li>where ：过滤条件</li>
<li>order ：排序条件</li>
<li>parenTable ：左连接的 Join 的表名。<code>t_user</code>表 在 <code>join</code>属性 的 <code>parenTable</code> 为 &quot;o&quot;，即 <code>t_order</code>。</li>
<li>joinParentkey ：左连接的 Join 字段</li>
<li>joinKey ：join 字段。<code>t_user</code>表 在 <code>join</code>属性 为 <code>id</code>。</li>
<li>join ：子 tableFilter。即，该表连接的右边的表。</li>
<li>parent ：和 <code>join</code>属性 相对。</li>
</ul>
<p>看到此处，大家可能有疑问，为什么要把 SQL 解析成 <code>TableFilter</code>。<code>JoinParser</code> 根据 <code>TableFilter</code> 生成数据节点执行 SQL。代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// TableFilter.java</span></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getSQL</span><span class="params">()</span> </span>&#123;</div><div class="line">   String sql = <span class="string">""</span>;</div><div class="line">   <span class="comment">// fields</span></div><div class="line">   <span class="keyword">for</span> (Entry&lt;String, String&gt; entry : fieldAliasMap.entrySet()) &#123;</div><div class="line">       String key = entry.getKey();</div><div class="line">       String val = entry.getValue();</div><div class="line">       <span class="keyword">if</span> (val == <span class="keyword">null</span>) &#123;</div><div class="line">           sql = unionsql(sql, getFieldfrom(key), <span class="string">","</span>);</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           sql = unionsql(sql, getFieldfrom(key) + <span class="string">" as "</span> + val, <span class="string">","</span>);</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">   <span class="comment">// where</span></div><div class="line">   <span class="keyword">if</span> (parent == <span class="keyword">null</span>) &#123;    <span class="comment">// on/where 等于号左边的表</span></div><div class="line">       String parentJoinKey = getJoinKey(<span class="keyword">true</span>);</div><div class="line">       <span class="comment">// fix sharejoin bug：</span></div><div class="line">       <span class="comment">// (AbstractConnection.java:458) -close connection,reason:program err:java.lang.IndexOutOfBoundsException:</span></div><div class="line">       <span class="comment">// 原因是左表的select列没有包含 join 列，在获取结果时报上面的错误</span></div><div class="line">       <span class="keyword">if</span> (sql != <span class="keyword">null</span> &amp;&amp; parentJoinKey != <span class="keyword">null</span> &amp;&amp;</div><div class="line">               !sql.toUpperCase().contains(parentJoinKey.trim().toUpperCase())) &#123;</div><div class="line">           sql += <span class="string">", "</span> + parentJoinKey;</div><div class="line">       &#125;</div><div class="line">       sql = <span class="string">"select "</span> + sql + <span class="string">" from "</span> + tName;</div><div class="line">       <span class="keyword">if</span> (!(where.trim().equals(<span class="string">""</span>))) &#123;</div><div class="line">           sql += <span class="string">" where "</span> + where.trim();</div><div class="line">       &#125;</div><div class="line">   &#125; <span class="keyword">else</span> &#123;    <span class="comment">// on/where 等于号右边边的表</span></div><div class="line">       <span class="keyword">if</span> (allField) &#123;</div><div class="line">           sql = <span class="string">"select "</span> + sql + <span class="string">" from "</span> + tName;</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           sql = unionField(<span class="string">"select "</span> + joinKey, sql, <span class="string">","</span>);</div><div class="line">           sql = sql + <span class="string">" from "</span> + tName;</div><div class="line">           <span class="comment">//sql="select "+joinKey+","+sql+" from "+tName;</span></div><div class="line">       &#125;</div><div class="line">       <span class="keyword">if</span> (!(where.trim().equals(<span class="string">""</span>))) &#123;</div><div class="line">           sql += <span class="string">" where "</span> + where.trim() + <span class="string">" and ("</span> + joinKey + <span class="string">" in %s )"</span>;</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           sql += <span class="string">" where "</span> + joinKey + <span class="string">" in %s "</span>;</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">   <span class="comment">// order</span></div><div class="line">   <span class="keyword">if</span> (!(order.trim().equals(<span class="string">""</span>))) &#123;</div><div class="line">       sql += <span class="string">" order by "</span> + order.trim();</div><div class="line">   &#125;</div><div class="line">   <span class="comment">// limit</span></div><div class="line">   <span class="keyword">if</span> (parent == <span class="keyword">null</span>) &#123;</div><div class="line">       <span class="keyword">if</span> ((rowCount &gt; <span class="number">0</span>) &amp;&amp; (offset &gt; <span class="number">0</span>)) &#123;</div><div class="line">           sql += <span class="string">" limit"</span> + offset + <span class="string">","</span> + rowCount;</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           <span class="keyword">if</span> (rowCount &gt; <span class="number">0</span>) &#123;</div><div class="line">               sql += <span class="string">" limit "</span> + rowCount;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> sql;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>当 <code>parent</code> 为空时，即<strong>on/where 等于号左边的表</strong>。例如：<code>select id, uid from t_order</code>。</li>
<li>当 <code>parent</code>  不为空时，即<strong>on/where 等于号右边的表</strong>。例如：<code>select id, username from t_user where id in (1, 2, 3)</code>。</li>
</ul>
<h2>3.2 ShareJoin.processSQL(...)</h2>
<p>当 SQL 解析完后，生成<strong>左边的表</strong>执行的 SQL，发送给对应的数据节点查询数据。大体流程如下：</p>
<p><img src="http://www.yunai.me/images/MyCAT/2017_07_12/04.png" alt=""></p>
<p>当 SQL 为 <code>/*!mycat:catlet=io.mycat.catlets.ShareJoin */ SELECT o.id, u.username from t_order o join t_user u on o.uid = u.id;</code> 时，
<code>sql = getSql()</code> 的返回结果为 <code>select id, uid from t_order</code>。</p>
<p>生成<strong>左边的表</strong>执行的 SQL 后，<strong>顺序顺序顺序</strong>发送给对应的数据节点查询数据。具体顺序查询是怎么实现的，我们来看下章 <strong>BatchSQLJob</strong>。</p>
<h2>3.3 BatchSQLJob</h2>
<p><img src="http://www.yunai.me/images/MyCAT/2017_07_12/05.png" alt=""></p>
<p><code>EngineCtx</code> 对 <code>BatchSQLJob</code> 封装，提供上层两个方法：</p>
<ol>
<li>executeNativeSQLSequnceJob ：顺序（非并发）在每个数据节点执行SQL任务</li>
<li>executeNativeSQLParallJob ：并发在每个数据节点执行SQL任务</li>
</ol>
<p>核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// EngineCtx.java</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">executeNativeSQLSequnceJob</span><span class="params">(String[] dataNodes, String sql,</span></span></div><div class="line">		SQLJobHandler jobHandler) &#123;</div><div class="line">	<span class="keyword">for</span> (String dataNode : dataNodes) &#123;</div><div class="line">		SQLJob job = <span class="keyword">new</span> SQLJob(jobId.incrementAndGet(), sql, dataNode,</div><div class="line">				jobHandler, <span class="keyword">this</span>);</div><div class="line">		bachJob.addJob(job, <span class="keyword">false</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">executeNativeSQLParallJob</span><span class="params">(String[] dataNodes, String sql,</span></span></div><div class="line">		SQLJobHandler jobHandler) &#123;</div><div class="line">	<span class="keyword">for</span> (String dataNode : dataNodes) &#123;</div><div class="line">		SQLJob job = <span class="keyword">new</span> SQLJob(jobId.incrementAndGet(), sql, dataNode,</div><div class="line">				jobHandler, <span class="keyword">this</span>);</div><div class="line">		bachJob.addJob(job, <span class="keyword">true</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p><code>BatchSQLJob</code> 通过<strong>执行中任务列表</strong>、<strong>待执行任务列表</strong>来实现<strong>顺序/并发</strong>执行任务。核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// BatchSQLJob.java</span></div><div class="line"><span class="comment">/**</span></div><div class="line">* 执行中任务列表</div><div class="line">*/</div><div class="line"><span class="keyword">private</span> ConcurrentHashMap&lt;Integer, SQLJob&gt; runningJobs = <span class="keyword">new</span> ConcurrentHashMap&lt;Integer, SQLJob&gt;();</div><div class="line"><span class="comment">/**</span></div><div class="line">* 待执行任务列表</div><div class="line">*/</div><div class="line"><span class="keyword">private</span> ConcurrentLinkedQueue&lt;SQLJob&gt; waitingJobs = <span class="keyword">new</span> ConcurrentLinkedQueue&lt;SQLJob&gt;();</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addJob</span><span class="params">(SQLJob newJob, <span class="keyword">boolean</span> parallExecute)</span> </span>&#123;</div><div class="line">   <span class="keyword">if</span> (parallExecute) &#123;</div><div class="line">       runJob(newJob);</div><div class="line">   &#125; <span class="keyword">else</span> &#123;</div><div class="line">       waitingJobs.offer(newJob);</div><div class="line">       <span class="keyword">if</span> (runningJobs.isEmpty()) &#123; <span class="comment">// 若无正在执行中的任务，则从等待队列里获取任务进行执行。</span></div><div class="line">           SQLJob job = waitingJobs.poll();</div><div class="line">           <span class="keyword">if</span> (job != <span class="keyword">null</span>) &#123;</div><div class="line">               runJob(job);</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">jobFinished</span><span class="params">(SQLJob sqlJob)</span> </span>&#123;</div><div class="line">	runningJobs.remove(sqlJob.getId());</div><div class="line">	SQLJob job = waitingJobs.poll();</div><div class="line">	<span class="keyword">if</span> (job != <span class="keyword">null</span>) &#123;</div><div class="line">		runJob(job);</div><div class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">if</span> (noMoreJobInput) &#123;</div><div class="line">			<span class="keyword">return</span> runningJobs.isEmpty() &amp;&amp; waitingJobs.isEmpty();</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li><strong>顺序</strong>执行时，当 <code>runningJobs</code> 存在执行中的任务时，<code>#addJob(...)</code> 时，不立即执行，添加到 <code>waitingJobs</code>。当 <code>SQLJob</code> 完成时，顺序调用下一个任务。</li>
<li><strong>并发</strong>执行时，<code>#addJob(...)</code> 时，立即执行。</li>
</ul>
<hr>
<p><code>SQLJob</code> SQL 异步执行任务。其 <code>jobHandler(SQLJobHandler)</code> 属性，在 SQL 执行有返回结果时，会进行回调，从而实现异步执行。</p>
<p>在 <code>ShareJoin</code> 里，<code>SQLJobHandler</code> 有两个实现：<code>ShareDBJoinHandler</code>、<code>ShareRowOutPutDataHandler</code>。前者，<strong>左边的表</strong>执行的 SQL 回调；后者，<strong>右边的表</strong>执行的 SQL 回调。</p>
<p><img src="http://www.yunai.me/images/MyCAT/2017_07_12/06.png" alt=""></p>
<h2>3.4 ShareDBJoinHandler</h2>
<p><code>ShareDBJoinHandler</code>，<strong>左边的表</strong>执行的 SQL 回调。流程如下：</p>
<p><img src="http://www.yunai.me/images/MyCAT/2017_07_12/07.png" alt=""></p>
<ul>
<li><code>#fieldEofResponse(...)</code> ：接收数据节点返回的 fields，放入内存。</li>
<li><code>#rowResponse(...)</code> ：接收数据节点返回的 row，放入内存。</li>
<li><code>#rowEofResponse(...)</code> ：接收完一个数据节点返回所有的 row。当所有数据节点都完成 SQL 执行时，提交<strong>右边的表</strong>执行的 SQL 任务，<strong>并行</strong>执行，即图中**#createQryJob(...)**。</li>
</ul>
<p>当 SQL 为 <code>/*!mycat:catlet=io.mycat.catlets.ShareJoin */ SELECT o.id, u.username from t_order o join t_user u on o.uid = u.id;</code> 时，
<code>sql = getChildSQL()</code> 的返回结果为 <code>select id, username from t_user where id in (1, 2, 3)</code>。</p>
<p>核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// ShareJoin.java</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createQryJob</span><span class="params">(<span class="keyword">int</span> batchSize)</span> </span>&#123;</div><div class="line">   <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">   Map&lt;String, <span class="keyword">byte</span>[]&gt; batchRows = <span class="keyword">new</span> ConcurrentHashMap&lt;String, <span class="keyword">byte</span>[]&gt;();</div><div class="line">   String theId = <span class="keyword">null</span>;</div><div class="line">   StringBuilder sb = <span class="keyword">new</span> StringBuilder().append(<span class="string">'('</span>);</div><div class="line">   String svalue = <span class="string">""</span>;</div><div class="line">   <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; e : ids.entrySet()) &#123;</div><div class="line">       theId = e.getKey();</div><div class="line">       <span class="keyword">byte</span>[] rowbyte = rows.remove(theId);</div><div class="line">       <span class="keyword">if</span> (rowbyte != <span class="keyword">null</span>) &#123;</div><div class="line">           batchRows.put(theId, rowbyte);</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">if</span> (!svalue.equals(e.getValue())) &#123;</div><div class="line">           <span class="keyword">if</span> (joinKeyType == Fields.FIELD_TYPE_VAR_STRING</div><div class="line">                   || joinKeyType == Fields.FIELD_TYPE_STRING) &#123; <span class="comment">// joinkey 为varchar</span></div><div class="line">               sb.append(<span class="string">"'"</span>).append(e.getValue()).append(<span class="string">"'"</span>).append(<span class="string">','</span>); <span class="comment">// ('digdeep','yuanfang')</span></div><div class="line">           &#125; <span class="keyword">else</span> &#123; <span class="comment">// 默认joinkey为int/long</span></div><div class="line">               sb.append(e.getValue()).append(<span class="string">','</span>); <span class="comment">// (1,2,3)</span></div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">       svalue = e.getValue();</div><div class="line">       <span class="keyword">if</span> (count++ &gt; batchSize) &#123;</div><div class="line">           <span class="keyword">break</span>;</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</div><div class="line">       <span class="keyword">return</span>;</div><div class="line">   &#125;</div><div class="line">   jointTableIsData = <span class="keyword">true</span>;</div><div class="line">   sb.deleteCharAt(sb.length() - <span class="number">1</span>).append(<span class="string">')'</span>);</div><div class="line">   String sql = String.format(joinParser.getChildSQL(), sb);</div><div class="line">   getRoute(sql);</div><div class="line">   ctx.executeNativeSQLParallJob(getDataNodes(), sql, <span class="keyword">new</span> ShareRowOutPutDataHandler(<span class="keyword">this</span>, fields, joinindex, joinParser.getJoinRkey(), batchRows, ctx.getSession()));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2>3.5 ShareRowOutPutDataHandler</h2>
<p><code>ShareRowOutPutDataHandler</code>，<strong>右边的表</strong>执行的 SQL 回调。流程如下：</p>
<p><img src="http://www.yunai.me/images/MyCAT/2017_07_12/08.png" alt=""></p>
<ul>
<li><code>#fieldEofResponse(...)</code> ：接收数据节点返回的 fields，返回 header 给 MySQL Client。</li>
<li><code>#rowResponse(...)</code> ：接收数据节点返回的 row，匹配左表的记录，返回合并后返回的 row 给 MySQL Client。</li>
<li><code>#rowEofResponse(...)</code> ：当所有 row 都返回完后，返回 eof 给 MySQL Client。</li>
</ul>
<p>核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// ShareRowOutPutDataHandler.java</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onRowData</span><span class="params">(String dataNode, <span class="keyword">byte</span>[] rowData)</span> </span>&#123;</div><div class="line">   RowDataPacket rowDataPkgold = ResultSetUtil.parseRowData(rowData, bfields);</div><div class="line">   <span class="comment">//拷贝一份batchRows</span></div><div class="line">   Map&lt;String, <span class="keyword">byte</span>[]&gt; batchRowsCopy = <span class="keyword">new</span> ConcurrentHashMap&lt;String, <span class="keyword">byte</span>[]&gt;();</div><div class="line">   batchRowsCopy.putAll(arows);</div><div class="line">   <span class="comment">// 获取Id字段，</span></div><div class="line">   String id = ByteUtil.getString(rowDataPkgold.fieldValues.get(joinR));</div><div class="line">   <span class="comment">// 查找ID对应的A表的记录</span></div><div class="line">   <span class="keyword">byte</span>[] arow = getRow(batchRowsCopy, id, joinL);</div><div class="line">   <span class="keyword">while</span> (arow != <span class="keyword">null</span>) &#123;</div><div class="line">       RowDataPacket rowDataPkg = ResultSetUtil.parseRowData(arow, afields);<span class="comment">//ctx.getAllFields());</span></div><div class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; rowDataPkgold.fieldCount; i++) &#123;</div><div class="line">           <span class="comment">// 设置b.name 字段</span></div><div class="line">           <span class="keyword">byte</span>[] bname = rowDataPkgold.fieldValues.get(i);</div><div class="line">           rowDataPkg.add(bname);</div><div class="line">           rowDataPkg.addFieldCount(<span class="number">1</span>);</div><div class="line">       &#125;</div><div class="line">       <span class="comment">// huangyiming add</span></div><div class="line">       MiddlerResultHandler middlerResultHandler = session.getMiddlerResultHandler();</div><div class="line">       <span class="keyword">if</span> (<span class="keyword">null</span> == middlerResultHandler) &#123;</div><div class="line">           ctx.writeRow(rowDataPkg);</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           <span class="keyword">if</span> (middlerResultHandler <span class="keyword">instanceof</span> MiddlerQueryResultHandler) &#123;</div><div class="line">               <span class="keyword">byte</span>[] columnData = rowDataPkg.fieldValues.get(<span class="number">0</span>);</div><div class="line">               <span class="keyword">if</span> (columnData != <span class="keyword">null</span> &amp;&amp; columnData.length &gt; <span class="number">0</span>) &#123;</div><div class="line">                   String rowValue = <span class="keyword">new</span> String(columnData);</div><div class="line">                   middlerResultHandler.add(rowValue);</div><div class="line">               &#125;</div><div class="line">               <span class="comment">//&#125;</span></div><div class="line">           &#125;</div><div class="line"></div><div class="line">       &#125;</div><div class="line">       arow = getRow(batchRowsCopy, id, joinL);</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1>4. 彩蛋</h1>
<p>如下是本文涉及到的核心类，有兴趣的同学可以翻一翻。</p>
<p><img src="http://www.yunai.me/images/MyCAT/2017_07_12/09.png" alt=""></p>
<p><code>ShareJoin</code> 另外不支持的功能：</p>
<ol>
<li>只支持 inner join，不支持 left join、right join 等等连接。</li>
<li>不支持 order by。</li>
<li>不支持 group by 以及 相关聚合函数。</li>
<li>即使 join 左表的字段未声明为返回 fields 也会返回。</li>
</ol>
<p>恩，<strong>MyCAT 弱XA</strong> 源码继续走起！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://www.yunai.me/images/common/wechat_mp_2017_07_31.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;🙂🙂🙂关注**微信公众号：【芋艿的后端小屋】**有福利：&lt;/p&gt;
&lt;ol
    
    </summary>
    
      <category term="MyCAT" scheme="http://www.yunai.me/categories/MyCAT/"/>
    
    
  </entry>
  
  <entry>
    <title>MyCAT 源码解析 —— 分片结果合并（一）</title>
    <link href="http://www.yunai.me/MyCAT/sharding-result-merge-first/"/>
    <id>http://www.yunai.me/MyCAT/sharding-result-merge-first/</id>
    <published>2017-06-12T16:00:00.000Z</published>
    <updated>2017-07-31T12:30:52.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://www.yunai.me/images/common/wechat_mp_2017_07_31.jpg" alt=""></p>
<blockquote>
<p>🙂🙂🙂关注**微信公众号：【芋艿的后端小屋】**有福利：</p>
<ol>
<li>RocketMQ / MyCAT / Sharding-JDBC <strong>所有</strong>源码分析文章列表</li>
<li>RocketMQ / MyCAT / Sharding-JDBC <strong>中文注释源码 GitHub 地址</strong></li>
<li>您对于源码的疑问每条留言<strong>都</strong>将得到<strong>认真</strong>回复。<strong>甚至不知道如何读源码也可以请教噢</strong>。</li>
<li><strong>新的</strong>源码解析文章<strong>实时</strong>收到通知。<strong>每周更新一篇左右</strong>。</li>
<li><strong>认真的</strong>源码交流微信群。</li>
</ol>
</blockquote>
<hr>
<h1>1. 概述</h1>
<p>相信很多同学看过 MySQL 各种优化的文章，里面 99% 会提到：单表数据量大了，需要进行分片（水平拆分 or 垂直拆分）。分片之后，业务上必然面临的场景：跨分片的数据合并。今天我们就一起来瞅瞅 MyCAT 是如何实现<strong>分片结果合并</strong>。</p>
<p>跨分片查询大体流程如下：</p>
<p><img src="http://www.yunai.me/images/MyCAT/2017_06_13/flow.png" alt="flow"></p>
<p>和 <a href="http://www.yunai.me/Mycat/single-db-single-table-select/">《【单库单表】查询》</a> 不同的两个过程：</p>
<ul>
<li>【2】多分片执行 SQL</li>
<li>【4】合并多分片结果</li>
</ul>
<p>下面，我们来逐条讲解这两个过程。</p>
<h1>2. 多分片执行 SQL</h1>
<p><img src="http://www.yunai.me/images/MyCAT/2017_06_13/execute_sql.png" alt="execute_sql"></p>
<p>经过 SQL 解析后，计算出需要执行 SQL 的<strong>分片节点</strong>，遍历<strong>分片节点</strong>发送 SQL 进行执行。</p>
<p><strong>核心代码</strong>：</p>
<ul>
<li><a href="https://github.com/YunaiV/Mycat-Server/blob/1.6/src/main/java/io/mycat/backend/mysql/nio/handler/MultiNodeQueryHandler.java" rel="external nofollow noopener noreferrer" target="_blank">MultiNodeQueryHandler.java#execute(...)</a></li>
</ul>
<p><em><strong>SQL 解析</strong> 详细过程，我们另开文章，避免内容过多，影响大家对 <strong>分片结果合并</strong> 流程和逻辑的理解。</em></p>
<h1>3. 合并多分片结果</h1>
<p><img src="http://www.yunai.me/images/MyCAT/2017_06_13/handle_response.png" alt="handle_response"></p>
<p>和 <a href="http://www.yunai.me/Mycat/single-db-single-table-select/">《【单库单表】查询》</a> 不同，多个<strong>分片节点</strong>都会<strong>分别</strong>响应 <em>记录头(header)</em> 和 <em>记录行(row)</em> 。在开始分析 MyCAT 是怎么合并多分片结果之前，我们先来回想下 SQL 的执行顺序。</p>
<p><figure class="highlight sql"><table><tr><td class="code"><pre><div class="line">FROM       // [1] 选择表</div><div class="line">WHERE      // [2] 过滤表</div><div class="line">GROUP BY   // [3] 分组</div><div class="line"><span class="keyword">SELECT</span>     // [<span class="number">4</span>] 普通字段，<span class="keyword">max</span> / <span class="keyword">min</span> / <span class="keyword">avg</span> / <span class="keyword">sum</span> / <span class="keyword">count</span> 等函数，<span class="keyword">distinct</span></div><div class="line"><span class="keyword">HAVING</span>     // [<span class="number">5</span>] 再过滤表</div><div class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span>   // [<span class="number">6</span>] 排序</div><div class="line"><span class="keyword">LIMIT</span>      // [<span class="number">7</span>] 分页</div></pre></td></tr></table></figure></p>
<h2>3.1 记录头(header)</h2>
<p>多个<strong>分片节点</strong>响应时，会响应多次 <em>记录头(header)</em> 。MyCAT 在实际处理时，只处理第一个返回的 <em>记录头(header)</em> 。因此，在使用时要保证表的 Schema 相同。</p>
<p><strong>分片节点</strong>响应的 <em>记录头(header)</em> 可以直接返回 MySQL Client 吗？答案是不可以。<code>AVG</code>函数 是特殊情况，MyCAT 需要将 <code>AVG</code> 拆成 <code>SUM</code> + <code>COUNT</code> 进行计算。举个例子：</p>
<p><figure class="highlight"><table><tr><td class="code"><pre><div class="line">// [1] MySQL Client =&gt; MyCAT ：</div><div class="line">SELECT AVG(age) FROM student;</div><div class="line"></div><div class="line">// [2] MyCAT =&gt; MySQL Server ：</div><div class="line">SELECT SUM(age) AS AVG0SUM, COUNT(age) AS AVG0COUNT FROM student;</div><div class="line"></div><div class="line">// [3] 最终：AVG(age) = SUM(age) AS AVG0SUM / COUNT(age)</div></pre></td></tr></table></figure></p>
<p><strong>核心代码</strong>：</p>
<ul>
<li><a href="https://github.com/YunaiV/Mycat-Server/blob/1.6/src/main/java/io/mycat/backend/mysql/nio/handler/MultiNodeQueryHandler.java" rel="external nofollow noopener noreferrer" target="_blank">MultiNodeQueryHandler.java#fieldEofResponse(...)</a>。</li>
</ul>
<h2>3.2 记录行(row)</h2>
<h3>3.1 AbstractDataNodeMerge</h3>
<p>MyCAT 对分片结果合并通过 <code>AbstractDataNodeMerge</code> 子类来完成。</p>
<p><img src="http://www.yunai.me/images/MyCAT/2017_06_13/merge_service.png" alt="merge_service"></p>
<p><code>AbstractDataNodeMerge</code> ：</p>
<ul>
<li>-packs ：待合并记录行(row)队列。队列尾部插入 <code>END_FLAG_PACK</code> 表示队列已结束。</li>
<li>-running ：合并逻辑是否正在执行中的标记。</li>
<li>~onRowMetaData(...) ：根据**记录列信息(ColMeta)**构建对应的排序组件和聚合组件。需要子类进行实现。</li>
<li>~onNewRecord(...) ：插入记录行(row) 到 <code>packs</code>。</li>
<li>~outputMergeResult(...) ：插入 <code>END_FLAG_PACK</code> 到 <code>packs</code>。</li>
<li>~run(...) ：执行<strong>合并</strong>分片结果逻辑，并将合并结果返回给 MySQL Client。需要子类进行实现。</li>
</ul>
<p><img src="http://www.yunai.me/images/MyCAT/2017_06_13/AbstractDataNodeMerge_run.png" alt="AbstractDataNodeMerge_run.png"></p>
<p><em><em>通过 <code>running</code> 标记保证同一条 SQL 同时只有一个线程正在执行，并且不需要等到每个分片结果都返回就可以执行</em>聚合</em>逻辑。当然，<em>排序</em>逻辑需要等到所有分片结果都返回才可以执行。**</p>
<p><strong>核心代码</strong>：</p>
<ul>
<li><a href="https://github.com/YunaiV/Mycat-Server/blob/1.6/src/main/java/io/mycat/sqlengine/mpp/AbstractDataNodeMerge.java" rel="external nofollow noopener noreferrer" target="_blank">AbstractDataNodeMerge.java</a></li>
<li><a href="https://github.com/YunaiV/Mycat-Server/blob/1.6/src/main/java/io/mycat/sqlengine/mpp/DataNodeMergeManager.java" rel="external nofollow noopener noreferrer" target="_blank">DataNodeMergeManager.java#run(...)</a></li>
</ul>
<h3>3.2 DataNodeMergeManager</h3>
<p><code>AbstractDataNodeMerge</code> 有两种子类实现：</p>
<ul>
<li><code>DataMergeService</code> ：基于<strong>堆内内存</strong>合并分片结果。</li>
<li><code>DataNodeMergeManager</code> ：基于<strong>堆外内存</strong>合并分片结果。</li>
</ul>
<p>目前官方默认配置使用 <code>DataNodeMergeManager</code>。主要有如下优点：</p>
<ol>
<li>可以使用更大的内存空间。当并发量大或者数据量大时，更大的内存空间意味着更好的性能。</li>
<li>减少 GC 暂停时间。记录行(row)对象小且重用性很低，需要能够进行类似 C / C++ 的自主内存释放。</li>
<li>更快的内存复制和读取速度，对排序和聚合带来很好的提速。</li>
</ol>
<p>如果对<strong>堆外内存</strong>不太了解，推荐阅读如下文章：</p>
<ol>
<li><a href="http://www.jianshu.com/p/50be08b54bee" rel="external nofollow noopener noreferrer" target="_blank">《从0到1起步-跟我进入堆外内存的奇妙世界》</a></li>
<li><a href="http://www.infoq.com/cn/news/2014/12/external-memory-heap-memory" rel="external nofollow noopener noreferrer" target="_blank">《堆内内存还是堆外内存？》</a></li>
<li><a href="http://www.cnblogs.com/moonandstar08/p/5107648.html" rel="external nofollow noopener noreferrer" target="_blank">《JAVA堆外内存》</a></li>
<li><a href="https://yq.aliyun.com/articles/2948?spm=5176.100239.blogcont62539.11.a3HdFE" rel="external nofollow noopener noreferrer" target="_blank">《JVM源码分析之堆外内存完全解读》</a></li>
</ol>
<p>本文主要分析 <code>DataNodeMergeManager</code> 实现，<code>DataMergeService</code> 可以自己阅读或者等待后续文章（😈<strong>欢迎订阅我的公众号噢</strong>）。</p>
<p><code>DataNodeMergeManager</code> 有三个组件：</p>
<ul>
<li><code>globalSorter</code> ：<code>UnsafeExternalRowSorter</code> =&gt; 实现记录行(row)<strong>合并并排序</strong>逻辑。</li>
<li><code>globalMergeResult</code> ：<code>UnsafeExternalRowSorter</code> =&gt; 实现记录行(row)<strong>合并不排序</strong>逻辑。</li>
<li><code>unsafeRowGrouper</code> ： <code>UnsafeRowGrouper</code> =&gt; 实现记录行(row)<strong>聚合</strong>逻辑。</li>
</ul>
<p><code>DataNodeMergeManager#run(...)</code> 逻辑如下：</p>
<ul>
<li>[1] 写入记录行(row)到 <code>UnsafeRow</code>。</li>
<li>[2] 根据情况将 <code>UnsafeRow</code> 插入对应组件。</li>
<li>[3] 当所有 <code>UnsafeRow</code> 插入完后，根据情况使用组件聚合、排序。</li>
</ul>
<table>
<thead>
<tr>
<th>是否排序</th>
<th>是否聚合</th>
<th>依赖组件</th>
<th>[2]</th>
<th>[3]</th>
</tr>
</thead>
<tbody>
<tr>
<td>否</td>
<td>否</td>
<td><code>globalSorter</code></td>
<td>插入 <code>globalSorter</code></td>
<td>使用 <code>globalSorter</code> 合并并排序</td>
</tr>
<tr>
<td>是</td>
<td>否</td>
<td><code>globalMergeResult</code></td>
<td>插入 <code>globalMergeResult</code></td>
<td>使用 <code>globalMergeResult</code> 合并不排序</td>
</tr>
<tr>
<td>否</td>
<td>是</td>
<td><code>unsafeRowGrouper</code> + <code>globalSorter</code></td>
<td>插入 <code>unsafeRowGrouper</code> 进行聚合</td>
<td>使用 <code>globalSorter</code> 合并并排序</td>
</tr>
<tr>
<td>是</td>
<td>是</td>
<td><code>unsafeRowGrouper</code> + <code>globalMergeResult</code></td>
<td>插入 <code>unsafeRowGrouper</code> 进行聚合</td>
<td>使用 <code>globalMergeResult</code> 合并不排序</td>
</tr>
</tbody>
</table>
<p><strong>核心代码</strong>：</p>
<ul>
<li><a href="https://github.com/YunaiV/Mycat-Server/blob/1.6/src/main/java/io/mycat/sqlengine/mpp/DataNodeMergeManager.java" rel="external nofollow noopener noreferrer" target="_blank">DataNodeMergeManager.java</a>。</li>
</ul>
<p>🙃看到这里，可能很多同学都有点懵逼，问题不大，我们继续往下瞅。</p>
<h3>3.3 UnsafeRow</h3>
<p><img src="http://www.yunai.me/images/MyCAT/2017_06_13/unsafe_row.png" alt="unsafe_row"></p>
<p>记录行(row)写到 <code>UnsafeRow</code> 的 <code>baseObject</code> 属性，结构如下：</p>
<p><img src="http://www.yunai.me/images/MyCAT/2017_06_13/unsafe_row_object.png" alt="unsafe_row_object">
<img src="http://www.yunai.me/images/MyCAT/2017_06_13/unsafe_row_2.png" alt="unsafe_row_2.png"></p>
<ul>
<li>拆分成三个区域，<strong>每个区域按照格子记录信息，每个格子 64bits(8 Bytes)</strong>。</li>
<li>记录行(row)按照字段顺序位置记录到 <code>baseObject</code>。</li>
<li>[1] 空标记位区域 ：标记字段对应的值是否为 NULL。
<ul>
<li>当字段对应的值为 NULL 时，其对应的字段顺序对应的 bit 设置为 1。举个例子，第 0 个位置字段为 NULL，则第一个格子对应的 64 bits 从右边第一个 bit 设置为 1。</li>
<li>因为每个格子是 64 bits，每 64 个字段占用一个格子，不满一个格子，按照一个格子计算。因此，该区域的长度(<code>bitSetWidthInBytes</code>) = 字段占用的格子数 * 64 bits。</li>
</ul>
</li>
<li>[2] 位置长度区域 ：记录字段对应的值在<code>[3]区域</code>所在的位置和长度。
<ul>
<li>每个字段记录<code>[2]区域</code>的位置 = <code>baseOffset</code> + <code>bitSetWidthInBytes</code> + 8 Bytes * 字段顺序。</li>
<li>占用一个格子，前 32 bits 为<code>[3]区域</code>的位置，后 32 bits 为字段对应的值长度。</li>
</ul>
</li>
<li>[3] 值区域 ：记录字段对应的值。
<ul>
<li>每个字段对应的值占用格子数 = 字段对应的值长度 / 8 Byte，如果无法整除再 + 1。</li>
<li>因为字段对应的值可能无法刚好占满每个格子，未使用的 bit 用 0 占位。</li>
</ul>
</li>
</ul>
<p><strong>写入 <code>UnsafeRow</code>，MyCAT 可以顺序访问每个字段，而不需要在记录行(row)进行遍历。</strong></p>
<p>🙃日常开发使用位操作的机会比较少，可能较为难理解，需要反复理解下，相信会获得很大启发。恩，该部分代码引用自开源运算框架 <code>Spark</code>，是不是更加有动力列😈。</p>
<p><strong>核心代码</strong>：</p>
<ul>
<li><a href="https://github.com/YunaiV/Mycat-Server/blob/1.6/src/main/java/io/mycat/memory/unsafe/row/UnsafeRow.java" rel="external nofollow noopener noreferrer" target="_blank">UnsafeRow.java</a></li>
<li><a href="https://github.com/YunaiV/Mycat-Server/blob/1.6/src/main/java/io/mycat/memory/unsafe/row/BufferHolder.java" rel="external nofollow noopener noreferrer" target="_blank">BufferHolder.java</a></li>
<li><a href="https://github.com/YunaiV/Mycat-Server/blob/1.6/src/main/java/io/mycat/memory/unsafe/row/UnsafeRowWriter.java" rel="external nofollow noopener noreferrer" target="_blank">UnsafeRowWriter.java</a></li>
</ul>
<h3>3.4 UnsafeExternalRowSorter</h3>
<p>如果使用 Java 实现 <code>SELECT * FROM student ORDER BY age desc, nickname asc</code>，不考虑算法优化的情况下，我们可以简单如下实现：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">Collections.sort(students, <span class="keyword">new</span> Comparator&lt;Comparable&gt;() &#123;</div><div class="line">       <span class="meta">@Override</span></div><div class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student o1, Student o2)</span> </span>&#123;</div><div class="line">           <span class="keyword">int</span> cmp = compare(o2.age, o1.age);</div><div class="line">           <span class="keyword">return</span> cmp != <span class="number">0</span> ? cmp : compare(o1.nickname, o2.nickname);</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>从功能上，<code>UnsafeExternalRowSorter</code> 是这么实现排序逻辑。当然肯定的是，不是这么“简单”的实现。</p>
<p><img src="http://www.yunai.me/images/MyCAT/2017_06_13/sorter_write.jpeg" alt="sorter_write"></p>
<p><code>UnsafeRow</code> 会写入到两个地方：</p>
<ol>
<li><code>List&lt;MemoryBlock&gt;</code> ：内存块数组。当前 <code>MemoryBlock</code> 无法容纳写入的 <code>UnsafeRow</code> 时，生成新的 <code>MemoryBlock</code> 提供写入。每条 <code>UnsafeRow</code> 存储在 <code>MemoryBlock</code> 由 长度 + 字节内容 组成。</li>
<li><code>LongArray</code> ：每条 <code>UnsafeRow</code> 存储在 <code>LongArray</code> 由两部分组成：address + prefix。
<ul>
<li><code>address</code> ：<code>UnsafeRow</code> 存储在 <code>List&lt;MemoryBlock&gt;</code> 的位置。前 13 bits 记录所在 <code>MemoryBlock</code> 的 index，后 51 bit 记录在 <code>MemoryBlock</code> 的 offset。</li>
<li><code>prefix</code> ：<code>UnsafeRow</code> 第一个排序字段<strong>值</strong>前 64 bits 计算的值。</li>
</ul>
</li>
</ol>
<p><strong><code>UnsafeExternalRowSorter</code> 排序实现方式</strong> ：提供 <strong><a href="http://blog.csdn.net/yangzhongblog/article/details/8184707" rel="external nofollow noopener noreferrer" target="_blank">TimSort</a></strong> 和 <strong>RadixSort</strong> 两种排序算法，前者为默认实现。<strong>TimSort</strong> 折半查找时，使用 <code>LongArray</code>，先比较 <code>prefix</code>，若相等，则顺序对比每个排序字段直到不等，提升计算效率。插入操作在 <code>LongArray</code> 操作，<code>List&lt;MemoryBlock&gt;</code> 只作为原始数据。</p>
<p>另外，当需要排序特别大的数据量时，会使用存储数据到文件进行排序。限于笔者暂时未阅读该处源码，后续会另开文章分析。🙂</p>
<p>核心源码：</p>
<ul>
<li><a href="https://github.com/YunaiV/Mycat-Server/blob/1.6/src/main/java/io/mycat/memory/unsafe/utils/sort/UnsafeExternalRowSorter.java" rel="external nofollow noopener noreferrer" target="_blank">UnsafeExternalRowSorter.java</a></li>
<li><a href="https://github.com/YunaiV/Mycat-Server/blob/1.6/src/main/java/io/mycat/memory/unsafe/utils/sort/UnsafeExternalRowSorter.java" rel="external nofollow noopener noreferrer" target="_blank">UnsafeExternalRowSorter.java</a></li>
<li><a href="https://github.com/YunaiV/Mycat-Server/blob/1.6/src/main/java/io/mycat/memory/unsafe/utils/sort/TimSort.java" rel="external nofollow noopener noreferrer" target="_blank">TimSort.java</a></li>
</ul>
<h3>3.5 UnsafeRowGrouper</h3>
<p>如果使用 Java 实现 <code>SELECT nickname, COUNT(*) FROM student group by nickname</code>，不考虑算法优化的情况下，我们可以简单如下实现：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">Map&lt;String, List&lt;Object&gt;&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line"><span class="comment">// 聚合</span></div><div class="line"><span class="keyword">for</span> (student : students) &#123;</div><div class="line">    <span class="keyword">if</span> (map.contains(student.nickname)) &#123;</div><div class="line">        map.put(student.nickname, map.get(student.nickname).get(<span class="number">1</span>) + <span class="number">1</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        List&lt;Object&gt; value = <span class="keyword">new</span> Array&lt;&gt;();</div><div class="line">        value.add(nickname);</div><div class="line">        value.add(<span class="number">1</span>);</div><div class="line">        map.put(student.nickname, value);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 输出</span></div><div class="line"><span class="keyword">for</span> (value : map.values) &#123;</div><div class="line">    System.out.println(value);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>从功能上，<code>UnsafeRowGrouper</code> 是这么实现排序逻辑。当然肯定的是，也不是这么“简单”的实现。</p>
<p>😈具体怎么实现的呢？我们在《MyCAT 源码解析 —— 分片结果合并（二）》继续分析。</p>
<h1>4. 救护中心</h1>
<p>看到此处的应该是真爱吧？！如果内容上有什么错误或者难懂的地方，可以关注我的微信公众号给我留言，我会很认真的逐条解答的。“万一”觉得本文还可以，希望转发到朋友圈让更多的人看到。</p>
<p>最后的最后，感谢耐心阅读本文的同学。</p>
<p><img src="http://www.yunai.me/images/common/wechat_mp_2017_07_31.jpg" alt="wechat_mp"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://www.yunai.me/images/common/wechat_mp_2017_07_31.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;🙂🙂🙂关注**微信公众号：【芋艿的后端小屋】**有福利：&lt;/p&gt;
&lt;ol
    
    </summary>
    
      <category term="MyCAT" scheme="http://www.yunai.me/categories/MyCAT/"/>
    
    
  </entry>
  
  <entry>
    <title>MyCAT 源码分析 —— 【单库单表】查询</title>
    <link href="http://www.yunai.me/MyCAT/single-db-single-table-select/"/>
    <id>http://www.yunai.me/MyCAT/single-db-single-table-select/</id>
    <published>2017-05-29T16:00:00.000Z</published>
    <updated>2017-07-31T12:30:52.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://www.yunai.me/images/common/wechat_mp_2017_07_31.jpg" alt=""></p>
<blockquote>
<p>🙂🙂🙂关注**微信公众号：【芋艿的后端小屋】**有福利：</p>
<ol>
<li>RocketMQ / MyCAT / Sharding-JDBC <strong>所有</strong>源码分析文章列表</li>
<li>RocketMQ / MyCAT / Sharding-JDBC <strong>中文注释源码 GitHub 地址</strong></li>
<li>您对于源码的疑问每条留言<strong>都</strong>将得到<strong>认真</strong>回复。<strong>甚至不知道如何读源码也可以请教噢</strong>。</li>
<li><strong>新的</strong>源码解析文章<strong>实时</strong>收到通知。<strong>每周更新一篇左右</strong>。</li>
<li><strong>认真的</strong>源码交流微信群。</li>
</ol>
</blockquote>
<hr>
<ul>
<li><a href="#">1. 概述</a></li>
<li><a href="#">2. 接收请求，解析 SQL</a></li>
<li><a href="#">3. 获得路由结果</a></li>
<li><a href="#">4. 获得 MySQL 连接，执行 SQL</a></li>
<li><a href="#">5. 响应执行 SQL 结果</a></li>
<li><a href="#">6. 其他 ：更新 / 删除</a></li>
</ul>
<h1>1. 概述</h1>
<blockquote>
<p>内容形态以 顺序图 + 核心代码 为主。<br>
如果有地方表述不错误或者不清晰，欢迎留言。<br>
对于内容形态，非常纠结，如果有建议，特别特别特别欢迎您提出。<br>
微信号：wangwenbin-server。</p>
</blockquote>
<p>本文讲解 【单库单表】查询 所涉及到的代码。</p>
<p>😂内容和 <a href="http://www.yunai.me/Mycat/single-db-single-table-insert/">《MyCAT 源码分析 —— 【单库单表】插入》</a> 超级相似，一方面本身流程基本相同，另外一方面文章结构没拆分好。我们使用 🚀 标记差异的逻辑。</p>
<p>交互如下图：</p>
<p><img src="http://www.yunai.me/images/MyCAT/2017_05_30/01.png" alt="单库单表查询简图"></p>
<p>整个过程，MyCAT Server 流程如下：</p>
<ol>
<li>接收 MySQL Client 请求，解析 SQL。</li>
<li>获得路由结果，进行路由。</li>
<li>获得 MySQL 连接，执行 SQL。</li>
<li>响应执行结果，发送结果给 MySQL Client。</li>
</ol>
<p>我们逐个步骤分析，一起来看看源码。</p>
<h1>2. 接收请求，解析 SQL</h1>
<p><img src="http://www.yunai.me/images/MyCAT/2017_05_30/02.png" alt="【单库单表】查询（01主流程）"></p>
<h2>【1 - 2】</h2>
<p>接收<strong>一条</strong> MySQL 命令。在【1】之前，还有请求数据读取、拆成单条 MySQL SQL。</p>
<h2>【3】</h2>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="comment">// ⬇️⬇️⬇️【FrontendCommandHandler.java】</span></div><div class="line"> <span class="number">2</span>: <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FrontendCommandHandler</span> <span class="keyword">implements</span> <span class="title">NIOHandler</span> </span>&#123;</div><div class="line"> <span class="number">3</span>: </div><div class="line"> <span class="number">4</span>:     <span class="meta">@Override</span></div><div class="line"> <span class="number">5</span>:     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(<span class="keyword">byte</span>[] data)</span> </span>&#123;</div><div class="line"> <span class="number">6</span>:     </div><div class="line"> <span class="number">7</span>:         <span class="comment">// .... 省略部分代码</span></div><div class="line"> <span class="number">8</span>:         <span class="keyword">switch</span> (data[<span class="number">4</span>]) <span class="comment">// </span></div><div class="line"> <span class="number">9</span>:         &#123;</div><div class="line"><span class="number">10</span>:             <span class="keyword">case</span> MySQLPacket.COM_INIT_DB:</div><div class="line"><span class="number">11</span>:                 commands.doInitDB();</div><div class="line"><span class="number">12</span>:                 source.initDB(data);</div><div class="line"><span class="number">13</span>:                 <span class="keyword">break</span>;</div><div class="line"><span class="number">14</span>:             <span class="keyword">case</span> MySQLPacket.COM_QUERY: <span class="comment">// 查询命令</span></div><div class="line"><span class="number">15</span>:                 <span class="comment">// 计数查询命令</span></div><div class="line"><span class="number">16</span>:                 commands.doQuery();</div><div class="line"><span class="number">17</span>:                 <span class="comment">// 执行查询命令</span></div><div class="line"><span class="number">18</span>:                 source.query(data);</div><div class="line"><span class="number">19</span>:                 <span class="keyword">break</span>;</div><div class="line"><span class="number">20</span>:             <span class="keyword">case</span> MySQLPacket.COM_PING:</div><div class="line"><span class="number">21</span>:                 commands.doPing();</div><div class="line"><span class="number">22</span>:                 source.ping();</div><div class="line"><span class="number">23</span>:                 <span class="keyword">break</span>;</div><div class="line"><span class="number">24</span>:             <span class="comment">// .... 省略部分case</span></div><div class="line"><span class="number">25</span>:         &#125;</div><div class="line"><span class="number">26</span>:     &#125;</div><div class="line"><span class="number">27</span>: </div><div class="line"><span class="number">28</span>: &#125;</div></pre></td></tr></table></figure></p>
<p><code>INSERT</code>/<code>SELECT</code>/<code>UPDATE</code>/<code>DELETE</code> 等 SQL 归属于 <code>MySQLPacket.COM_QUERY</code>，详细可见：<a href="http://hutaow.com/blog/2013/11/06/mysql-protocol-analysis/#42-" rel="external nofollow noopener noreferrer" target="_blank">《MySQL协议分析#4.2 客户端命令请求报文（客户端 -&gt; 服务器）》</a>。</p>
<h2>【4】</h2>
<p>将 二进制数组 解析成 SQL。核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="comment">// ⬇️⬇️⬇️【FrontendConnection.java】</span></div><div class="line"> <span class="number">2</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">byte</span>[] data)</span> </span>&#123;</div><div class="line"> <span class="number">3</span>: 	<span class="comment">// 取得语句</span></div><div class="line"> <span class="number">4</span>: 	String sql = <span class="keyword">null</span>;		</div><div class="line"> <span class="number">5</span>: 	<span class="keyword">try</span> &#123;</div><div class="line"> <span class="number">6</span>: 		MySQLMessage mm = <span class="keyword">new</span> MySQLMessage(data);</div><div class="line"> <span class="number">7</span>: 		mm.position(<span class="number">5</span>);</div><div class="line"> <span class="number">8</span>: 		sql = mm.readString(charset);</div><div class="line"> <span class="number">9</span>: 	&#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</div><div class="line"><span class="number">10</span>: 		writeErrMessage(ErrorCode.ER_UNKNOWN_CHARACTER_SET, <span class="string">"Unknown charset '"</span> + charset + <span class="string">"'"</span>);</div><div class="line"><span class="number">11</span>: 		<span class="keyword">return</span>;</div><div class="line"><span class="number">12</span>: 	&#125;		</div><div class="line"><span class="number">13</span>: 	<span class="comment">// 执行语句</span></div><div class="line"><span class="number">14</span>: 	<span class="keyword">this</span>.query( sql );</div><div class="line"><span class="number">15</span>: &#125;</div></pre></td></tr></table></figure></p>
<h2>【5】</h2>
<p>解析 SQL 类型。核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="comment">// ⬇️⬇️⬇️【ServerQueryHandler.java】</span></div><div class="line"> <span class="number">2</span>: <span class="meta">@Override</span></div><div class="line"> <span class="number">3</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">(String sql)</span> </span>&#123;</div><div class="line"> <span class="number">4</span>: 	<span class="comment">// 解析 SQL 类型</span></div><div class="line"> <span class="number">5</span>: 	<span class="keyword">int</span> rs = ServerParse.parse(sql);</div><div class="line"> <span class="number">6</span>: 	<span class="keyword">int</span> sqlType = rs &amp; <span class="number">0xff</span>;</div><div class="line"> <span class="number">7</span>: 	</div><div class="line"> <span class="number">8</span>: 	<span class="keyword">switch</span> (sqlType) &#123;</div><div class="line"> <span class="number">9</span>: 	<span class="comment">//explain sql</span></div><div class="line"><span class="number">10</span>: 	<span class="keyword">case</span> ServerParse.EXPLAIN:</div><div class="line"><span class="number">11</span>: 		ExplainHandler.handle(sql, c, rs &gt;&gt;&gt; <span class="number">8</span>);</div><div class="line"><span class="number">12</span>: 		<span class="keyword">break</span>;</div><div class="line"><span class="number">13</span>: 	<span class="comment">// .... 省略部分case</span></div><div class="line"><span class="number">14</span>: 		<span class="keyword">break</span>;</div><div class="line"><span class="number">15</span>: 	<span class="keyword">case</span> ServerParse.SELECT:</div><div class="line"><span class="number">16</span>: 		SelectHandler.handle(sql, c, rs &gt;&gt;&gt; <span class="number">8</span>);</div><div class="line"><span class="number">17</span>: 		<span class="keyword">break</span>;</div><div class="line"><span class="number">18</span>: 	<span class="comment">// .... 省略部分case</span></div><div class="line"><span class="number">19</span>: 	<span class="keyword">default</span>:</div><div class="line"><span class="number">20</span>: 		<span class="keyword">if</span>(readOnly)&#123;</div><div class="line"><span class="number">21</span>: 			LOGGER.warn(<span class="keyword">new</span> StringBuilder().append(<span class="string">"User readonly:"</span>).append(sql).toString());</div><div class="line"><span class="number">22</span>: 			c.writeErrMessage(ErrorCode.ER_USER_READ_ONLY, <span class="string">"User readonly"</span>);</div><div class="line"><span class="number">23</span>: 			<span class="keyword">break</span>;</div><div class="line"><span class="number">24</span>: 		&#125;</div><div class="line"><span class="number">25</span>: 		c.execute(sql, rs &amp; <span class="number">0xff</span>);</div><div class="line"><span class="number">26</span>: 	&#125;</div><div class="line"><span class="number">27</span>: &#125;</div><div class="line"><span class="number">28</span>: </div><div class="line"><span class="number">29</span>:</div><div class="line"><span class="number">30</span>: <span class="comment">// ⬇️⬇️⬇️【ServerParse.java】</span></div><div class="line"><span class="number">31</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">parse</span><span class="params">(String stmt)</span> </span>&#123;</div><div class="line"><span class="number">32</span>: 	<span class="keyword">int</span> length = stmt.length();</div><div class="line"><span class="number">33</span>: 	<span class="comment">//FIX BUG FOR SQL SUCH AS /XXXX/SQL</span></div><div class="line"><span class="number">34</span>: 	<span class="keyword">int</span> rt = -<span class="number">1</span>;</div><div class="line"><span class="number">35</span>: 	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; ++i) &#123;</div><div class="line"><span class="number">36</span>: 		<span class="keyword">switch</span> (stmt.charAt(i)) &#123;</div><div class="line"><span class="number">37</span>: 		<span class="comment">// .... 省略部分case			case 'I':</span></div><div class="line"><span class="number">38</span>: 		<span class="keyword">case</span> <span class="string">'i'</span>:</div><div class="line"><span class="number">39</span>: 			rt = insertCheck(stmt, i);</div><div class="line"><span class="number">40</span>: 			<span class="keyword">if</span> (rt != OTHER) &#123;</div><div class="line"><span class="number">41</span>: 				<span class="keyword">return</span> rt;</div><div class="line"><span class="number">42</span>: 			&#125;</div><div class="line"><span class="number">43</span>: 			<span class="keyword">continue</span>;</div><div class="line"><span class="number">44</span>: 			<span class="comment">// .... 省略部分case</span></div><div class="line"><span class="number">45</span>: 		<span class="keyword">case</span> <span class="string">'S'</span>:</div><div class="line"><span class="number">46</span>: 		<span class="keyword">case</span> <span class="string">'s'</span>:</div><div class="line"><span class="number">47</span>: 			rt = sCheck(stmt, i);</div><div class="line"><span class="number">48</span>: 			<span class="keyword">if</span> (rt != OTHER) &#123;</div><div class="line"><span class="number">49</span>: 				<span class="keyword">return</span> rt;</div><div class="line"><span class="number">50</span>: 			&#125;</div><div class="line"><span class="number">51</span>: 			<span class="keyword">continue</span>;</div><div class="line"><span class="number">52</span>: 			<span class="comment">// .... 省略部分case</span></div><div class="line"><span class="number">53</span>: 		<span class="keyword">default</span>:</div><div class="line"><span class="number">54</span>: 			<span class="keyword">continue</span>;</div><div class="line"><span class="number">55</span>: 		&#125;</div><div class="line"><span class="number">56</span>: 	&#125;</div><div class="line"><span class="number">57</span>: 	<span class="keyword">return</span> OTHER;</div><div class="line"><span class="number">58</span>: &#125;</div></pre></td></tr></table></figure></p>
<h2>🚀【6】【7】</h2>
<p>解析 Select SQL 类型，分发到对应的逻辑。核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="comment">// ⬇️⬇️⬇️【SelectHandler.java】</span></div><div class="line"> <span class="number">2</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(String stmt, ServerConnection c, <span class="keyword">int</span> offs)</span> </span>&#123;</div><div class="line"> <span class="number">3</span>: 	<span class="keyword">int</span> offset = offs;</div><div class="line"> <span class="number">4</span>: 	<span class="keyword">switch</span> (ServerParseSelect.parse(stmt, offs)) &#123; <span class="comment">// 解析 Select SQL 类型</span></div><div class="line"> <span class="number">5</span>: 	<span class="keyword">case</span> ServerParseSelect.VERSION_COMMENT: <span class="comment">// select @@VERSION_COMMENT;</span></div><div class="line"> <span class="number">6</span>: 		SelectVersionComment.response(c);</div><div class="line"> <span class="number">7</span>: 		<span class="keyword">break</span>;</div><div class="line"> <span class="number">8</span>: 	<span class="keyword">case</span> ServerParseSelect.DATABASE: <span class="comment">// select DATABASE();</span></div><div class="line"> <span class="number">9</span>: 		SelectDatabase.response(c);</div><div class="line"><span class="number">10</span>: 		<span class="keyword">break</span>;</div><div class="line"><span class="number">11</span>: 	<span class="keyword">case</span> ServerParseSelect.USER: <span class="comment">// select CURRENT_USER();</span></div><div class="line"><span class="number">12</span>:         SelectUser.response(c);</div><div class="line"><span class="number">13</span>: 		<span class="keyword">break</span>;</div><div class="line"><span class="number">14</span>: 	<span class="keyword">case</span> ServerParseSelect.VERSION: <span class="comment">// select VERSION();</span></div><div class="line"><span class="number">15</span>: 		SelectVersion.response(c);</div><div class="line"><span class="number">16</span>: 		<span class="keyword">break</span>;</div><div class="line"><span class="number">17</span>: 	<span class="keyword">case</span> ServerParseSelect.SESSION_INCREMENT: <span class="comment">// select @@session.auto_increment_increment;</span></div><div class="line"><span class="number">18</span>: 		SessionIncrement.response(c);</div><div class="line"><span class="number">19</span>: 		<span class="keyword">break</span>;</div><div class="line"><span class="number">20</span>: 	<span class="keyword">case</span> ServerParseSelect.SESSION_ISOLATION: <span class="comment">// select @@session.tx_isolation;</span></div><div class="line"><span class="number">21</span>: 		SessionIsolation.response(c);</div><div class="line"><span class="number">22</span>: 		<span class="keyword">break</span>;</div><div class="line"><span class="number">23</span>: 	<span class="keyword">case</span> ServerParseSelect.LAST_INSERT_ID: <span class="comment">// select LAST_INSERT_ID();</span></div><div class="line"><span class="number">24</span>: 		<span class="comment">// ....省略代码</span></div><div class="line"><span class="number">25</span>: 		<span class="keyword">break</span>;</div><div class="line"><span class="number">26</span>: 	<span class="keyword">case</span> ServerParseSelect.IDENTITY: <span class="comment">// select @@identity</span></div><div class="line"><span class="number">27</span>: 		<span class="comment">// ....省略代码</span></div><div class="line"><span class="number">28</span>: 		<span class="keyword">break</span>;</div><div class="line"><span class="number">29</span>:     <span class="keyword">case</span> ServerParseSelect.SELECT_VAR_ALL: <span class="comment">//</span></div><div class="line"><span class="number">30</span>:         SelectVariables.execute(c,stmt);</div><div class="line"><span class="number">31</span>:             <span class="keyword">break</span>;</div><div class="line"><span class="number">32</span>:     <span class="keyword">case</span> ServerParseSelect.SESSION_TX_READ_ONLY: <span class="comment">//</span></div><div class="line"><span class="number">33</span>:         SelectTxReadOnly.response(c);</div><div class="line"><span class="number">34</span>: 			<span class="keyword">break</span>;</div><div class="line"><span class="number">35</span>: 	<span class="keyword">default</span>: <span class="comment">// 其他，例如 select * from table</span></div><div class="line"><span class="number">36</span>: 		c.execute(stmt, ServerParse.SELECT);</div><div class="line"><span class="number">37</span>: 	&#125;</div><div class="line"><span class="number">38</span>: &#125;</div><div class="line"><span class="number">39</span>: <span class="comment">// ⬇️⬇️⬇️【ServerParseSelect.java】</span></div><div class="line"><span class="number">40</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">parse</span><span class="params">(String stmt, <span class="keyword">int</span> offset)</span> </span>&#123;</div><div class="line"><span class="number">41</span>: 	<span class="keyword">int</span> i = offset;</div><div class="line"><span class="number">42</span>: 	<span class="keyword">for</span> (; i &lt; stmt.length(); ++i) &#123;</div><div class="line"><span class="number">43</span>: 		<span class="keyword">switch</span> (stmt.charAt(i)) &#123;</div><div class="line"><span class="number">44</span>: 		<span class="keyword">case</span> <span class="string">' '</span>:</div><div class="line"><span class="number">45</span>: 			<span class="keyword">continue</span>;</div><div class="line"><span class="number">46</span>: 		<span class="keyword">case</span> <span class="string">'/'</span>:</div><div class="line"><span class="number">47</span>: 		<span class="keyword">case</span> <span class="string">'#'</span>:</div><div class="line"><span class="number">48</span>: 			i = ParseUtil.comment(stmt, i);</div><div class="line"><span class="number">49</span>: 			<span class="keyword">continue</span>;</div><div class="line"><span class="number">50</span>: 		<span class="keyword">case</span> <span class="string">'@'</span>:</div><div class="line"><span class="number">51</span>: 			<span class="keyword">return</span> select2Check(stmt, i);</div><div class="line"><span class="number">52</span>: 		<span class="keyword">case</span> <span class="string">'D'</span>:</div><div class="line"><span class="number">53</span>: 		<span class="keyword">case</span> <span class="string">'d'</span>:</div><div class="line"><span class="number">54</span>: 			<span class="keyword">return</span> databaseCheck(stmt, i);</div><div class="line"><span class="number">55</span>: 		<span class="keyword">case</span> <span class="string">'L'</span>:</div><div class="line"><span class="number">56</span>: 		<span class="keyword">case</span> <span class="string">'l'</span>:</div><div class="line"><span class="number">57</span>: 			<span class="keyword">return</span> lastInsertCheck(stmt, i);</div><div class="line"><span class="number">58</span>: 		<span class="keyword">case</span> <span class="string">'U'</span>:</div><div class="line"><span class="number">59</span>: 		<span class="keyword">case</span> <span class="string">'u'</span>:</div><div class="line"><span class="number">60</span>: 			<span class="keyword">return</span> userCheck(stmt, i);</div><div class="line"><span class="number">61</span>: 		<span class="keyword">case</span> <span class="string">'C'</span>:</div><div class="line"><span class="number">62</span>: 		<span class="keyword">case</span> <span class="string">'c'</span>:</div><div class="line"><span class="number">63</span>: 			<span class="keyword">return</span> currentUserCheck(stmt, i);</div><div class="line"><span class="number">64</span>: 		<span class="keyword">case</span> <span class="string">'V'</span>:</div><div class="line"><span class="number">65</span>: 		<span class="keyword">case</span> <span class="string">'v'</span>:</div><div class="line"><span class="number">66</span>: 			<span class="keyword">return</span> versionCheck(stmt, i);</div><div class="line"><span class="number">67</span>: 		<span class="keyword">default</span>:</div><div class="line"><span class="number">68</span>: 			<span class="keyword">return</span> OTHER;</div><div class="line"><span class="number">69</span>: 		&#125;</div><div class="line"><span class="number">70</span>: 	&#125;</div><div class="line"><span class="number">71</span>: 	<span class="keyword">return</span> OTHER;</div><div class="line"><span class="number">72</span>: &#125;</div></pre></td></tr></table></figure></p>
<h2>【8】</h2>
<p>执行 SQL，详细解析见下文，核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="comment">// ⬇️⬇️⬇️【ServerConnection.java】</span></div><div class="line"> <span class="number">2</span>: <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerConnection</span> <span class="keyword">extends</span> <span class="title">FrontendConnection</span> </span>&#123;</div><div class="line"> <span class="number">3</span>: 	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(String sql, <span class="keyword">int</span> type)</span> </span>&#123;</div><div class="line"> <span class="number">4</span>: 		<span class="comment">// .... 省略代码</span></div><div class="line"> <span class="number">5</span>: 		SchemaConfig schema = MycatServer.getInstance().getConfig().getSchemas().get(db);</div><div class="line"> <span class="number">6</span>: 		<span class="keyword">if</span> (schema == <span class="keyword">null</span>) &#123;</div><div class="line"> <span class="number">7</span>: 			writeErrMessage(ErrorCode.ERR_BAD_LOGICDB,</div><div class="line"> <span class="number">8</span>: 					<span class="string">"Unknown MyCAT Database '"</span> + db + <span class="string">"'"</span>);</div><div class="line"> <span class="number">9</span>: 			<span class="keyword">return</span>;</div><div class="line"><span class="number">10</span>: 		&#125;</div><div class="line"><span class="number">11</span>: </div><div class="line"><span class="number">12</span>: 		<span class="comment">// .... 省略代码</span></div><div class="line"><span class="number">13</span>: </div><div class="line"><span class="number">14</span>: 		<span class="comment">// 路由到后端数据库，执行 SQL</span></div><div class="line"><span class="number">15</span>: 		routeEndExecuteSQL(sql, type, schema);</div><div class="line"><span class="number">16</span>: 	&#125;</div><div class="line"><span class="number">17</span>: 	</div><div class="line"><span class="number">18</span>:     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">routeEndExecuteSQL</span><span class="params">(String sql, <span class="keyword">final</span> <span class="keyword">int</span> type, <span class="keyword">final</span> SchemaConfig schema)</span> </span>&#123;</div><div class="line"><span class="number">19</span>: 		<span class="comment">// 路由计算</span></div><div class="line"><span class="number">20</span>: 		RouteResultset rrs = <span class="keyword">null</span>;</div><div class="line"><span class="number">21</span>: 		<span class="keyword">try</span> &#123;</div><div class="line"><span class="number">22</span>: 			rrs = MycatServer</div><div class="line"><span class="number">23</span>: 					.getInstance()</div><div class="line"><span class="number">24</span>: 					.getRouterservice()</div><div class="line"><span class="number">25</span>: 					.route(MycatServer.getInstance().getConfig().getSystem(),</div><div class="line"><span class="number">26</span>: 							schema, type, sql, <span class="keyword">this</span>.charset, <span class="keyword">this</span>);</div><div class="line"><span class="number">27</span>: </div><div class="line"><span class="number">28</span>: 		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"><span class="number">29</span>: 			StringBuilder s = <span class="keyword">new</span> StringBuilder();</div><div class="line"><span class="number">30</span>: 			LOGGER.warn(s.append(<span class="keyword">this</span>).append(sql).toString() + <span class="string">" err:"</span> + e.toString(),e);</div><div class="line"><span class="number">31</span>: 			String msg = e.getMessage();</div><div class="line"><span class="number">32</span>: 			writeErrMessage(ErrorCode.ER_PARSE_ERROR, msg == <span class="keyword">null</span> ? e.getClass().getSimpleName() : msg);</div><div class="line"><span class="number">33</span>: 			<span class="keyword">return</span>;</div><div class="line"><span class="number">34</span>: 		&#125;</div><div class="line"><span class="number">35</span>: </div><div class="line"><span class="number">36</span>: 		<span class="comment">// 执行 SQL</span></div><div class="line"><span class="number">37</span>: 		<span class="keyword">if</span> (rrs != <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">38</span>: 			<span class="comment">// session执行</span></div><div class="line"><span class="number">39</span>: 			session.execute(rrs, rrs.isSelectForUpdate() ? ServerParse.UPDATE : type);</div><div class="line"><span class="number">40</span>: 		&#125;</div><div class="line"><span class="number">41</span>: 		</div><div class="line"><span class="number">42</span>:  	&#125;</div><div class="line"><span class="number">43</span>: </div><div class="line"><span class="number">44</span>: &#125;</div></pre></td></tr></table></figure></p>
<h1>3. 获得路由结果</h1>
<p><img src="http://www.yunai.me/images/MyCAT/2017_05_30/03.png" alt="【单库单表】插入（02获取路由）"></p>
<h2>【 1 -  5 】</h2>
<p>获得路由主流程。核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="comment">// ⬇️⬇️⬇️【SelectHandler.java】</span></div><div class="line"> <span class="number">2</span>: <span class="function"><span class="keyword">public</span> RouteResultset <span class="title">route</span><span class="params">(SystemConfig sysconf, SchemaConfig schema,</span></span></div><div class="line"> <span class="number">3</span>: 		<span class="keyword">int</span> sqlType, String stmt, String charset, ServerConnection sc)</div><div class="line"> 4: 		<span class="keyword">throws</span> SQLNonTransientException &#123;</div><div class="line"> <span class="number">5</span>: 	RouteResultset rrs = <span class="keyword">null</span>;</div><div class="line"> <span class="number">6</span>: </div><div class="line"> <span class="number">7</span>: 	<span class="comment">// SELECT 类型的SQL, 检测缓存是否存在</span></div><div class="line"> <span class="number">8</span>: 	<span class="keyword">if</span> (sqlType == ServerParse.SELECT) &#123;</div><div class="line"> <span class="number">9</span>: 		cacheKey = schema.getName() + stmt;			</div><div class="line"><span class="number">10</span>: 		rrs = (RouteResultset) sqlRouteCache.get(cacheKey);</div><div class="line"><span class="number">11</span>: 		<span class="keyword">if</span> (rrs != <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">12</span>: 			checkMigrateRule(schema.getName(),rrs,sqlType);</div><div class="line"><span class="number">13</span>: 			<span class="keyword">return</span> rrs;</div><div class="line"><span class="number">14</span>: 			&#125;</div><div class="line"><span class="number">15</span>: 		&#125;</div><div class="line"><span class="number">16</span>: 	&#125;</div><div class="line"><span class="number">17</span>: </div><div class="line"><span class="number">18</span>: 	<span class="comment">// .... 省略代码</span></div><div class="line"><span class="number">19</span>: 	<span class="keyword">int</span> hintLength = RouteService.isHintSql(stmt);</div><div class="line"><span class="number">20</span>: 	<span class="keyword">if</span>(hintLength != -<span class="number">1</span>)&#123; <span class="comment">// TODO 待读：hint</span></div><div class="line"><span class="number">21</span>: 		<span class="comment">// .... 省略代码</span></div><div class="line"><span class="number">22</span>: 		&#125;</div><div class="line"><span class="number">23</span>: 	&#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">24</span>: 		stmt = stmt.trim();</div><div class="line"><span class="number">25</span>: 		rrs = RouteStrategyFactory.getRouteStrategy().route(sysconf, schema, sqlType, stmt,</div><div class="line"><span class="number">26</span>: 				charset, sc, tableId2DataNodeCache);</div><div class="line"><span class="number">27</span>: 	&#125;</div><div class="line"><span class="number">28</span>: </div><div class="line"><span class="number">29</span>: 	<span class="comment">// 记录查询命令路由结果缓存</span></div><div class="line"><span class="number">30</span>: 	<span class="keyword">if</span> (rrs != <span class="keyword">null</span> &amp;&amp; sqlType == ServerParse.SELECT &amp;&amp; rrs.isCacheAble()) &#123;</div><div class="line"><span class="number">31</span>: 		sqlRouteCache.putIfAbsent(cacheKey, rrs);</div><div class="line"><span class="number">32</span>: 	&#125;</div><div class="line"><span class="number">33</span>: 	<span class="comment">// .... 省略代码		return rrs;</span></div><div class="line"><span class="number">34</span>: &#125;</div><div class="line"><span class="number">35</span>: <span class="comment">// ⬇️⬇️⬇️【AbstractRouteStrategy.java】</span></div><div class="line"><span class="number">36</span>: <span class="meta">@Override</span></div><div class="line"><span class="number">37</span>: <span class="function"><span class="keyword">public</span> RouteResultset <span class="title">route</span><span class="params">(SystemConfig sysConfig, SchemaConfig schema, <span class="keyword">int</span> sqlType, String origSQL,</span></span></div><div class="line"><span class="number">38</span>: 		String charset, ServerConnection sc, LayerCachePool cachePool) <span class="keyword">throws</span> SQLNonTransientException &#123;</div><div class="line"><span class="number">39</span>: </div><div class="line"><span class="number">40</span>: 	<span class="comment">// .... 省略代码</span></div><div class="line"><span class="number">41</span>: </div><div class="line"><span class="number">42</span>: 	<span class="comment">// 处理一些路由之前的逻辑;全局序列号，父子表插入</span></div><div class="line"><span class="number">43</span>: 	<span class="keyword">if</span> (beforeRouteProcess(schema, sqlType, origSQL, sc) ) &#123;</div><div class="line"><span class="number">44</span>: 		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line"><span class="number">45</span>: 	&#125;</div><div class="line"><span class="number">46</span>: </div><div class="line"><span class="number">47</span>: 	<span class="comment">// .... 省略代码</span></div><div class="line"><span class="number">48</span>: </div><div class="line"><span class="number">49</span>: 	<span class="comment">// 检查是否有分片</span></div><div class="line"><span class="number">50</span>: 	<span class="keyword">if</span> (schema.isNoSharding() &amp;&amp; ServerParse.SHOW != sqlType) &#123;</div><div class="line"><span class="number">51</span>: 		rrs = RouterUtil.routeToSingleNode(rrs, schema.getDataNode(), stmt);</div><div class="line"><span class="number">52</span>: 	&#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">53</span>: 		RouteResultset returnedSet = routeSystemInfo(schema, sqlType, stmt, rrs);</div><div class="line"><span class="number">54</span>: 		<span class="keyword">if</span> (returnedSet == <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">55</span>: 			rrs = routeNormalSqlWithAST(schema, stmt, rrs, charset, cachePool,sqlType,sc);</div><div class="line"><span class="number">56</span>: 		&#125;</div><div class="line"><span class="number">57</span>: 	&#125;</div><div class="line"><span class="number">58</span>: </div><div class="line"><span class="number">59</span>: 	<span class="keyword">return</span> rrs;</div><div class="line"><span class="number">60</span>: &#125;</div></pre></td></tr></table></figure></p>
<p>🚀【3】第 7 至 16 行 ：当 Select SQL 存在路由结果缓存时，直接返回缓存。
🚀【6】第 29 至 32 行 ：记录 Select SQL 路由结果到缓存。</p>
<p><em><strong>路由</strong> 详细解析，我们另开文章，避免内容过多，影响大家对【插入】流程和逻辑的理解。</em></p>
<h1>4. 获得 MySQL 连接，执行 SQL</h1>
<p><img src="http://www.yunai.me/images/MyCAT/2017_05_29/03.png" alt="【单库单表】查询（03执行 SQL）"></p>
<h2>【 1 - 8 】</h2>
<p>获得 MySQL 连接。</p>
<ul>
<li>PhysicalDBNode ：物理数据库节点。</li>
<li>PhysicalDatasource ：物理数据库数据源。</li>
</ul>
<h2>【 9 - 13 】</h2>
<p>发送 SQL 到 MySQL Server，执行 SQL。</p>
<h1>🚀 5. 响应执行 SQL 结果</h1>
<p><img src="http://www.yunai.me/images/MyCAT/2017_05_30/04.png" alt="【单库单表】查询（04执行响应）"></p>
<p>核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="comment">// ⬇️⬇️⬇️【MySQLConnectionHandler.java】</span></div><div class="line"> <span class="number">2</span>: <span class="meta">@Override</span></div><div class="line"> <span class="number">3</span>: <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">handleData</span><span class="params">(<span class="keyword">byte</span>[] data)</span> </span>&#123;</div><div class="line"> <span class="number">4</span>: 	<span class="keyword">switch</span> (resultStatus) &#123;</div><div class="line"> <span class="number">5</span>: 	<span class="keyword">case</span> RESULT_STATUS_INIT:</div><div class="line"> <span class="number">6</span>: 		<span class="keyword">switch</span> (data[<span class="number">4</span>]) &#123;</div><div class="line"> <span class="number">7</span>: 		<span class="keyword">case</span> OkPacket.FIELD_COUNT:</div><div class="line"> <span class="number">8</span>: 			handleOkPacket(data);</div><div class="line"> <span class="number">9</span>: 			<span class="keyword">break</span>;</div><div class="line"><span class="number">10</span>: 		<span class="keyword">case</span> ErrorPacket.FIELD_COUNT:</div><div class="line"><span class="number">11</span>: 			handleErrorPacket(data);</div><div class="line"><span class="number">12</span>: 			<span class="keyword">break</span>;</div><div class="line"><span class="number">13</span>: 		<span class="keyword">case</span> RequestFilePacket.FIELD_COUNT:</div><div class="line"><span class="number">14</span>: 			handleRequestPacket(data);</div><div class="line"><span class="number">15</span>: 			<span class="keyword">break</span>;</div><div class="line"><span class="number">16</span>: 		<span class="keyword">default</span>: <span class="comment">// 初始化 header fields</span></div><div class="line"><span class="number">17</span>: 			resultStatus = RESULT_STATUS_HEADER;</div><div class="line"><span class="number">18</span>: 			header = data;</div><div class="line"><span class="number">19</span>: 			fields = <span class="keyword">new</span> ArrayList&lt;<span class="keyword">byte</span>[]&gt;((<span class="keyword">int</span>) ByteUtil.readLength(data,</div><div class="line"><span class="number">20</span>: 					<span class="number">4</span>));</div><div class="line"><span class="number">21</span>: 		&#125;</div><div class="line"><span class="number">22</span>: 		<span class="keyword">break</span>;</div><div class="line"><span class="number">23</span>: 	<span class="keyword">case</span> RESULT_STATUS_HEADER:</div><div class="line"><span class="number">24</span>: 		<span class="keyword">switch</span> (data[<span class="number">4</span>]) &#123;</div><div class="line"><span class="number">25</span>: 		<span class="keyword">case</span> ErrorPacket.FIELD_COUNT:</div><div class="line"><span class="number">26</span>: 			resultStatus = RESULT_STATUS_INIT;</div><div class="line"><span class="number">27</span>: 			handleErrorPacket(data);</div><div class="line"><span class="number">28</span>: 			<span class="keyword">break</span>;</div><div class="line"><span class="number">29</span>: 		<span class="keyword">case</span> EOFPacket.FIELD_COUNT: <span class="comment">// 解析 fields 结束</span></div><div class="line"><span class="number">30</span>: 			resultStatus = RESULT_STATUS_FIELD_EOF;</div><div class="line"><span class="number">31</span>: 			handleFieldEofPacket(data);</div><div class="line"><span class="number">32</span>: 			<span class="keyword">break</span>;</div><div class="line"><span class="number">33</span>: 		<span class="keyword">default</span>: <span class="comment">// 解析 fields</span></div><div class="line"><span class="number">34</span>: 			fields.add(data);</div><div class="line"><span class="number">35</span>: 		&#125;</div><div class="line"><span class="number">36</span>: 		<span class="keyword">break</span>;</div><div class="line"><span class="number">37</span>: 	<span class="keyword">case</span> RESULT_STATUS_FIELD_EOF:</div><div class="line"><span class="number">38</span>: 		<span class="keyword">switch</span> (data[<span class="number">4</span>]) &#123;</div><div class="line"><span class="number">39</span>: 		<span class="keyword">case</span> ErrorPacket.FIELD_COUNT:</div><div class="line"><span class="number">40</span>: 			resultStatus = RESULT_STATUS_INIT;</div><div class="line"><span class="number">41</span>: 			handleErrorPacket(data);</div><div class="line"><span class="number">42</span>: 			<span class="keyword">break</span>;</div><div class="line"><span class="number">43</span>: 		<span class="keyword">case</span> EOFPacket.FIELD_COUNT: <span class="comment">// 解析 每行记录 结束</span></div><div class="line"><span class="number">44</span>: 			resultStatus = RESULT_STATUS_INIT;</div><div class="line"><span class="number">45</span>: 			handleRowEofPacket(data);</div><div class="line"><span class="number">46</span>: 			<span class="keyword">break</span>;</div><div class="line"><span class="number">47</span>: 		<span class="keyword">default</span>: <span class="comment">// 每行记录</span></div><div class="line"><span class="number">48</span>: 			handleRowPacket(data);</div><div class="line"><span class="number">49</span>: 		&#125;</div><div class="line"><span class="number">50</span>: 		<span class="keyword">break</span>;</div><div class="line"><span class="number">51</span>: 	<span class="keyword">default</span>:</div><div class="line"><span class="number">52</span>: 		<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"unknown status!"</span>);</div><div class="line"><span class="number">53</span>: 	&#125;</div><div class="line"><span class="number">54</span>: &#125;</div></pre></td></tr></table></figure></p>
<h1>6. 其他 ：更新 / 删除</h1>
<p>流程基本和 <a href="http://www.yunai.me/Mycat/single-db-single-table-insert/">《MyCAT源码分析：【单库单表】插入》</a> 相同。我们就不另外文章解析。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://www.yunai.me/images/common/wechat_mp_2017_07_31.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;🙂🙂🙂关注**微信公众号：【芋艿的后端小屋】**有福利：&lt;/p&gt;
&lt;ol
    
    </summary>
    
      <category term="MyCAT" scheme="http://www.yunai.me/categories/MyCAT/"/>
    
    
  </entry>
  
  <entry>
    <title>MyCAT 源码分析 —— 【单库单表】插入</title>
    <link href="http://www.yunai.me/MyCAT/single-db-single-table-insert/"/>
    <id>http://www.yunai.me/MyCAT/single-db-single-table-insert/</id>
    <published>2017-05-28T16:00:00.000Z</published>
    <updated>2017-07-31T12:30:52.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://www.yunai.me/images/common/wechat_mp_2017_07_31.jpg" alt=""></p>
<blockquote>
<p>🙂🙂🙂关注**微信公众号：【芋艿的后端小屋】**有福利：</p>
<ol>
<li>RocketMQ / MyCAT / Sharding-JDBC <strong>所有</strong>源码分析文章列表</li>
<li>RocketMQ / MyCAT / Sharding-JDBC <strong>中文注释源码 GitHub 地址</strong></li>
<li>您对于源码的疑问每条留言<strong>都</strong>将得到<strong>认真</strong>回复。<strong>甚至不知道如何读源码也可以请教噢</strong>。</li>
<li><strong>新的</strong>源码解析文章<strong>实时</strong>收到通知。<strong>每周更新一篇左右</strong>。</li>
<li><strong>认真的</strong>源码交流微信群。</li>
</ol>
</blockquote>
<hr>
<ul>
<li><a href="#">1. 概述</a></li>
<li><a href="#">2. 接收请求，解析 SQL</a></li>
<li><a href="#">3. 获得路由结果</a></li>
<li><a href="#">4. 获得 MySQL 连接，执行 SQL</a></li>
<li><a href="#">5. 响应执行 SQL 结果</a></li>
</ul>
<h1>1. 概述</h1>
<blockquote>
<p>内容形态以 顺序图 + 核心代码 为主。<br>
如果有地方表述不错误或者不清晰，欢迎留言。<br>
对于内容形态，非常纠结，如果有建议，特别特别特别欢迎您提出。<br>
微信号：wangwenbin-server。</p>
</blockquote>
<p>本文讲解 【单库单表】插入 所涉及到的代码。交互如下图：</p>
<p><img src="http://www.yunai.me/images/MyCAT/2017_05_29/05.png" alt="单库单表插入简图"></p>
<p>整个过程，MyCAT Server 流程如下：</p>
<ol>
<li>接收 MySQL Client 请求，解析 SQL。</li>
<li>获得路由结果，进行路由。</li>
<li>获得 MySQL 连接，执行 SQL。</li>
<li>响应执行结果，发送结果给 MySQL Client。</li>
</ol>
<p>我们逐个步骤分析，一起来看看源码。</p>
<h1>2. 接收请求，解析 SQL</h1>
<p><img src="http://www.yunai.me/images/MyCAT/2017_05_29/01.png" alt="【单库单表】插入（01主流程）"></p>
<h2>【 1 - 2 】</h2>
<p>接收<strong>一条</strong> MySQL 命令。在【1】之前，还有请求数据读取、拆成单条 MySQL SQL。</p>
<h2>【 3 】</h2>
<p>不同 MySQL 命令，分发到不同的方法执行。核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="comment">// ⬇️⬇️⬇️【FrontendCommandHandler.java】</span></div><div class="line"> <span class="number">2</span>: <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FrontendCommandHandler</span> <span class="keyword">implements</span> <span class="title">NIOHandler</span> </span>&#123;</div><div class="line"> <span class="number">3</span>: </div><div class="line"> <span class="number">4</span>:     <span class="meta">@Override</span></div><div class="line"> <span class="number">5</span>:     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(<span class="keyword">byte</span>[] data)</span> </span>&#123;</div><div class="line"> <span class="number">6</span>:     </div><div class="line"> <span class="number">7</span>:         <span class="comment">// .... 省略部分代码</span></div><div class="line"> <span class="number">8</span>:         <span class="keyword">switch</span> (data[<span class="number">4</span>]) <span class="comment">// </span></div><div class="line"> <span class="number">9</span>:         &#123;</div><div class="line"><span class="number">10</span>:             <span class="keyword">case</span> MySQLPacket.COM_INIT_DB:</div><div class="line"><span class="number">11</span>:                 commands.doInitDB();</div><div class="line"><span class="number">12</span>:                 source.initDB(data);</div><div class="line"><span class="number">13</span>:                 <span class="keyword">break</span>;</div><div class="line"><span class="number">14</span>:             <span class="keyword">case</span> MySQLPacket.COM_QUERY: <span class="comment">// 查询命令</span></div><div class="line"><span class="number">15</span>:                 <span class="comment">// 计数查询命令</span></div><div class="line"><span class="number">16</span>:                 commands.doQuery();</div><div class="line"><span class="number">17</span>:                 <span class="comment">// 执行查询命令</span></div><div class="line"><span class="number">18</span>:                 source.query(data);</div><div class="line"><span class="number">19</span>:                 <span class="keyword">break</span>;</div><div class="line"><span class="number">20</span>:             <span class="keyword">case</span> MySQLPacket.COM_PING:</div><div class="line"><span class="number">21</span>:                 commands.doPing();</div><div class="line"><span class="number">22</span>:                 source.ping();</div><div class="line"><span class="number">23</span>:                 <span class="keyword">break</span>;</div><div class="line"><span class="number">24</span>:             <span class="comment">// .... 省略部分case</span></div><div class="line"><span class="number">25</span>:         &#125;</div><div class="line"><span class="number">26</span>:     &#125;</div><div class="line"><span class="number">27</span>: </div><div class="line"><span class="number">28</span>: &#125;</div></pre></td></tr></table></figure></p>
<p><code>INSERT</code>/<code>SELECT</code>/<code>UPDATE</code>/<code>DELETE</code> 等 SQL 归属于 <code>MySQLPacket.COM_QUERY</code>，详细可见：<a href="http://hutaow.com/blog/2013/11/06/mysql-protocol-analysis/#42-" rel="external nofollow noopener noreferrer" target="_blank">《MySQL协议分析#4.2 客户端命令请求报文（客户端 -&gt; 服务器）》</a>。</p>
<p>##【 4 】</p>
<p>将 二进制数组 解析成 SQL。核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="comment">// ⬇️⬇️⬇️【FrontendConnection.java】</span></div><div class="line"> <span class="number">2</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">byte</span>[] data)</span> </span>&#123;</div><div class="line"> <span class="number">3</span>: 	<span class="comment">// 取得语句</span></div><div class="line"> <span class="number">4</span>: 	String sql = <span class="keyword">null</span>;		</div><div class="line"> <span class="number">5</span>: 	<span class="keyword">try</span> &#123;</div><div class="line"> <span class="number">6</span>: 		MySQLMessage mm = <span class="keyword">new</span> MySQLMessage(data);</div><div class="line"> <span class="number">7</span>: 		mm.position(<span class="number">5</span>);</div><div class="line"> <span class="number">8</span>: 		sql = mm.readString(charset);</div><div class="line"> <span class="number">9</span>: 	&#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</div><div class="line"><span class="number">10</span>: 		writeErrMessage(ErrorCode.ER_UNKNOWN_CHARACTER_SET, <span class="string">"Unknown charset '"</span> + charset + <span class="string">"'"</span>);</div><div class="line"><span class="number">11</span>: 		<span class="keyword">return</span>;</div><div class="line"><span class="number">12</span>: 	&#125;		</div><div class="line"><span class="number">13</span>: 	<span class="comment">// 执行语句</span></div><div class="line"><span class="number">14</span>: 	<span class="keyword">this</span>.query( sql );</div><div class="line"><span class="number">15</span>: &#125;</div></pre></td></tr></table></figure></p>
<p>##【 5 】</p>
<p>解析 SQL 类型。核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="comment">// ⬇️⬇️⬇️【ServerQueryHandler.java】</span></div><div class="line"> <span class="number">2</span>: <span class="meta">@Override</span></div><div class="line"> <span class="number">3</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">(String sql)</span> </span>&#123;</div><div class="line"> <span class="number">4</span>: 	<span class="comment">// 解析 SQL 类型</span></div><div class="line"> <span class="number">5</span>: 	<span class="keyword">int</span> rs = ServerParse.parse(sql);</div><div class="line"> <span class="number">6</span>: 	<span class="keyword">int</span> sqlType = rs &amp; <span class="number">0xff</span>;</div><div class="line"> <span class="number">7</span>: 	</div><div class="line"> <span class="number">8</span>: 	<span class="keyword">switch</span> (sqlType) &#123;</div><div class="line"> <span class="number">9</span>: 	<span class="comment">//explain sql</span></div><div class="line"><span class="number">10</span>: 	<span class="keyword">case</span> ServerParse.EXPLAIN:</div><div class="line"><span class="number">11</span>: 		ExplainHandler.handle(sql, c, rs &gt;&gt;&gt; <span class="number">8</span>);</div><div class="line"><span class="number">12</span>: 		<span class="keyword">break</span>;</div><div class="line"><span class="number">13</span>: 	<span class="comment">// .... 省略部分case</span></div><div class="line"><span class="number">14</span>: 		<span class="keyword">break</span>;</div><div class="line"><span class="number">15</span>: 	<span class="keyword">case</span> ServerParse.SELECT:</div><div class="line"><span class="number">16</span>: 		SelectHandler.handle(sql, c, rs &gt;&gt;&gt; <span class="number">8</span>);</div><div class="line"><span class="number">17</span>: 		<span class="keyword">break</span>;</div><div class="line"><span class="number">18</span>: 	<span class="comment">// .... 省略部分case</span></div><div class="line"><span class="number">19</span>: 	<span class="keyword">default</span>:</div><div class="line"><span class="number">20</span>: 		<span class="keyword">if</span>(readOnly)&#123;</div><div class="line"><span class="number">21</span>: 			LOGGER.warn(<span class="keyword">new</span> StringBuilder().append(<span class="string">"User readonly:"</span>).append(sql).toString());</div><div class="line"><span class="number">22</span>: 			c.writeErrMessage(ErrorCode.ER_USER_READ_ONLY, <span class="string">"User readonly"</span>);</div><div class="line"><span class="number">23</span>: 			<span class="keyword">break</span>;</div><div class="line"><span class="number">24</span>: 		&#125;</div><div class="line"><span class="number">25</span>: 		c.execute(sql, rs &amp; <span class="number">0xff</span>);</div><div class="line"><span class="number">26</span>: 	&#125;</div><div class="line"><span class="number">27</span>: &#125;</div><div class="line"><span class="number">28</span>: </div><div class="line"><span class="number">29</span>:</div><div class="line"><span class="number">30</span>: <span class="comment">// ⬇️⬇️⬇️【ServerParse.java】</span></div><div class="line"><span class="number">31</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">parse</span><span class="params">(String stmt)</span> </span>&#123;</div><div class="line"><span class="number">32</span>: 	<span class="keyword">int</span> length = stmt.length();</div><div class="line"><span class="number">33</span>: 	<span class="comment">//FIX BUG FOR SQL SUCH AS /XXXX/SQL</span></div><div class="line"><span class="number">34</span>: 	<span class="keyword">int</span> rt = -<span class="number">1</span>;</div><div class="line"><span class="number">35</span>: 	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; ++i) &#123;</div><div class="line"><span class="number">36</span>: 		<span class="keyword">switch</span> (stmt.charAt(i)) &#123;</div><div class="line"><span class="number">37</span>: 		<span class="comment">// .... 省略部分case			case 'I':</span></div><div class="line"><span class="number">38</span>: 		<span class="keyword">case</span> <span class="string">'i'</span>:</div><div class="line"><span class="number">39</span>: 			rt = insertCheck(stmt, i);</div><div class="line"><span class="number">40</span>: 			<span class="keyword">if</span> (rt != OTHER) &#123;</div><div class="line"><span class="number">41</span>: 				<span class="keyword">return</span> rt;</div><div class="line"><span class="number">42</span>: 			&#125;</div><div class="line"><span class="number">43</span>: 			<span class="keyword">continue</span>;</div><div class="line"><span class="number">44</span>: 			<span class="comment">// .... 省略部分case</span></div><div class="line"><span class="number">45</span>: 		<span class="keyword">case</span> <span class="string">'S'</span>:</div><div class="line"><span class="number">46</span>: 		<span class="keyword">case</span> <span class="string">'s'</span>:</div><div class="line"><span class="number">47</span>: 			rt = sCheck(stmt, i);</div><div class="line"><span class="number">48</span>: 			<span class="keyword">if</span> (rt != OTHER) &#123;</div><div class="line"><span class="number">49</span>: 				<span class="keyword">return</span> rt;</div><div class="line"><span class="number">50</span>: 			&#125;</div><div class="line"><span class="number">51</span>: 			<span class="keyword">continue</span>;</div><div class="line"><span class="number">52</span>: 			<span class="comment">// .... 省略部分case</span></div><div class="line"><span class="number">53</span>: 		<span class="keyword">default</span>:</div><div class="line"><span class="number">54</span>: 			<span class="keyword">continue</span>;</div><div class="line"><span class="number">55</span>: 		&#125;</div><div class="line"><span class="number">56</span>: 	&#125;</div><div class="line"><span class="number">57</span>: 	<span class="keyword">return</span> OTHER;</div><div class="line"><span class="number">58</span>: &#125;</div></pre></td></tr></table></figure></p>
<p>##【 6 】</p>
<p>执行 SQL，详细解析见下文，核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="comment">// ⬇️⬇️⬇️【ServerConnection.java】</span></div><div class="line"> <span class="number">2</span>: <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerConnection</span> <span class="keyword">extends</span> <span class="title">FrontendConnection</span> </span>&#123;</div><div class="line"> <span class="number">3</span>: 	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(String sql, <span class="keyword">int</span> type)</span> </span>&#123;</div><div class="line"> <span class="number">4</span>: 		<span class="comment">// .... 省略代码</span></div><div class="line"> <span class="number">5</span>: 		SchemaConfig schema = MycatServer.getInstance().getConfig().getSchemas().get(db);</div><div class="line"> <span class="number">6</span>: 		<span class="keyword">if</span> (schema == <span class="keyword">null</span>) &#123;</div><div class="line"> <span class="number">7</span>: 			writeErrMessage(ErrorCode.ERR_BAD_LOGICDB,</div><div class="line"> <span class="number">8</span>: 					<span class="string">"Unknown MyCAT Database '"</span> + db + <span class="string">"'"</span>);</div><div class="line"> <span class="number">9</span>: 			<span class="keyword">return</span>;</div><div class="line"><span class="number">10</span>: 		&#125;</div><div class="line"><span class="number">11</span>: </div><div class="line"><span class="number">12</span>: 		<span class="comment">// .... 省略代码</span></div><div class="line"><span class="number">13</span>: </div><div class="line"><span class="number">14</span>: 		<span class="comment">// 路由到后端数据库，执行 SQL</span></div><div class="line"><span class="number">15</span>: 		routeEndExecuteSQL(sql, type, schema);</div><div class="line"><span class="number">16</span>: 	&#125;</div><div class="line"><span class="number">17</span>: 	</div><div class="line"><span class="number">18</span>:     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">routeEndExecuteSQL</span><span class="params">(String sql, <span class="keyword">final</span> <span class="keyword">int</span> type, <span class="keyword">final</span> SchemaConfig schema)</span> </span>&#123;</div><div class="line"><span class="number">19</span>: 		<span class="comment">// 路由计算</span></div><div class="line"><span class="number">20</span>: 		RouteResultset rrs = <span class="keyword">null</span>;</div><div class="line"><span class="number">21</span>: 		<span class="keyword">try</span> &#123;</div><div class="line"><span class="number">22</span>: 			rrs = MycatServer</div><div class="line"><span class="number">23</span>: 					.getInstance()</div><div class="line"><span class="number">24</span>: 					.getRouterservice()</div><div class="line"><span class="number">25</span>: 					.route(MycatServer.getInstance().getConfig().getSystem(),</div><div class="line"><span class="number">26</span>: 							schema, type, sql, <span class="keyword">this</span>.charset, <span class="keyword">this</span>);</div><div class="line"><span class="number">27</span>: </div><div class="line"><span class="number">28</span>: 		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"><span class="number">29</span>: 			StringBuilder s = <span class="keyword">new</span> StringBuilder();</div><div class="line"><span class="number">30</span>: 			LOGGER.warn(s.append(<span class="keyword">this</span>).append(sql).toString() + <span class="string">" err:"</span> + e.toString(),e);</div><div class="line"><span class="number">31</span>: 			String msg = e.getMessage();</div><div class="line"><span class="number">32</span>: 			writeErrMessage(ErrorCode.ER_PARSE_ERROR, msg == <span class="keyword">null</span> ? e.getClass().getSimpleName() : msg);</div><div class="line"><span class="number">33</span>: 			<span class="keyword">return</span>;</div><div class="line"><span class="number">34</span>: 		&#125;</div><div class="line"><span class="number">35</span>: </div><div class="line"><span class="number">36</span>: 		<span class="comment">// 执行 SQL</span></div><div class="line"><span class="number">37</span>: 		<span class="keyword">if</span> (rrs != <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">38</span>: 			<span class="comment">// session执行</span></div><div class="line"><span class="number">39</span>: 			session.execute(rrs, rrs.isSelectForUpdate() ? ServerParse.UPDATE : type);</div><div class="line"><span class="number">40</span>: 		&#125;</div><div class="line"><span class="number">41</span>: 		</div><div class="line"><span class="number">42</span>:  	&#125;</div><div class="line"><span class="number">43</span>: </div><div class="line"><span class="number">44</span>: &#125;</div></pre></td></tr></table></figure></p>
<h1>3. 获得路由结果</h1>
<p><img src="http://www.yunai.me/images/MyCAT/2017_05_29/02.png" alt="【单库单表】插入（02获取路由）"></p>
<h2>【 1 - 2 】【 12 】</h2>
<p>获得路由主流程。核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="comment">// ⬇️⬇️⬇️【RouteService.java】</span></div><div class="line"> <span class="number">2</span>: <span class="function"><span class="keyword">public</span> RouteResultset <span class="title">route</span><span class="params">(SystemConfig sysconf, SchemaConfig schema,</span></span></div><div class="line"> <span class="number">3</span>: 		<span class="keyword">int</span> sqlType, String stmt, String charset, ServerConnection sc)</div><div class="line"> 4: 		<span class="keyword">throws</span> SQLNonTransientException &#123;</div><div class="line"> <span class="number">5</span>: 	RouteResultset rrs = <span class="keyword">null</span>;</div><div class="line"> <span class="number">6</span>: 	<span class="comment">// .... 省略代码</span></div><div class="line"> <span class="number">7</span>: 	<span class="keyword">int</span> hintLength = RouteService.isHintSql(stmt);</div><div class="line"> <span class="number">8</span>: 	<span class="keyword">if</span>(hintLength != -<span class="number">1</span>)&#123; <span class="comment">// TODO 待读：hint</span></div><div class="line"> <span class="number">9</span>: 		<span class="comment">// .... 省略代码</span></div><div class="line"><span class="number">10</span>: 		&#125;</div><div class="line"><span class="number">11</span>: 	&#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">12</span>: 		stmt = stmt.trim();</div><div class="line"><span class="number">13</span>: 		rrs = RouteStrategyFactory.getRouteStrategy().route(sysconf, schema, sqlType, stmt,</div><div class="line"><span class="number">14</span>: 				charset, sc, tableId2DataNodeCache);</div><div class="line"><span class="number">15</span>: 	&#125;</div><div class="line"><span class="number">16</span>: </div><div class="line"><span class="number">17</span>: 	<span class="comment">// .... 省略代码		return rrs;</span></div><div class="line"><span class="number">18</span>: &#125;</div><div class="line"><span class="number">19</span>: <span class="comment">// ⬇️⬇️⬇️【AbstractRouteStrategy.java】</span></div><div class="line"><span class="number">20</span>: <span class="meta">@Override</span></div><div class="line"><span class="number">21</span>: <span class="function"><span class="keyword">public</span> RouteResultset <span class="title">route</span><span class="params">(SystemConfig sysConfig, SchemaConfig schema, <span class="keyword">int</span> sqlType, String origSQL,</span></span></div><div class="line"><span class="number">22</span>: 		String charset, ServerConnection sc, LayerCachePool cachePool) <span class="keyword">throws</span> SQLNonTransientException &#123;</div><div class="line"><span class="number">23</span>: </div><div class="line"><span class="number">24</span>: 	<span class="comment">// .... 省略代码</span></div><div class="line"><span class="number">25</span>: </div><div class="line"><span class="number">26</span>: 	<span class="comment">// 处理一些路由之前的逻辑;全局序列号，父子表插入</span></div><div class="line"><span class="number">27</span>: 	<span class="keyword">if</span> (beforeRouteProcess(schema, sqlType, origSQL, sc) ) &#123;</div><div class="line"><span class="number">28</span>: 		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line"><span class="number">29</span>: 	&#125;</div><div class="line"><span class="number">30</span>: </div><div class="line"><span class="number">31</span>: 	<span class="comment">// .... 省略代码</span></div><div class="line"><span class="number">32</span>: </div><div class="line"><span class="number">33</span>: 	<span class="comment">// 检查是否有分片</span></div><div class="line"><span class="number">34</span>: 	<span class="keyword">if</span> (schema.isNoSharding() &amp;&amp; ServerParse.SHOW != sqlType) &#123;</div><div class="line"><span class="number">35</span>: 		rrs = RouterUtil.routeToSingleNode(rrs, schema.getDataNode(), stmt);</div><div class="line"><span class="number">36</span>: 	&#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">37</span>: 		RouteResultset returnedSet = routeSystemInfo(schema, sqlType, stmt, rrs);</div><div class="line"><span class="number">38</span>: 		<span class="keyword">if</span> (returnedSet == <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">39</span>: 			rrs = routeNormalSqlWithAST(schema, stmt, rrs, charset, cachePool,sqlType,sc);</div><div class="line"><span class="number">40</span>: 		&#125;</div><div class="line"><span class="number">41</span>: 	&#125;</div><div class="line"><span class="number">42</span>: </div><div class="line"><span class="number">43</span>: 	<span class="keyword">return</span> rrs;</div><div class="line"><span class="number">44</span>: &#125;</div></pre></td></tr></table></figure></p>
<p><em><strong>路由</strong> 详细解析，我们另开文章，避免内容过多，影响大家对【插入】流程和逻辑的理解。</em></p>
<h2>【 3 - 6 】</h2>
<p>路由<strong>前置</strong>处理。当符合如下三种情况下，进行处理：</p>
<p>{ 1 } 使用<strong>全局序列号</strong>：</p>
<p><figure class="highlight sql"><table><tr><td class="code"><pre><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">table</span> (<span class="keyword">id</span>, <span class="keyword">name</span>) <span class="keyword">values</span> (<span class="keyword">NEXT</span> <span class="keyword">VALUE</span> <span class="keyword">FOR</span> MYCATSEQ_ID, <span class="string">'name'</span>)</div></pre></td></tr></table></figure></p>
<p>{ 2 } ER 子表插入<br>
{ 3 } 主键使用自增 ID 插入：</p>
<p><figure class="highlight"><table><tr><td class="code"><pre><div class="line">insert into table (name) values ('name')</div><div class="line">===&gt;</div><div class="line">insert into table (id, name) values (NEXT VALUE FOR MYCATSEQ_ID, 'name')</div><div class="line">```  </div><div class="line"></div><div class="line">情况 &#123; 1 &#125; &#123; 3 &#125; 情况类似，使用全局序列号。</div><div class="line"></div><div class="line">核心代码如下：</div><div class="line"></div><div class="line">```Java</div><div class="line">  1: // ⬇️⬇️⬇️【AbstractRouteStrategy.java】</div><div class="line">  2: private boolean beforeRouteProcess(SchemaConfig schema, int sqlType, String origSQL, ServerConnection sc)</div><div class="line">  3: 		throws SQLNonTransientException &#123;</div><div class="line">  4: 	return  // 处理 id 使用 全局序列号</div><div class="line">  5:             RouterUtil.processWithMycatSeq(schema, sqlType, origSQL, sc)</div><div class="line">  6:             // 处理 ER 子表</div><div class="line">  7: 			|| (sqlType == ServerParse.INSERT &amp;&amp; RouterUtil.processERChildTable(schema, origSQL, sc))</div><div class="line">  8:             // 处理 id 自增长</div><div class="line">  9: 			|| (sqlType == ServerParse.INSERT &amp;&amp; RouterUtil.processInsert(schema, sqlType, origSQL, sc));</div><div class="line"> 10: &#125;</div></pre></td></tr></table></figure></p>
<p><code>RouterUtil.java</code> 处理 SQL 考虑性能，实现会比较 C-style，代码咱就不贴了，传送门：https://github.com/YunaiV/Mycat-Server/blob/1.6/src/main/java/io/mycat/route/util/RouterUtil.java。 （😈该仓库从官方 Fork，逐步完善中文注释，欢迎 Star）</p>
<h2>【 7 - 11 】</h2>
<p>当<strong>前置</strong>路由处理<strong>全局序列号</strong>时，添加到全局序列处理器（<code>MyCATSequnceProcessor</code>）。该处理器会异步生成 ID，替换 SQL 内的 <code>NEXT VALUE FOR MYCATSEQ_</code> 正则。例如：</p>
<p><figure class="highlight sql"><table><tr><td class="code"><pre><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">table</span> (<span class="keyword">id</span>, <span class="keyword">name</span>) <span class="keyword">values</span> (<span class="keyword">NEXT</span> <span class="keyword">VALUE</span> <span class="keyword">FOR</span> MYCATSEQ_ID, <span class="string">'name'</span>)</div><div class="line">===&gt;</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">table</span> (<span class="keyword">id</span>, <span class="keyword">name</span>) <span class="keyword">values</span> (<span class="number">868348974560579584</span>, <span class="string">'name'</span>)</div></pre></td></tr></table></figure></p>
<p>异步处理完后，调用 <code>ServerConnection#routeEndExecuteSQL(sql, type, schema)</code> 方法重新执行 SQL。</p>
<p>核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="comment">// ⬇️⬇️⬇️【RouterUtil.java】</span></div><div class="line"> <span class="number">2</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">processSQL</span><span class="params">(ServerConnection sc,SchemaConfig schema,String sql,<span class="keyword">int</span> sqlType)</span></span>&#123;</div><div class="line"> <span class="number">3</span>: 	SessionSQLPair sessionSQLPair = <span class="keyword">new</span> SessionSQLPair(sc.getSession2(), schema, sql, sqlType);</div><div class="line"> <span class="number">4</span>: 	MycatServer.getInstance().getSequnceProcessor().addNewSql(sessionSQLPair);</div><div class="line"> <span class="number">5</span>: &#125;</div><div class="line"> <span class="number">6</span>: <span class="comment">// ⬇️⬇️⬇️【MyCATSequnceProcessor.java】</span></div><div class="line"> <span class="number">7</span>: <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCATSequnceProcessor</span> </span>&#123;</div><div class="line"> <span class="number">8</span>: 	<span class="keyword">private</span> LinkedBlockingQueue&lt;SessionSQLPair&gt; seqSQLQueue = <span class="keyword">new</span> LinkedBlockingQueue&lt;SessionSQLPair&gt;();</div><div class="line"> <span class="number">9</span>: 	<span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> running=<span class="keyword">true</span>;</div><div class="line"><span class="number">10</span>: 	</div><div class="line"><span class="number">11</span>: 	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addNewSql</span><span class="params">(SessionSQLPair pair)</span> </span>&#123;</div><div class="line"><span class="number">12</span>: 		seqSQLQueue.add(pair);</div><div class="line"><span class="number">13</span>: 	&#125;</div><div class="line"><span class="number">14</span>: </div><div class="line"><span class="number">15</span>: 	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">executeSeq</span><span class="params">(SessionSQLPair pair)</span> </span>&#123;</div><div class="line"><span class="number">16</span>: 		<span class="keyword">try</span> &#123;</div><div class="line"><span class="number">17</span>: 			</div><div class="line"><span class="number">18</span>: 			<span class="comment">// 使用Druid解析器实现sequence处理  @兵临城下</span></div><div class="line"><span class="number">19</span>: 			DruidSequenceHandler sequenceHandler = <span class="keyword">new</span> DruidSequenceHandler(MycatServer</div><div class="line"><span class="number">20</span>: 					.getInstance().getConfig().getSystem().getSequnceHandlerType());</div><div class="line"><span class="number">21</span>: </div><div class="line"><span class="number">22</span>: 			<span class="comment">// 生成可执行 SQL ：目前主要是生成 id</span></div><div class="line"><span class="number">23</span>: 			String charset = pair.session.getSource().getCharset();</div><div class="line"><span class="number">24</span>: 			String executeSql = sequenceHandler.getExecuteSql(pair.sql,charset == <span class="keyword">null</span> ? <span class="string">"utf-8"</span>:charset);</div><div class="line"><span class="number">25</span>: </div><div class="line"><span class="number">26</span>: 			<span class="comment">// 执行 SQL</span></div><div class="line"><span class="number">27</span>: 			pair.session.getSource().routeEndExecuteSQL(executeSql, pair.type,pair.schema);</div><div class="line"><span class="number">28</span>: 		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"><span class="number">29</span>: 			LOGGER.error(<span class="string">"MyCATSequenceProcessor.executeSeq(SesionSQLPair)"</span>,e);</div><div class="line"><span class="number">30</span>: 			pair.session.getSource().writeErrMessage(ErrorCode.ER_YES,<span class="string">"mycat sequnce err."</span> + e);</div><div class="line"><span class="number">31</span>: 			<span class="keyword">return</span>;</div><div class="line"><span class="number">32</span>: 		&#125;</div><div class="line"><span class="number">33</span>: 	&#125;</div><div class="line"><span class="number">34</span>: 	</div><div class="line"><span class="number">35</span>: 	<span class="class"><span class="keyword">class</span> <span class="title">ExecuteThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line"><span class="number">36</span>: 		</div><div class="line"><span class="number">37</span>: 		<span class="function"><span class="keyword">public</span> <span class="title">ExecuteThread</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="number">38</span>: 			setDaemon(<span class="keyword">true</span>); <span class="comment">// 设置为后台线程,防止throw RuntimeExecption进程仍然存在的问题</span></div><div class="line"><span class="number">39</span>: 		&#125;</div><div class="line"><span class="number">40</span>: 		</div><div class="line"><span class="number">41</span>: 		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="number">42</span>: 			<span class="keyword">while</span> (running) &#123;</div><div class="line"><span class="number">43</span>: 				<span class="keyword">try</span> &#123;</div><div class="line"><span class="number">44</span>: 					SessionSQLPair pair=seqSQLQueue.poll(<span class="number">100</span>,TimeUnit.MILLISECONDS);</div><div class="line"><span class="number">45</span>: 					<span class="keyword">if</span>(pair!=<span class="keyword">null</span>)&#123;</div><div class="line"><span class="number">46</span>:                         executeSeq(pair);</div><div class="line"><span class="number">47</span>: 					&#125;</div><div class="line"><span class="number">48</span>: 				&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"><span class="number">49</span>: 					LOGGER.warn(<span class="string">"MyCATSequenceProcessor$ExecutorThread"</span>,e);</div><div class="line"><span class="number">50</span>: 				&#125;</div><div class="line"><span class="number">51</span>: 			&#125;</div><div class="line"><span class="number">52</span>: 		&#125;</div><div class="line"><span class="number">53</span>: 	&#125;</div><div class="line"><span class="number">54</span>: &#125;</div></pre></td></tr></table></figure></p>
<p>❓此处有个疑问：<code>MyCATSequnceProcessor</code> 是单线程，会不会插入性能有一定的影响？后续咱做下性能测试。</p>
<h1>4. 获得 MySQL 连接，执行 SQL</h1>
<p><img src="http://www.yunai.me/images/MyCAT/2017_05_29/03.png" alt="【单库单表】插入（03执行 SQL）"></p>
<h2>【 1 - 8 】</h2>
<p>获得 MySQL 连接。</p>
<ul>
<li>PhysicalDBNode ：物理数据库节点。</li>
<li>PhysicalDatasource ：物理数据库数据源。</li>
</ul>
<h2>【 9 - 13 】</h2>
<p>发送 SQL 到 MySQL Server，执行 SQL。</p>
<h1>5. 响应执行 SQL 结果</h1>
<p><img src="http://www.yunai.me/images/MyCAT/2017_05_29/04.png" alt="【单库单表】插入（04执行响应）"></p>
<h2>【 1 - 4 】</h2>
<p>处理 MySQL Server 响应数据包。</p>
<h2>【 5 - 8 】</h2>
<p>发送插入成功结果给 MySQL Client。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://www.yunai.me/images/common/wechat_mp_2017_07_31.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;🙂🙂🙂关注**微信公众号：【芋艿的后端小屋】**有福利：&lt;/p&gt;
&lt;ol
    
    </summary>
    
      <category term="MyCAT" scheme="http://www.yunai.me/categories/MyCAT/"/>
    
    
  </entry>
  
  <entry>
    <title>MyCAT 源码分析 —— 调试环境搭建</title>
    <link href="http://www.yunai.me/MyCAT/build-debugging-environment/"/>
    <id>http://www.yunai.me/MyCAT/build-debugging-environment/</id>
    <published>2017-05-22T16:00:00.000Z</published>
    <updated>2017-07-31T12:30:52.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://www.yunai.me/images/common/wechat_mp_2017_07_31.jpg" alt=""></p>
<blockquote>
<p>🙂🙂🙂关注**微信公众号：【芋艿的后端小屋】**有福利：</p>
<ol>
<li>RocketMQ / MyCAT / Sharding-JDBC <strong>所有</strong>源码分析文章列表</li>
<li>RocketMQ / MyCAT / Sharding-JDBC <strong>中文注释源码 GitHub 地址</strong></li>
<li>您对于源码的疑问每条留言<strong>都</strong>将得到<strong>认真</strong>回复。<strong>甚至不知道如何读源码也可以请教噢</strong>。</li>
<li><strong>新的</strong>源码解析文章<strong>实时</strong>收到通知。<strong>每周更新一篇左右</strong>。</li>
<li><strong>认真的</strong>源码交流微信群。</li>
</ol>
</blockquote>
<hr>
<ul>
<li><a href="#">1. 依赖工具</a></li>
<li><a href="#">2. 源码拉取</a></li>
<li><a href="#">3. 数据库配置</a></li>
<li><a href="#">4. MyCat 配置</a></li>
<li><a href="#">5. MyCAT 启动</a></li>
<li><a href="#">6. MyCAT 测试</a></li>
<li><a href="#">7. 交流</a></li>
</ul>
<h1>1. 依赖工具</h1>
<ul>
<li>Maven</li>
<li>Git</li>
<li>JDK</li>
<li>MySQL</li>
<li>IntelliJ IDEA</li>
</ul>
<h1>2. 源码拉取</h1>
<p>从官方仓库 <a href="https://github.com/MyCATApache/Mycat-Server" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/MyCATApache/Mycat-Server</a> <code>Fork</code> 出属于自己的仓库。为什么要 <code>Fork</code> ？既然开始阅读、调试源码，我们可能会写一些注释，有了自己的仓库，可以进行自由的提交。😈</p>
<p>使用 <code>IntelliJ IDEA</code> 从 <code>Fork</code> 出来的仓库拉取代码。拉取完成后，<code>Maven</code> 会下载依赖包，可能会花费一些时间，耐心等待下。</p>
<h1>3. 数据库配置</h1>
<p>我们要搭建的是<strong>非分片表</strong>的调试环境，需要创建一个数据库和表：</p>
<ol>
<li>创建数据库：<code>db01</code> 。</li>
<li>创建数据库表：<code>travelrecord</code> 。</li>
</ol>
<p><figure class="highlight sql"><table><tr><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`travelrecord`</span> (</div><div class="line">  <span class="string">`id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</div><div class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> latin1 <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</div><div class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">1</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COLLATE</span>=utf8_bin</div></pre></td></tr></table></figure></p>
<h1>4. MyCAT 配置</h1>
<p>为了避免对实现源码产生影响，我们选择对 <code>test</code> 目录做变更。</p>
<p>1、在 <code>resources</code> 目录下新建文件夹 <code>backups</code> ，将原 <code>resources</code> 下的所有文件移到 <code>backups</code> 下，这样我们的环境就干干净了。<br>
2、在 <code>resources</code> 目录下新建 <code>schema.xml</code> 文件，配置 <code>MyCAT</code> 的逻辑库、表、数据节点、数据源。</p>
<p><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0"?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE mycat:schema SYSTEM "schema.dtd"&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">mycat:schema</span> <span class="attr">xmlns:mycat</span>=<span class="string">"http://io.mycat/"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">"dbtest"</span> <span class="attr">checkSQLschema</span>=<span class="string">"true"</span> <span class="attr">sqlMaxLimit</span>=<span class="string">"100"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">"travelrecord"</span> <span class="attr">dataNode</span>=<span class="string">"dn1"</span> <span class="attr">autoIncrement</span>=<span class="string">"true"</span> <span class="attr">primaryKey</span>=<span class="string">"id"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">schema</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">"dn1"</span> <span class="attr">dataHost</span>=<span class="string">"localhost1"</span> <span class="attr">database</span>=<span class="string">"db1"</span> /&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">"localhost1"</span> <span class="attr">maxCon</span>=<span class="string">"1000"</span> <span class="attr">minCon</span>=<span class="string">"10"</span> <span class="attr">balance</span>=<span class="string">"0"</span></span></div><div class="line">			  <span class="attr">writeType</span>=<span class="string">"0"</span> <span class="attr">dbType</span>=<span class="string">"mysql"</span> <span class="attr">dbDriver</span>=<span class="string">"native"</span> <span class="attr">switchType</span>=<span class="string">"1"</span> <span class="attr">slaveThreshold</span>=<span class="string">"100"</span>&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">"hostM1"</span> <span class="attr">url</span>=<span class="string">"127.0.0.1:33061"</span> <span class="attr">user</span>=<span class="string">"root"</span> <span class="attr">password</span>=<span class="string">"123456"</span>&gt;</span> <span class="comment">&lt;!-- ‼️‼️‼️ url、user、password 设置成你的数据库 --&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">mycat:schema</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>3、在 <code>resources</code> 目录下新建 <code>server.xml</code> 文件，配置 <code>MyCAT</code> 系统配置。</p>
<p><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE mycat:server SYSTEM "server.dtd"&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">mycat:server</span> <span class="attr">xmlns:mycat</span>=<span class="string">"http://io.mycat/"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">system</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"nonePasswordLogin"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span> <span class="comment">&lt;!-- 0为需要密码登陆、1为不需要密码登陆 ,默认为0，设置为1则需要指定默认账户--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"useHandshakeV10"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"useSqlStat"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span>  <span class="comment">&lt;!-- 1为开启实时统计、0为关闭 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"useGlobleTableCheck"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span>  <span class="comment">&lt;!-- 1为开启全加班一致性检测、0为关闭 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sequnceHandlerType"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"processorBufferPoolType"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"handleDistributedTransactions"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"useOffHeapForMerge"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"memoryPageSize"</span>&gt;</span>64k<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"spillsFileBufferSize"</span>&gt;</span>1k<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"useStreamOutput"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"systemReserveMemorySize"</span>&gt;</span>384m<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"useZKSwitch"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">system</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">user</span> <span class="attr">name</span>=<span class="string">"root"</span> <span class="attr">defaultAccount</span>=<span class="string">"true"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"schemas"</span>&gt;</span>dbtest<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">user</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">mycat:server</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h1>5. MyCAT 启动</h1>
<p>1、在 <code>java</code> 目录下新建 <code>debugger</code> 包，和原先已存在的包做区分。<br>
2、在 <code>debbuger</code> 包下新建 <code>MycatStartupTest.java</code> ：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">package</span> debugger;</div><div class="line"></div><div class="line"><span class="keyword">import</span> io.mycat.MycatStartup;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * &#123;<span class="doctag">@link</span> io.mycat.MycatStartup&#125;测试</div><div class="line"> *</div><div class="line"> * Created by yunai on 2017/5/22.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MycatStartupTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        MycatStartup.main(args);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>3、运行 <code>MycatStartupTest.java</code> ，当看到输出日志 <code>MyCAT Server startup successfully. see logs in logs/mycat.log</code> 即为启动成功。</p>
<p>截止目前，<code>test</code> 目录如下：</p>
<p><img src="http://www.yunai.me/images/MyCAT/2017_05_23/01.png" alt="test目录.png"></p>
<h1>6. MyCAT 测试</h1>
<p>调试环境已经搭建完成，我们看看是否正确。</p>
<p>使用 <code>MySQL</code> 客户端连接 <code>MyCAT</code> ：</p>
<ul>
<li>HOST ：127.0.0.1</li>
<li>PORT ：8066</li>
<li>USERNAME ：root</li>
<li>PASSWORD ：123456</li>
</ul>
<p><figure class="highlight"><table><tr><td class="code"><pre><div class="line">mysql&gt; insert into travelrecord(name) values ('haha');</div><div class="line">Query OK, 1 rows affected (0.01 sec)</div><div class="line"></div><div class="line">mysql&gt; select * from travelrecord;</div><div class="line">+--------------------+------+</div><div class="line">| id                 | name |</div><div class="line">+--------------------+------+</div><div class="line">| 866707181398003712 | haha |</div><div class="line">+--------------------+------+</div><div class="line">1 rows in set (0.05 sec)</div></pre></td></tr></table></figure></p>
<p>成功。😈😈😈</p>
<h1>7. 交流</h1>
<p>感谢阅读、收藏、关注。<br>
<strong>知其然知其所以然。学习 MyCAT 会是一段很愉快的旅程。如果有你的交流，相信会更加愉快。欢迎添加微信：<code>wangwenbin-server</code> 进行探讨。</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://www.yunai.me/images/common/wechat_mp_2017_07_31.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;🙂🙂🙂关注**微信公众号：【芋艿的后端小屋】**有福利：&lt;/p&gt;
&lt;ol
    
    </summary>
    
      <category term="MyCAT" scheme="http://www.yunai.me/categories/MyCAT/"/>
    
    
  </entry>
  
  <entry>
    <title>为什么阅读 MyCAT 源码？</title>
    <link href="http://www.yunai.me/MyCAT/why-read-MyCAT-source-code/"/>
    <id>http://www.yunai.me/MyCAT/why-read-MyCAT-source-code/</id>
    <published>2017-05-21T16:00:00.000Z</published>
    <updated>2017-07-31T12:30:52.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://www.yunai.me/images/common/wechat_mp_2017_07_31.jpg" alt=""></p>
<blockquote>
<p>🙂🙂🙂关注**微信公众号：【芋艿的后端小屋】**有福利：</p>
<ol>
<li>RocketMQ / MyCAT / Sharding-JDBC <strong>所有</strong>源码分析文章列表</li>
<li>RocketMQ / MyCAT / Sharding-JDBC <strong>中文注释源码 GitHub 地址</strong></li>
<li>您对于源码的疑问每条留言<strong>都</strong>将得到<strong>认真</strong>回复。<strong>甚至不知道如何读源码也可以请教噢</strong>。</li>
<li><strong>新的</strong>源码解析文章<strong>实时</strong>收到通知。<strong>每周更新一篇左右</strong>。</li>
<li><strong>认真的</strong>源码交流微信群。</li>
</ol>
</blockquote>
<hr>
<h2>为什么阅读 MyCAT 源码？</h2>
<ul>
<li>深入了解<strong>数据库中间件</strong> ，知其然知其所以然。</li>
<li>NIO 的实现 与 Netty 有什么特殊的地方？</li>
<li>分布式事务如何实现的？</li>
<li>内存管理</li>
<li>SQL 解析</li>
<li>等等</li>
</ul>
<h2>功能点</h2>
<ul>
<li>[ ] NIO</li>
<li>[x] 分布式事务</li>
<li>[ ] MyCAT 主从</li>
<li>[x] 支持prepare预编译指令</li>
<li>[ ] 自增序列 30%</li>
<li>[ ] 单库任意 Join Doing</li>
<li>[x] 跨库2表 Join</li>
<li>[ ] 跨库多表 Join</li>
<li>[ ] SQL 解析</li>
<li>[ ] 读写分离</li>
<li>[ ] MySQL 主从</li>
<li>[ ] 自动故障切换</li>
<li>[ ] Galera Cluster 集群</li>
<li>[ ] MHA 集群</li>
<li>[ ] Percona 集群</li>
<li>[ ] 服务降级</li>
<li>[ ] 多租户</li>
<li>[ ] 路由</li>
<li>[ ] MyCAT 集群</li>
<li>[ ] 注解</li>
<li>[ ] 缓存</li>
<li>[ ] 监控</li>
<li>[ ] Mongodb</li>
<li>[ ] 内存管理 20%</li>
<li>[ ] 数据聚合 30%</li>
<li>[ ] 数据排序 25%</li>
<li>[ ] 分表</li>
<li>[ ] 分库 50%</li>
<li>[ ] 全局表</li>
<li>[ ] E/R关系</li>
<li>[ ] 服务降级</li>
<li>[ ] SQL 注入攻击拦截</li>
<li>[ ] MySQL 协议</li>
<li>[ ] PostgreSQL 协议</li>
<li>[ ] 存储过程</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://www.yunai.me/images/common/wechat_mp_2017_07_31.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;🙂🙂🙂关注**微信公众号：【芋艿的后端小屋】**有福利：&lt;/p&gt;
&lt;ol
    
    </summary>
    
      <category term="MyCAT" scheme="http://www.yunai.me/categories/MyCAT/"/>
    
    
  </entry>
  
  <entry>
    <title>RocketMQ 源码分析 —— 事务消息</title>
    <link href="http://www.yunai.me/RocketMQ/message-transaction/"/>
    <id>http://www.yunai.me/RocketMQ/message-transaction/</id>
    <published>2017-05-20T16:00:00.000Z</published>
    <updated>2017-07-31T12:30:52.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://www.yunai.me/images/common/wechat_mp_2017_07_31.jpg" alt=""></p>
<blockquote>
<p>🙂🙂🙂关注**微信公众号：【芋艿的后端小屋】**有福利：</p>
<ol>
<li>RocketMQ / MyCAT / Sharding-JDBC <strong>所有</strong>源码分析文章列表</li>
<li>RocketMQ / MyCAT / Sharding-JDBC <strong>中文注释源码 GitHub 地址</strong></li>
<li>您对于源码的疑问每条留言<strong>都</strong>将得到<strong>认真</strong>回复。<strong>甚至不知道如何读源码也可以请教噢</strong>。</li>
<li><strong>新的</strong>源码解析文章<strong>实时</strong>收到通知。<strong>每周更新一篇左右</strong>。</li>
<li><strong>认真的</strong>源码交流微信群。</li>
</ol>
</blockquote>
<hr>
<ul>
<li><a href="#">1. 概述</a></li>
<li><a href="#">2. 事务消息发送</a>
<ul>
<li><a href="#">2.1 Producer 发送事务消息</a></li>
<li><a href="#">2.2 Broker 处理结束事务请求</a></li>
<li><a href="#">2.3 Broker 生成 ConsumeQueue</a></li>
</ul>
</li>
<li><a href="#">3. 事务消息回查</a>
<ul>
<li><a href="#">3.1 Broker 发起【事务消息回查】</a>
<ul>
<li><a href="#">3.1.1 官方V3.1.4：基于文件系统</a>
<ul>
<li><a href="#">3.1.1.1 存储消息到 CommitLog</a></li>
<li><a href="#">3.1.1.2 写【事务消息】状态存储（TranStateTable）</a></li>
<li><a href="#">3.1.1.3 【事务消息】回查</a></li>
<li><a href="#">3.1.1.4 初始化【事务消息】状态存储（TranStateTable）</a></li>
<li><a href="#">3.1.1.5 补充</a></li>
</ul>
</li>
<li><a href="#">3.1.2 官方V4.0.0：基于数据库</a></li>
</ul>
</li>
<li><a href="#">3.2 Producer 接收【事务消息回查】</a></li>
</ul>
</li>
</ul>
<h1>1. 概述</h1>
<p><strong>必须必须必须</strong> 前置阅读内容：</p>
<ul>
<li><a href="https://help.aliyun.com/document_detail/43348.html?spm=5176.doc43490.6.566.Zd5Bl7" rel="external nofollow noopener noreferrer" target="_blank">《事务消息（阿里云）》</a></li>
</ul>
<h1>2. 事务消息发送</h1>
<h2>2.1 Producer 发送事务消息</h2>
<ul>
<li>活动图如下（结合 <code>核心代码</code> 理解）：</li>
</ul>
<p><img src="http://www.yunai.me/images/RocketMQ/2017_05_21/03.png" alt="Producer发送事务消息"></p>
<ul>
<li>实现代码如下：</li>
</ul>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">  <span class="number">1</span>: <span class="comment">// ⬇️⬇️⬇️【DefaultMQProducerImpl.java】</span></div><div class="line">  <span class="number">2</span>: <span class="comment">/**</span></div><div class="line">  3:  * 发送事务消息</div><div class="line">  4:  *</div><div class="line">  5:  * <span class="doctag">@param</span> msg 消息</div><div class="line">  6:  * <span class="doctag">@param</span> tranExecuter 【本地事务】执行器</div><div class="line">  7:  * <span class="doctag">@param</span> arg 【本地事务】执行器参数</div><div class="line">  8:  * <span class="doctag">@return</span> 事务发送结果</div><div class="line">  9:  * <span class="doctag">@throws</span> MQClientException 当 Client 发生异常时</div><div class="line"> 10:  */</div><div class="line"> <span class="number">11</span>: <span class="function"><span class="keyword">public</span> TransactionSendResult <span class="title">sendMessageInTransaction</span><span class="params">(<span class="keyword">final</span> Message msg, <span class="keyword">final</span> LocalTransactionExecuter tranExecuter, <span class="keyword">final</span> Object arg)</span></span></div><div class="line"> 12:     <span class="keyword">throws</span> MQClientException &#123;</div><div class="line"> <span class="number">13</span>:     <span class="keyword">if</span> (<span class="keyword">null</span> == tranExecuter) &#123;</div><div class="line"> <span class="number">14</span>:         <span class="keyword">throw</span> <span class="keyword">new</span> MQClientException(<span class="string">"tranExecutor is null"</span>, <span class="keyword">null</span>);</div><div class="line"> <span class="number">15</span>:     &#125;</div><div class="line"> <span class="number">16</span>:     Validators.checkMessage(msg, <span class="keyword">this</span>.defaultMQProducer);</div><div class="line"> <span class="number">17</span>: </div><div class="line"> <span class="number">18</span>:     <span class="comment">// 发送【Half消息】</span></div><div class="line"> <span class="number">19</span>:     SendResult sendResult;</div><div class="line"> <span class="number">20</span>:     MessageAccessor.putProperty(msg, MessageConst.PROPERTY_TRANSACTION_PREPARED, <span class="string">"true"</span>);</div><div class="line"> <span class="number">21</span>:     MessageAccessor.putProperty(msg, MessageConst.PROPERTY_PRODUCER_GROUP, <span class="keyword">this</span>.defaultMQProducer.getProducerGroup());</div><div class="line"> <span class="number">22</span>:     <span class="keyword">try</span> &#123;</div><div class="line"> <span class="number">23</span>:         sendResult = <span class="keyword">this</span>.send(msg);</div><div class="line"> <span class="number">24</span>:     &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"> <span class="number">25</span>:         <span class="keyword">throw</span> <span class="keyword">new</span> MQClientException(<span class="string">"send message Exception"</span>, e);</div><div class="line"> <span class="number">26</span>:     &#125;</div><div class="line"> <span class="number">27</span>: </div><div class="line"> <span class="number">28</span>:     <span class="comment">// 处理发送【Half消息】结果</span></div><div class="line"> <span class="number">29</span>:     LocalTransactionState localTransactionState = LocalTransactionState.UNKNOW;</div><div class="line"> <span class="number">30</span>:     Throwable localException = <span class="keyword">null</span>;</div><div class="line"> <span class="number">31</span>:     <span class="keyword">switch</span> (sendResult.getSendStatus()) &#123;</div><div class="line"> <span class="number">32</span>:         <span class="comment">// 发送【Half消息】成功，执行【本地事务】逻辑</span></div><div class="line"> <span class="number">33</span>:         <span class="keyword">case</span> SEND_OK: &#123;</div><div class="line"> <span class="number">34</span>:             <span class="keyword">try</span> &#123;</div><div class="line"> <span class="number">35</span>:                 <span class="keyword">if</span> (sendResult.getTransactionId() != <span class="keyword">null</span>) &#123; <span class="comment">// 事务编号。目前开源版本暂时没用到，猜想ONS在使用。</span></div><div class="line"> <span class="number">36</span>:                     msg.putUserProperty(<span class="string">"__transactionId__"</span>, sendResult.getTransactionId());</div><div class="line"> <span class="number">37</span>:                 &#125;</div><div class="line"> <span class="number">38</span>: </div><div class="line"> <span class="number">39</span>:                 <span class="comment">// 执行【本地事务】逻辑</span></div><div class="line"> <span class="number">40</span>:                 localTransactionState = tranExecuter.executeLocalTransactionBranch(msg, arg);</div><div class="line"> <span class="number">41</span>:                 <span class="keyword">if</span> (<span class="keyword">null</span> == localTransactionState) &#123;</div><div class="line"> <span class="number">42</span>:                     localTransactionState = LocalTransactionState.UNKNOW;</div><div class="line"> <span class="number">43</span>:                 &#125;</div><div class="line"> <span class="number">44</span>: </div><div class="line"> <span class="number">45</span>:                 <span class="keyword">if</span> (localTransactionState != LocalTransactionState.COMMIT_MESSAGE) &#123;</div><div class="line"> <span class="number">46</span>:                     log.info(<span class="string">"executeLocalTransactionBranch return &#123;&#125;"</span>, localTransactionState);</div><div class="line"> <span class="number">47</span>:                     log.info(msg.toString());</div><div class="line"> <span class="number">48</span>:                 &#125;</div><div class="line"> <span class="number">49</span>:             &#125; <span class="keyword">catch</span> (Throwable e) &#123;</div><div class="line"> <span class="number">50</span>:                 log.info(<span class="string">"executeLocalTransactionBranch exception"</span>, e);</div><div class="line"> <span class="number">51</span>:                 log.info(msg.toString());</div><div class="line"> <span class="number">52</span>:                 localException = e;</div><div class="line"> <span class="number">53</span>:             &#125;</div><div class="line"> <span class="number">54</span>:         &#125;</div><div class="line"> <span class="number">55</span>:         <span class="keyword">break</span>;</div><div class="line"> <span class="number">56</span>:         <span class="comment">// 发送【Half消息】失败，标记【本地事务】状态为回滚</span></div><div class="line"> <span class="number">57</span>:         <span class="keyword">case</span> FLUSH_DISK_TIMEOUT:</div><div class="line"> <span class="number">58</span>:         <span class="keyword">case</span> FLUSH_SLAVE_TIMEOUT:</div><div class="line"> <span class="number">59</span>:         <span class="keyword">case</span> SLAVE_NOT_AVAILABLE:</div><div class="line"> <span class="number">60</span>:             localTransactionState = LocalTransactionState.ROLLBACK_MESSAGE;</div><div class="line"> <span class="number">61</span>:             <span class="keyword">break</span>;</div><div class="line"> <span class="number">62</span>:         <span class="keyword">default</span>:</div><div class="line"> <span class="number">63</span>:             <span class="keyword">break</span>;</div><div class="line"> <span class="number">64</span>:     &#125;</div><div class="line"> <span class="number">65</span>: </div><div class="line"> <span class="number">66</span>:     <span class="comment">// 结束事务：提交消息 COMMIT / ROLLBACK</span></div><div class="line"> <span class="number">67</span>:     <span class="keyword">try</span> &#123;</div><div class="line"> <span class="number">68</span>:         <span class="keyword">this</span>.endTransaction(sendResult, localTransactionState, localException);</div><div class="line"> <span class="number">69</span>:     &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"> <span class="number">70</span>:         log.warn(<span class="string">"local transaction execute "</span> + localTransactionState + <span class="string">", but end broker transaction failed"</span>, e);</div><div class="line"> <span class="number">71</span>:     &#125;</div><div class="line"> <span class="number">72</span>: </div><div class="line"> <span class="number">73</span>:     <span class="comment">// 返回【事务发送结果】</span></div><div class="line"> <span class="number">74</span>:     TransactionSendResult transactionSendResult = <span class="keyword">new</span> TransactionSendResult();</div><div class="line"> <span class="number">75</span>:     transactionSendResult.setSendStatus(sendResult.getSendStatus());</div><div class="line"> <span class="number">76</span>:     transactionSendResult.setMessageQueue(sendResult.getMessageQueue());</div><div class="line"> <span class="number">77</span>:     transactionSendResult.setMsgId(sendResult.getMsgId());</div><div class="line"> <span class="number">78</span>:     transactionSendResult.setQueueOffset(sendResult.getQueueOffset());</div><div class="line"> <span class="number">79</span>:     transactionSendResult.setTransactionId(sendResult.getTransactionId());</div><div class="line"> <span class="number">80</span>:     transactionSendResult.setLocalTransactionState(localTransactionState);</div><div class="line"> <span class="number">81</span>:     <span class="keyword">return</span> transactionSendResult;</div><div class="line"> <span class="number">82</span>: &#125;</div><div class="line"> <span class="number">83</span>: </div><div class="line"> <span class="number">84</span>: <span class="comment">/**</span></div><div class="line"> 85:  * 结束事务：提交消息 COMMIT / ROLLBACK</div><div class="line"> 86:  *</div><div class="line"> 87:  * <span class="doctag">@param</span> sendResult 发送【Half消息】结果</div><div class="line"> 88:  * <span class="doctag">@param</span> localTransactionState 【本地事务】状态</div><div class="line"> 89:  * <span class="doctag">@param</span> localException 执行【本地事务】逻辑产生的异常</div><div class="line"> 90:  * <span class="doctag">@throws</span> RemotingException 当远程调用发生异常时</div><div class="line"> 91:  * <span class="doctag">@throws</span> MQBrokerException 当 Broker 发生异常时</div><div class="line"> 92:  * <span class="doctag">@throws</span> InterruptedException 当线程中断时</div><div class="line"> 93:  * <span class="doctag">@throws</span> UnknownHostException 当解码消息编号失败是</div><div class="line"> 94:  */</div><div class="line"> <span class="number">95</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">endTransaction</span><span class="params">(//</span></span></div><div class="line"> <span class="number">96</span>:     <span class="keyword">final</span> SendResult sendResult, //</div><div class="line"> <span class="number">97</span>:     <span class="keyword">final</span> LocalTransactionState localTransactionState, //</div><div class="line"> <span class="number">98</span>:     <span class="keyword">final</span> Throwable localException) <span class="keyword">throws</span> RemotingException, MQBrokerException, InterruptedException, UnknownHostException &#123;</div><div class="line"> <span class="number">99</span>:     <span class="comment">// 解码消息编号</span></div><div class="line"><span class="number">100</span>:     <span class="keyword">final</span> MessageId id;</div><div class="line"><span class="number">101</span>:     <span class="keyword">if</span> (sendResult.getOffsetMsgId() != <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">102</span>:         id = MessageDecoder.decodeMessageId(sendResult.getOffsetMsgId());</div><div class="line"><span class="number">103</span>:     &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">104</span>:         id = MessageDecoder.decodeMessageId(sendResult.getMsgId());</div><div class="line"><span class="number">105</span>:     &#125;</div><div class="line"><span class="number">106</span>: </div><div class="line"><span class="number">107</span>:     <span class="comment">// 创建请求</span></div><div class="line"><span class="number">108</span>:     String transactionId = sendResult.getTransactionId();</div><div class="line"><span class="number">109</span>:     <span class="keyword">final</span> String brokerAddr = <span class="keyword">this</span>.mQClientFactory.findBrokerAddressInPublish(sendResult.getMessageQueue().getBrokerName());</div><div class="line"><span class="number">110</span>:     EndTransactionRequestHeader requestHeader = <span class="keyword">new</span> EndTransactionRequestHeader();</div><div class="line"><span class="number">111</span>:     requestHeader.setTransactionId(transactionId);</div><div class="line"><span class="number">112</span>:     requestHeader.setCommitLogOffset(id.getOffset());</div><div class="line"><span class="number">113</span>:     <span class="keyword">switch</span> (localTransactionState) &#123;</div><div class="line"><span class="number">114</span>:         <span class="keyword">case</span> COMMIT_MESSAGE:</div><div class="line"><span class="number">115</span>:             requestHeader.setCommitOrRollback(MessageSysFlag.TRANSACTION_COMMIT_TYPE);</div><div class="line"><span class="number">116</span>:             <span class="keyword">break</span>;</div><div class="line"><span class="number">117</span>:         <span class="keyword">case</span> ROLLBACK_MESSAGE:</div><div class="line"><span class="number">118</span>:             requestHeader.setCommitOrRollback(MessageSysFlag.TRANSACTION_ROLLBACK_TYPE);</div><div class="line"><span class="number">119</span>:             <span class="keyword">break</span>;</div><div class="line"><span class="number">120</span>:         <span class="keyword">case</span> UNKNOW:</div><div class="line"><span class="number">121</span>:             requestHeader.setCommitOrRollback(MessageSysFlag.TRANSACTION_NOT_TYPE);</div><div class="line"><span class="number">122</span>:             <span class="keyword">break</span>;</div><div class="line"><span class="number">123</span>:         <span class="keyword">default</span>:</div><div class="line"><span class="number">124</span>:             <span class="keyword">break</span>;</div><div class="line"><span class="number">125</span>:     &#125;</div><div class="line"><span class="number">126</span>:     requestHeader.setProducerGroup(<span class="keyword">this</span>.defaultMQProducer.getProducerGroup());</div><div class="line"><span class="number">127</span>:     requestHeader.setTranStateTableOffset(sendResult.getQueueOffset());</div><div class="line"><span class="number">128</span>:     requestHeader.setMsgId(sendResult.getMsgId());</div><div class="line"><span class="number">129</span>:     String remark = localException != <span class="keyword">null</span> ? (<span class="string">"executeLocalTransactionBranch exception: "</span> + localException.toString()) : <span class="keyword">null</span>;</div><div class="line"><span class="number">130</span>: </div><div class="line"><span class="number">131</span>:     <span class="comment">// 提交消息 COMMIT / ROLLBACK。！！！通信方式为：Oneway！！！</span></div><div class="line"><span class="number">132</span>:     <span class="keyword">this</span>.mQClientFactory.getMQClientAPIImpl().endTransactionOneway(brokerAddr, requestHeader, remark, <span class="keyword">this</span>.defaultMQProducer.getSendMsgTimeout());</div><div class="line"><span class="number">133</span>: &#125;</div></pre></td></tr></table></figure></p>
<h2>2.2 Broker 处理结束事务请求</h2>
<ul>
<li>🦅 查询请求的消息，进行<strong>提交 / 回滚</strong>。实现代码如下：</li>
</ul>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="comment">// ⬇️⬇️⬇️【EndTransactionProcessor.java】</span></div><div class="line"> <span class="number">2</span>: <span class="function"><span class="keyword">public</span> RemotingCommand <span class="title">processRequest</span><span class="params">(ChannelHandlerContext ctx, RemotingCommand request)</span> <span class="keyword">throws</span> RemotingCommandException </span>&#123;</div><div class="line"> <span class="number">3</span>:     <span class="keyword">final</span> RemotingCommand response = RemotingCommand.createResponseCommand(<span class="keyword">null</span>);</div><div class="line"> <span class="number">4</span>:     <span class="keyword">final</span> EndTransactionRequestHeader requestHeader = (EndTransactionRequestHeader) request.decodeCommandCustomHeader(EndTransactionRequestHeader.class);</div><div class="line"> <span class="number">5</span>: </div><div class="line"> <span class="number">6</span>:     <span class="comment">// 省略代码 =》打印日志（只处理 COMMIT / ROLLBACK）</span></div><div class="line"> <span class="number">7</span>: </div><div class="line"> <span class="number">8</span>:     <span class="comment">// 查询提交的消息</span></div><div class="line"> <span class="number">9</span>:     <span class="keyword">final</span> MessageExt msgExt = <span class="keyword">this</span>.brokerController.getMessageStore().lookMessageByOffset(requestHeader.getCommitLogOffset());</div><div class="line"><span class="number">10</span>:     <span class="keyword">if</span> (msgExt != <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">11</span>:         <span class="comment">// 省略代码 =》校验消息</span></div><div class="line"><span class="number">12</span>: </div><div class="line"><span class="number">13</span>:         <span class="comment">// 生成消息</span></div><div class="line"><span class="number">14</span>:         MessageExtBrokerInner msgInner = <span class="keyword">this</span>.endMessageTransaction(msgExt);</div><div class="line"><span class="number">15</span>:         msgInner.setSysFlag(MessageSysFlag.resetTransactionValue(msgInner.getSysFlag(), requestHeader.getCommitOrRollback()));</div><div class="line"><span class="number">16</span>:         msgInner.setQueueOffset(requestHeader.getTranStateTableOffset());</div><div class="line"><span class="number">17</span>:         msgInner.setPreparedTransactionOffset(requestHeader.getCommitLogOffset());</div><div class="line"><span class="number">18</span>:         msgInner.setStoreTimestamp(msgExt.getStoreTimestamp());</div><div class="line"><span class="number">19</span>:         <span class="keyword">if</span> (MessageSysFlag.TRANSACTION_ROLLBACK_TYPE == requestHeader.getCommitOrRollback()) &#123;</div><div class="line"><span class="number">20</span>:             msgInner.setBody(<span class="keyword">null</span>);</div><div class="line"><span class="number">21</span>:         &#125;</div><div class="line"><span class="number">22</span>: </div><div class="line"><span class="number">23</span>:         <span class="comment">// 存储生成消息</span></div><div class="line"><span class="number">24</span>:         <span class="keyword">final</span> MessageStore messageStore = <span class="keyword">this</span>.brokerController.getMessageStore();</div><div class="line"><span class="number">25</span>:         <span class="keyword">final</span> PutMessageResult putMessageResult = messageStore.putMessage(msgInner);</div><div class="line"><span class="number">26</span>: </div><div class="line"><span class="number">27</span>:         <span class="comment">// 处理存储结果</span></div><div class="line"><span class="number">28</span>:         <span class="keyword">if</span> (putMessageResult != <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">29</span>:             <span class="keyword">switch</span> (putMessageResult.getPutMessageStatus()) &#123;</div><div class="line"><span class="number">30</span>:                 <span class="comment">// Success</span></div><div class="line"><span class="number">31</span>:                 <span class="keyword">case</span> PUT_OK:</div><div class="line"><span class="number">32</span>:                 <span class="keyword">case</span> FLUSH_DISK_TIMEOUT:</div><div class="line"><span class="number">33</span>:                 <span class="keyword">case</span> FLUSH_SLAVE_TIMEOUT:</div><div class="line"><span class="number">34</span>:                 <span class="keyword">case</span> SLAVE_NOT_AVAILABLE:</div><div class="line"><span class="number">35</span>:                     response.setCode(ResponseCode.SUCCESS);</div><div class="line"><span class="number">36</span>:                     response.setRemark(<span class="keyword">null</span>);</div><div class="line"><span class="number">37</span>:                     <span class="keyword">break</span>;</div><div class="line"><span class="number">38</span>:                 <span class="comment">// Failed</span></div><div class="line"><span class="number">39</span>:                 <span class="keyword">case</span> CREATE_MAPEDFILE_FAILED:</div><div class="line"><span class="number">40</span>:                     response.setCode(ResponseCode.SYSTEM_ERROR);</div><div class="line"><span class="number">41</span>:                     response.setRemark(<span class="string">"create maped file failed."</span>);</div><div class="line"><span class="number">42</span>:                     <span class="keyword">break</span>;</div><div class="line"><span class="number">43</span>:                 <span class="keyword">case</span> MESSAGE_ILLEGAL:</div><div class="line"><span class="number">44</span>:                 <span class="keyword">case</span> PROPERTIES_SIZE_EXCEEDED:</div><div class="line"><span class="number">45</span>:                     response.setCode(ResponseCode.MESSAGE_ILLEGAL);</div><div class="line"><span class="number">46</span>:                     response.setRemark(<span class="string">"the message is illegal, maybe msg body or properties length not matched. msg body length limit 128k, msg properties length limit 32k."</span>);</div><div class="line"><span class="number">47</span>:                     <span class="keyword">break</span>;</div><div class="line"><span class="number">48</span>:                 <span class="keyword">case</span> SERVICE_NOT_AVAILABLE:</div><div class="line"><span class="number">49</span>:                     response.setCode(ResponseCode.SERVICE_NOT_AVAILABLE);</div><div class="line"><span class="number">50</span>:                     response.setRemark(<span class="string">"service not available now."</span>);</div><div class="line"><span class="number">51</span>:                     <span class="keyword">break</span>;</div><div class="line"><span class="number">52</span>:                 <span class="keyword">case</span> OS_PAGECACHE_BUSY:</div><div class="line"><span class="number">53</span>:                     response.setCode(ResponseCode.SYSTEM_ERROR);</div><div class="line"><span class="number">54</span>:                     response.setRemark(<span class="string">"OS page cache busy, please try another machine"</span>);</div><div class="line"><span class="number">55</span>:                     <span class="keyword">break</span>;</div><div class="line"><span class="number">56</span>:                 <span class="keyword">case</span> UNKNOWN_ERROR:</div><div class="line"><span class="number">57</span>:                     response.setCode(ResponseCode.SYSTEM_ERROR);</div><div class="line"><span class="number">58</span>:                     response.setRemark(<span class="string">"UNKNOWN_ERROR"</span>);</div><div class="line"><span class="number">59</span>:                     <span class="keyword">break</span>;</div><div class="line"><span class="number">60</span>:                 <span class="keyword">default</span>:</div><div class="line"><span class="number">61</span>:                     response.setCode(ResponseCode.SYSTEM_ERROR);</div><div class="line"><span class="number">62</span>:                     response.setRemark(<span class="string">"UNKNOWN_ERROR DEFAULT"</span>);</div><div class="line"><span class="number">63</span>:                     <span class="keyword">break</span>;</div><div class="line"><span class="number">64</span>:             &#125;</div><div class="line"><span class="number">65</span>: </div><div class="line"><span class="number">66</span>:             <span class="keyword">return</span> response;</div><div class="line"><span class="number">67</span>:         &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">68</span>:             response.setCode(ResponseCode.SYSTEM_ERROR);</div><div class="line"><span class="number">69</span>:             response.setRemark(<span class="string">"store putMessage return null"</span>);</div><div class="line"><span class="number">70</span>:         &#125;</div><div class="line"><span class="number">71</span>:     &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">72</span>:         response.setCode(ResponseCode.SYSTEM_ERROR);</div><div class="line"><span class="number">73</span>:         response.setRemark(<span class="string">"find prepared transaction message failed"</span>);</div><div class="line"><span class="number">74</span>:         <span class="keyword">return</span> response;</div><div class="line"><span class="number">75</span>:     &#125;</div><div class="line"><span class="number">76</span>: </div><div class="line"><span class="number">77</span>:     <span class="keyword">return</span> response;</div><div class="line"><span class="number">78</span>: &#125;</div></pre></td></tr></table></figure></p>
<h2>2.3 Broker 生成 ConsumeQueue</h2>
<ul>
<li>🦅 事务消息，提交（<code>COMMIT</code>）后才生成 <code>ConsumeQueue</code>。</li>
</ul>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="comment">// ⬇️⬇️⬇️【DefaultMessageStore.java】</span></div><div class="line"> <span class="number">2</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doDispatch</span><span class="params">(DispatchRequest req)</span> </span>&#123;</div><div class="line"> <span class="number">3</span>:     <span class="comment">// 非事务消息 或 事务提交消息 建立 消息位置信息 到 ConsumeQueue</span></div><div class="line"> <span class="number">4</span>:     <span class="keyword">final</span> <span class="keyword">int</span> tranType = MessageSysFlag.getTransactionValue(req.getSysFlag());</div><div class="line"> <span class="number">5</span>:     <span class="keyword">switch</span> (tranType) &#123;</div><div class="line"> <span class="number">6</span>:         <span class="keyword">case</span> MessageSysFlag.TRANSACTION_NOT_TYPE: <span class="comment">// 非事务消息</span></div><div class="line"> <span class="number">7</span>:         <span class="keyword">case</span> MessageSysFlag.TRANSACTION_COMMIT_TYPE: <span class="comment">// 事务消息COMMIT</span></div><div class="line"> <span class="number">8</span>:             DefaultMessageStore.<span class="keyword">this</span>.putMessagePositionInfo(req.getTopic(), req.getQueueId(), req.getCommitLogOffset(), req.getMsgSize(),</div><div class="line"> <span class="number">9</span>:                 req.getTagsCode(), req.getStoreTimestamp(), req.getConsumeQueueOffset());</div><div class="line"><span class="number">10</span>:             <span class="keyword">break</span>;</div><div class="line"><span class="number">11</span>:         <span class="keyword">case</span> MessageSysFlag.TRANSACTION_PREPARED_TYPE: <span class="comment">// 事务消息PREPARED</span></div><div class="line"><span class="number">12</span>:         <span class="keyword">case</span> MessageSysFlag.TRANSACTION_ROLLBACK_TYPE: <span class="comment">// 事务消息ROLLBACK</span></div><div class="line"><span class="number">13</span>:             <span class="keyword">break</span>;</div><div class="line"><span class="number">14</span>:     &#125;</div><div class="line"><span class="number">15</span>:     <span class="comment">// 省略代码 =》 建立 索引信息 到 IndexFile</span></div><div class="line"><span class="number">16</span>: &#125;</div></pre></td></tr></table></figure></p>
<h1>3. 事务消息回查</h1>
<ul>
<li>【事务消息回查】功能曾经开源过，目前（V4.0.0）暂未开源。如下是该功能的开源情况：</li>
</ul>
<table>
<thead>
<tr>
<th>版本</th>
<th>【事务消息回查】</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>官方V3.0.4 ~ V3.1.4</td>
<td>基于 文件系统 实现</td>
<td>已开源</td>
</tr>
<tr>
<td>官方V3.1.5 ~ V4.0.0</td>
<td>基于 数据库 实现</td>
<td>未完全开源</td>
</tr>
</tbody>
</table>
<p>我们来看看两种情况下是怎么实现的。</p>
<h2>3.1 Broker 发起【事务消息回查】</h2>
<h3>3.1.1 官方V3.1.4：基于文件系统</h3>
<blockquote>
<p>仓库地址：https://github.com/YunaiV/rocketmq-3.1.9/tree/release_3.1.4</p>
</blockquote>
<p>相较于普通消息，【事务消息】多依赖如下三个组件：</p>
<ul>
<li><strong>TransactionStateService</strong> ：事务状态服务，负责对【事务消息】进行管理，包括存储与更新事务消息状态、回查事务消息状态等等。</li>
<li><strong>TranStateTable</strong> ：【事务消息】状态存储。基于 <code>MappedFileQueue</code> 实现，默认存储路径为 <code>~/store/transaction/statetable</code>，每条【事务消息】状态存储结构如下：</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:left">第几位</th>
<th style="text-align:left">字段</th>
<th style="text-align:left">说明</th>
<th style="text-align:left">数据类型</th>
<th style="text-align:left">字节数</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left">offset</td>
<td style="text-align:left">CommitLog 物理存储位置</td>
<td style="text-align:left">Long</td>
<td style="text-align:left">8</td>
</tr>
<tr>
<td style="text-align:left">2</td>
<td style="text-align:left">size</td>
<td style="text-align:left">消息长度</td>
<td style="text-align:left">Int</td>
<td style="text-align:left">4</td>
</tr>
<tr>
<td style="text-align:left">3</td>
<td style="text-align:left">timestamp</td>
<td style="text-align:left">消息存储时间，单位：秒</td>
<td style="text-align:left">Int</td>
<td style="text-align:left">4</td>
</tr>
<tr>
<td style="text-align:left">4</td>
<td style="text-align:left">producerGroupHash</td>
<td style="text-align:left">producerGroup 求 HashCode</td>
<td style="text-align:left">Int</td>
<td style="text-align:left">4</td>
</tr>
<tr>
<td style="text-align:left">5</td>
<td style="text-align:left">state</td>
<td style="text-align:left">事务状态</td>
<td style="text-align:left">Int</td>
<td style="text-align:left">4</td>
</tr>
</tbody>
</table>
<ul>
<li><strong>TranRedoLog</strong> ：<code>TranStateTable</code> 重放日志，每次<strong>写操作</strong> <code>TranStateTable</code> 记录重放日志。当 <code>Broker</code> 异常关闭时，使用 <code>TranRedoLog</code> 恢复 <code>TranStateTable</code>。基于 <code>ConsumeQueue</code> 实现，<code>Topic</code> 为 <code>TRANSACTION_REDOLOG_TOPIC_XXXX</code>，默认存储路径为 <code>~/store/transaction/redolog</code>。</li>
</ul>
<hr>
<p>简单手绘逻辑图如下😈：</p>
<p><img src="http://www.yunai.me/images/RocketMQ/2017_05_21/01.jpeg" alt="Broker_V3.1.4_基于文件系统"></p>
<h4>3.1.1.1 存储消息到 CommitLog</h4>
<ul>
<li>🦅存储【half消息】到 <code>CommitLog</code> 时，消息队列位置（<code>queueOffset</code>）使用 <code>TranStateTable</code> 最大物理位置（可写入物理位置）。这样，消息可以索引到自己对应的 <code>TranStateTable</code> 的位置和记录。</li>
</ul>
<p>核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="comment">// ⬇️⬇️⬇️【DefaultAppendMessageCallback.java】</span></div><div class="line"> <span class="number">2</span>: <span class="class"><span class="keyword">class</span> <span class="title">DefaultAppendMessageCallback</span> <span class="keyword">implements</span> <span class="title">AppendMessageCallback</span> </span>&#123;</div><div class="line"> <span class="number">3</span>:     <span class="function"><span class="keyword">public</span> AppendMessageResult <span class="title">doAppend</span><span class="params">(<span class="keyword">final</span> <span class="keyword">long</span> fileFromOffset, <span class="keyword">final</span> ByteBuffer byteBuffer,  <span class="keyword">final</span> <span class="keyword">int</span> maxBlank, <span class="keyword">final</span> Object msg)</span> </span>&#123;</div><div class="line"> <span class="number">4</span>:         <span class="comment">// ...省略代码</span></div><div class="line"> <span class="number">5</span>: </div><div class="line"> <span class="number">6</span>:         <span class="comment">// 事务消息需要特殊处理 </span></div><div class="line"> <span class="number">7</span>:         <span class="keyword">final</span> <span class="keyword">int</span> tranType = MessageSysFlag.getTransactionValue(msgInner.getSysFlag());</div><div class="line"> <span class="number">8</span>:         <span class="keyword">switch</span> (tranType) &#123;</div><div class="line"> <span class="number">9</span>:         <span class="keyword">case</span> MessageSysFlag.TransactionPreparedType: <span class="comment">// 消息队列位置（queueOffset）使用 TranStateTable 最大物理位置（可写入物理位置） </span></div><div class="line"><span class="number">10</span>:             queueOffset = CommitLog.<span class="keyword">this</span>.defaultMessageStore.getTransactionStateService().getTranStateTableOffset().get();</div><div class="line"><span class="number">11</span>:             <span class="keyword">break</span>;</div><div class="line"><span class="number">12</span>:         <span class="keyword">case</span> MessageSysFlag.TransactionRollbackType:</div><div class="line"><span class="number">13</span>:             queueOffset = msgInner.getQueueOffset();</div><div class="line"><span class="number">14</span>:             <span class="keyword">break</span>;</div><div class="line"><span class="number">15</span>:         <span class="keyword">case</span> MessageSysFlag.TransactionNotType:</div><div class="line"><span class="number">16</span>:         <span class="keyword">case</span> MessageSysFlag.TransactionCommitType:</div><div class="line"><span class="number">17</span>:         <span class="keyword">default</span>:</div><div class="line"><span class="number">18</span>:             <span class="keyword">break</span>;</div><div class="line"><span class="number">19</span>:         &#125;</div><div class="line"><span class="number">20</span>: </div><div class="line"><span class="number">21</span>:         <span class="comment">// ...省略代码</span></div><div class="line"><span class="number">22</span>: </div><div class="line"><span class="number">23</span>:         <span class="keyword">switch</span> (tranType) &#123;</div><div class="line"><span class="number">24</span>:         <span class="keyword">case</span> MessageSysFlag.TransactionPreparedType:</div><div class="line"><span class="number">25</span>:             <span class="comment">// 更新 TranStateTable 最大物理位置（可写入物理位置） </span></div><div class="line"><span class="number">26</span>:             CommitLog.<span class="keyword">this</span>.defaultMessageStore.getTransactionStateService().getTranStateTableOffset().incrementAndGet();</div><div class="line"><span class="number">27</span>:             <span class="keyword">break</span>;</div><div class="line"><span class="number">28</span>:         <span class="keyword">case</span> MessageSysFlag.TransactionRollbackType:</div><div class="line"><span class="number">29</span>:             <span class="keyword">break</span>;</div><div class="line"><span class="number">30</span>:         <span class="keyword">case</span> MessageSysFlag.TransactionNotType:</div><div class="line"><span class="number">31</span>:         <span class="keyword">case</span> MessageSysFlag.TransactionCommitType:</div><div class="line"><span class="number">32</span>:             <span class="comment">// 更新下一次的ConsumeQueue信息</span></div><div class="line"><span class="number">33</span>:             CommitLog.<span class="keyword">this</span>.topicQueueTable.put(key, ++queueOffset);</div><div class="line"><span class="number">34</span>:             <span class="keyword">break</span>;</div><div class="line"><span class="number">35</span>:         <span class="keyword">default</span>:</div><div class="line"><span class="number">36</span>:             <span class="keyword">break</span>;</div><div class="line"><span class="number">37</span>:         &#125;</div><div class="line"><span class="number">38</span>: </div><div class="line"><span class="number">39</span>:         <span class="comment">// 返回结果</span></div><div class="line"><span class="number">40</span>:         <span class="keyword">return</span> result;</div><div class="line"><span class="number">41</span>:     &#125;</div><div class="line"><span class="number">42</span>: &#125;</div></pre></td></tr></table></figure></p>
<h4>3.1.1.2 写【事务消息】状态存储（TranStateTable）</h4>
<ul>
<li>🦅处理【Half消息】时，新增【事务消息】状态存储（<code>TranStateTable</code>）。</li>
<li>🦅处理【Commit / Rollback消息】时，更新 【事务消息】状态存储（<code>TranStateTable</code>） COMMIT / ROLLBACK。</li>
<li>🦅每次**写操作【**事务消息】状态存储（<code>TranStateTable</code>），记录重放日志（<code>TranRedoLog</code>）。</li>
</ul>
<p>核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">  <span class="number">1</span>: <span class="comment">// ⬇️⬇️⬇️【DispatchMessageService.java】</span></div><div class="line">  <span class="number">2</span>: <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doDispatch</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="number">3</span>:     <span class="keyword">if</span> (!<span class="keyword">this</span>.requestsRead.isEmpty()) &#123;</div><div class="line">  <span class="number">4</span>:         <span class="keyword">for</span> (DispatchRequest req : <span class="keyword">this</span>.requestsRead) &#123;</div><div class="line">  <span class="number">5</span>: </div><div class="line">  <span class="number">6</span>:             <span class="comment">// ...省略代码</span></div><div class="line">  <span class="number">7</span>: </div><div class="line">  <span class="number">8</span>:             <span class="comment">// 2、写【事务消息】状态存储（TranStateTable）</span></div><div class="line">  <span class="number">9</span>:             <span class="keyword">if</span> (req.getProducerGroup() != <span class="keyword">null</span>) &#123;</div><div class="line"> <span class="number">10</span>:                 <span class="keyword">switch</span> (tranType) &#123;</div><div class="line"> <span class="number">11</span>:                 <span class="keyword">case</span> MessageSysFlag.TransactionNotType:</div><div class="line"> <span class="number">12</span>:                     <span class="keyword">break</span>;</div><div class="line"> <span class="number">13</span>:                 <span class="keyword">case</span> MessageSysFlag.TransactionPreparedType:</div><div class="line"> <span class="number">14</span>:                     <span class="comment">// 新增 【事务消息】状态存储（TranStateTable）</span></div><div class="line"> <span class="number">15</span>:                     DefaultMessageStore.<span class="keyword">this</span>.getTransactionStateService().appendPreparedTransaction(</div><div class="line"> <span class="number">16</span>:                         req.getCommitLogOffset(), req.getMsgSize(), (<span class="keyword">int</span>) (req.getStoreTimestamp() / <span class="number">1000</span>), req.getProducerGroup().hashCode());</div><div class="line"> <span class="number">17</span>:                     <span class="keyword">break</span>;</div><div class="line"> <span class="number">18</span>:                 <span class="keyword">case</span> MessageSysFlag.TransactionCommitType:</div><div class="line"> <span class="number">19</span>:                 <span class="keyword">case</span> MessageSysFlag.TransactionRollbackType:</div><div class="line"> <span class="number">20</span>:                     <span class="comment">// 更新 【事务消息】状态存储（TranStateTable） COMMIT / ROLLBACK</span></div><div class="line"> <span class="number">21</span>:                     DefaultMessageStore.<span class="keyword">this</span>.getTransactionStateService().updateTransactionState(</div><div class="line"> <span class="number">22</span>:                         req.getTranStateTableOffset(), req.getPreparedTransactionOffset(), req.getProducerGroup().hashCode(), tranType);</div><div class="line"> <span class="number">23</span>:                     <span class="keyword">break</span>;</div><div class="line"> <span class="number">24</span>:                 &#125;</div><div class="line"> <span class="number">25</span>:             &#125;</div><div class="line"> <span class="number">26</span>:             <span class="comment">// 3、记录 TranRedoLog</span></div><div class="line"> <span class="number">27</span>:             <span class="keyword">switch</span> (tranType) &#123;</div><div class="line"> <span class="number">28</span>:             <span class="keyword">case</span> MessageSysFlag.TransactionNotType:</div><div class="line"> <span class="number">29</span>:                 <span class="keyword">break</span>;</div><div class="line"> <span class="number">30</span>:             <span class="keyword">case</span> MessageSysFlag.TransactionPreparedType:</div><div class="line"> <span class="number">31</span>:                 <span class="comment">// 记录 TranRedoLog</span></div><div class="line"> <span class="number">32</span>:                 DefaultMessageStore.<span class="keyword">this</span>.getTransactionStateService().getTranRedoLog().putMessagePostionInfoWrapper(</div><div class="line"> <span class="number">33</span>:                         req.getCommitLogOffset(), req.getMsgSize(), TransactionStateService.PreparedMessageTagsCode,</div><div class="line"> <span class="number">34</span>:                         req.getStoreTimestamp(), <span class="number">0L</span>);</div><div class="line"> <span class="number">35</span>:                 <span class="keyword">break</span>;</div><div class="line"> <span class="number">36</span>:             <span class="keyword">case</span> MessageSysFlag.TransactionCommitType:</div><div class="line"> <span class="number">37</span>:             <span class="keyword">case</span> MessageSysFlag.TransactionRollbackType:</div><div class="line"> <span class="number">38</span>:                 <span class="comment">// 记录 TranRedoLog</span></div><div class="line"> <span class="number">39</span>:                 DefaultMessageStore.<span class="keyword">this</span>.getTransactionStateService().getTranRedoLog().putMessagePostionInfoWrapper(</div><div class="line"> <span class="number">40</span>:                         req.getCommitLogOffset(), req.getMsgSize(), req.getPreparedTransactionOffset(),</div><div class="line"> <span class="number">41</span>:                         req.getStoreTimestamp(), <span class="number">0L</span>);</div><div class="line"> <span class="number">42</span>:                 <span class="keyword">break</span>;</div><div class="line"> <span class="number">43</span>:             &#125;</div><div class="line"> <span class="number">44</span>:         &#125;</div><div class="line"> <span class="number">45</span>: </div><div class="line"> <span class="number">46</span>:         <span class="comment">// ...省略代码</span></div><div class="line"> <span class="number">47</span>:     &#125;</div><div class="line"> <span class="number">48</span>: &#125;</div><div class="line"> <span class="number">49</span>: <span class="comment">// ⬇️⬇️⬇️【TransactionStateService.java】</span></div><div class="line"> <span class="number">50</span>: <span class="comment">/**</span></div><div class="line"> 51:  * 新增事务状态</div><div class="line"> 52:  *</div><div class="line"> 53:  * <span class="doctag">@param</span> clOffset commitLog 物理位置</div><div class="line"> 54:  * <span class="doctag">@param</span> size 消息长度</div><div class="line"> 55:  * <span class="doctag">@param</span> timestamp 消息存储时间</div><div class="line"> 56:  * <span class="doctag">@param</span> groupHashCode groupHashCode</div><div class="line"> 57:  * <span class="doctag">@return</span> 是否成功</div><div class="line"> 58:  */</div><div class="line"> <span class="number">59</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">appendPreparedTransaction</span><span class="params">(//</span></span></div><div class="line"> <span class="number">60</span>:         <span class="keyword">final</span> <span class="keyword">long</span> clOffset,//</div><div class="line"> <span class="number">61</span>:         <span class="keyword">final</span> <span class="keyword">int</span> size,//</div><div class="line"> <span class="number">62</span>:         <span class="keyword">final</span> <span class="keyword">int</span> timestamp,//</div><div class="line"> <span class="number">63</span>:         <span class="keyword">final</span> <span class="keyword">int</span> groupHashCode//</div><div class="line"> <span class="number">64</span>: ) &#123;</div><div class="line"> <span class="number">65</span>:     MapedFile mapedFile = <span class="keyword">this</span>.tranStateTable.getLastMapedFile();</div><div class="line"> <span class="number">66</span>:     <span class="keyword">if</span> (<span class="keyword">null</span> == mapedFile) &#123;</div><div class="line"> <span class="number">67</span>:         log.error(<span class="string">"appendPreparedTransaction: create mapedfile error."</span>);</div><div class="line"> <span class="number">68</span>:         <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line"> <span class="number">69</span>:     &#125;</div><div class="line"> <span class="number">70</span>: </div><div class="line"> <span class="number">71</span>:     <span class="comment">// 首次创建，加入定时任务中</span></div><div class="line"> <span class="number">72</span>:     <span class="keyword">if</span> (<span class="number">0</span> == mapedFile.getWrotePostion()) &#123;</div><div class="line"> <span class="number">73</span>:         <span class="keyword">this</span>.addTimerTask(mapedFile);</div><div class="line"> <span class="number">74</span>:     &#125;</div><div class="line"> <span class="number">75</span>: </div><div class="line"> <span class="number">76</span>:     <span class="keyword">this</span>.byteBufferAppend.position(<span class="number">0</span>);</div><div class="line"> <span class="number">77</span>:     <span class="keyword">this</span>.byteBufferAppend.limit(TSStoreUnitSize);</div><div class="line"> <span class="number">78</span>: </div><div class="line"> <span class="number">79</span>:     <span class="comment">// Commit Log Offset</span></div><div class="line"> <span class="number">80</span>:     <span class="keyword">this</span>.byteBufferAppend.putLong(clOffset);</div><div class="line"> <span class="number">81</span>:     <span class="comment">// Message Size</span></div><div class="line"> <span class="number">82</span>:     <span class="keyword">this</span>.byteBufferAppend.putInt(size);</div><div class="line"> <span class="number">83</span>:     <span class="comment">// Timestamp</span></div><div class="line"> <span class="number">84</span>:     <span class="keyword">this</span>.byteBufferAppend.putInt(timestamp);</div><div class="line"> <span class="number">85</span>:     <span class="comment">// Producer Group Hashcode</span></div><div class="line"> <span class="number">86</span>:     <span class="keyword">this</span>.byteBufferAppend.putInt(groupHashCode);</div><div class="line"> <span class="number">87</span>:     <span class="comment">// Transaction State</span></div><div class="line"> <span class="number">88</span>:     <span class="keyword">this</span>.byteBufferAppend.putInt(MessageSysFlag.TransactionPreparedType);</div><div class="line"> <span class="number">89</span>: </div><div class="line"> <span class="number">90</span>:     <span class="keyword">return</span> mapedFile.appendMessage(<span class="keyword">this</span>.byteBufferAppend.array());</div><div class="line"> <span class="number">91</span>: &#125;</div><div class="line"> <span class="number">92</span>: </div><div class="line"> <span class="number">93</span>: <span class="comment">/**</span></div><div class="line"> 94:  * 更新事务状态</div><div class="line"> 95:  *</div><div class="line"> 96:  * <span class="doctag">@param</span> tsOffset tranStateTable 物理位置</div><div class="line"> 97:  * <span class="doctag">@param</span> clOffset commitLog 物理位置</div><div class="line"> 98:  * <span class="doctag">@param</span> groupHashCode groupHashCode</div><div class="line"> 99:  * <span class="doctag">@param</span> state 事务状态</div><div class="line">100:  * <span class="doctag">@return</span> 是否成功</div><div class="line">101:  */</div><div class="line"><span class="number">102</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">updateTransactionState</span><span class="params">(</span></span></div><div class="line"><span class="number">103</span>:         <span class="keyword">final</span> <span class="keyword">long</span> tsOffset,</div><div class="line"><span class="number">104</span>:         <span class="keyword">final</span> <span class="keyword">long</span> clOffset,</div><div class="line"><span class="number">105</span>:         <span class="keyword">final</span> <span class="keyword">int</span> groupHashCode,</div><div class="line"><span class="number">106</span>:         <span class="keyword">final</span> <span class="keyword">int</span> state) &#123;</div><div class="line"><span class="number">107</span>:     SelectMapedBufferResult selectMapedBufferResult = <span class="keyword">this</span>.findTransactionBuffer(tsOffset);</div><div class="line"><span class="number">108</span>:     <span class="keyword">if</span> (selectMapedBufferResult != <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">109</span>:         <span class="keyword">try</span> &#123;</div><div class="line"><span class="number">110</span>: </div><div class="line"><span class="number">111</span>:             <span class="comment">// ....省略代码：校验是否能够更新</span></div><div class="line"><span class="number">112</span>: </div><div class="line"><span class="number">113</span>:             <span class="comment">// 更新事务状态</span></div><div class="line"><span class="number">114</span>:             selectMapedBufferResult.getByteBuffer().putInt(TS_STATE_POS, state);</div><div class="line"><span class="number">115</span>:         &#125;</div><div class="line"><span class="number">116</span>:         <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"><span class="number">117</span>:             log.error(<span class="string">"updateTransactionState exception"</span>, e);</div><div class="line"><span class="number">118</span>:         &#125;</div><div class="line"><span class="number">119</span>:         <span class="keyword">finally</span> &#123;</div><div class="line"><span class="number">120</span>:             selectMapedBufferResult.release();</div><div class="line"><span class="number">121</span>:         &#125;</div><div class="line"><span class="number">122</span>:     &#125;</div><div class="line"><span class="number">123</span>: </div><div class="line"><span class="number">124</span>:     <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line"><span class="number">125</span>: &#125;</div></pre></td></tr></table></figure></p>
<h4>3.1.1.3 【事务消息】回查</h4>
<ul>
<li>🦅<code>TranStateTable</code> 每个 <code>MappedFile</code> 都对应一个 <code>Timer</code>。<code>Timer</code> 固定周期（默认：60s）遍历 <code>MappedFile</code>，查找【half消息】，向 <code>Producer</code> 发起【事务消息】回查请求。【事务消息】回查结果的逻辑不在此处进行，在 <a href="#3112-%E5%86%99%E4%BA%8B%E5%8A%A1%E6%B6%88%E6%81%AF%E7%8A%B6%E6%80%81%E5%AD%98%E5%82%A8transtatetable">CommitLog dispatch</a>时执行。</li>
</ul>
<p>实现代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">  <span class="number">1</span>: <span class="comment">// ⬇️⬇️⬇️【TransactionStateService.java】</span></div><div class="line">  <span class="number">2</span>: <span class="comment">/**</span></div><div class="line">  3:  * 初始化定时任务</div><div class="line">  4:  */</div><div class="line">  <span class="number">5</span>: <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initTimerTask</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="number">6</span>:     <span class="comment">//</span></div><div class="line">  <span class="number">7</span>:     <span class="keyword">final</span> List&lt;MapedFile&gt; mapedFiles = <span class="keyword">this</span>.tranStateTable.getMapedFiles();</div><div class="line">  <span class="number">8</span>:     <span class="keyword">for</span> (MapedFile mf : mapedFiles) &#123;</div><div class="line">  <span class="number">9</span>:         <span class="keyword">this</span>.addTimerTask(mf);</div><div class="line"> <span class="number">10</span>:     &#125;</div><div class="line"> <span class="number">11</span>: &#125;</div><div class="line"> <span class="number">12</span>: </div><div class="line"> <span class="number">13</span>: <span class="comment">/**</span></div><div class="line"> 14:  * 每个文件初始化定时任务</div><div class="line"> 15:  * <span class="doctag">@param</span> mf 文件</div><div class="line"> 16:  */</div><div class="line"> <span class="number">17</span>: <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addTimerTask</span><span class="params">(<span class="keyword">final</span> MapedFile mf)</span> </span>&#123;</div><div class="line"> <span class="number">18</span>:     <span class="keyword">this</span>.timer.scheduleAtFixedRate(<span class="keyword">new</span> TimerTask() &#123;</div><div class="line"> <span class="number">19</span>:         <span class="keyword">private</span> <span class="keyword">final</span> MapedFile mapedFile = mf;</div><div class="line"> <span class="number">20</span>:         <span class="keyword">private</span> <span class="keyword">final</span> TransactionCheckExecuter transactionCheckExecuter = TransactionStateService.<span class="keyword">this</span>.defaultMessageStore.getTransactionCheckExecuter();</div><div class="line"> <span class="number">21</span>:         <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> checkTransactionMessageAtleastInterval = TransactionStateService.<span class="keyword">this</span>.defaultMessageStore.getMessageStoreConfig()</div><div class="line"> <span class="number">22</span>:                     .getCheckTransactionMessageAtleastInterval();</div><div class="line"> <span class="number">23</span>:         <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> slave = TransactionStateService.<span class="keyword">this</span>.defaultMessageStore.getMessageStoreConfig().getBrokerRole() == BrokerRole.SLAVE;</div><div class="line"> <span class="number">24</span>: </div><div class="line"> <span class="number">25</span>:         <span class="meta">@Override</span></div><div class="line"> <span class="number">26</span>:         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line"> <span class="number">27</span>:             <span class="comment">// Slave不需要回查事务状态</span></div><div class="line"> <span class="number">28</span>:             <span class="keyword">if</span> (slave) &#123;</div><div class="line"> <span class="number">29</span>:                 <span class="keyword">return</span>;</div><div class="line"> <span class="number">30</span>:             &#125;</div><div class="line"> <span class="number">31</span>:             <span class="comment">// Check功能是否开启</span></div><div class="line"> <span class="number">32</span>:             <span class="keyword">if</span> (!TransactionStateService.<span class="keyword">this</span>.defaultMessageStore.getMessageStoreConfig()</div><div class="line"> <span class="number">33</span>:                 .isCheckTransactionMessageEnable()) &#123;</div><div class="line"> <span class="number">34</span>:                 <span class="keyword">return</span>;</div><div class="line"> <span class="number">35</span>:             &#125;</div><div class="line"> <span class="number">36</span>: </div><div class="line"> <span class="number">37</span>:             <span class="keyword">try</span> &#123;</div><div class="line"> <span class="number">38</span>:                 SelectMapedBufferResult selectMapedBufferResult = mapedFile.selectMapedBuffer(<span class="number">0</span>);</div><div class="line"> <span class="number">39</span>:                 <span class="keyword">if</span> (selectMapedBufferResult != <span class="keyword">null</span>) &#123;</div><div class="line"> <span class="number">40</span>:                     <span class="keyword">long</span> preparedMessageCountInThisMapedFile = <span class="number">0</span>; <span class="comment">// 回查的【half消息】数量</span></div><div class="line"> <span class="number">41</span>:                     <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line"> <span class="number">42</span>:                     <span class="keyword">try</span> &#123;</div><div class="line"> <span class="number">43</span>:                         <span class="comment">// 循环每条【事务消息】状态，对【half消息】进行回查</span></div><div class="line"> <span class="number">44</span>:                         <span class="keyword">for</span> (; i &lt; selectMapedBufferResult.getSize(); i += TSStoreUnitSize) &#123;</div><div class="line"> <span class="number">45</span>:                             selectMapedBufferResult.getByteBuffer().position(i);</div><div class="line"> <span class="number">46</span>: </div><div class="line"> <span class="number">47</span>:                             <span class="comment">// Commit Log Offset</span></div><div class="line"> <span class="number">48</span>:                             <span class="keyword">long</span> clOffset = selectMapedBufferResult.getByteBuffer().getLong();</div><div class="line"> <span class="number">49</span>:                             <span class="comment">// Message Size</span></div><div class="line"> <span class="number">50</span>:                             <span class="keyword">int</span> msgSize = selectMapedBufferResult.getByteBuffer().getInt();</div><div class="line"> <span class="number">51</span>:                             <span class="comment">// Timestamp</span></div><div class="line"> <span class="number">52</span>:                             <span class="keyword">int</span> timestamp = selectMapedBufferResult.getByteBuffer().getInt();</div><div class="line"> <span class="number">53</span>:                             <span class="comment">// Producer Group Hashcode</span></div><div class="line"> <span class="number">54</span>:                             <span class="keyword">int</span> groupHashCode = selectMapedBufferResult.getByteBuffer().getInt();</div><div class="line"> <span class="number">55</span>:                             <span class="comment">// Transaction State</span></div><div class="line"> <span class="number">56</span>:                             <span class="keyword">int</span> tranType = selectMapedBufferResult.getByteBuffer().getInt();</div><div class="line"> <span class="number">57</span>: </div><div class="line"> <span class="number">58</span>:                             <span class="comment">// 已经提交或者回滚的消息跳过</span></div><div class="line"> <span class="number">59</span>:                             <span class="keyword">if</span> (tranType != MessageSysFlag.TransactionPreparedType) &#123;</div><div class="line"> <span class="number">60</span>:                                 <span class="keyword">continue</span>;</div><div class="line"> <span class="number">61</span>:                             &#125;</div><div class="line"> <span class="number">62</span>: </div><div class="line"> <span class="number">63</span>:                             <span class="comment">// 遇到时间不符合最小轮询间隔，终止</span></div><div class="line"> <span class="number">64</span>:                             <span class="keyword">long</span> timestampLong = timestamp * <span class="number">1000</span>;</div><div class="line"> <span class="number">65</span>:                             <span class="keyword">long</span> diff = System.currentTimeMillis() - timestampLong;</div><div class="line"> <span class="number">66</span>:                             <span class="keyword">if</span> (diff &lt; checkTransactionMessageAtleastInterval) &#123;</div><div class="line"> <span class="number">67</span>:                                 <span class="keyword">break</span>;</div><div class="line"> <span class="number">68</span>:                             &#125;</div><div class="line"> <span class="number">69</span>: </div><div class="line"> <span class="number">70</span>:                             preparedMessageCountInThisMapedFile++;</div><div class="line"> <span class="number">71</span>: </div><div class="line"> <span class="number">72</span>:                             <span class="comment">// 回查Producer</span></div><div class="line"> <span class="number">73</span>:                             <span class="keyword">try</span> &#123;</div><div class="line"> <span class="number">74</span>:                                 <span class="keyword">this</span>.transactionCheckExecuter.gotoCheck(groupHashCode, getTranStateOffset(i), clOffset, msgSize);</div><div class="line"> <span class="number">75</span>:                             &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"> <span class="number">76</span>:                                 tranlog.warn(<span class="string">"gotoCheck Exception"</span>, e);</div><div class="line"> <span class="number">77</span>:                             &#125;</div><div class="line"> <span class="number">78</span>:                         &#125;</div><div class="line"> <span class="number">79</span>: </div><div class="line"> <span class="number">80</span>:                         <span class="comment">// 无回查的【half消息】数量，且遍历完，则终止定时任务</span></div><div class="line"> <span class="number">81</span>:                         <span class="keyword">if</span> (<span class="number">0</span> == preparedMessageCountInThisMapedFile <span class="comment">//</span></div><div class="line"> <span class="number">82</span>:                                 &amp;&amp; i == mapedFile.getFileSize()) &#123;</div><div class="line"> <span class="number">83</span>:                             tranlog.info(<span class="string">"remove the transaction timer task, because no prepared message in this mapedfile[&#123;&#125;]"</span>, mapedFile.getFileName());</div><div class="line"> <span class="number">84</span>:                             <span class="keyword">this</span>.cancel();</div><div class="line"> <span class="number">85</span>:                         &#125;</div><div class="line"> <span class="number">86</span>:                     &#125; <span class="keyword">finally</span> &#123;</div><div class="line"> <span class="number">87</span>:                         selectMapedBufferResult.release();</div><div class="line"> <span class="number">88</span>:                     &#125;</div><div class="line"> <span class="number">89</span>: </div><div class="line"> <span class="number">90</span>:                     tranlog.info(<span class="string">"the transaction timer task execute over in this period, &#123;&#125; Prepared Message: &#123;&#125; Check Progress: &#123;&#125;/&#123;&#125;"</span>, mapedFile.getFileName(),<span class="comment">//</span></div><div class="line"> <span class="number">91</span>:                             preparedMessageCountInThisMapedFile, i / TSStoreUnitSize, mapedFile.getFileSize() / TSStoreUnitSize);</div><div class="line"> <span class="number">92</span>:                 &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mapedFile.isFull()) &#123;</div><div class="line"> <span class="number">93</span>:                     tranlog.info(<span class="string">"the mapedfile[&#123;&#125;] maybe deleted, cancel check transaction timer task"</span>, mapedFile.getFileName());</div><div class="line"> <span class="number">94</span>:                     <span class="keyword">this</span>.cancel();</div><div class="line"> <span class="number">95</span>:                     <span class="keyword">return</span>;</div><div class="line"> <span class="number">96</span>:                 &#125;</div><div class="line"> <span class="number">97</span>:             &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"> <span class="number">98</span>:                 log.error(<span class="string">"check transaction timer task Exception"</span>, e);</div><div class="line"> <span class="number">99</span>:             &#125;</div><div class="line"><span class="number">100</span>:         &#125;</div><div class="line"><span class="number">101</span>: </div><div class="line"><span class="number">102</span>: </div><div class="line"><span class="number">103</span>:         <span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">getTranStateOffset</span><span class="params">(<span class="keyword">final</span> <span class="keyword">long</span> currentIndex)</span> </span>&#123;</div><div class="line"><span class="number">104</span>:             <span class="keyword">long</span> offset = (<span class="keyword">this</span>.mapedFile.getFileFromOffset() + currentIndex) / TransactionStateService.TSStoreUnitSize;</div><div class="line"><span class="number">105</span>:             <span class="keyword">return</span> offset;</div><div class="line"><span class="number">106</span>:         &#125;</div><div class="line"><span class="number">107</span>:     &#125;, <span class="number">1000</span> * <span class="number">60</span>, <span class="keyword">this</span>.defaultMessageStore.getMessageStoreConfig().getCheckTransactionMessageTimerInterval());</div><div class="line"><span class="number">108</span>: &#125;</div><div class="line"><span class="number">109</span>: </div><div class="line"><span class="number">110</span>: <span class="comment">// 【DefaultTransactionCheckExecuter.java】</span></div><div class="line"><span class="number">111</span>: <span class="meta">@Override</span></div><div class="line"><span class="number">112</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">gotoCheck</span><span class="params">(<span class="keyword">int</span> producerGroupHashCode, <span class="keyword">long</span> tranStateTableOffset, <span class="keyword">long</span> commitLogOffset,</span></span></div><div class="line"><span class="number">113</span>:         <span class="keyword">int</span> msgSize) &#123;</div><div class="line"><span class="number">114</span>:     <span class="comment">// 第一步、查询Producer</span></div><div class="line"><span class="number">115</span>:     <span class="keyword">final</span> ClientChannelInfo clientChannelInfo = <span class="keyword">this</span>.brokerController.getProducerManager().pickProducerChannelRandomly(producerGroupHashCode);</div><div class="line"><span class="number">116</span>:     <span class="keyword">if</span> (<span class="keyword">null</span> == clientChannelInfo) &#123;</div><div class="line"><span class="number">117</span>:         log.warn(<span class="string">"check a producer transaction state, but not find any channel of this group[&#123;&#125;]"</span>, producerGroupHashCode);</div><div class="line"><span class="number">118</span>:         <span class="keyword">return</span>;</div><div class="line"><span class="number">119</span>:     &#125;</div><div class="line"><span class="number">120</span>: </div><div class="line"><span class="number">121</span>:     <span class="comment">// 第二步、查询消息</span></div><div class="line"><span class="number">122</span>:     SelectMapedBufferResult selectMapedBufferResult = <span class="keyword">this</span>.brokerController.getMessageStore().selectOneMessageByOffset(commitLogOffset, msgSize);</div><div class="line"><span class="number">123</span>:     <span class="keyword">if</span> (<span class="keyword">null</span> == selectMapedBufferResult) &#123;</div><div class="line"><span class="number">124</span>:         log.warn(<span class="string">"check a producer transaction state, but not find message by commitLogOffset: &#123;&#125;, msgSize: "</span>, commitLogOffset, msgSize);</div><div class="line"><span class="number">125</span>:         <span class="keyword">return</span>;</div><div class="line"><span class="number">126</span>:     &#125;</div><div class="line"><span class="number">127</span>: </div><div class="line"><span class="number">128</span>:     <span class="comment">// 第三步、向Producer发起请求</span></div><div class="line"><span class="number">129</span>:     <span class="keyword">final</span> CheckTransactionStateRequestHeader requestHeader = <span class="keyword">new</span> CheckTransactionStateRequestHeader();</div><div class="line"><span class="number">130</span>:     requestHeader.setCommitLogOffset(commitLogOffset);</div><div class="line"><span class="number">131</span>:     requestHeader.setTranStateTableOffset(tranStateTableOffset);</div><div class="line"><span class="number">132</span>:     <span class="keyword">this</span>.brokerController.getBroker2Client().checkProducerTransactionState(clientChannelInfo.getChannel(), requestHeader, selectMapedBufferResult);</div><div class="line"><span class="number">133</span>: &#125;</div></pre></td></tr></table></figure></p>
<h4>3.1.1.4 初始化【事务消息】状态存储（TranStateTable）</h4>
<ul>
<li>🦅根据最后 Broker 关闭是否正常，会有不同的初始化方式。</li>
</ul>
<p>核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">  <span class="number">1</span>: <span class="comment">// ⬇️⬇️⬇️【TransactionStateService.java】</span></div><div class="line">  <span class="number">2</span>: <span class="comment">/**</span></div><div class="line">  3:  * 初始化 TranRedoLog</div><div class="line">  4:  * <span class="doctag">@param</span> lastExitOK 是否正常退出</div><div class="line">  5:  */</div><div class="line">  <span class="number">6</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recoverStateTable</span><span class="params">(<span class="keyword">final</span> <span class="keyword">boolean</span> lastExitOK)</span> </span>&#123;</div><div class="line">  <span class="number">7</span>:     <span class="keyword">if</span> (lastExitOK) &#123;</div><div class="line">  <span class="number">8</span>:         <span class="keyword">this</span>.recoverStateTableNormal();</div><div class="line">  <span class="number">9</span>:     &#125; <span class="keyword">else</span> &#123;</div><div class="line"> <span class="number">10</span>:         <span class="comment">// 第一步，删除State Table</span></div><div class="line"> <span class="number">11</span>:         <span class="keyword">this</span>.tranStateTable.destroy();</div><div class="line"> <span class="number">12</span>:         <span class="comment">// 第二步，通过RedoLog全量恢复StateTable</span></div><div class="line"> <span class="number">13</span>:         <span class="keyword">this</span>.recreateStateTable();</div><div class="line"> <span class="number">14</span>:     &#125;</div><div class="line"> <span class="number">15</span>: &#125;</div><div class="line"> <span class="number">16</span>: </div><div class="line"> <span class="number">17</span>: <span class="comment">/**</span></div><div class="line"> 18:  * 扫描 TranRedoLog 重建 StateTable</div><div class="line"> 19:  */</div><div class="line"> <span class="number">20</span>: <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">recreateStateTable</span><span class="params">()</span> </span>&#123;</div><div class="line"> <span class="number">21</span>:     <span class="keyword">this</span>.tranStateTable = <span class="keyword">new</span> MapedFileQueue(StorePathConfigHelper.getTranStateTableStorePath(defaultMessageStore</div><div class="line"> <span class="number">22</span>:                 .getMessageStoreConfig().getStorePathRootDir()), defaultMessageStore</div><div class="line"> <span class="number">23</span>:                 .getMessageStoreConfig().getTranStateTableMapedFileSize(), <span class="keyword">null</span>);</div><div class="line"> <span class="number">24</span>: </div><div class="line"> <span class="number">25</span>:     <span class="keyword">final</span> TreeSet&lt;Long&gt; preparedItemSet = <span class="keyword">new</span> TreeSet&lt;Long&gt;();</div><div class="line"> <span class="number">26</span>: </div><div class="line"> <span class="number">27</span>:     <span class="comment">// 第一步，从头扫描RedoLog</span></div><div class="line"> <span class="number">28</span>:     <span class="keyword">final</span> <span class="keyword">long</span> minOffset = <span class="keyword">this</span>.tranRedoLog.getMinOffsetInQuque();</div><div class="line"> <span class="number">29</span>:     <span class="keyword">long</span> processOffset = minOffset;</div><div class="line"> <span class="number">30</span>:     <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line"> <span class="number">31</span>:         SelectMapedBufferResult bufferConsumeQueue = <span class="keyword">this</span>.tranRedoLog.getIndexBuffer(processOffset);</div><div class="line"> <span class="number">32</span>:         <span class="keyword">if</span> (bufferConsumeQueue != <span class="keyword">null</span>) &#123;</div><div class="line"> <span class="number">33</span>:             <span class="keyword">try</span> &#123;</div><div class="line"> <span class="number">34</span>:                 <span class="keyword">long</span> i = <span class="number">0</span>;</div><div class="line"> <span class="number">35</span>:                 <span class="keyword">for</span> (; i &lt; bufferConsumeQueue.getSize(); i += ConsumeQueue.CQStoreUnitSize) &#123;</div><div class="line"> <span class="number">36</span>:                     <span class="keyword">long</span> offsetMsg = bufferConsumeQueue.getByteBuffer().getLong();</div><div class="line"> <span class="number">37</span>:                     <span class="keyword">int</span> sizeMsg = bufferConsumeQueue.getByteBuffer().getInt();</div><div class="line"> <span class="number">38</span>:                     <span class="keyword">long</span> tagsCode = bufferConsumeQueue.getByteBuffer().getLong();</div><div class="line"> <span class="number">39</span>: </div><div class="line"> <span class="number">40</span>:                     <span class="keyword">if</span> (TransactionStateService.PreparedMessageTagsCode == tagsCode) &#123; <span class="comment">// Prepared</span></div><div class="line"> <span class="number">41</span>:                         preparedItemSet.add(offsetMsg);</div><div class="line"> <span class="number">42</span>:                     &#125; <span class="keyword">else</span> &#123; <span class="comment">// Commit/Rollback</span></div><div class="line"> <span class="number">43</span>:                         preparedItemSet.remove(tagsCode);</div><div class="line"> <span class="number">44</span>:                     &#125;</div><div class="line"> <span class="number">45</span>:                 &#125;</div><div class="line"> <span class="number">46</span>: </div><div class="line"> <span class="number">47</span>:                 processOffset += i;</div><div class="line"> <span class="number">48</span>:             &#125; <span class="keyword">finally</span> &#123; <span class="comment">// 必须释放资源</span></div><div class="line"> <span class="number">49</span>:                 bufferConsumeQueue.release();</div><div class="line"> <span class="number">50</span>:             &#125;</div><div class="line"> <span class="number">51</span>:         &#125; <span class="keyword">else</span> &#123;</div><div class="line"> <span class="number">52</span>:             <span class="keyword">break</span>;</div><div class="line"> <span class="number">53</span>:         &#125;</div><div class="line"> <span class="number">54</span>:     &#125;</div><div class="line"> <span class="number">55</span>:     log.info(<span class="string">"scan transaction redolog over, End offset: &#123;&#125;,  Prepared Transaction Count: &#123;&#125;"</span>, processOffset, preparedItemSet.size());</div><div class="line"> <span class="number">56</span>: </div><div class="line"> <span class="number">57</span>:     <span class="comment">// 第二步，重建StateTable</span></div><div class="line"> <span class="number">58</span>:     Iterator&lt;Long&gt; it = preparedItemSet.iterator();</div><div class="line"> <span class="number">59</span>:     <span class="keyword">while</span> (it.hasNext()) &#123;</div><div class="line"> <span class="number">60</span>:         Long offset = it.next();</div><div class="line"> <span class="number">61</span>:         MessageExt msgExt = <span class="keyword">this</span>.defaultMessageStore.lookMessageByOffset(offset);</div><div class="line"> <span class="number">62</span>:         <span class="keyword">if</span> (msgExt != <span class="keyword">null</span>) &#123;</div><div class="line"> <span class="number">63</span>:             <span class="keyword">this</span>.appendPreparedTransaction(msgExt.getCommitLogOffset(), msgExt.getStoreSize(),</div><div class="line"> <span class="number">64</span>:                 (<span class="keyword">int</span>) (msgExt.getStoreTimestamp() / <span class="number">1000</span>),</div><div class="line"> <span class="number">65</span>:                 msgExt.getProperty(MessageConst.PROPERTY_PRODUCER_GROUP).hashCode());</div><div class="line"> <span class="number">66</span>:             <span class="keyword">this</span>.tranStateTableOffset.incrementAndGet();</div><div class="line"> <span class="number">67</span>:         &#125;</div><div class="line"> <span class="number">68</span>:     &#125;</div><div class="line"> <span class="number">69</span>: &#125;</div><div class="line"> <span class="number">70</span>: </div><div class="line"> <span class="number">71</span>: <span class="comment">/**</span></div><div class="line"> 72:  * 加载（解析）TranStateTable 的 MappedFile</div><div class="line"> 73:  * 1. 清理多余 MappedFile，设置最后一个 MappedFile的写入位置(position</div><div class="line"> 74:  * 2. 设置 TanStateTable 最大物理位置（可写入位置）</div><div class="line"> 75:  */</div><div class="line"> <span class="number">76</span>: <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">recoverStateTableNormal</span><span class="params">()</span> </span>&#123;</div><div class="line"> <span class="number">77</span>:     <span class="keyword">final</span> List&lt;MapedFile&gt; mapedFiles = <span class="keyword">this</span>.tranStateTable.getMapedFiles();</div><div class="line"> <span class="number">78</span>:     <span class="keyword">if</span> (!mapedFiles.isEmpty()) &#123;</div><div class="line"> <span class="number">79</span>:         <span class="comment">// 从倒数第三个文件开始恢复</span></div><div class="line"> <span class="number">80</span>:         <span class="keyword">int</span> index = mapedFiles.size() - <span class="number">3</span>;</div><div class="line"> <span class="number">81</span>:         <span class="keyword">if</span> (index &lt; <span class="number">0</span>) &#123;</div><div class="line"> <span class="number">82</span>:             index = <span class="number">0</span>;</div><div class="line"> <span class="number">83</span>:         &#125;</div><div class="line"> <span class="number">84</span>: </div><div class="line"> <span class="number">85</span>:         <span class="keyword">int</span> mapedFileSizeLogics = <span class="keyword">this</span>.tranStateTable.getMapedFileSize();</div><div class="line"> <span class="number">86</span>:         MapedFile mapedFile = mapedFiles.get(index);</div><div class="line"> <span class="number">87</span>:         ByteBuffer byteBuffer = mapedFile.sliceByteBuffer();</div><div class="line"> <span class="number">88</span>:         <span class="keyword">long</span> processOffset = mapedFile.getFileFromOffset();</div><div class="line"> <span class="number">89</span>:         <span class="keyword">long</span> mapedFileOffset = <span class="number">0</span>;</div><div class="line"> <span class="number">90</span>:         <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line"> <span class="number">91</span>:             <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mapedFileSizeLogics; i += TSStoreUnitSize) &#123;</div><div class="line"> <span class="number">92</span>: </div><div class="line"> <span class="number">93</span>:                 <span class="keyword">final</span> <span class="keyword">long</span> clOffset_read = byteBuffer.getLong();</div><div class="line"> <span class="number">94</span>:                 <span class="keyword">final</span> <span class="keyword">int</span> size_read = byteBuffer.getInt();</div><div class="line"> <span class="number">95</span>:                 <span class="keyword">final</span> <span class="keyword">int</span> timestamp_read = byteBuffer.getInt();</div><div class="line"> <span class="number">96</span>:                 <span class="keyword">final</span> <span class="keyword">int</span> groupHashCode_read = byteBuffer.getInt();</div><div class="line"> <span class="number">97</span>:                 <span class="keyword">final</span> <span class="keyword">int</span> state_read = byteBuffer.getInt();</div><div class="line"> <span class="number">98</span>: </div><div class="line"> <span class="number">99</span>:                 <span class="keyword">boolean</span> stateOK = <span class="keyword">false</span>;</div><div class="line"><span class="number">100</span>:                 <span class="keyword">switch</span> (state_read) &#123;</div><div class="line"><span class="number">101</span>:                 <span class="keyword">case</span> MessageSysFlag.TransactionPreparedType:</div><div class="line"><span class="number">102</span>:                 <span class="keyword">case</span> MessageSysFlag.TransactionCommitType:</div><div class="line"><span class="number">103</span>:                 <span class="keyword">case</span> MessageSysFlag.TransactionRollbackType:</div><div class="line"><span class="number">104</span>:                     stateOK = <span class="keyword">true</span>;</div><div class="line"><span class="number">105</span>:                     <span class="keyword">break</span>;</div><div class="line"><span class="number">106</span>:                 <span class="keyword">default</span>:</div><div class="line"><span class="number">107</span>:                     <span class="keyword">break</span>;</div><div class="line"><span class="number">108</span>:                 &#125;</div><div class="line"><span class="number">109</span>: </div><div class="line"><span class="number">110</span>:                 <span class="comment">// 说明当前存储单元有效</span></div><div class="line"><span class="number">111</span>:                 <span class="keyword">if</span> (clOffset_read &gt;= <span class="number">0</span> &amp;&amp; size_read &gt; <span class="number">0</span> &amp;&amp; stateOK) &#123;</div><div class="line"><span class="number">112</span>:                     mapedFileOffset = i + TSStoreUnitSize;</div><div class="line"><span class="number">113</span>:                 &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">114</span>:                     log.info(<span class="string">"recover current transaction state table file over,  "</span> + mapedFile.getFileName() + <span class="string">" "</span></div><div class="line"><span class="number">115</span>:                             + clOffset_read + <span class="string">" "</span> + size_read + <span class="string">" "</span> + timestamp_read);</div><div class="line"><span class="number">116</span>:                     <span class="keyword">break</span>;</div><div class="line"><span class="number">117</span>:                 &#125;</div><div class="line"><span class="number">118</span>:             &#125;</div><div class="line"><span class="number">119</span>: </div><div class="line"><span class="number">120</span>:             <span class="comment">// 走到文件末尾，切换至下一个文件</span></div><div class="line"><span class="number">121</span>:             <span class="keyword">if</span> (mapedFileOffset == mapedFileSizeLogics) &#123;</div><div class="line"><span class="number">122</span>:                 index++;</div><div class="line"><span class="number">123</span>:                 <span class="keyword">if</span> (index &gt;= mapedFiles.size()) &#123; <span class="comment">// 循环while结束</span></div><div class="line"><span class="number">124</span>:                     log.info(<span class="string">"recover last transaction state table file over, last maped file "</span> + mapedFile.getFileName());</div><div class="line"><span class="number">125</span>:                     <span class="keyword">break</span>;</div><div class="line"><span class="number">126</span>:                 &#125; <span class="keyword">else</span> &#123; <span class="comment">// 切换下一个文件</span></div><div class="line"><span class="number">127</span>:                     mapedFile = mapedFiles.get(index);</div><div class="line"><span class="number">128</span>:                     byteBuffer = mapedFile.sliceByteBuffer();</div><div class="line"><span class="number">129</span>:                     processOffset = mapedFile.getFileFromOffset();</div><div class="line"><span class="number">130</span>:                     mapedFileOffset = <span class="number">0</span>;</div><div class="line"><span class="number">131</span>:                     log.info(<span class="string">"recover next transaction state table file, "</span> + mapedFile.getFileName());</div><div class="line"><span class="number">132</span>:                 &#125;</div><div class="line"><span class="number">133</span>:             &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">134</span>:                 log.info(<span class="string">"recover current transaction state table queue over "</span> + mapedFile.getFileName() + <span class="string">" "</span> + (processOffset + mapedFileOffset));</div><div class="line"><span class="number">135</span>:                 <span class="keyword">break</span>;</div><div class="line"><span class="number">136</span>:             &#125;</div><div class="line"><span class="number">137</span>:         &#125;</div><div class="line"><span class="number">138</span>: </div><div class="line"><span class="number">139</span>:         <span class="comment">// 清理多余 MappedFile，设置最后一个 MappedFile的写入位置(position</span></div><div class="line"><span class="number">140</span>:         processOffset += mapedFileOffset;</div><div class="line"><span class="number">141</span>:         <span class="keyword">this</span>.tranStateTable.truncateDirtyFiles(processOffset);</div><div class="line"><span class="number">142</span>: </div><div class="line"><span class="number">143</span>:         <span class="comment">// 设置 TanStateTable 最大物理位置（可写入位置）</span></div><div class="line"><span class="number">144</span>:         <span class="keyword">this</span>.tranStateTableOffset.set(<span class="keyword">this</span>.tranStateTable.getMaxOffset() / TSStoreUnitSize);</div><div class="line"><span class="number">145</span>:         log.info(<span class="string">"recover normal over, transaction state table max offset: &#123;&#125;"</span>, <span class="keyword">this</span>.tranStateTableOffset.get());</div><div class="line"><span class="number">146</span>:     &#125;</div><div class="line"><span class="number">147</span>: &#125;</div></pre></td></tr></table></figure></p>
<h4>3.1.1.5 补充</h4>
<ul>
<li>为什么 V3.1.5 开始，使用 数据库 实现【事务状态】的存储？如下是来自官方文档的说明，可能是一部分原因：</li>
</ul>
<blockquote>
<p>RocketMQ 这种实现事务方式，没有通过 KV 存储做，而是通过 Offset 方式，存在一个显著缺陷，即通过 Offset 更改数据，会令系统的脏页过多，需要特别关注。</p>
</blockquote>
<h3>3.1.2 官方V4.0.0：基于数据库</h3>
<blockquote>
<p>仓库地址：https://github.com/apache/incubator-rocketmq</p>
</blockquote>
<p>官方V4.0.0 暂时未<strong>完全</strong>开源【事务消息回查】功能，<strong>So 我们需要进行一些猜想，可能不一定正确😈</strong>。</p>
<p>😆我们来对比【官方V3.1.4：基于文件】的实现。</p>
<ul>
<li>TransactionRecord ：记录每条【事务消息】。类似 <code>TranStateTable</code>。</li>
</ul>
<table>
<thead>
<tr>
<th>TranStateTable</th>
<th>TransactionRecord</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>offset</td>
<td>offset</td>
<td></td>
</tr>
<tr>
<td>producerGroupHash</td>
<td>producerGroup</td>
<td></td>
</tr>
<tr>
<td>size</td>
<td>无</td>
<td>非必须字段：【事务消息】回查时，使用 offset 读取 CommitLog 获得。</td>
</tr>
<tr>
<td>timestamp</td>
<td>无</td>
<td>非必须字段：【事务消息】回查时，使用 offset 读取 CommitLog 获得。</td>
</tr>
<tr>
<td>state</td>
<td>无</td>
<td>非必须字段： 事务开始，增加记录；事务结束，删除记录。</td>
</tr>
</tbody>
</table>
<p>另外，数据库本身保证了数据存储的可靠性，无需 <code>TranRedoLog</code>。</p>
<hr>
<p>简单手绘逻辑图如下😈：</p>
<p><img src="http://www.yunai.me/images/RocketMQ/2017_05_21/02.jpeg" alt="Broker_V4.0.0_基于数据库"></p>
<h2>3.2 Producer 接收【事务消息回查】</h2>
<ul>
<li>顺序图如下：</li>
</ul>
<p><img src="http://www.yunai.me/images/RocketMQ/2017_05_21/04.png" alt="Producer接收【事务消息回查】"></p>
<ul>
<li>核心代码如下：</li>
</ul>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">  <span class="number">1</span>: <span class="comment">// ⬇️⬇️⬇️【DefaultMQProducerImpl.java】</span></div><div class="line">  <span class="number">2</span>: <span class="comment">/**</span></div><div class="line">  3:  * 检查【事务状态】状态</div><div class="line">  4:  *</div><div class="line">  5:  * <span class="doctag">@param</span> addr broker地址</div><div class="line">  6:  * <span class="doctag">@param</span> msg 消息</div><div class="line">  7:  * <span class="doctag">@param</span> header 请求</div><div class="line">  8:  */</div><div class="line">  <span class="number">9</span>: <span class="meta">@Override</span></div><div class="line"> <span class="number">10</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkTransactionState</span><span class="params">(<span class="keyword">final</span> String addr, <span class="keyword">final</span> MessageExt msg, <span class="keyword">final</span> CheckTransactionStateRequestHeader header)</span> </span>&#123;</div><div class="line"> <span class="number">11</span>:     Runnable request = <span class="keyword">new</span> Runnable() &#123;</div><div class="line"> <span class="number">12</span>:         <span class="keyword">private</span> <span class="keyword">final</span> String brokerAddr = addr;</div><div class="line"> <span class="number">13</span>:         <span class="keyword">private</span> <span class="keyword">final</span> MessageExt message = msg;</div><div class="line"> <span class="number">14</span>:         <span class="keyword">private</span> <span class="keyword">final</span> CheckTransactionStateRequestHeader checkRequestHeader = header;</div><div class="line"> <span class="number">15</span>:         <span class="keyword">private</span> <span class="keyword">final</span> String group = DefaultMQProducerImpl.<span class="keyword">this</span>.defaultMQProducer.getProducerGroup();</div><div class="line"> <span class="number">16</span>: </div><div class="line"> <span class="number">17</span>:         <span class="meta">@Override</span></div><div class="line"> <span class="number">18</span>:         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line"> <span class="number">19</span>:             TransactionCheckListener transactionCheckListener = DefaultMQProducerImpl.<span class="keyword">this</span>.checkListener();</div><div class="line"> <span class="number">20</span>:             <span class="keyword">if</span> (transactionCheckListener != <span class="keyword">null</span>) &#123;</div><div class="line"> <span class="number">21</span>:                 <span class="comment">// 获取事务执行状态</span></div><div class="line"> <span class="number">22</span>:                 LocalTransactionState localTransactionState = LocalTransactionState.UNKNOW;</div><div class="line"> <span class="number">23</span>:                 Throwable exception = <span class="keyword">null</span>;</div><div class="line"> <span class="number">24</span>:                 <span class="keyword">try</span> &#123;</div><div class="line"> <span class="number">25</span>:                     localTransactionState = transactionCheckListener.checkLocalTransactionState(message);</div><div class="line"> <span class="number">26</span>:                 &#125; <span class="keyword">catch</span> (Throwable e) &#123;</div><div class="line"> <span class="number">27</span>:                     log.error(<span class="string">"Broker call checkTransactionState, but checkLocalTransactionState exception"</span>, e);</div><div class="line"> <span class="number">28</span>:                     exception = e;</div><div class="line"> <span class="number">29</span>:                 &#125;</div><div class="line"> <span class="number">30</span>: </div><div class="line"> <span class="number">31</span>:                 <span class="comment">// 处理事务结果，提交消息 COMMIT / ROLLBACK</span></div><div class="line"> <span class="number">32</span>:                 <span class="keyword">this</span>.processTransactionState(<span class="comment">//</span></div><div class="line"> <span class="number">33</span>:                     localTransactionState, <span class="comment">//</span></div><div class="line"> <span class="number">34</span>:                     group, <span class="comment">//</span></div><div class="line"> <span class="number">35</span>:                     exception);</div><div class="line"> <span class="number">36</span>:             &#125; <span class="keyword">else</span> &#123;</div><div class="line"> <span class="number">37</span>:                 log.warn(<span class="string">"checkTransactionState, pick transactionCheckListener by group[&#123;&#125;] failed"</span>, group);</div><div class="line"> <span class="number">38</span>:             &#125;</div><div class="line"> <span class="number">39</span>:         &#125;</div><div class="line"> <span class="number">40</span>: </div><div class="line"> <span class="number">41</span>:         <span class="comment">/**</span></div><div class="line"> 42:          * 处理事务结果，提交消息 COMMIT / ROLLBACK</div><div class="line"> 43:          *</div><div class="line"> 44:          * <span class="doctag">@param</span> localTransactionState 【本地事务】状态</div><div class="line"> 45:          * <span class="doctag">@param</span> producerGroup producerGroup</div><div class="line"> 46:          * <span class="doctag">@param</span> exception 检查【本地事务】状态发生的异常</div><div class="line"> 47:          */</div><div class="line"> <span class="number">48</span>:         <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processTransactionState</span><span class="params">(//</span></span></div><div class="line"> <span class="number">49</span>:             <span class="keyword">final</span> LocalTransactionState localTransactionState, //</div><div class="line"> <span class="number">50</span>:             <span class="keyword">final</span> String producerGroup, //</div><div class="line"> <span class="number">51</span>:             <span class="keyword">final</span> Throwable exception) &#123;</div><div class="line"> <span class="number">52</span>:             <span class="keyword">final</span> EndTransactionRequestHeader thisHeader = <span class="keyword">new</span> EndTransactionRequestHeader();</div><div class="line"> <span class="number">53</span>:             thisHeader.setCommitLogOffset(checkRequestHeader.getCommitLogOffset());</div><div class="line"> <span class="number">54</span>:             thisHeader.setProducerGroup(producerGroup);</div><div class="line"> <span class="number">55</span>:             thisHeader.setTranStateTableOffset(checkRequestHeader.getTranStateTableOffset());</div><div class="line"> <span class="number">56</span>:             thisHeader.setFromTransactionCheck(<span class="keyword">true</span>);</div><div class="line"> <span class="number">57</span>: </div><div class="line"> <span class="number">58</span>:             <span class="comment">// 设置消息编号</span></div><div class="line"> <span class="number">59</span>:             String uniqueKey = message.getProperties().get(MessageConst.PROPERTY_UNIQ_CLIENT_MESSAGE_ID_KEYIDX);</div><div class="line"> <span class="number">60</span>:             <span class="keyword">if</span> (uniqueKey == <span class="keyword">null</span>) &#123;</div><div class="line"> <span class="number">61</span>:                 uniqueKey = message.getMsgId();</div><div class="line"> <span class="number">62</span>:             &#125;</div><div class="line"> <span class="number">63</span>:             thisHeader.setMsgId(uniqueKey);</div><div class="line"> <span class="number">64</span>: </div><div class="line"> <span class="number">65</span>:             thisHeader.setTransactionId(checkRequestHeader.getTransactionId());</div><div class="line"> <span class="number">66</span>:             <span class="keyword">switch</span> (localTransactionState) &#123;</div><div class="line"> <span class="number">67</span>:                 <span class="keyword">case</span> COMMIT_MESSAGE:</div><div class="line"> <span class="number">68</span>:                     thisHeader.setCommitOrRollback(MessageSysFlag.TRANSACTION_COMMIT_TYPE);</div><div class="line"> <span class="number">69</span>:                     <span class="keyword">break</span>;</div><div class="line"> <span class="number">70</span>:                 <span class="keyword">case</span> ROLLBACK_MESSAGE:</div><div class="line"> <span class="number">71</span>:                     thisHeader.setCommitOrRollback(MessageSysFlag.TRANSACTION_ROLLBACK_TYPE);</div><div class="line"> <span class="number">72</span>:                     log.warn(<span class="string">"when broker check, client rollback this transaction, &#123;&#125;"</span>, thisHeader);</div><div class="line"> <span class="number">73</span>:                     <span class="keyword">break</span>;</div><div class="line"> <span class="number">74</span>:                 <span class="keyword">case</span> UNKNOW:</div><div class="line"> <span class="number">75</span>:                     thisHeader.setCommitOrRollback(MessageSysFlag.TRANSACTION_NOT_TYPE);</div><div class="line"> <span class="number">76</span>:                     log.warn(<span class="string">"when broker check, client does not know this transaction state, &#123;&#125;"</span>, thisHeader);</div><div class="line"> <span class="number">77</span>:                     <span class="keyword">break</span>;</div><div class="line"> <span class="number">78</span>:                 <span class="keyword">default</span>:</div><div class="line"> <span class="number">79</span>:                     <span class="keyword">break</span>;</div><div class="line"> <span class="number">80</span>:             &#125;</div><div class="line"> <span class="number">81</span>: </div><div class="line"> <span class="number">82</span>:             String remark = <span class="keyword">null</span>;</div><div class="line"> <span class="number">83</span>:             <span class="keyword">if</span> (exception != <span class="keyword">null</span>) &#123;</div><div class="line"> <span class="number">84</span>:                 remark = <span class="string">"checkLocalTransactionState Exception: "</span> + RemotingHelper.exceptionSimpleDesc(exception);</div><div class="line"> <span class="number">85</span>:             &#125;</div><div class="line"> <span class="number">86</span>: </div><div class="line"> <span class="number">87</span>:             <span class="keyword">try</span> &#123;</div><div class="line"> <span class="number">88</span>:                 <span class="comment">// 提交消息 COMMIT / ROLLBACK</span></div><div class="line"> <span class="number">89</span>:                 DefaultMQProducerImpl.<span class="keyword">this</span>.mQClientFactory.getMQClientAPIImpl().endTransactionOneway(brokerAddr, thisHeader, remark,</div><div class="line"> <span class="number">90</span>:                     <span class="number">3000</span>);</div><div class="line"> <span class="number">91</span>:             &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"> <span class="number">92</span>:                 log.error(<span class="string">"endTransactionOneway exception"</span>, e);</div><div class="line"> <span class="number">93</span>:             &#125;</div><div class="line"> <span class="number">94</span>:         &#125;</div><div class="line"> <span class="number">95</span>:     &#125;;</div><div class="line"> <span class="number">96</span>: </div><div class="line"> <span class="number">97</span>:     <span class="comment">// 提交执行</span></div><div class="line"> <span class="number">98</span>:     <span class="keyword">this</span>.checkExecutor.submit(request);</div><div class="line"> <span class="number">99</span>: &#125;</div><div class="line"><span class="number">100</span>: </div><div class="line"><span class="number">101</span>: <span class="comment">// ⬇️⬇️⬇️【DefaultMQProducerImpl.java】</span></div><div class="line"><span class="number">102</span>: <span class="comment">/**</span></div><div class="line">103:  * 【事务消息回查】检查监听器</div><div class="line">104:  */</div><div class="line"><span class="number">105</span>: <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TransactionCheckListener</span> </span>&#123;</div><div class="line"><span class="number">106</span>: </div><div class="line"><span class="number">107</span>:     <span class="comment">/**</span></div><div class="line">108:      * 获取（检查）【本地事务】状态</div><div class="line">109:      *</div><div class="line">110:      * <span class="doctag">@param</span> msg 消息</div><div class="line">111:      * <span class="doctag">@return</span> 事务状态</div><div class="line">112:      */</div><div class="line"><span class="number">113</span>:     <span class="function">LocalTransactionState <span class="title">checkLocalTransactionState</span><span class="params">(<span class="keyword">final</span> MessageExt msg)</span></span>;</div><div class="line"><span class="number">114</span>: </div><div class="line"><span class="number">115</span>: &#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://www.yunai.me/images/common/wechat_mp_2017_07_31.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;🙂🙂🙂关注**微信公众号：【芋艿的后端小屋】**有福利：&lt;/p&gt;
&lt;ol
    
    </summary>
    
      <category term="RocketMQ" scheme="http://www.yunai.me/categories/RocketMQ/"/>
    
    
  </entry>
  
  <entry>
    <title>RocketMQ 源码分析 —— Filtersrv</title>
    <link href="http://www.yunai.me/RocketMQ/filtersrv/"/>
    <id>http://www.yunai.me/RocketMQ/filtersrv/</id>
    <published>2017-05-16T16:00:00.000Z</published>
    <updated>2017-07-31T12:30:52.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://www.yunai.me/images/common/wechat_mp_2017_07_31.jpg" alt=""></p>
<blockquote>
<p>🙂🙂🙂关注**微信公众号：【芋艿的后端小屋】**有福利：</p>
<ol>
<li>RocketMQ / MyCAT / Sharding-JDBC <strong>所有</strong>源码分析文章列表</li>
<li>RocketMQ / MyCAT / Sharding-JDBC <strong>中文注释源码 GitHub 地址</strong></li>
<li>您对于源码的疑问每条留言<strong>都</strong>将得到<strong>认真</strong>回复。<strong>甚至不知道如何读源码也可以请教噢</strong>。</li>
<li><strong>新的</strong>源码解析文章<strong>实时</strong>收到通知。<strong>每周更新一篇左右</strong>。</li>
<li><strong>认真的</strong>源码交流微信群。</li>
</ol>
</blockquote>
<hr>
<ul>
<li><a href="#">1. 概述</a></li>
<li><a href="#">2. Filtersrv 注册到 Broker</a></li>
<li><a href="#">3. 过滤类</a>
<ul>
<li><a href="#">3.1 Consumer 订阅时设置 过滤类代码</a></li>
<li><a href="#">3.2 Consumer 上传 过滤类代码</a></li>
<li><a href="#">3.3 Filter 编译 过滤类代码</a></li>
</ul>
</li>
<li><a href="#">4. 过滤消息</a>
<ul>
<li><a href="#">4.1 Consumer 从 Filtersrv 拉取消息</a></li>
<li><a href="#">4.2 Filtersrv 从 Broker 拉取消息</a></li>
</ul>
</li>
<li><a href="#">5. Filtersrv 高可用</a></li>
</ul>
<h1>1. 概述</h1>
<p><code>Filtersrv</code> ，负责<strong>自定义规则</strong>过滤 <code>Consumer</code> 从 <code>Broker</code> 拉取的消息。</p>
<p><img src="http://www.yunai.me/images/RocketMQ/2017_05_17/Filtersrv.png" alt="Filtersrv.png"></p>
<p>为什么 <code>Broker</code> 不提供过滤消息的功能呢？我们来看看官方的说法：</p>
<blockquote>
<ul>
<li>Broker 端消息过滤<br>
在 Broker 中，按照 Consumer 的要求做过滤，优点是减少了对于 Consumer 无用消息的网络传输。 缺点是增加了 Broker 的负担，实现相对复杂。<br>
(1). 淘宝 Notify 支持多种过滤方式，包含直接按照消息类型过滤，灵活的语法表达式过滤，几乎可以满足最苛刻的过滤需求。<br>
(2). 淘宝 RocketMQ 支持按照简单的 Message Tag 过滤，也支持按照 Message Header、body 进行过滤。<br>
(3). CORBA Notification 规范中也支持灵活的语法表达式过滤。</li>
<li>Consumer 端消息过滤<br>
这种过滤方式可由应用完全自定义实现，但是缺点是很多无用的消息要传输到 Consumer 端。</li>
</ul>
</blockquote>
<p><strong>就是在这种考虑下，<code>Filtersrv</code> 出现了。减少了 <code>Broker</code> 的负担，又减少了 <code>Consumer</code> 接收无用的消息。当然缺点也是有的，多了一层 <code>Filtersrv</code> 网络开销。</strong></p>
<h1>2. Filtersrv 注册到 Broker</h1>
<ul>
<li>🦅 一个 <code>Filtersrv</code> <strong>只</strong>对应一个 <code>Broker</code>。</li>
<li>🦅 一个 <code>Broker</code> 可以对应<strong>多个</strong> <code>Filtersrv</code>。<strong><code>Filtersrv</code> 的高可用通过启动多个 <code>Filtersrv</code> 实现</strong>。</li>
<li>🦅 <code>Filtersrv</code> 注册失败时，主动<strong>退出关闭</strong>。</li>
</ul>
<p>核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="comment">// ⬇️⬇️⬇️【FiltersrvController.java】</span></div><div class="line"> <span class="number">2</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">initialize</span><span class="params">()</span> </span>&#123;</div><div class="line"> <span class="number">3</span>:     <span class="comment">// ....(省略代码)</span></div><div class="line"> <span class="number">4</span>: </div><div class="line"> <span class="number">5</span>:     <span class="comment">// 固定间隔注册到Broker</span></div><div class="line"> <span class="number">6</span>:     <span class="keyword">this</span>.scheduledExecutorService.scheduleAtFixedRate(<span class="keyword">new</span> Runnable() &#123;</div><div class="line"> <span class="number">7</span>: </div><div class="line"> <span class="number">8</span>:         <span class="meta">@Override</span></div><div class="line"> <span class="number">9</span>:         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="number">10</span>:             FiltersrvController.<span class="keyword">this</span>.registerFilterServerToBroker();</div><div class="line"><span class="number">11</span>:         &#125;</div><div class="line"><span class="number">12</span>:     &#125;, <span class="number">15</span>, <span class="number">10</span>, TimeUnit.SECONDS); <span class="comment">// TODO edit by 芋艿：initialDelay时间太短，可能导致初始化失败。从3=》15</span></div><div class="line"><span class="number">13</span>: </div><div class="line"><span class="number">14</span>:     <span class="comment">// ....(省略代码)</span></div><div class="line"><span class="number">15</span>: &#125;</div><div class="line"><span class="number">16</span>: </div><div class="line"><span class="number">17</span>: <span class="comment">/**</span></div><div class="line">18:  * 注册Filtersrv 到 Broker</div><div class="line">19:  * ！！！如果注册失败，关闭Filtersrv</div><div class="line">20:  */</div><div class="line"><span class="number">21</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerFilterServerToBroker</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="number">22</span>:     <span class="keyword">try</span> &#123;</div><div class="line"><span class="number">23</span>:         RegisterFilterServerResponseHeader responseHeader =</div><div class="line"><span class="number">24</span>:             <span class="keyword">this</span>.filterServerOuterAPI.registerFilterServerToBroker(</div><div class="line"><span class="number">25</span>:                 <span class="keyword">this</span>.filtersrvConfig.getConnectWhichBroker(), <span class="keyword">this</span>.localAddr());</div><div class="line"><span class="number">26</span>:         <span class="keyword">this</span>.defaultMQPullConsumer.getDefaultMQPullConsumerImpl().getPullAPIWrapper()</div><div class="line"><span class="number">27</span>:             .setDefaultBrokerId(responseHeader.getBrokerId());</div><div class="line"><span class="number">28</span>: </div><div class="line"><span class="number">29</span>:         <span class="keyword">if</span> (<span class="keyword">null</span> == <span class="keyword">this</span>.brokerName) &#123;</div><div class="line"><span class="number">30</span>:             <span class="keyword">this</span>.brokerName = responseHeader.getBrokerName();</div><div class="line"><span class="number">31</span>:         &#125;</div><div class="line"><span class="number">32</span>: </div><div class="line"><span class="number">33</span>:         log.info(<span class="string">"register filter server&lt;&#123;&#125;&gt; to broker&lt;&#123;&#125;&gt; OK, Return: &#123;&#125; &#123;&#125;"</span>,</div><div class="line"><span class="number">34</span>:             <span class="keyword">this</span>.localAddr(),</div><div class="line"><span class="number">35</span>:             <span class="keyword">this</span>.filtersrvConfig.getConnectWhichBroker(),</div><div class="line"><span class="number">36</span>:             responseHeader.getBrokerName(),</div><div class="line"><span class="number">37</span>:             responseHeader.getBrokerId());</div><div class="line"><span class="number">38</span>:     &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"><span class="number">39</span>:         log.warn(<span class="string">"register filter server Exception"</span>, e);</div><div class="line"><span class="number">40</span>: </div><div class="line"><span class="number">41</span>:         log.warn(<span class="string">"access broker failed, kill oneself"</span>);</div><div class="line"><span class="number">42</span>:         System.exit(-<span class="number">1</span>); <span class="comment">// 异常退出</span></div><div class="line"><span class="number">43</span>:     &#125;</div><div class="line"><span class="number">44</span>: &#125;</div></pre></td></tr></table></figure></p>
<h1>3. 过滤类</h1>
<p><img src="http://www.yunai.me/images/RocketMQ/2017_05_17/03.png" alt="Filtersrv过滤类"></p>
<h2>3.1 Consumer 订阅时设置 过滤类代码</h2>
<ul>
<li>🦅 <code>Consumer</code> 针对每个 <code>Topic</code> 可以订阅不同的 <code>过滤类代码</code>。</li>
</ul>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="number">1</span>: <span class="comment">// ⬇️⬇️⬇️【DefaultMQPushConsumer.java】</span></div><div class="line"><span class="number">2</span>: <span class="meta">@Override</span></div><div class="line"><span class="number">3</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(String topic, String fullClassName, String filterClassSource)</span> <span class="keyword">throws</span> MQClientException </span>&#123;</div><div class="line"><span class="number">4</span>:     <span class="keyword">this</span>.defaultMQPushConsumerImpl.subscribe(topic, fullClassName, filterClassSource);</div><div class="line"><span class="number">5</span>: &#125;</div></pre></td></tr></table></figure></p>
<h2>3.2 Consumer 上传 过滤类代码</h2>
<ul>
<li>🦅 <code>Consumer</code> 心跳注册到 <code>Broker</code> 的同时，上传 <code>过滤类代码</code> 到 <code>Broker</code> 对应的<strong>所有</strong> <code>Filtersrv</code>。</li>
</ul>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="comment">// ⬇️⬇️⬇️【MQClientInstance.java】</span></div><div class="line"> <span class="number">2</span>: <span class="comment">/**</span></div><div class="line"> 3:  * 发送心跳到Broker，上传过滤类源码到Filtersrv</div><div class="line"> 4:  */</div><div class="line"> <span class="number">5</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendHeartbeatToAllBrokerWithLock</span><span class="params">()</span> </span>&#123;</div><div class="line"> <span class="number">6</span>:     <span class="keyword">if</span> (<span class="keyword">this</span>.lockHeartbeat.tryLock()) &#123;</div><div class="line"> <span class="number">7</span>:         <span class="keyword">try</span> &#123;</div><div class="line"> <span class="number">8</span>:             <span class="keyword">this</span>.sendHeartbeatToAllBroker();</div><div class="line"> <span class="number">9</span>:             <span class="keyword">this</span>.uploadFilterClassSource();</div><div class="line"><span class="number">10</span>:         &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> Exception e) &#123;</div><div class="line"><span class="number">11</span>:             log.error(<span class="string">"sendHeartbeatToAllBroker exception"</span>, e);</div><div class="line"><span class="number">12</span>:         &#125; <span class="keyword">finally</span> &#123;</div><div class="line"><span class="number">13</span>:             <span class="keyword">this</span>.lockHeartbeat.unlock();</div><div class="line"><span class="number">14</span>:         &#125;</div><div class="line"><span class="number">15</span>:     &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">16</span>:         log.warn(<span class="string">"lock heartBeat, but failed."</span>);</div><div class="line"><span class="number">17</span>:     &#125;</div><div class="line"><span class="number">18</span>: &#125;</div><div class="line"><span class="number">19</span>: </div><div class="line"><span class="number">20</span>: <span class="comment">/**</span></div><div class="line">21:  * 上传过滤类到Filtersrv</div><div class="line">22:  */</div><div class="line"><span class="number">23</span>: <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">uploadFilterClassSource</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="number">24</span>:     Iterator&lt;Entry&lt;String, MQConsumerInner&gt;&gt; it = <span class="keyword">this</span>.consumerTable.entrySet().iterator();</div><div class="line"><span class="number">25</span>:     <span class="keyword">while</span> (it.hasNext()) &#123;</div><div class="line"><span class="number">26</span>:         Entry&lt;String, MQConsumerInner&gt; next = it.next();</div><div class="line"><span class="number">27</span>:         MQConsumerInner consumer = next.getValue();</div><div class="line"><span class="number">28</span>:         <span class="keyword">if</span> (ConsumeType.CONSUME_PASSIVELY == consumer.consumeType()) &#123;</div><div class="line"><span class="number">29</span>:             Set&lt;SubscriptionData&gt; subscriptions = consumer.subscriptions();</div><div class="line"><span class="number">30</span>:             <span class="keyword">for</span> (SubscriptionData sub : subscriptions) &#123;</div><div class="line"><span class="number">31</span>:                 <span class="keyword">if</span> (sub.isClassFilterMode() &amp;&amp; sub.getFilterClassSource() != <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">32</span>:                     <span class="keyword">final</span> String consumerGroup = consumer.groupName();</div><div class="line"><span class="number">33</span>:                     <span class="keyword">final</span> String className = sub.getSubString();</div><div class="line"><span class="number">34</span>:                     <span class="keyword">final</span> String topic = sub.getTopic();</div><div class="line"><span class="number">35</span>:                     <span class="keyword">final</span> String filterClassSource = sub.getFilterClassSource();</div><div class="line"><span class="number">36</span>:                     <span class="keyword">try</span> &#123;</div><div class="line"><span class="number">37</span>:                         <span class="keyword">this</span>.uploadFilterClassToAllFilterServer(consumerGroup, className, topic, filterClassSource);</div><div class="line"><span class="number">38</span>:                     &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"><span class="number">39</span>:                         log.error(<span class="string">"uploadFilterClassToAllFilterServer Exception"</span>, e);</div><div class="line"><span class="number">40</span>:                     &#125;</div><div class="line"><span class="number">41</span>:                 &#125;</div><div class="line"><span class="number">42</span>:             &#125;</div><div class="line"><span class="number">43</span>:         &#125;</div><div class="line"><span class="number">44</span>:     &#125;</div><div class="line"><span class="number">45</span>: &#125;</div></pre></td></tr></table></figure></p>
<h2>3.3 Filter 编译 过滤类代码</h2>
<ul>
<li>🦅 <code>Filtersrv</code> 处理 <code>Consumer</code> 上传的 <code>过滤类代码</code>，并进行<strong>编译</strong>使用。</li>
</ul>
<p>核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="comment">// ⬇️⬇️⬇️【FilterClassManager.java】</span></div><div class="line"> <span class="number">2</span>: <span class="comment">/**</span></div><div class="line"> 3:  * 注册过滤类</div><div class="line"> 4:  *</div><div class="line"> 5:  * <span class="doctag">@param</span> consumerGroup 消费分组</div><div class="line"> 6:  * <span class="doctag">@param</span> topic Topic</div><div class="line"> 7:  * <span class="doctag">@param</span> className 过滤类名</div><div class="line"> 8:  * <span class="doctag">@param</span> classCRC 过滤类源码CRC</div><div class="line"> 9:  * <span class="doctag">@param</span> filterSourceBinary 过滤类源码</div><div class="line">10:  * <span class="doctag">@return</span> 是否注册成功</div><div class="line">11:  */</div><div class="line"><span class="number">12</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">registerFilterClass</span><span class="params">(<span class="keyword">final</span> String consumerGroup, <span class="keyword">final</span> String topic,</span></span></div><div class="line"><span class="number">13</span>:     <span class="keyword">final</span> String className, <span class="keyword">final</span> <span class="keyword">int</span> classCRC, <span class="keyword">final</span> <span class="keyword">byte</span>[] filterSourceBinary) &#123;</div><div class="line"><span class="number">14</span>:     <span class="keyword">final</span> String key = buildKey(consumerGroup, topic);</div><div class="line"><span class="number">15</span>:     <span class="comment">// 判断是否要注册新的过滤类</span></div><div class="line"><span class="number">16</span>:     <span class="keyword">boolean</span> registerNew = <span class="keyword">false</span>;</div><div class="line"><span class="number">17</span>:     FilterClassInfo filterClassInfoPrev = <span class="keyword">this</span>.filterClassTable.get(key);</div><div class="line"><span class="number">18</span>:     <span class="keyword">if</span> (<span class="keyword">null</span> == filterClassInfoPrev) &#123;</div><div class="line"><span class="number">19</span>:         registerNew = <span class="keyword">true</span>;</div><div class="line"><span class="number">20</span>:     &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">21</span>:         <span class="keyword">if</span> (<span class="keyword">this</span>.filtersrvController.getFiltersrvConfig().isClientUploadFilterClassEnable()) &#123;</div><div class="line"><span class="number">22</span>:             <span class="keyword">if</span> (filterClassInfoPrev.getClassCRC() != classCRC &amp;&amp; classCRC != <span class="number">0</span>) &#123; <span class="comment">// 类有变化</span></div><div class="line"><span class="number">23</span>:                 registerNew = <span class="keyword">true</span>;</div><div class="line"><span class="number">24</span>:             &#125;</div><div class="line"><span class="number">25</span>:         &#125;</div><div class="line"><span class="number">26</span>:     &#125;</div><div class="line"><span class="number">27</span>:     <span class="comment">// 注册新的过滤类</span></div><div class="line"><span class="number">28</span>:     <span class="keyword">if</span> (registerNew) &#123;</div><div class="line"><span class="number">29</span>:         <span class="keyword">synchronized</span> (<span class="keyword">this</span>.compileLock) &#123;</div><div class="line"><span class="number">30</span>:             filterClassInfoPrev = <span class="keyword">this</span>.filterClassTable.get(key);</div><div class="line"><span class="number">31</span>:             <span class="keyword">if</span> (<span class="keyword">null</span> != filterClassInfoPrev &amp;&amp; filterClassInfoPrev.getClassCRC() == classCRC) &#123;</div><div class="line"><span class="number">32</span>:                 <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line"><span class="number">33</span>:             &#125;</div><div class="line"><span class="number">34</span>:             <span class="keyword">try</span> &#123;</div><div class="line"><span class="number">35</span>:                 FilterClassInfo filterClassInfoNew = <span class="keyword">new</span> FilterClassInfo();</div><div class="line"><span class="number">36</span>:                 filterClassInfoNew.setClassName(className);</div><div class="line"><span class="number">37</span>:                 filterClassInfoNew.setClassCRC(<span class="number">0</span>);</div><div class="line"><span class="number">38</span>:                 filterClassInfoNew.setMessageFilter(<span class="keyword">null</span>);</div><div class="line"><span class="number">39</span>: </div><div class="line"><span class="number">40</span>:                 <span class="keyword">if</span> (<span class="keyword">this</span>.filtersrvController.getFiltersrvConfig().isClientUploadFilterClassEnable()) &#123;</div><div class="line"><span class="number">41</span>:                     String javaSource = <span class="keyword">new</span> String(filterSourceBinary, MixAll.DEFAULT_CHARSET);</div><div class="line"><span class="number">42</span>:                     <span class="comment">// 编译新的过滤类</span></div><div class="line"><span class="number">43</span>:                     Class&lt;?&gt; newClass = DynaCode.compileAndLoadClass(className, javaSource);</div><div class="line"><span class="number">44</span>:                     <span class="comment">// 创建新的过滤类对象</span></div><div class="line"><span class="number">45</span>:                     Object newInstance = newClass.newInstance();</div><div class="line"><span class="number">46</span>:                     filterClassInfoNew.setMessageFilter((MessageFilter) newInstance);</div><div class="line"><span class="number">47</span>:                     filterClassInfoNew.setClassCRC(classCRC);</div><div class="line"><span class="number">48</span>:                 &#125;</div><div class="line"><span class="number">49</span>: </div><div class="line"><span class="number">50</span>:                 <span class="keyword">this</span>.filterClassTable.put(key, filterClassInfoNew);</div><div class="line"><span class="number">51</span>:             &#125; <span class="keyword">catch</span> (Throwable e) &#123;</div><div class="line"><span class="number">52</span>:                 String info = String.format(<span class="string">"FilterServer, registerFilterClass Exception, consumerGroup: %s topic: %s className: %s"</span>,</div><div class="line"><span class="number">53</span>:                             consumerGroup, topic, className);</div><div class="line"><span class="number">54</span>:                 log.error(info, e);</div><div class="line"><span class="number">55</span>:                 <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line"><span class="number">56</span>:             &#125;</div><div class="line"><span class="number">57</span>:         &#125;</div><div class="line"><span class="number">58</span>:     &#125;</div><div class="line"><span class="number">59</span>: </div><div class="line"><span class="number">60</span>:     <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line"><span class="number">61</span>: &#125;</div></pre></td></tr></table></figure></p>
<hr>
<h1>4. 过滤消息</h1>
<p><img src="http://www.yunai.me/images/RocketMQ/2017_05_17/Filtersrv.png" alt="Filtersrv.png"></p>
<h2>4.1 Consumer 从 Filtersrv 拉取消息</h2>
<ul>
<li>🦅 <code>Consumer</code> 拉取 <strong>使用过滤类方式订阅</strong> 的消费消息时，从 <code>Broker</code> 对应的 <code>Filtersrv</code> 列表<strong>随机</strong>选择一个拉取消息。<strong>如果选择不到 <code>Filtersrv</code>，则无法拉取消息。因此，<code>Filtersrv</code> 一定要做高可用</strong>。</li>
</ul>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="comment">// ⬇️⬇️⬇️【PullAPIWrapper.java】</span></div><div class="line"> <span class="number">2</span>: <span class="comment">/**</span></div><div class="line"> 3:  * 拉取消息核心方法</div><div class="line"> 4:  *</div><div class="line"> 5:  * <span class="doctag">@param</span> mq 消息嘟列</div><div class="line"> 6:  * <span class="doctag">@param</span> subExpression 订阅表达式</div><div class="line"> 7:  * <span class="doctag">@param</span> subVersion 订阅版本号</div><div class="line"> 8:  * <span class="doctag">@param</span> offset 拉取队列开始位置</div><div class="line"> 9:  * <span class="doctag">@param</span> maxNums 批量拉 取消息数量</div><div class="line">10:  * <span class="doctag">@param</span> sysFlag 拉取系统标识</div><div class="line">11:  * <span class="doctag">@param</span> commitOffset 提交消费进度</div><div class="line">12:  * <span class="doctag">@param</span> brokerSuspendMaxTimeMillis broker挂起请求最大时间</div><div class="line">13:  * <span class="doctag">@param</span> timeoutMillis 请求broker超时时间</div><div class="line">14:  * <span class="doctag">@param</span> communicationMode 通讯模式</div><div class="line">15:  * <span class="doctag">@param</span> pullCallback 拉取回调</div><div class="line">16:  * <span class="doctag">@return</span> 拉取消息结果。只有通讯模式为同步时，才返回结果，否则返回null。</div><div class="line">17:  * <span class="doctag">@throws</span> MQClientException 当寻找不到 broker 时，或发生其他client异常</div><div class="line">18:  * <span class="doctag">@throws</span> RemotingException 当远程调用发生异常时</div><div class="line">19:  * <span class="doctag">@throws</span> MQBrokerException 当 broker 发生异常时。只有通讯模式为同步时才会发生该异常。</div><div class="line">20:  * <span class="doctag">@throws</span> InterruptedException 当发生中断异常时</div><div class="line">21:  */</div><div class="line"><span class="number">22</span>: <span class="function"><span class="keyword">protected</span> PullResult <span class="title">pullKernelImpl</span><span class="params">(</span></span></div><div class="line"><span class="number">23</span>:     <span class="keyword">final</span> MessageQueue mq,</div><div class="line"><span class="number">24</span>:     <span class="keyword">final</span> String subExpression,</div><div class="line"><span class="number">25</span>:     <span class="keyword">final</span> <span class="keyword">long</span> subVersion,</div><div class="line"><span class="number">26</span>:     <span class="keyword">final</span> <span class="keyword">long</span> offset,</div><div class="line"><span class="number">27</span>:     <span class="keyword">final</span> <span class="keyword">int</span> maxNums,</div><div class="line"><span class="number">28</span>:     <span class="keyword">final</span> <span class="keyword">int</span> sysFlag,</div><div class="line"><span class="number">29</span>:     <span class="keyword">final</span> <span class="keyword">long</span> commitOffset,</div><div class="line"><span class="number">30</span>:     <span class="keyword">final</span> <span class="keyword">long</span> brokerSuspendMaxTimeMillis,</div><div class="line"><span class="number">31</span>:     <span class="keyword">final</span> <span class="keyword">long</span> timeoutMillis,</div><div class="line"><span class="number">32</span>:     <span class="keyword">final</span> CommunicationMode communicationMode,</div><div class="line"><span class="number">33</span>:     <span class="keyword">final</span> PullCallback pullCallback</div><div class="line"><span class="number">34</span>: ) <span class="keyword">throws</span> MQClientException, RemotingException, MQBrokerException, InterruptedException &#123;</div><div class="line"><span class="number">35</span>:     <span class="comment">// // ....(省略代码)</span></div><div class="line"><span class="number">36</span>:     <span class="comment">// 请求拉取消息</span></div><div class="line"><span class="number">37</span>:     <span class="keyword">if</span> (findBrokerResult != <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">38</span>:         <span class="comment">// ....(省略代码)</span></div><div class="line"><span class="number">39</span>:         <span class="comment">// 若订阅topic使用过滤类，使用filtersrv获取消息</span></div><div class="line"><span class="number">40</span>:         String brokerAddr = findBrokerResult.getBrokerAddr();</div><div class="line"><span class="number">41</span>:         <span class="keyword">if</span> (PullSysFlag.hasClassFilterFlag(sysFlagInner)) &#123;</div><div class="line"><span class="number">42</span>:             brokerAddr = computPullFromWhichFilterServer(mq.getTopic(), brokerAddr);</div><div class="line"><span class="number">43</span>:         &#125;</div><div class="line"><span class="number">44</span>: </div><div class="line"><span class="number">45</span>:         PullResult pullResult = <span class="keyword">this</span>.mQClientFactory.getMQClientAPIImpl().pullMessage(</div><div class="line"><span class="number">46</span>:             brokerAddr,</div><div class="line"><span class="number">47</span>:             requestHeader,</div><div class="line"><span class="number">48</span>:             timeoutMillis,</div><div class="line"><span class="number">49</span>:             communicationMode,</div><div class="line"><span class="number">50</span>:             pullCallback);</div><div class="line"><span class="number">51</span>: </div><div class="line"><span class="number">52</span>:         <span class="keyword">return</span> pullResult;</div><div class="line"><span class="number">53</span>:     &#125;</div><div class="line"><span class="number">54</span>: </div><div class="line"><span class="number">55</span>:     <span class="comment">// Broker信息不存在，则抛出异常</span></div><div class="line"><span class="number">56</span>:     <span class="keyword">throw</span> <span class="keyword">new</span> MQClientException(<span class="string">"The broker["</span> + mq.getBrokerName() + <span class="string">"] not exist"</span>, <span class="keyword">null</span>);</div><div class="line"><span class="number">57</span>: &#125;</div><div class="line"><span class="number">58</span>: </div><div class="line"><span class="number">59</span>: <span class="comment">/**</span></div><div class="line">60:  * 计算filtersrv地址。如果有多个filtersrv，随机选择一个。</div><div class="line">61:  *</div><div class="line">62:  * <span class="doctag">@param</span> topic Topic</div><div class="line">63:  * <span class="doctag">@param</span> brokerAddr broker地址</div><div class="line">64:  * <span class="doctag">@return</span> filtersrv地址</div><div class="line">65:  * <span class="doctag">@throws</span> MQClientException 当filtersrv不存在时</div><div class="line">66:  */</div><div class="line"><span class="number">67</span>: <span class="function"><span class="keyword">private</span> String <span class="title">computPullFromWhichFilterServer</span><span class="params">(<span class="keyword">final</span> String topic, <span class="keyword">final</span> String brokerAddr)</span></span></div><div class="line">68:     <span class="keyword">throws</span> MQClientException &#123;</div><div class="line"><span class="number">69</span>:     ConcurrentHashMap&lt;String, TopicRouteData&gt; topicRouteTable = <span class="keyword">this</span>.mQClientFactory.getTopicRouteTable();</div><div class="line"><span class="number">70</span>:     <span class="keyword">if</span> (topicRouteTable != <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">71</span>:         TopicRouteData topicRouteData = topicRouteTable.get(topic);</div><div class="line"><span class="number">72</span>:         List&lt;String&gt; list = topicRouteData.getFilterServerTable().get(brokerAddr);</div><div class="line"><span class="number">73</span>:         <span class="keyword">if</span> (list != <span class="keyword">null</span> &amp;&amp; !list.isEmpty()) &#123;</div><div class="line"><span class="number">74</span>:             <span class="keyword">return</span> list.get(randomNum() % list.size());</div><div class="line"><span class="number">75</span>:         &#125;</div><div class="line"><span class="number">76</span>:     &#125;</div><div class="line"><span class="number">77</span>:     <span class="keyword">throw</span> <span class="keyword">new</span> MQClientException(<span class="string">"Find Filter Server Failed, Broker Addr: "</span> + brokerAddr + <span class="string">" topic: "</span></div><div class="line"><span class="number">78</span>:         + topic, <span class="keyword">null</span>);</div><div class="line"><span class="number">79</span>: &#125;</div></pre></td></tr></table></figure></p>
<h2>4.2 Filtersrv 从 Broker 拉取消息</h2>
<ul>
<li>🦅 <code>Filtersrv</code> 拉取消息后，会建议 <code>Consumer</code> 向 <code>Broker主节点</code> 拉取消息。</li>
<li>🦅 <code>Filtersrv</code> 可以理解成一个 <code>Consumer</code>，向 <code>Broker</code> 拉取消息时，实际使用的 <code>DefaultMQPullConsumer.java</code> 的方法和逻辑。</li>
</ul>
<pre><code class="language-Java">  1: // ⬇️⬇️⬇️【DefaultRequestProcessor.java】
  2: /**
  3:  * 拉取消息
  4:  *
  5:  * @param ctx 拉取消息context
  6:  * @param request 拉取消息请求
  7:  * @return 响应
  8:  * @throws Exception 当发生异常时
  9:  */
 10: private RemotingCommand pullMessageForward(final ChannelHandlerContext ctx, final RemotingCommand request) throws Exception {
 11:     final RemotingCommand response = RemotingCommand.createResponseCommand(PullMessageResponseHeader.class);
 12:     final PullMessageResponseHeader responseHeader = (PullMessageResponseHeader) response.readCustomHeader();
 13:     final PullMessageRequestHeader requestHeader =
 14:         (PullMessageRequestHeader) request.decodeCommandCustomHeader(PullMessageRequestHeader.class);
 15: 
 16:     final FilterContext filterContext = new FilterContext();
 17:     filterContext.setConsumerGroup(requestHeader.getConsumerGroup());
 18: 
 19:     response.setOpaque(request.getOpaque());
 20: 
 21:     DefaultMQPullConsumer pullConsumer = this.filtersrvController.getDefaultMQPullConsumer();
 22: 
 23:     // 校验Topic过滤类是否完整
 24:     final FilterClassInfo findFilterClass = this.filtersrvController.getFilterClassManager().findFilterClass(requestHeader.getConsumerGroup(), requestHeader.getTopic());
 25:     if (null == findFilterClass) {
 26:         response.setCode(ResponseCode.SYSTEM_ERROR);
 27:         response.setRemark(&quot;Find Filter class failed, not registered&quot;);
 28:         return response;
 29:     }
 30:     if (null == findFilterClass.getMessageFilter()) {
 31:         response.setCode(ResponseCode.SYSTEM_ERROR);
 32:         response.setRemark(&quot;Find Filter class failed, registered but no class&quot;);
 33:         return response;
 34:     }
 35: 
 36:     // 设置下次请求从 Broker主节点。
 37:     responseHeader.setSuggestWhichBrokerId(MixAll.MASTER_ID);
 38: 
 39:     MessageQueue mq = new MessageQueue();
 40:     mq.setTopic(requestHeader.getTopic());
 41:     mq.setQueueId(requestHeader.getQueueId());
 42:     mq.setBrokerName(this.filtersrvController.getBrokerName());
 43:     long offset = requestHeader.getQueueOffset();
 44:     int maxNums = requestHeader.getMaxMsgNums();
 45: 
 46:     final PullCallback pullCallback = new PullCallback() {
 47: 
 48:         @Override
 49:         public void onSuccess(PullResult pullResult) {
 50:             responseHeader.setMaxOffset(pullResult.getMaxOffset());
 51:             responseHeader.setMinOffset(pullResult.getMinOffset());
 52:             responseHeader.setNextBeginOffset(pullResult.getNextBeginOffset());
 53:             response.setRemark(null);
 54: 
 55:             switch (pullResult.getPullStatus()) {
 56:                 case FOUND:
 57:                     response.setCode(ResponseCode.SUCCESS);
 58: 
 59:                     List&lt;MessageExt&gt; msgListOK = new ArrayList&lt;MessageExt&gt;();
 60:                     try {
 61:                         for (MessageExt msg : pullResult.getMsgFoundList()) {
 62:                             // 使用过滤类过滤消息
 63:                             boolean match = findFilterClass.getMessageFilter().match(msg, filterContext);
 64:                             if (match) {
 65:                                 msgListOK.add(msg);
 66:                             }
 67:                         }
 68: 
 69:                         if (!msgListOK.isEmpty()) {
 70:                             returnResponse(requestHeader.getConsumerGroup(), requestHeader.getTopic(), ctx, response, msgListOK);
 71:                             return;
 72:                         } else {
 73:                             response.setCode(ResponseCode.PULL_RETRY_IMMEDIATELY);
 74:                         }
 75:                     } catch (Throwable e) {
 76:                         final String error =
 77:                             String.format(&quot;do Message Filter Exception, ConsumerGroup: %s Topic: %s &quot;,
 78:                                 requestHeader.getConsumerGroup(), requestHeader.getTopic());
 79:                         log.error(error, e);
 80: 
 81:                         response.setCode(ResponseCode.SYSTEM_ERROR);
 82:                         response.setRemark(error + RemotingHelper.exceptionSimpleDesc(e));
 83:                         returnResponse(requestHeader.getConsumerGroup(), requestHeader.getTopic(), ctx, response, null);
 84:                         return;
 85:                     }
 86: 
 87:                     break;
 88:                 case NO_MATCHED_MSG:
 89:                     response.setCode(ResponseCode.PULL_RETRY_IMMEDIATELY);
 90:                     break;
 91:                 case NO_NEW_MSG:
 92:                     response.setCode(ResponseCode.PULL_NOT_FOUND);
 93:                     break;
 94:                 case OFFSET_ILLEGAL:
 95:                     response.setCode(ResponseCode.PULL_OFFSET_MOVED);
 96:                     break;
 97:                 default:
 98:                     break;
 99:             }
100: 
101:             returnResponse(requestHeader.getConsumerGroup(), requestHeader.getTopic(), ctx, response, null);
102:         }
103: 
104:         @Override
105:         public void onException(Throwable e) {
106:             response.setCode(ResponseCode.SYSTEM_ERROR);
107:             response.setRemark(&quot;Pull Callback Exception, &quot; + RemotingHelper.exceptionSimpleDesc(e));
108:             returnResponse(requestHeader.getConsumerGroup(), requestHeader.getTopic(), ctx, response, null);
109:             return;
110:         }
111:     };
112: 
113:     // 拉取消息
114:     pullConsumer.pullBlockIfNotFound(mq, null, offset, maxNums, pullCallback);
115:     return null;
116: }
</code></pre>
<h1>5. Filtersrv 高可用</h1>
<p><img src="http://www.yunai.me/images/RocketMQ/2017_05_17/02.png" alt="Filtersrv过可用"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://www.yunai.me/images/common/wechat_mp_2017_07_31.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;🙂🙂🙂关注**微信公众号：【芋艿的后端小屋】**有福利：&lt;/p&gt;
&lt;ol
    
    </summary>
    
      <category term="RocketMQ" scheme="http://www.yunai.me/categories/RocketMQ/"/>
    
    
  </entry>
  
  <entry>
    <title>RocketMQ 源码分析 —— 定时消息与消息重试</title>
    <link href="http://www.yunai.me/RocketMQ/message-schedule-and-retry/"/>
    <id>http://www.yunai.me/RocketMQ/message-schedule-and-retry/</id>
    <published>2017-05-14T16:00:00.000Z</published>
    <updated>2017-07-31T12:30:52.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://www.yunai.me/images/common/wechat_mp_2017_07_31.jpg" alt=""></p>
<blockquote>
<p>🙂🙂🙂关注**微信公众号：【芋艿的后端小屋】**有福利：</p>
<ol>
<li>RocketMQ / MyCAT / Sharding-JDBC <strong>所有</strong>源码分析文章列表</li>
<li>RocketMQ / MyCAT / Sharding-JDBC <strong>中文注释源码 GitHub 地址</strong></li>
<li>您对于源码的疑问每条留言<strong>都</strong>将得到<strong>认真</strong>回复。<strong>甚至不知道如何读源码也可以请教噢</strong>。</li>
<li><strong>新的</strong>源码解析文章<strong>实时</strong>收到通知。<strong>每周更新一篇左右</strong>。</li>
<li><strong>认真的</strong>源码交流微信群。</li>
</ol>
</blockquote>
<hr>
<ul>
<li><a href="#">1. 概述</a></li>
<li><a href="#">2. 定时消息</a>
<ul>
<li><a href="#">2.1 延迟级别</a></li>
<li><a href="#">2.2 Producer 发送定时消息</a></li>
<li><a href="#">2.3 Broker 存储定时消息</a></li>
<li><a href="#">2.4 Broker 发送定时消息</a></li>
<li><a href="#">2.5 Broker 持久化定时发送进度</a></li>
</ul>
</li>
<li><a href="#">3. 消息重试</a></li>
</ul>
<h1>1. 概述</h1>
<p><strong>建议</strong>前置阅读内容：</p>
<ul>
<li><a href="http://www.yunai.me/RocketMQ/message-send-and-receive/">《RocketMQ 源码分析 —— Message 发送与接收》</a></li>
<li><a href="http://www.yunai.me/RocketMQ/message-pull-and-consume-second/">《RocketMQ 源码分析 —— Message 拉取与消费（下）》</a></li>
</ul>
<p>😈 为什么把<strong>定时消息</strong>与<strong>消息重试</strong>放在一起？你猜。<br>
👻 你猜我猜不猜。</p>
<h1>2. 定时消息</h1>
<blockquote>
<p><strong>定时消息</strong>是指消息发到 Broker 后，不能立刻被 Consumer 消费，要到特定的时间点或者等待特定的时间后才能被消费。</p>
</blockquote>
<p>下图是<strong>定时消息</strong>的处理逻辑图：</p>
<p><img src="http://www.yunai.me/images/RocketMQ/2017_05_15/02.png" alt="定时消息逻辑图.png"></p>
<h2>2.1 延迟级别</h2>
<p><code>RocketMQ</code> 目前只支持<strong>固定精度</strong>的定时消息。官方说法如下：</p>
<blockquote>
<p>如果要支持任意的时间精度，在 Broker 层面，必须要做消息排序，如果再涉及到持久化，那么消息排序要不可避免的产生巨大性能开销。</p>
</blockquote>
<ul>
<li>延迟级别：</li>
</ul>
<table>
<thead>
<tr>
<th>延迟级别</th>
<th>时间</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>1s</td>
</tr>
<tr>
<td>2</td>
<td>5s</td>
</tr>
<tr>
<td>3</td>
<td>10s</td>
</tr>
<tr>
<td>4</td>
<td>30s</td>
</tr>
<tr>
<td>5</td>
<td>1m</td>
</tr>
<tr>
<td>6</td>
<td>2m</td>
</tr>
<tr>
<td>7</td>
<td>3m</td>
</tr>
<tr>
<td>8</td>
<td>4m</td>
</tr>
<tr>
<td>9</td>
<td>5m</td>
</tr>
<tr>
<td>10</td>
<td>6m</td>
</tr>
<tr>
<td>11</td>
<td>7m</td>
</tr>
<tr>
<td>12</td>
<td>8m</td>
</tr>
<tr>
<td>13</td>
<td>9m</td>
</tr>
<tr>
<td>14</td>
<td>10m</td>
</tr>
<tr>
<td>15</td>
<td>20m</td>
</tr>
<tr>
<td>16</td>
<td>30m</td>
</tr>
<tr>
<td>17</td>
<td>1h</td>
</tr>
<tr>
<td>18</td>
<td>2h</td>
</tr>
</tbody>
</table>
<ul>
<li>
<p>核心源码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="comment">// ⬇️⬇️⬇️【MessageStoreConfig.java】</span></div><div class="line"> <span class="number">2</span>: <span class="comment">/**</span></div><div class="line"> 3:  * 消息延迟级别字符串配置</div><div class="line"> 4:  */</div><div class="line"> <span class="number">5</span>: <span class="keyword">private</span> String messageDelayLevel = <span class="string">"1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h"</span>;</div><div class="line"> <span class="number">6</span>: </div><div class="line"> <span class="number">7</span>: <span class="comment">// ⬇️⬇️⬇️【ScheduleMessageService.java】</span></div><div class="line"> <span class="number">8</span>: <span class="comment">/**</span></div><div class="line"> 9:  * 解析延迟级别</div><div class="line">10:  *</div><div class="line">11:  * <span class="doctag">@return</span> 是否解析成功</div><div class="line">12:  */</div><div class="line"><span class="number">13</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">parseDelayLevel</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="number">14</span>:     HashMap&lt;String, Long&gt; timeUnitTable = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line"><span class="number">15</span>:     timeUnitTable.put(<span class="string">"s"</span>, <span class="number">1000L</span>);</div><div class="line"><span class="number">16</span>:     timeUnitTable.put(<span class="string">"m"</span>, <span class="number">1000L</span> * <span class="number">60</span>);</div><div class="line"><span class="number">17</span>:     timeUnitTable.put(<span class="string">"h"</span>, <span class="number">1000L</span> * <span class="number">60</span> * <span class="number">60</span>);</div><div class="line"><span class="number">18</span>:     timeUnitTable.put(<span class="string">"d"</span>, <span class="number">1000L</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>);</div><div class="line"><span class="number">19</span>: </div><div class="line"><span class="number">20</span>:     String levelString = <span class="keyword">this</span>.defaultMessageStore.getMessageStoreConfig().getMessageDelayLevel();</div><div class="line"><span class="number">21</span>:     <span class="keyword">try</span> &#123;</div><div class="line"><span class="number">22</span>:         String[] levelArray = levelString.split(<span class="string">" "</span>);</div><div class="line"><span class="number">23</span>:         <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; levelArray.length; i++) &#123;</div><div class="line"><span class="number">24</span>:             String value = levelArray[i];</div><div class="line"><span class="number">25</span>:             String ch = value.substring(value.length() - <span class="number">1</span>);</div><div class="line"><span class="number">26</span>:             Long tu = timeUnitTable.get(ch);</div><div class="line"><span class="number">27</span>: </div><div class="line"><span class="number">28</span>:             <span class="keyword">int</span> level = i + <span class="number">1</span>;</div><div class="line"><span class="number">29</span>:             <span class="keyword">if</span> (level &gt; <span class="keyword">this</span>.maxDelayLevel) &#123;</div><div class="line"><span class="number">30</span>:                 <span class="keyword">this</span>.maxDelayLevel = level;</div><div class="line"><span class="number">31</span>:             &#125;</div><div class="line"><span class="number">32</span>:             <span class="keyword">long</span> num = Long.parseLong(value.substring(<span class="number">0</span>, value.length() - <span class="number">1</span>));</div><div class="line"><span class="number">33</span>:             <span class="keyword">long</span> delayTimeMillis = tu * num;</div><div class="line"><span class="number">34</span>:             <span class="keyword">this</span>.delayLevelTable.put(level, delayTimeMillis);</div><div class="line"><span class="number">35</span>:         &#125;</div><div class="line"><span class="number">36</span>:     &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"><span class="number">37</span>:         log.error(<span class="string">"parseDelayLevel exception"</span>, e);</div><div class="line"><span class="number">38</span>:         log.info(<span class="string">"levelString String = &#123;&#125;"</span>, levelString);</div><div class="line"><span class="number">39</span>:         <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line"><span class="number">40</span>:     &#125;</div><div class="line"><span class="number">41</span>: </div><div class="line"><span class="number">42</span>:     <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line"><span class="number">43</span>: &#125;</div></pre></td></tr></table></figure></p>
</li>
</ul>
<h2>2.2 Producer 发送定时消息</h2>
<ul>
<li>🦅发送时，设置消息的<strong>延迟级别</strong>。</li>
</ul>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">Message msg = <span class="keyword">new</span> Message(...);</div><div class="line">msg.setDelayTimeLevel(level);</div></pre></td></tr></table></figure></p>
<h2>2.3 Broker 存储定时消息</h2>
<ul>
<li>🦅 存储消息时，延迟消息进入 <code>Topic</code> 为 <code>SCHEDULE_TOPIC_XXXX</code>。</li>
<li>🦅 延迟级别 与 消息队列编号 做<strong>固定映射：QueueId = DelayLevel - 1</strong>。</li>
</ul>
<p>核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="comment">// ⬇️⬇️⬇️【CommitLog.java】</span></div><div class="line"> <span class="number">2</span>: <span class="comment">/**</span></div><div class="line"> 3:  * 添加消息，返回消息结果</div><div class="line"> 4:  *</div><div class="line"> 5:  * <span class="doctag">@param</span> msg 消息</div><div class="line"> 6:  * <span class="doctag">@return</span> 结果</div><div class="line"> 7:  */</div><div class="line"> <span class="number">8</span>: <span class="function"><span class="keyword">public</span> PutMessageResult <span class="title">putMessage</span><span class="params">(<span class="keyword">final</span> MessageExtBrokerInner msg)</span> </span>&#123;</div><div class="line"> <span class="number">9</span>:     <span class="comment">// ....(省略代码) </span></div><div class="line"><span class="number">10</span>: </div><div class="line"><span class="number">11</span>:     <span class="comment">// 定时消息处理</span></div><div class="line"><span class="number">12</span>:     <span class="keyword">final</span> <span class="keyword">int</span> tranType = MessageSysFlag.getTransactionValue(msg.getSysFlag());</div><div class="line"><span class="number">13</span>:     <span class="keyword">if</span> (tranType == MessageSysFlag.TRANSACTION_NOT_TYPE<span class="comment">//</span></div><div class="line"><span class="number">14</span>:         || tranType == MessageSysFlag.TRANSACTION_COMMIT_TYPE) &#123;</div><div class="line"><span class="number">15</span>:         <span class="comment">// Delay Delivery</span></div><div class="line"><span class="number">16</span>:         <span class="keyword">if</span> (msg.getDelayTimeLevel() &gt; <span class="number">0</span>) &#123;</div><div class="line"><span class="number">17</span>:             <span class="keyword">if</span> (msg.getDelayTimeLevel() &gt; <span class="keyword">this</span>.defaultMessageStore.getScheduleMessageService().getMaxDelayLevel()) &#123;</div><div class="line"><span class="number">18</span>:                 msg.setDelayTimeLevel(<span class="keyword">this</span>.defaultMessageStore.getScheduleMessageService().getMaxDelayLevel());</div><div class="line"><span class="number">19</span>:             &#125;</div><div class="line"><span class="number">20</span>: </div><div class="line"><span class="number">21</span>:             <span class="comment">// 存储消息时，延迟消息进入 `Topic` 为 `SCHEDULE_TOPIC_XXXX` 。</span></div><div class="line"><span class="number">22</span>:             topic = ScheduleMessageService.SCHEDULE_TOPIC;</div><div class="line"><span class="number">23</span>: </div><div class="line"><span class="number">24</span>:             <span class="comment">// 延迟级别 与 消息队列编号 做固定映射</span></div><div class="line"><span class="number">25</span>:             queueId = ScheduleMessageService.delayLevel2QueueId(msg.getDelayTimeLevel());</div><div class="line"><span class="number">26</span>: </div><div class="line"><span class="number">27</span>:             <span class="comment">// Backup real topic, queueId</span></div><div class="line"><span class="number">28</span>:             MessageAccessor.putProperty(msg, MessageConst.PROPERTY_REAL_TOPIC, msg.getTopic());</div><div class="line"><span class="number">29</span>:             MessageAccessor.putProperty(msg, MessageConst.PROPERTY_REAL_QUEUE_ID, String.valueOf(msg.getQueueId()));</div><div class="line"><span class="number">30</span>:             msg.setPropertiesString(MessageDecoder.messageProperties2String(msg.getProperties()));</div><div class="line"><span class="number">31</span>: </div><div class="line"><span class="number">32</span>:             msg.setTopic(topic);</div><div class="line"><span class="number">33</span>:             msg.setQueueId(queueId);</div><div class="line"><span class="number">34</span>:         &#125;</div><div class="line"><span class="number">35</span>:     &#125;</div><div class="line"><span class="number">36</span>: </div><div class="line"><span class="number">37</span>:     <span class="comment">// ....(省略代码) </span></div><div class="line"><span class="number">38</span>: &#125;</div><div class="line"><span class="number">39</span>: </div><div class="line"><span class="number">40</span>: <span class="comment">// ⬇️⬇️⬇️【ScheduleMessageService.java】</span></div><div class="line"><span class="number">41</span>: <span class="comment">/**</span></div><div class="line">42:  * 根据 延迟级别 计算 消息队列编号</div><div class="line">43:  * QueueId = DelayLevel - 1</div><div class="line">44:  *</div><div class="line">45:  * <span class="doctag">@param</span> delayLevel 延迟级别</div><div class="line">46:  * <span class="doctag">@return</span> 消息队列编号</div><div class="line">47:  */</div><div class="line"><span class="number">48</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">delayLevel2QueueId</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> delayLevel)</span> </span>&#123;</div><div class="line"><span class="number">49</span>:     <span class="keyword">return</span> delayLevel - <span class="number">1</span>;</div><div class="line"><span class="number">50</span>: &#125;</div></pre></td></tr></table></figure></p>
<hr>
<ul>
<li>🦅 生成 <code>ConsumeQueue</code> 时，每条消息的 <code>tagsCode</code> 使用【消息计划消费时间】。这样，<code>ScheduleMessageService</code> 在轮询 <code>ConsumeQueue</code> 时，可以使用 <code>tagsCode</code> 进行过滤。</li>
</ul>
<p>核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="comment">// ⬇️⬇️⬇️【CommitLog.java】</span></div><div class="line"> <span class="number">2</span>: <span class="comment">/**</span></div><div class="line"> 3:  * check the message and returns the message size</div><div class="line"> 4:  *</div><div class="line"> 5:  * <span class="doctag">@return</span> 0 Come the end of the file // &gt;0 Normal messages // -1 Message checksum failure</div><div class="line"> 6:  */</div><div class="line"> <span class="number">7</span>: <span class="function"><span class="keyword">public</span> DispatchRequest <span class="title">checkMessageAndReturnSize</span><span class="params">(ByteBuffer byteBuffer, <span class="keyword">final</span> <span class="keyword">boolean</span> checkCRC, <span class="keyword">final</span> <span class="keyword">boolean</span> readBody)</span> </span>&#123;</div><div class="line"> <span class="number">8</span>:     <span class="keyword">try</span> &#123;</div><div class="line"> <span class="number">9</span>:         <span class="comment">// // ....(省略代码)</span></div><div class="line"><span class="number">10</span>: </div><div class="line"><span class="number">11</span>:         <span class="comment">// 17 properties</span></div><div class="line"><span class="number">12</span>:         <span class="keyword">short</span> propertiesLength = byteBuffer.getShort();</div><div class="line"><span class="number">13</span>:         <span class="keyword">if</span> (propertiesLength &gt; <span class="number">0</span>) &#123;</div><div class="line"><span class="number">14</span>:             <span class="comment">// ....(省略代码)</span></div><div class="line"><span class="number">15</span>:             String tags = propertiesMap.get(MessageConst.PROPERTY_TAGS);</div><div class="line"><span class="number">16</span>:             <span class="keyword">if</span> (tags != <span class="keyword">null</span> &amp;&amp; tags.length() &gt; <span class="number">0</span>) &#123;</div><div class="line"><span class="number">17</span>:                 tagsCode = MessageExtBrokerInner.tagsString2tagsCode(MessageExt.parseTopicFilterType(sysFlag), tags);</div><div class="line"><span class="number">18</span>:             &#125;</div><div class="line"><span class="number">19</span>: </div><div class="line"><span class="number">20</span>:             <span class="comment">// Timing message processing</span></div><div class="line"><span class="number">21</span>:             &#123;</div><div class="line"><span class="number">22</span>:                 String t = propertiesMap.get(MessageConst.PROPERTY_DELAY_TIME_LEVEL);</div><div class="line"><span class="number">23</span>:                 <span class="keyword">if</span> (ScheduleMessageService.SCHEDULE_TOPIC.equals(topic) &amp;&amp; t != <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">24</span>:                     <span class="keyword">int</span> delayLevel = Integer.parseInt(t);</div><div class="line"><span class="number">25</span>: </div><div class="line"><span class="number">26</span>:                     <span class="keyword">if</span> (delayLevel &gt; <span class="keyword">this</span>.defaultMessageStore.getScheduleMessageService().getMaxDelayLevel()) &#123;</div><div class="line"><span class="number">27</span>:                         delayLevel = <span class="keyword">this</span>.defaultMessageStore.getScheduleMessageService().getMaxDelayLevel();</div><div class="line"><span class="number">28</span>:                     &#125;</div><div class="line"><span class="number">29</span>: </div><div class="line"><span class="number">30</span>:                     <span class="keyword">if</span> (delayLevel &gt; <span class="number">0</span>) &#123;</div><div class="line"><span class="number">31</span>:                         tagsCode = <span class="keyword">this</span>.defaultMessageStore.getScheduleMessageService().computeDeliverTimestamp(delayLevel,</div><div class="line"><span class="number">32</span>:                             storeTimestamp);</div><div class="line"><span class="number">33</span>:                     &#125;</div><div class="line"><span class="number">34</span>:                 &#125;</div><div class="line"><span class="number">35</span>:             &#125;</div><div class="line"><span class="number">36</span>:         &#125;</div><div class="line"><span class="number">37</span>: </div><div class="line"><span class="number">38</span>:         <span class="comment">// ....(省略代码)</span></div><div class="line"><span class="number">39</span>: </div><div class="line"><span class="number">40</span>:         <span class="keyword">return</span> <span class="keyword">new</span> DispatchRequest(<span class="comment">//</span></div><div class="line"><span class="number">41</span>:             topic, <span class="comment">// 1</span></div><div class="line"><span class="number">42</span>:             queueId, <span class="comment">// 2</span></div><div class="line"><span class="number">43</span>:             physicOffset, <span class="comment">// 3</span></div><div class="line"><span class="number">44</span>:             totalSize, <span class="comment">// 4</span></div><div class="line"><span class="number">45</span>:             tagsCode, <span class="comment">// 5</span></div><div class="line"><span class="number">46</span>:             storeTimestamp, <span class="comment">// 6</span></div><div class="line"><span class="number">47</span>:             queueOffset, <span class="comment">// 7</span></div><div class="line"><span class="number">48</span>:             keys, <span class="comment">// 8</span></div><div class="line"><span class="number">49</span>:             uniqKey, <span class="comment">//9</span></div><div class="line"><span class="number">50</span>:             sysFlag, <span class="comment">// 9</span></div><div class="line"><span class="number">51</span>:             preparedTransactionOffset<span class="comment">// 10</span></div><div class="line"><span class="number">52</span>:         );</div><div class="line"><span class="number">53</span>:     &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"><span class="number">54</span>:     &#125;</div><div class="line"><span class="number">55</span>: </div><div class="line"><span class="number">56</span>:     <span class="keyword">return</span> <span class="keyword">new</span> DispatchRequest(-<span class="number">1</span>, <span class="keyword">false</span> <span class="comment">/* success */</span>);</div><div class="line"><span class="number">57</span>: &#125;</div><div class="line"><span class="number">58</span>: </div><div class="line"><span class="number">59</span>: <span class="comment">// ⬇️⬇️⬇️【ScheduleMessageService.java】</span></div><div class="line"><span class="number">60</span>: <span class="comment">/**</span></div><div class="line">61:  * 计算 投递时间【计划消费时间】</div><div class="line">62:  *</div><div class="line">63:  * <span class="doctag">@param</span> delayLevel 延迟级别</div><div class="line">64:  * <span class="doctag">@param</span> storeTimestamp 存储时间</div><div class="line">65:  * <span class="doctag">@return</span> 投递时间【计划消费时间】</div><div class="line">66:  */</div><div class="line"><span class="number">67</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">computeDeliverTimestamp</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> delayLevel, <span class="keyword">final</span> <span class="keyword">long</span> storeTimestamp)</span> </span>&#123;</div><div class="line"><span class="number">68</span>:     Long time = <span class="keyword">this</span>.delayLevelTable.get(delayLevel);</div><div class="line"><span class="number">69</span>:     <span class="keyword">if</span> (time != <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">70</span>:         <span class="keyword">return</span> time + storeTimestamp;</div><div class="line"><span class="number">71</span>:     &#125;</div><div class="line"><span class="number">72</span>: </div><div class="line"><span class="number">73</span>:     <span class="keyword">return</span> storeTimestamp + <span class="number">1000</span>;</div><div class="line"><span class="number">74</span>: &#125;</div></pre></td></tr></table></figure></p>
<h2>2.4 Broker 发送定时消息</h2>
<ul>
<li>🦅 对 <code>SCHEDULE_TOPIC_XXXX</code> 每条消费队列对应<strong>单独一个</strong>定时任务进行轮询，发送 <strong>到达投递时间【计划消费时间】</strong> 的消息。</li>
</ul>
<p>下图是发送定时消息的处理逻辑图：</p>
<p><img src="http://www.yunai.me/images/RocketMQ/2017_05_15/01.png" alt="定时消息定时逻辑"></p>
<p>实现代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">  <span class="number">1</span>: <span class="comment">/**</span></div><div class="line">  2:  * ⬇️⬇️⬇️ 发送（投递）延迟消息定时任务</div><div class="line">  3:  */</div><div class="line">  <span class="number">4</span>: <span class="class"><span class="keyword">class</span> <span class="title">DeliverDelayedMessageTimerTask</span> <span class="keyword">extends</span> <span class="title">TimerTask</span> </span>&#123;</div><div class="line">  <span class="number">5</span>:     <span class="comment">/**</span></div><div class="line">  6:      * 延迟级别</div><div class="line">  7:      */</div><div class="line">  <span class="number">8</span>:     <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> delayLevel;</div><div class="line">  <span class="number">9</span>:     <span class="comment">/**</span></div><div class="line"> 10:      * 位置</div><div class="line"> 11:      */</div><div class="line"> <span class="number">12</span>:     <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> offset;</div><div class="line"> <span class="number">13</span>: </div><div class="line"> <span class="number">14</span>:     <span class="function"><span class="keyword">public</span> <span class="title">DeliverDelayedMessageTimerTask</span><span class="params">(<span class="keyword">int</span> delayLevel, <span class="keyword">long</span> offset)</span> </span>&#123;</div><div class="line"> <span class="number">15</span>:         <span class="keyword">this</span>.delayLevel = delayLevel;</div><div class="line"> <span class="number">16</span>:         <span class="keyword">this</span>.offset = offset;</div><div class="line"> <span class="number">17</span>:     &#125;</div><div class="line"> <span class="number">18</span>: </div><div class="line"> <span class="number">19</span>:     <span class="meta">@Override</span></div><div class="line"> <span class="number">20</span>:     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line"> <span class="number">21</span>:         <span class="keyword">try</span> &#123;</div><div class="line"> <span class="number">22</span>:             <span class="keyword">this</span>.executeOnTimeup();</div><div class="line"> <span class="number">23</span>:         &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"> <span class="number">24</span>:             <span class="comment">// <span class="doctag">XXX:</span> warn and notify me</span></div><div class="line"> <span class="number">25</span>:             log.error(<span class="string">"ScheduleMessageService, executeOnTimeup exception"</span>, e);</div><div class="line"> <span class="number">26</span>:             ScheduleMessageService.<span class="keyword">this</span>.timer.schedule(<span class="keyword">new</span> DeliverDelayedMessageTimerTask(</div><div class="line"> <span class="number">27</span>:                 <span class="keyword">this</span>.delayLevel, <span class="keyword">this</span>.offset), DELAY_FOR_A_PERIOD);</div><div class="line"> <span class="number">28</span>:         &#125;</div><div class="line"> <span class="number">29</span>:     &#125;</div><div class="line"> <span class="number">30</span>: </div><div class="line"> <span class="number">31</span>:     <span class="comment">/**</span></div><div class="line"> 32:      * 纠正可投递时间。</div><div class="line"> 33:      * 因为发送级别对应的发送间隔可以调整，如果超过当前间隔，则修正成当前配置，避免后面的消息无法发送。</div><div class="line"> 34:      *</div><div class="line"> 35:      * <span class="doctag">@param</span> now 当前时间</div><div class="line"> 36:      * <span class="doctag">@param</span> deliverTimestamp 投递时间</div><div class="line"> 37:      * <span class="doctag">@return</span> 纠正结果</div><div class="line"> 38:      */</div><div class="line"> <span class="number">39</span>:     <span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">correctDeliverTimestamp</span><span class="params">(<span class="keyword">final</span> <span class="keyword">long</span> now, <span class="keyword">final</span> <span class="keyword">long</span> deliverTimestamp)</span> </span>&#123;</div><div class="line"> <span class="number">40</span>:         <span class="keyword">long</span> result = deliverTimestamp;</div><div class="line"> <span class="number">41</span>: </div><div class="line"> <span class="number">42</span>:         <span class="keyword">long</span> maxTimestamp = now + ScheduleMessageService.<span class="keyword">this</span>.delayLevelTable.get(<span class="keyword">this</span>.delayLevel);</div><div class="line"> <span class="number">43</span>:         <span class="keyword">if</span> (deliverTimestamp &gt; maxTimestamp) &#123;</div><div class="line"> <span class="number">44</span>:             result = now;</div><div class="line"> <span class="number">45</span>:         &#125;</div><div class="line"> <span class="number">46</span>: </div><div class="line"> <span class="number">47</span>:         <span class="keyword">return</span> result;</div><div class="line"> <span class="number">48</span>:     &#125;</div><div class="line"> <span class="number">49</span>: </div><div class="line"> <span class="number">50</span>:     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">executeOnTimeup</span><span class="params">()</span> </span>&#123;</div><div class="line"> <span class="number">51</span>:         ConsumeQueue cq = ScheduleMessageService.<span class="keyword">this</span>.defaultMessageStore.findConsumeQueue(SCHEDULE_TOPIC,  delayLevel2QueueId(delayLevel));</div><div class="line"> <span class="number">52</span>: </div><div class="line"> <span class="number">53</span>:         <span class="keyword">long</span> failScheduleOffset = offset;</div><div class="line"> <span class="number">54</span>: </div><div class="line"> <span class="number">55</span>:         <span class="keyword">if</span> (cq != <span class="keyword">null</span>) &#123;</div><div class="line"> <span class="number">56</span>:             SelectMappedBufferResult bufferCQ = cq.getIndexBuffer(<span class="keyword">this</span>.offset);</div><div class="line"> <span class="number">57</span>:             <span class="keyword">if</span> (bufferCQ != <span class="keyword">null</span>) &#123;</div><div class="line"> <span class="number">58</span>:                 <span class="keyword">try</span> &#123;</div><div class="line"> <span class="number">59</span>:                     <span class="keyword">long</span> nextOffset = offset;</div><div class="line"> <span class="number">60</span>:                     <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line"> <span class="number">61</span>:                     <span class="keyword">for</span> (; i &lt; bufferCQ.getSize(); i += ConsumeQueue.CQ_STORE_UNIT_SIZE) &#123;</div><div class="line"> <span class="number">62</span>:                         <span class="keyword">long</span> offsetPy = bufferCQ.getByteBuffer().getLong();</div><div class="line"> <span class="number">63</span>:                         <span class="keyword">int</span> sizePy = bufferCQ.getByteBuffer().getInt();</div><div class="line"> <span class="number">64</span>:                         <span class="keyword">long</span> tagsCode = bufferCQ.getByteBuffer().getLong();</div><div class="line"> <span class="number">65</span>: </div><div class="line"> <span class="number">66</span>:                         <span class="keyword">long</span> now = System.currentTimeMillis();</div><div class="line"> <span class="number">67</span>:                         <span class="keyword">long</span> deliverTimestamp = <span class="keyword">this</span>.correctDeliverTimestamp(now, tagsCode);</div><div class="line"> <span class="number">68</span>: </div><div class="line"> <span class="number">69</span>:                         nextOffset = offset + (i / ConsumeQueue.CQ_STORE_UNIT_SIZE);</div><div class="line"> <span class="number">70</span>: </div><div class="line"> <span class="number">71</span>:                         <span class="keyword">long</span> countdown = deliverTimestamp - now;</div><div class="line"> <span class="number">72</span>: </div><div class="line"> <span class="number">73</span>:                         <span class="keyword">if</span> (countdown &lt;= <span class="number">0</span>) &#123; <span class="comment">// 消息到达可发送时间</span></div><div class="line"> <span class="number">74</span>:                             MessageExt msgExt = ScheduleMessageService.<span class="keyword">this</span>.defaultMessageStore.lookMessageByOffset(offsetPy, sizePy);</div><div class="line"> <span class="number">75</span>:                             <span class="keyword">if</span> (msgExt != <span class="keyword">null</span>) &#123;</div><div class="line"> <span class="number">76</span>:                                 <span class="keyword">try</span> &#123;</div><div class="line"> <span class="number">77</span>:                                     <span class="comment">// 发送消息</span></div><div class="line"> <span class="number">78</span>:                                     MessageExtBrokerInner msgInner = <span class="keyword">this</span>.messageTimeup(msgExt);</div><div class="line"> <span class="number">79</span>:                                     PutMessageResult putMessageResult = ScheduleMessageService.<span class="keyword">this</span>.defaultMessageStore.putMessage(msgInner);</div><div class="line"> <span class="number">80</span>:                                     <span class="keyword">if</span> (putMessageResult != <span class="keyword">null</span> &amp;&amp; putMessageResult.getPutMessageStatus() == PutMessageStatus.PUT_OK) &#123; <span class="comment">// 发送成功</span></div><div class="line"> <span class="number">81</span>:                                         <span class="keyword">continue</span>;</div><div class="line"> <span class="number">82</span>:                                     &#125; <span class="keyword">else</span> &#123; <span class="comment">// 发送失败</span></div><div class="line"> <span class="number">83</span>:                                         <span class="comment">// <span class="doctag">XXX:</span> warn and notify me</span></div><div class="line"> <span class="number">84</span>:                                         log.error(<span class="string">"ScheduleMessageService, a message time up, but reput it failed, topic: &#123;&#125; msgId &#123;&#125;"</span>, msgExt.getTopic(), msgExt.getMsgId());</div><div class="line"> <span class="number">85</span>: </div><div class="line"> <span class="number">86</span>:                                         <span class="comment">// 安排下一次任务</span></div><div class="line"> <span class="number">87</span>:                                         ScheduleMessageService.<span class="keyword">this</span>.timer.schedule(<span class="keyword">new</span> DeliverDelayedMessageTimerTask(<span class="keyword">this</span>.delayLevel, nextOffset), DELAY_FOR_A_PERIOD);</div><div class="line"> <span class="number">88</span>: </div><div class="line"> <span class="number">89</span>:                                         <span class="comment">// 更新进度</span></div><div class="line"> <span class="number">90</span>:                                         ScheduleMessageService.<span class="keyword">this</span>.updateOffset(<span class="keyword">this</span>.delayLevel, nextOffset);</div><div class="line"> <span class="number">91</span>:                                         <span class="keyword">return</span>;</div><div class="line"> <span class="number">92</span>:                                     &#125;</div><div class="line"> <span class="number">93</span>:                                 &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"> <span class="number">94</span>:                                     <span class="comment">// <span class="doctag">XXX:</span> warn and notify me</span></div><div class="line"> <span class="number">95</span>:                                     log.error(<span class="string">"ScheduleMessageService, messageTimeup execute error, drop it. msgExt="</span></div><div class="line"> <span class="number">96</span>:                                             + msgExt + <span class="string">", nextOffset="</span> + nextOffset + <span class="string">",offsetPy="</span> + offsetPy + <span class="string">",sizePy="</span> + sizePy, e);</div><div class="line"> <span class="number">97</span>:                                 &#125;</div><div class="line"> <span class="number">98</span>:                             &#125;</div><div class="line"> <span class="number">99</span>:                         &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">100</span>:                             <span class="comment">// 安排下一次任务</span></div><div class="line"><span class="number">101</span>:                             ScheduleMessageService.<span class="keyword">this</span>.timer.schedule(<span class="keyword">new</span> DeliverDelayedMessageTimerTask(<span class="keyword">this</span>.delayLevel, nextOffset), countdown);</div><div class="line"><span class="number">102</span>: </div><div class="line"><span class="number">103</span>:                             <span class="comment">// 更新进度</span></div><div class="line"><span class="number">104</span>:                             ScheduleMessageService.<span class="keyword">this</span>.updateOffset(<span class="keyword">this</span>.delayLevel, nextOffset);</div><div class="line"><span class="number">105</span>:                             <span class="keyword">return</span>;</div><div class="line"><span class="number">106</span>:                         &#125;</div><div class="line"><span class="number">107</span>:                     &#125; <span class="comment">// end of for</span></div><div class="line"><span class="number">108</span>: </div><div class="line"><span class="number">109</span>:                     nextOffset = offset + (i / ConsumeQueue.CQ_STORE_UNIT_SIZE);</div><div class="line"><span class="number">110</span>: </div><div class="line"><span class="number">111</span>:                     <span class="comment">// 安排下一次任务</span></div><div class="line"><span class="number">112</span>:                     ScheduleMessageService.<span class="keyword">this</span>.timer.schedule(<span class="keyword">new</span> DeliverDelayedMessageTimerTask(<span class="keyword">this</span>.delayLevel, nextOffset), DELAY_FOR_A_WHILE);</div><div class="line"><span class="number">113</span>: </div><div class="line"><span class="number">114</span>:                     <span class="comment">// 更新进度</span></div><div class="line"><span class="number">115</span>:                     ScheduleMessageService.<span class="keyword">this</span>.updateOffset(<span class="keyword">this</span>.delayLevel, nextOffset);</div><div class="line"><span class="number">116</span>:                     <span class="keyword">return</span>;</div><div class="line"><span class="number">117</span>:                 &#125; <span class="keyword">finally</span> &#123;</div><div class="line"><span class="number">118</span>:                     bufferCQ.release();</div><div class="line"><span class="number">119</span>:                 &#125;</div><div class="line"><span class="number">120</span>:             &#125; <span class="comment">// end of if (bufferCQ != null)</span></div><div class="line"><span class="number">121</span>:             <span class="keyword">else</span> &#123; <span class="comment">// 消费队列已经被删除部分，跳转到最小的消费进度</span></div><div class="line"><span class="number">122</span>:                 <span class="keyword">long</span> cqMinOffset = cq.getMinOffsetInQueue();</div><div class="line"><span class="number">123</span>:                 <span class="keyword">if</span> (offset &lt; cqMinOffset) &#123;</div><div class="line"><span class="number">124</span>:                     failScheduleOffset = cqMinOffset;</div><div class="line"><span class="number">125</span>:                     log.error(<span class="string">"schedule CQ offset invalid. offset="</span> + offset + <span class="string">", cqMinOffset="</span></div><div class="line"><span class="number">126</span>:                         + cqMinOffset + <span class="string">", queueId="</span> + cq.getQueueId());</div><div class="line"><span class="number">127</span>:                 &#125;</div><div class="line"><span class="number">128</span>:             &#125;</div><div class="line"><span class="number">129</span>:         &#125; <span class="comment">// end of if (cq != null)</span></div><div class="line"><span class="number">130</span>: </div><div class="line"><span class="number">131</span>:         ScheduleMessageService.<span class="keyword">this</span>.timer.schedule(<span class="keyword">new</span> DeliverDelayedMessageTimerTask(<span class="keyword">this</span>.delayLevel, failScheduleOffset), DELAY_FOR_A_WHILE);</div><div class="line"><span class="number">132</span>:     &#125;</div><div class="line"><span class="number">133</span>: </div><div class="line"><span class="number">134</span>:     <span class="comment">/**</span></div><div class="line">135:      * 设置消息内容</div><div class="line">136:      *</div><div class="line">137:      * <span class="doctag">@param</span> msgExt 消息</div><div class="line">138:      * <span class="doctag">@return</span> 消息</div><div class="line">139:      */</div><div class="line"><span class="number">140</span>:     <span class="function"><span class="keyword">private</span> MessageExtBrokerInner <span class="title">messageTimeup</span><span class="params">(MessageExt msgExt)</span> </span>&#123;</div><div class="line"><span class="number">141</span>:         MessageExtBrokerInner msgInner = <span class="keyword">new</span> MessageExtBrokerInner();</div><div class="line"><span class="number">142</span>:         msgInner.setBody(msgExt.getBody());</div><div class="line"><span class="number">143</span>:         msgInner.setFlag(msgExt.getFlag());</div><div class="line"><span class="number">144</span>:         MessageAccessor.setProperties(msgInner, msgExt.getProperties());</div><div class="line"><span class="number">145</span>: </div><div class="line"><span class="number">146</span>:         TopicFilterType topicFilterType = MessageExt.parseTopicFilterType(msgInner.getSysFlag());</div><div class="line"><span class="number">147</span>:         <span class="keyword">long</span> tagsCodeValue =</div><div class="line"><span class="number">148</span>:             MessageExtBrokerInner.tagsString2tagsCode(topicFilterType, msgInner.getTags());</div><div class="line"><span class="number">149</span>:         msgInner.setTagsCode(tagsCodeValue);</div><div class="line"><span class="number">150</span>:         msgInner.setPropertiesString(MessageDecoder.messageProperties2String(msgExt.getProperties()));</div><div class="line"><span class="number">151</span>: </div><div class="line"><span class="number">152</span>:         msgInner.setSysFlag(msgExt.getSysFlag());</div><div class="line"><span class="number">153</span>:         msgInner.setBornTimestamp(msgExt.getBornTimestamp());</div><div class="line"><span class="number">154</span>:         msgInner.setBornHost(msgExt.getBornHost());</div><div class="line"><span class="number">155</span>:         msgInner.setStoreHost(msgExt.getStoreHost());</div><div class="line"><span class="number">156</span>:         msgInner.setReconsumeTimes(msgExt.getReconsumeTimes());</div><div class="line"><span class="number">157</span>: </div><div class="line"><span class="number">158</span>:         msgInner.setWaitStoreMsgOK(<span class="keyword">false</span>);</div><div class="line"><span class="number">159</span>:         MessageAccessor.clearProperty(msgInner, MessageConst.PROPERTY_DELAY_TIME_LEVEL);</div><div class="line"><span class="number">160</span>: </div><div class="line"><span class="number">161</span>:         msgInner.setTopic(msgInner.getProperty(MessageConst.PROPERTY_REAL_TOPIC));</div><div class="line"><span class="number">162</span>: </div><div class="line"><span class="number">163</span>:         String queueIdStr = msgInner.getProperty(MessageConst.PROPERTY_REAL_QUEUE_ID);</div><div class="line"><span class="number">164</span>:         <span class="keyword">int</span> queueId = Integer.parseInt(queueIdStr);</div><div class="line"><span class="number">165</span>:         msgInner.setQueueId(queueId);</div><div class="line"><span class="number">166</span>: </div><div class="line"><span class="number">167</span>:         <span class="keyword">return</span> msgInner;</div><div class="line"><span class="number">168</span>:     &#125;</div><div class="line"><span class="number">169</span>: &#125;</div></pre></td></tr></table></figure></p>
<h2>2.5 Broker 持久化定时发送进度</h2>
<ul>
<li>🦅 定时消息发送进度存储在文件(<code>../config/delayOffset.json</code>)里</li>
<li>🦅 每 10s 定时持久化发送进度。</li>
</ul>
<p>核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="comment">// ⬇️⬇️⬇️【ScheduleMessageService.java】</span></div><div class="line"> <span class="number">2</span>: <span class="comment">/**</span></div><div class="line"> 3: public void start() &#123;</div><div class="line"> 4:     // 定时发送消息</div><div class="line"> 5:     for (Map.Entry&lt;Integer, Long&gt; entry : this.delayLevelTable.entrySet()) &#123;</div><div class="line"> 6:         Integer level = entry.getKey();</div><div class="line"> 7:         Long timeDelay = entry.getValue();</div><div class="line"> 8:         Long offset = this.offsetTable.get(level);</div><div class="line"> 9:         if (null == offset) &#123;</div><div class="line">10:             offset = 0L;</div><div class="line">11:         &#125;</div><div class="line">12: </div><div class="line">13:         if (timeDelay != null) &#123;</div><div class="line">14:             this.timer.schedule(new DeliverDelayedMessageTimerTask(level, offset), FIRST_DELAY_TIME);</div><div class="line">15:         &#125;</div><div class="line">16:     &#125;</div><div class="line">17: </div><div class="line">18:     // 定时持久化发送进度</div><div class="line">19:     this.timer.scheduleAtFixedRate(new TimerTask() &#123;</div><div class="line">20: </div><div class="line">21:         <span class="doctag">@Override</span></div><div class="line">22:         public void run() &#123;</div><div class="line">23:             try &#123;</div><div class="line">24:                 ScheduleMessageService.this.persist();</div><div class="line">25:             &#125; catch (Exception e) &#123;</div><div class="line">26:                 log.error("scheduleAtFixedRate flush exception", e);</div><div class="line">27:             &#125;</div><div class="line">28:         &#125;</div><div class="line">29:     &#125;, 10000, this.defaultMessageStore.getMessageStoreConfig().getFlushDelayOffsetInterval());</div><div class="line">30: &#125;</div></pre></td></tr></table></figure></p>
<h1>3. 消息重试</h1>
<blockquote>
<p>Consumer 消费消息失败后，要提供一种重试机制，令消息再消费一次。</p>
</blockquote>
<ul>
<li>🦅 <code>Consumer</code> 将消费失败的消息发回 <code>Broker</code>，进入<strong>延迟消息队列</strong>。即，消费失败的消息，不会立即消费。</li>
</ul>
<p>核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="comment">// ⬇️⬇️⬇️【SendMessageProcessor.java】</span></div><div class="line"> <span class="number">2</span>: <span class="comment">/**</span></div><div class="line"> 3:  * 消费者发回消息</div><div class="line"> 4:  *</div><div class="line"> 5:  * <span class="doctag">@param</span> ctx ctx</div><div class="line"> 6:  * <span class="doctag">@param</span> request 请求</div><div class="line"> 7:  * <span class="doctag">@return</span> 响应</div><div class="line"> 8:  * <span class="doctag">@throws</span> RemotingCommandException 当远程调用异常</div><div class="line"> 9:  */</div><div class="line"><span class="number">10</span>: <span class="function"><span class="keyword">private</span> RemotingCommand <span class="title">consumerSendMsgBack</span><span class="params">(<span class="keyword">final</span> ChannelHandlerContext ctx, <span class="keyword">final</span> RemotingCommand request)</span></span></div><div class="line">11:     <span class="keyword">throws</span> RemotingCommandException &#123;</div><div class="line"><span class="number">12</span>:     <span class="comment">// ....(省略代码)</span></div><div class="line"><span class="number">13</span>:     <span class="comment">// 处理 delayLevel（独有）。</span></div><div class="line"><span class="number">14</span>:     <span class="keyword">int</span> delayLevel = requestHeader.getDelayLevel();</div><div class="line"><span class="number">15</span>:     <span class="keyword">int</span> maxReconsumeTimes = subscriptionGroupConfig.getRetryMaxTimes();</div><div class="line"><span class="number">16</span>:     <span class="keyword">if</span> (request.getVersion() &gt;= MQVersion.Version.V3_4_9.ordinal()) &#123;</div><div class="line"><span class="number">17</span>:         maxReconsumeTimes = requestHeader.getMaxReconsumeTimes();</div><div class="line"><span class="number">18</span>:     &#125;</div><div class="line"><span class="number">19</span>:     <span class="keyword">if</span> (msgExt.getReconsumeTimes() &gt;= maxReconsumeTimes<span class="comment">//</span></div><div class="line"><span class="number">20</span>:     <span class="comment">// ....(省略代码)</span></div><div class="line"><span class="number">21</span>:     &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">22</span>:         <span class="keyword">if</span> (<span class="number">0</span> == delayLevel) &#123;</div><div class="line"><span class="number">23</span>:             delayLevel = <span class="number">3</span> + msgExt.getReconsumeTimes();</div><div class="line"><span class="number">24</span>:         &#125;</div><div class="line"><span class="number">25</span>:         msgExt.setDelayTimeLevel(delayLevel);</div><div class="line"><span class="number">26</span>:     &#125;</div><div class="line"><span class="number">27</span>: </div><div class="line"><span class="number">28</span>:     <span class="comment">// ....(省略代码)</span></div><div class="line"><span class="number">29</span>:     <span class="keyword">return</span> response;</div><div class="line"><span class="number">30</span>: &#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://www.yunai.me/images/common/wechat_mp_2017_07_31.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;🙂🙂🙂关注**微信公众号：【芋艿的后端小屋】**有福利：&lt;/p&gt;
&lt;ol
    
    </summary>
    
      <category term="RocketMQ" scheme="http://www.yunai.me/categories/RocketMQ/"/>
    
    
  </entry>
  
</feed>
