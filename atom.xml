<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>芋艿V的博客</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.yunai.me/"/>
  <updated>2017-07-28T11:59:25.000Z</updated>
  <id>http://www.yunai.me/</id>
  
  <author>
    <name>王文斌</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【推荐阅读】Sharding-JDBC 源码分析 —— SQL 解析（二）之SQL解析</title>
    <link href="http://www.yunai.me/Sharding-JDBC/sql-parse-2/"/>
    <id>http://www.yunai.me/Sharding-JDBC/sql-parse-2/</id>
    <published>2017-07-25T16:00:00.000Z</published>
    <updated>2017-07-28T11:59:25.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://www.yunai.me/images/common/wechat_mp.jpeg" alt=""></p>
<blockquote>
<p>🙂🙂🙂关注<strong>微信公众号：<a href="http://www.yunai.me/images/common/wechat_mp.jpeg">【芋艿的后端小屋】</a></strong>有福利：  </p>
<ol>
<li>RocketMQ / MyCAT / Sharding-JDBC <strong>所有</strong>源码分析文章列表  </li>
<li>RocketMQ / MyCAT / Sharding-JDBC <strong>中文注释源码 GitHub 地址</strong>  </li>
<li>您对于源码的疑问每条留言<strong>都</strong>将得到<strong>认真</strong>回复。<strong>甚至不知道如何读源码也可以请教噢</strong>。  </li>
<li><strong>新的</strong>源码解析文章<strong>实时</strong>收到通知。<strong>每周更新一篇左右</strong>。  </li>
<li><strong>认真的</strong>源码交流微信群。</li>
</ol>
</blockquote>
<hr>
<ul>
<li><a href="#">1. 概述</a></li>
<li><a href="#">2. SQLParsingEngine</a></li>
<li><a href="#">3. SQLParser SQL解析器</a><ul>
<li><a href="#">3.1 AbstractParser</a></li>
<li><a href="#">3.2 SQLParser</a><ul>
<li><a href="#">3.2.1 #parseExpression() 和 SQLExpression</a></li>
<li><a href="#">3.2.2 #parseAlias()</a></li>
<li><a href="#">3.2.3 #parseSingleTable()</a></li>
<li><a href="#">3.2.4 #skipJoin()</a></li>
<li><a href="#">3.2.5 #parseWhere()</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#">4. StatementParser SQL语句解析器</a><ul>
<li><a href="#">4.1 StatementParser</a></li>
<li><a href="#">4.2 Statement</a></li>
</ul>
</li>
<li><a href="#">5. 彩蛋</a></li>
</ul>
<hr>
<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><p>上篇文章<a href="http://www.yunai.me/Sharding-JDBC/sql-parse-1/">《词法解析》</a>分享了<strong>词法解析器Lexer</strong>是如何解析 SQL 里的词法。本文分享<strong>SQL解析引擎</strong>是如何解析与理解 SQL的。因为本文建立在<a href="http://www.yunai.me/Sharding-JDBC/sql-parse-1/">《词法解析》</a>之上，你需要阅读它后在开始这段旅程。🙂如果对词法解析不完全理解，请给我的公众号<strong>（<a href="http://www.yunai.me/images/common/wechat_mp.jpeg">芋艿的后端小屋</a>）</strong>留言，我会<strong>逐条认真耐心</strong>回复。</p>
<p>区别于 Lexer，Parser <strong>理解SQL</strong>：</p>
<ul>
<li><strong>提炼分片上下文</strong></li>
<li><strong>标记需要SQL改写的部分</strong></li>
</ul>
<p>Parser 有三个组件：</p>
<ul>
<li>SQLParsingEngine ：SQL 解析引擎</li>
<li>SQLParser ：SQL 解析器</li>
<li>StatementParser ：SQL语句解析器</li>
</ul>
<p>SQLParsingEngine 调用 StatementParser 解析 SQL。<br>StatementParser 调用 SQLParser 解析 SQL 表达式。<br>SQLParser 调用 Lexer 解析 SQL 词法。</p>
<p><img src="http://www.yunai.me/images/Sharding-JDBC/2017_07_26/01.png" alt=""></p>
<p>😜 是不是觉得 SQLParser 和 StatementParser 看起来很接近？下文为你揭开这个答案。</p>
<blockquote>
<p><strong>Sharding-JDBC 正在收集使用公司名单：<a href="https://github.com/dangdangdotcom/sharding-jdbc/issues/234" rel="external nofollow noopener noreferrer" target="_blank">传送门</a>。<br>🙂 你的登记，会让更多人参与和使用 Sharding-JDBC。<a href="https://github.com/dangdangdotcom/sharding-jdbc/issues/234" rel="external nofollow noopener noreferrer" target="_blank">传送门</a><br>Sharding-JDBC 也会因此，能够覆盖更多的业务场景。<a href="https://github.com/dangdangdotcom/sharding-jdbc/issues/234" rel="external nofollow noopener noreferrer" target="_blank">传送门</a><br>登记吧，骚年！<a href="https://github.com/dangdangdotcom/sharding-jdbc/issues/234" rel="external nofollow noopener noreferrer" target="_blank">传送门</a></strong></p>
</blockquote>
<h1 id="2-SQLParsingEngine"><a href="#2-SQLParsingEngine" class="headerlink" title="2. SQLParsingEngine"></a>2. SQLParsingEngine</h1><p>SQLParsingEngine，SQL 解析引擎。其 <code>#parse()</code> 方法作为 SQL 解析入口，本身不带复杂逻辑，通过调用 SQL 对应的 StatementParser 进行 SQL 解析。</p>
<p>核心代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// SQLParsingEngine.java</span></div><div class="line"><span class="function"><span class="keyword">public</span> SQLStatement <span class="title">parse</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="comment">// 获取 SQL解析器</span></div><div class="line">   SQLParser sqlParser = getSQLParser();</div><div class="line">   <span class="comment">//</span></div><div class="line">   sqlParser.skipIfEqual(Symbol.SEMI); <span class="comment">// 跳过 ";"</span></div><div class="line">   <span class="keyword">if</span> (sqlParser.equalAny(DefaultKeyword.WITH)) &#123; <span class="comment">// WITH Syntax</span></div><div class="line">       skipWith(sqlParser);</div><div class="line">   &#125;</div><div class="line">   <span class="comment">// 获取对应 SQL语句解析器 解析SQL</span></div><div class="line">   <span class="keyword">if</span> (sqlParser.equalAny(DefaultKeyword.SELECT)) &#123;</div><div class="line">       <span class="keyword">return</span> SelectParserFactory.newInstance(sqlParser).parse();</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">if</span> (sqlParser.equalAny(DefaultKeyword.INSERT)) &#123;</div><div class="line">       <span class="keyword">return</span> InsertParserFactory.newInstance(shardingRule, sqlParser).parse();</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">if</span> (sqlParser.equalAny(DefaultKeyword.UPDATE)) &#123;</div><div class="line">       <span class="keyword">return</span> UpdateParserFactory.newInstance(sqlParser).parse();</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">if</span> (sqlParser.equalAny(DefaultKeyword.DELETE)) &#123;</div><div class="line">       <span class="keyword">return</span> DeleteParserFactory.newInstance(sqlParser).parse();</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">throw</span> <span class="keyword">new</span> SQLParsingUnsupportedException(sqlParser.getLexer().getCurrentToken().getType());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="3-SQLParser-SQL解析器"><a href="#3-SQLParser-SQL解析器" class="headerlink" title="3. SQLParser SQL解析器"></a>3. SQLParser SQL解析器</h1><p>SQLParser，SQL 解析器。和词法解析器 Lexer 一样，不同数据库有不同的实现。</p>
<p>类图如下（<strong>包含所有属性和方法</strong>）（<strong><a href="http://www.yunai.me/images/Sharding-JDBC/2017_07_26/02.png">放大图片</a></strong>）：</p>
<p><img src="http://www.yunai.me/images/Sharding-JDBC/2017_07_26/02.png" alt=""></p>
<h2 id="3-1-AbstractParser"><a href="#3-1-AbstractParser" class="headerlink" title="3.1 AbstractParser"></a>3.1 AbstractParser</h2><p>AbstractParser，SQLParser 的抽象父类，对 Lexer 简单封装。例如：</p>
<ul>
<li><code>#skipIfEqual()</code>：判断当前词法标记类型是否与其中一个传入值相等</li>
<li><code>#equalAny()</code>：判断当前词法标记类型是否与其中一个传入值相等</li>
</ul>
<p><em><strong>这里有一点我们需要注意，SQLParser 并不是等 Lexer 解析完词法( Token )，再根据词法去理解 SQL。而是，在理解 SQL 的过程中，调用 Lexer 进行分词。</strong></em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// SQLParsingEngine.java#parse()片段</span></div><div class="line"><span class="keyword">if</span> (sqlParser.equalAny(DefaultKeyword.SELECT)) &#123;</div><div class="line">    <span class="keyword">return</span> SelectParserFactory.newInstance(sqlParser).parse();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// AbstractParser.java</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equalAny</span><span class="params">(<span class="keyword">final</span> TokenType... tokenTypes)</span> </span>&#123;</div><div class="line">   <span class="keyword">for</span> (TokenType each : tokenTypes) &#123;</div><div class="line">       <span class="keyword">if</span> (each == lexer.getCurrentToken().getType()) &#123;</div><div class="line">           <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>↑↑↑ 判断当前<strong>词法</strong>是否为 SELECT。实际 AbstractParser 只知道当前词法，并<strong>不知道</strong>后面还有哪些词法，也<strong>不知道</strong>之前有哪些词法。</li>
</ul>
<p>我们来看 AbstractParser 里比较复杂的方法 <code>#skipParentheses()</code> 帮助大家再理解下。请认真看代码注释噢。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// AbstractParser.java</span></div><div class="line"><span class="comment">/**</span></div><div class="line">* 跳过小括号内所有的词法标记.</div><div class="line">*</div><div class="line">* <span class="doctag">@return</span> 小括号内所有的词法标记</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">skipParentheses</span><span class="params">()</span> </span>&#123;</div><div class="line">   StringBuilder result = <span class="keyword">new</span> StringBuilder(<span class="string">""</span>);</div><div class="line">   <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">   <span class="keyword">if</span> (Symbol.LEFT_PAREN == getLexer().getCurrentToken().getType()) &#123;</div><div class="line">       <span class="keyword">final</span> <span class="keyword">int</span> beginPosition = getLexer().getCurrentToken().getEndPosition();</div><div class="line">       result.append(Symbol.LEFT_PAREN.getLiterals());</div><div class="line">       getLexer().nextToken();</div><div class="line">       <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">           <span class="keyword">if</span> (equalAny(Symbol.QUESTION)) &#123;</div><div class="line">               increaseParametersIndex();</div><div class="line">           &#125;</div><div class="line">           <span class="comment">// 到达结尾 或者 匹配合适数的)右括号</span></div><div class="line">           <span class="keyword">if</span> (Assist.END == getLexer().getCurrentToken().getType() || (Symbol.RIGHT_PAREN == getLexer().getCurrentToken().getType() &amp;&amp; <span class="number">0</span> == count)) &#123;</div><div class="line">               <span class="keyword">break</span>;</div><div class="line">           &#125;</div><div class="line">           <span class="comment">// 处理里面有多个括号的情况，例如：SELECT COUNT(DISTINCT(order_id) FROM t_order</span></div><div class="line">           <span class="keyword">if</span> (Symbol.LEFT_PAREN == getLexer().getCurrentToken().getType()) &#123;</div><div class="line">               count++;</div><div class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Symbol.RIGHT_PAREN == getLexer().getCurrentToken().getType()) &#123;</div><div class="line">               count--;</div><div class="line">           &#125;</div><div class="line">           <span class="comment">// 下一个词法</span></div><div class="line">           getLexer().nextToken();</div><div class="line">       &#125;</div><div class="line">       <span class="comment">// 获得括号内的内容</span></div><div class="line">       result.append(getLexer().getInput().substring(beginPosition, getLexer().getCurrentToken().getEndPosition()));</div><div class="line">       <span class="comment">// 下一个词法</span></div><div class="line">       getLexer().nextToken();</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> result.toString();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个类其它方法很重要，逻辑相对简单，我们就不占用篇幅了。大家一定要看哟，后面调用非常非常多。<a href="https://github.com/dangdangdotcom/sharding-jdbc/blob/master/sharding-jdbc-core/src/main/java/com/dangdang/ddframe/rdb/sharding/parsing/parser/AbstractParser.java" rel="external nofollow noopener noreferrer" target="_blank">AbstractParser.java 传送门</a>。👼也可以关注我的公众号<strong>（<a href="http://www.yunai.me/images/common/wechat_mp.jpeg">芋艿的后端小屋</a>）</strong>发送关键字【sjdbc】获取<strong>增加方法内注释的项目地址</strong>。</p>
<h2 id="3-2-SQLParser"><a href="#3-2-SQLParser" class="headerlink" title="3.2 SQLParser"></a>3.2 SQLParser</h2><p>SQLParser，SQL 解析器，<strong>主要提供只考虑 SQL 块的解析方法，<em>不考虑 SQL 上下文</em></strong>。下文即将提到的 StatementParser 将 SQL 拆成对应的<strong>块</strong>，调用 SQLParser 进行解析。🤓 这么说，可能会有些抽象，我们下面来一起看。</p>
<p>SQLParser 看起来方法特别多，合并下一共 5 种：</p>
<table>
<thead>
<tr>
<th style="text-align:left">方法</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">#parseExpression()</td>
<td style="text-align:left">解析表达式</td>
</tr>
<tr>
<td style="text-align:left">#parseAlias()</td>
<td style="text-align:left">解析别名</td>
</tr>
<tr>
<td style="text-align:left">#parseSingleTable()</td>
<td style="text-align:left">解析单表</td>
</tr>
<tr>
<td style="text-align:left">#skipJoin()</td>
<td style="text-align:left">跳过表关联词法</td>
</tr>
<tr>
<td style="text-align:left">#parseWhere()</td>
<td style="text-align:left">解析查询条件</td>
</tr>
</tbody>
</table>
<p><img src="http://www.yunai.me/images/Sharding-JDBC/2017_07_26/03.png" alt=""></p>
<p>看了这 5 个方法是否有点理解了？SQLParser 不考虑 SQL 是 SELECT / INSERT / UPDATE / DELETE ，它考虑的是，<strong>给我的是 WHERE 处解析查询条件，或是 INSERT INTO 解析单表 等</strong>，提供 SELECT / INSERT / UPDATE / DELETE 需要的 SQL 块公用解析。</p>
<h3 id="3-2-1-parseExpression-和-SQLExpression"><a href="#3-2-1-parseExpression-和-SQLExpression" class="headerlink" title="3.2.1 #parseExpression() 和 SQLExpression"></a>3.2.1 #parseExpression() 和 SQLExpression</h3><p>SQLExpression，SQL表达式接口。目前 6 种实现：</p>
<table>
<thead>
<tr>
<th style="text-align:left">类</th>
<th style="text-align:left">说明</th>
<th style="text-align:left">对应Token</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">SQLIdentifierExpression</td>
<td style="text-align:left">标识表达式</td>
<td style="text-align:left">Literals.IDENTIFIER</td>
</tr>
<tr>
<td style="text-align:left">SQLPropertyExpression</td>
<td style="text-align:left">属性表达式</td>
<td style="text-align:left">无</td>
</tr>
<tr>
<td style="text-align:left">SQLNumberExpression</td>
<td style="text-align:left">数字表达式</td>
<td style="text-align:left">Literals.INT, Literals.HEX</td>
</tr>
<tr>
<td style="text-align:left">SQLPlaceholderExpression</td>
<td style="text-align:left">占位符表达式</td>
<td style="text-align:left">Symbol.QUESTION</td>
</tr>
<tr>
<td style="text-align:left">SQLTextExpression</td>
<td style="text-align:left">字符表达式</td>
<td style="text-align:left">Literals.CHARS</td>
</tr>
<tr>
<td style="text-align:left">SQLIgnoreExpression</td>
<td style="text-align:left">分片中无需关注的SQL表达式</td>
<td style="text-align:left">无</td>
</tr>
</tbody>
</table>
<p><img src="http://www.yunai.me/images/Sharding-JDBC/2017_07_26/04.png" alt=""></p>
<ul>
<li>SQLPropertyExpression 例如：<code>SELECT * FROM t_order o ORDER BY o.order_id</code> 中的 <code>o.order_id</code>。<strong>SQLPropertyExpression 从 SQLIdentifierExpression 进一步判断解析而来。</strong><br> <img src="http://www.yunai.me/images/Sharding-JDBC/2017_07_26/05.png" alt=""> </li>
<li>SQLIgnoreExpression 例如：<code>SELECT * FROM t_order o ORDER BY o.order_id % 2</code> 中的<code>o.order_id % 2</code>。<strong>复合表达式都会解析成 SQLIgnoreExpression。</strong></li>
</ul>
<p>解析 SQLExpression 核心代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// SQLParser.java</span></div><div class="line"><span class="comment">/**</span></div><div class="line">* 解析表达式.</div><div class="line">*</div><div class="line">* <span class="doctag">@return</span> 表达式</div><div class="line">*/</div><div class="line"><span class="comment">// TODO 完善Expression解析的各种场景</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> SQLExpression <span class="title">parseExpression</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="comment">// 解析表达式</span></div><div class="line">   String literals = getLexer().getCurrentToken().getLiterals();</div><div class="line">   <span class="keyword">final</span> SQLExpression expression = getExpression(literals);</div><div class="line">   <span class="comment">// SQLIdentifierExpression 需要特殊处理。考虑自定义函数，表名.属性情况。</span></div><div class="line">   <span class="keyword">if</span> (skipIfEqual(Literals.IDENTIFIER)) &#123;</div><div class="line">       <span class="keyword">if</span> (skipIfEqual(Symbol.DOT)) &#123; <span class="comment">// 例如，ORDER BY o.uid 中的 "o.uid"</span></div><div class="line">           String property = getLexer().getCurrentToken().getLiterals();</div><div class="line">           getLexer().nextToken();</div><div class="line">           <span class="keyword">return</span> skipIfCompositeExpression() ? <span class="keyword">new</span> SQLIgnoreExpression() : <span class="keyword">new</span> SQLPropertyExpression(<span class="keyword">new</span> SQLIdentifierExpression(literals), property);</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">if</span> (equalAny(Symbol.LEFT_PAREN)) &#123; <span class="comment">// 例如，GROUP BY DATE(create_time) 中的 "DATE(create_time)"</span></div><div class="line">           skipParentheses();</div><div class="line">           skipRestCompositeExpression();</div><div class="line">           <span class="keyword">return</span> <span class="keyword">new</span> SQLIgnoreExpression();</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> skipIfCompositeExpression() ? <span class="keyword">new</span> SQLIgnoreExpression() : expression;</div><div class="line">   &#125;</div><div class="line">   getLexer().nextToken();</div><div class="line">   <span class="keyword">return</span> skipIfCompositeExpression() ? <span class="keyword">new</span> SQLIgnoreExpression() : expression;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line">* 获得 词法Token 对应的 SQLExpression</div><div class="line">*</div><div class="line">* <span class="doctag">@param</span> literals 词法字面量标记</div><div class="line">* <span class="doctag">@return</span> SQLExpression</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">private</span> SQLExpression <span class="title">getExpression</span><span class="params">(<span class="keyword">final</span> String literals)</span> </span>&#123;</div><div class="line">   <span class="keyword">if</span> (equalAny(Symbol.QUESTION)) &#123;</div><div class="line">       increaseParametersIndex();</div><div class="line">       <span class="keyword">return</span> <span class="keyword">new</span> SQLPlaceholderExpression(getParametersIndex() - <span class="number">1</span>);</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">if</span> (equalAny(Literals.CHARS)) &#123;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">new</span> SQLTextExpression(literals);</div><div class="line">   &#125;</div><div class="line">   <span class="comment">// TODO 考虑long的情况</span></div><div class="line">   <span class="keyword">if</span> (equalAny(Literals.INT)) &#123;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">new</span> SQLNumberExpression(Integer.parseInt(literals));</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">if</span> (equalAny(Literals.FLOAT)) &#123;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">new</span> SQLNumberExpression(Double.parseDouble(literals));</div><div class="line">   &#125;</div><div class="line">   <span class="comment">// TODO 考虑long的情况</span></div><div class="line">   <span class="keyword">if</span> (equalAny(Literals.HEX)) &#123;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">new</span> SQLNumberExpression(Integer.parseInt(literals, <span class="number">16</span>));</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">if</span> (equalAny(Literals.IDENTIFIER)) &#123;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">new</span> SQLIdentifierExpression(SQLUtil.getExactlyValue(literals));</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> <span class="keyword">new</span> SQLIgnoreExpression();</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line">* 如果是 复合表达式，跳过。</div><div class="line">*</div><div class="line">* <span class="doctag">@return</span> 是否跳过</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">skipIfCompositeExpression</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">if</span> (equalAny(Symbol.PLUS, Symbol.SUB, Symbol.STAR, Symbol.SLASH, Symbol.PERCENT, Symbol.AMP, Symbol.BAR, Symbol.DOUBLE_AMP, Symbol.DOUBLE_BAR, Symbol.CARET, Symbol.DOT, Symbol.LEFT_PAREN)) &#123;</div><div class="line">       skipParentheses();</div><div class="line">       skipRestCompositeExpression();</div><div class="line">       <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line">* 跳过剩余复合表达式</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">skipRestCompositeExpression</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">while</span> (skipIfEqual(Symbol.PLUS, Symbol.SUB, Symbol.STAR, Symbol.SLASH, Symbol.PERCENT, Symbol.AMP, Symbol.BAR, Symbol.DOUBLE_AMP, Symbol.DOUBLE_BAR, Symbol.CARET, Symbol.DOT)) &#123;</div><div class="line">       <span class="keyword">if</span> (equalAny(Symbol.QUESTION)) &#123;</div><div class="line">           increaseParametersIndex();</div><div class="line">       &#125;</div><div class="line">       getLexer().nextToken();</div><div class="line">       skipParentheses();</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>解析了 SQLExpression 有什么用呢？我们会在<a href="http://www.yunai.me/images/common/wechat_mp.jpeg">《查询SQL解析》</a>、<a href="http://www.yunai.me/images/common/wechat_mp.jpeg">《插入SQL解析》</a>、<a href="http://www.yunai.me/images/common/wechat_mp.jpeg">《更新SQL解析》</a>、<a href="http://www.yunai.me/images/common/wechat_mp.jpeg">《删除SQL解析》</a>。留个悬念😈，关注我的公众号<strong>（<a href="http://www.yunai.me/images/common/wechat_mp.jpeg">芋艿的后端小屋</a>）</strong>，<strong>实时收到新文更新通知</strong>。</p>
<h3 id="3-2-2-parseAlias"><a href="#3-2-2-parseAlias" class="headerlink" title="3.2.2 #parseAlias()"></a>3.2.2 #parseAlias()</h3><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 解析别名.不仅仅是字段的别名，也可以是表的别名。</div><div class="line">*</div><div class="line">* <span class="doctag">@return</span> 别名</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> Optional&lt;String&gt; <span class="title">parseAlias</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="comment">// 解析带 AS 情况</span></div><div class="line">   <span class="keyword">if</span> (skipIfEqual(DefaultKeyword.AS)) &#123;</div><div class="line">       <span class="keyword">if</span> (equalAny(Symbol.values())) &#123;</div><div class="line">           <span class="keyword">return</span> Optional.absent();</div><div class="line">       &#125;</div><div class="line">       String result = SQLUtil.getExactlyValue(getLexer().getCurrentToken().getLiterals());</div><div class="line">       getLexer().nextToken();</div><div class="line">       <span class="keyword">return</span> Optional.of(result);</div><div class="line">   &#125;</div><div class="line">   <span class="comment">// 解析别名</span></div><div class="line">   <span class="comment">// TODO 增加哪些数据库识别哪些关键字作为别名的配置</span></div><div class="line">   <span class="keyword">if</span> (equalAny(Literals.IDENTIFIER, Literals.CHARS, DefaultKeyword.USER, DefaultKeyword.END, DefaultKeyword.CASE, DefaultKeyword.KEY, DefaultKeyword.INTERVAL, DefaultKeyword.CONSTRAINT)) &#123;</div><div class="line">       String result = SQLUtil.getExactlyValue(getLexer().getCurrentToken().getLiterals());</div><div class="line">       getLexer().nextToken();</div><div class="line">       <span class="keyword">return</span> Optional.of(result);</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> Optional.absent();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-2-3-parseSingleTable"><a href="#3-2-3-parseSingleTable" class="headerlink" title="3.2.3 #parseSingleTable()"></a>3.2.3 #parseSingleTable()</h3><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 解析单表.</div><div class="line">*</div><div class="line">* <span class="doctag">@param</span> sqlStatement SQL语句对象</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">parseSingleTable</span><span class="params">(<span class="keyword">final</span> SQLStatement sqlStatement)</span> </span>&#123;</div><div class="line">   <span class="keyword">boolean</span> hasParentheses = <span class="keyword">false</span>;</div><div class="line">   <span class="keyword">if</span> (skipIfEqual(Symbol.LEFT_PAREN)) &#123;</div><div class="line">       <span class="keyword">if</span> (equalAny(DefaultKeyword.SELECT)) &#123; <span class="comment">// multiple-update 或者 multiple-delete</span></div><div class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"Cannot support subquery"</span>);</div><div class="line">       &#125;</div><div class="line">       hasParentheses = <span class="keyword">true</span>;</div><div class="line">   &#125;</div><div class="line">   Table table;</div><div class="line">   <span class="keyword">final</span> <span class="keyword">int</span> beginPosition = getLexer().getCurrentToken().getEndPosition() - getLexer().getCurrentToken().getLiterals().length();</div><div class="line">   String literals = getLexer().getCurrentToken().getLiterals();</div><div class="line">   getLexer().nextToken();</div><div class="line">   <span class="keyword">if</span> (skipIfEqual(Symbol.DOT)) &#123;</div><div class="line">       getLexer().nextToken();</div><div class="line">       <span class="keyword">if</span> (hasParentheses) &#123;</div><div class="line">           accept(Symbol.RIGHT_PAREN);</div><div class="line">       &#125;</div><div class="line">       table = <span class="keyword">new</span> Table(SQLUtil.getExactlyValue(literals), parseAlias());</div><div class="line">   &#125; <span class="keyword">else</span> &#123;</div><div class="line">       <span class="keyword">if</span> (hasParentheses) &#123;</div><div class="line">           accept(Symbol.RIGHT_PAREN);</div><div class="line">       &#125;</div><div class="line">       table = <span class="keyword">new</span> Table(SQLUtil.getExactlyValue(literals), parseAlias());</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">if</span> (skipJoin()) &#123; <span class="comment">// multiple-update 或者 multiple-delete</span></div><div class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"Cannot support Multiple-Table."</span>);</div><div class="line">   &#125;</div><div class="line">   sqlStatement.getSqlTokens().add(<span class="keyword">new</span> TableToken(beginPosition, literals));</div><div class="line">   sqlStatement.getTables().add(table);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-2-4-skipJoin"><a href="#3-2-4-skipJoin" class="headerlink" title="3.2.4 #skipJoin()"></a>3.2.4 #skipJoin()</h3><p>跳过表关联词法，支持 <code>SELECT * FROM t_user, t_order WHERE ...</code>, <code>SELECT * FROM t_user JOIN t_order ON ...</code>。下篇<a href="http://www.yunai.me/images/common/wechat_mp.jpeg">《查询SQL解析》</a><strong>解析表</strong>会用到这个方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// SQLParser.java</span></div><div class="line"><span class="comment">/**</span></div><div class="line">* 跳过表关联词法.</div><div class="line">*</div><div class="line">* <span class="doctag">@return</span> 是否表关联.</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">skipJoin</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">if</span> (skipIfEqual(DefaultKeyword.LEFT, DefaultKeyword.RIGHT, DefaultKeyword.FULL)) &#123;</div><div class="line">       skipIfEqual(DefaultKeyword.OUTER);</div><div class="line">       accept(DefaultKeyword.JOIN);</div><div class="line">       <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">   &#125; <span class="keyword">else</span> <span class="keyword">if</span> (skipIfEqual(DefaultKeyword.INNER)) &#123;</div><div class="line">       accept(DefaultKeyword.JOIN);</div><div class="line">       <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">   &#125; <span class="keyword">else</span> <span class="keyword">if</span> (skipIfEqual(DefaultKeyword.JOIN, Symbol.COMMA, DefaultKeyword.STRAIGHT_JOIN)) &#123;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">   &#125; <span class="keyword">else</span> <span class="keyword">if</span> (skipIfEqual(DefaultKeyword.CROSS)) &#123;</div><div class="line">       <span class="keyword">if</span> (skipIfEqual(DefaultKeyword.JOIN, DefaultKeyword.APPLY)) &#123;</div><div class="line">           <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">       &#125;</div><div class="line">   &#125; <span class="keyword">else</span> <span class="keyword">if</span> (skipIfEqual(DefaultKeyword.OUTER)) &#123;</div><div class="line">       <span class="keyword">if</span> (skipIfEqual(DefaultKeyword.APPLY)) &#123;</div><div class="line">           <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-2-5-parseWhere"><a href="#3-2-5-parseWhere" class="headerlink" title="3.2.5 #parseWhere()"></a>3.2.5 #parseWhere()</h3><p>解析 WHERE 查询条件。目前支持 AND 条件，不支持 OR 条件。近期 OR 条件支持的可能性比较低。另外条件这块对括号解析需要继续优化，实际使用请勿写冗余的括号。例如：<code>SELECT * FROM tbl_name1 WHERE ((val1=?) AND (val2=?)) AND val3 =?</code>。</p>
<p>根据不同的运算操作符，分成如下情况：</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>附加条件</th>
<th>方法</th>
</tr>
</thead>
<tbody>
<tr>
<td>=</td>
<td></td>
<td>#parseEqualCondition()</td>
</tr>
<tr>
<td>IN</td>
<td></td>
<td>#parseInCondition()</td>
</tr>
<tr>
<td>BETWEEN</td>
<td></td>
<td>#parseBetweenCondition()</td>
</tr>
<tr>
<td>&lt;, &lt;=, &gt;, &gt;=</td>
<td>Oracle 或 SQLServer 分页</td>
<td>#parseRowNumberCondition()</td>
</tr>
<tr>
<td>&lt;, &lt;=, &gt;, &gt;=</td>
<td></td>
<td>#parseOtherCondition()</td>
</tr>
<tr>
<td>LIKE</td>
<td></td>
<td>parseOtherCondition</td>
</tr>
</tbody>
</table>
<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// SQLParser.java</span></div><div class="line"><span class="comment">/**</span></div><div class="line">* 解析所有查询条件。</div><div class="line">* 目前不支持 OR 条件。</div><div class="line">*</div><div class="line">* <span class="doctag">@param</span> sqlStatement SQL</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseConditions</span><span class="params">(<span class="keyword">final</span> SQLStatement sqlStatement)</span> </span>&#123;</div><div class="line">   <span class="comment">// AND 查询</span></div><div class="line">   <span class="keyword">do</span> &#123;</div><div class="line">       parseComparisonCondition(sqlStatement);</div><div class="line">   &#125; <span class="keyword">while</span> (skipIfEqual(DefaultKeyword.AND));</div><div class="line">   <span class="comment">// 目前不支持 OR 条件</span></div><div class="line">   <span class="keyword">if</span> (equalAny(DefaultKeyword.OR)) &#123;</div><div class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> SQLParsingUnsupportedException(getLexer().getCurrentToken().getType());</div><div class="line">   &#125;</div><div class="line">&#125; </div><div class="line"><span class="comment">// TODO 解析组合expr</span></div><div class="line"><span class="comment">/**</span></div><div class="line">* 解析单个查询条件</div><div class="line">*</div><div class="line">* <span class="doctag">@param</span> sqlStatement SQL</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">parseComparisonCondition</span><span class="params">(<span class="keyword">final</span> SQLStatement sqlStatement)</span> </span>&#123;</div><div class="line">   skipIfEqual(Symbol.LEFT_PAREN);</div><div class="line">   SQLExpression left = parseExpression(sqlStatement);</div><div class="line">   <span class="keyword">if</span> (equalAny(Symbol.EQ)) &#123;</div><div class="line">       parseEqualCondition(sqlStatement, left);</div><div class="line">       skipIfEqual(Symbol.RIGHT_PAREN);</div><div class="line">       <span class="keyword">return</span>;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">if</span> (equalAny(DefaultKeyword.IN)) &#123;</div><div class="line">       parseInCondition(sqlStatement, left);</div><div class="line">       skipIfEqual(Symbol.RIGHT_PAREN);</div><div class="line">       <span class="keyword">return</span>;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">if</span> (equalAny(DefaultKeyword.BETWEEN)) &#123;</div><div class="line">       parseBetweenCondition(sqlStatement, left);</div><div class="line">       skipIfEqual(Symbol.RIGHT_PAREN);</div><div class="line">       <span class="keyword">return</span>;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">if</span> (equalAny(Symbol.LT, Symbol.GT, Symbol.LT_EQ, Symbol.GT_EQ)) &#123;</div><div class="line">       <span class="keyword">if</span> (left <span class="keyword">instanceof</span> SQLIdentifierExpression &amp;&amp; sqlStatement <span class="keyword">instanceof</span> SelectStatement</div><div class="line">               &amp;&amp; isRowNumberCondition((SelectStatement) sqlStatement, ((SQLIdentifierExpression) left).getName())) &#123;</div><div class="line">           parseRowNumberCondition((SelectStatement) sqlStatement);</div><div class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (left <span class="keyword">instanceof</span> SQLPropertyExpression &amp;&amp; sqlStatement <span class="keyword">instanceof</span> SelectStatement</div><div class="line">               &amp;&amp; isRowNumberCondition((SelectStatement) sqlStatement, ((SQLPropertyExpression) left).getName())) &#123;</div><div class="line">           parseRowNumberCondition((SelectStatement) sqlStatement);</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           parseOtherCondition(sqlStatement);</div><div class="line">       &#125;</div><div class="line">   &#125; <span class="keyword">else</span> <span class="keyword">if</span> (equalAny(DefaultKeyword.LIKE)) &#123;</div><div class="line">       parseOtherCondition(sqlStatement);</div><div class="line">   &#125;</div><div class="line">   skipIfEqual(Symbol.RIGHT_PAREN);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>#parseComparisonCondition()</code> 解析到 <code>左SQL表达式(left)</code> 和 运算符，调用相应方法进一步处理。我们选择 <code>#parseEqualCondition()</code> 看下，其他方法有兴趣跳转 <a href="https://github.com/dangdangdotcom/sharding-jdbc/blob/master/sharding-jdbc-core/src/main/java/com/dangdang/ddframe/rdb/sharding/parsing/parser/SQLParser.java" rel="external nofollow noopener noreferrer" target="_blank">SQLParser</a> 查看。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// SQLParser.java</span></div><div class="line"><span class="comment">/**</span></div><div class="line">* 解析 = 条件</div><div class="line">*</div><div class="line">* <span class="doctag">@param</span> sqlStatement SQL</div><div class="line">* <span class="doctag">@param</span> left 左SQLExpression</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseEqualCondition</span><span class="params">(<span class="keyword">final</span> SQLStatement sqlStatement, <span class="keyword">final</span> SQLExpression left)</span> </span>&#123;</div><div class="line">   getLexer().nextToken();</div><div class="line">   SQLExpression right = parseExpression(sqlStatement);</div><div class="line">   <span class="comment">// 添加列</span></div><div class="line">   <span class="comment">// TODO 如果有多表,且找不到column是哪个表的,则不加入condition,以后需要解析binding table</span></div><div class="line">   <span class="keyword">if</span> ((sqlStatement.getTables().isSingleTable() || left <span class="keyword">instanceof</span> SQLPropertyExpression)</div><div class="line">           <span class="comment">// 只有对路由结果有影响的才会添加到 conditions。SQLPropertyExpression 和 SQLIdentifierExpression 无法判断，所以未加入 conditions</span></div><div class="line">           &amp;&amp; (right <span class="keyword">instanceof</span> SQLNumberExpression || right <span class="keyword">instanceof</span> SQLTextExpression || right <span class="keyword">instanceof</span> SQLPlaceholderExpression)) &#123;</div><div class="line">       Optional&lt;Column&gt; column = find(sqlStatement.getTables(), left);</div><div class="line">       <span class="keyword">if</span> (column.isPresent()) &#123;</div><div class="line">           sqlStatement.getConditions().add(<span class="keyword">new</span> Condition(column.get(), right), shardingRule);</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>#parseEqualCondition()</code> 解析到 <code>右SQL表达式(right)</code>，并判断 <code>左右SQL表达式</code> 与路由逻辑是否有影响，如果有，则加入到 Condition。<strong>这个就是 <code>#parseWhere()</code> 的目的：解析 WHERE 查询条件对路由有影响的条件。</strong><a href="http://www.yunai.me/images/common/wechat_mp.jpeg">《路由》</a>相关的逻辑，会单独开文章介绍。这里，我们先留有映像。</p>
<h1 id="4-StatementParser-SQL语句解析器"><a href="#4-StatementParser-SQL语句解析器" class="headerlink" title="4. StatementParser SQL语句解析器"></a>4. StatementParser SQL语句解析器</h1><h2 id="4-1-StatementParser"><a href="#4-1-StatementParser" class="headerlink" title="4.1 StatementParser"></a>4.1 StatementParser</h2><p>StatementParser，SQL语句解析器。每种 SQL，都有相应的 SQL语句解析器实现。不同数据库，继承这些 SQL语句解析器，实现各自 SQL 上的差异。大体结构如下：</p>
<p><img src="http://www.yunai.me/images/Sharding-JDBC/2017_07_26/06.png" alt=""></p>
<p>SQLParsingEngine 根据不同 SQL 调用对应工厂创建 StatementParser。核心代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">SelectParserFactory</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 创建Select语句解析器.</div><div class="line">     * </div><div class="line">     * <span class="doctag">@param</span> sqlParser SQL解析器</div><div class="line">     * <span class="doctag">@return</span> Select语句解析器</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AbstractSelectParser <span class="title">newInstance</span><span class="params">(<span class="keyword">final</span> SQLParser sqlParser)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (sqlParser <span class="keyword">instanceof</span> MySQLParser) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> MySQLSelectParser(sqlParser);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (sqlParser <span class="keyword">instanceof</span> OracleParser) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> OracleSelectParser(sqlParser);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (sqlParser <span class="keyword">instanceof</span> SQLServerParser) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SQLServerSelectParser(sqlParser);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (sqlParser <span class="keyword">instanceof</span> PostgreSQLParser) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> PostgreSQLSelectParser(sqlParser);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(String.format(<span class="string">"Cannot support sqlParser class [%s]."</span>, sqlParser.getClass()));</div><div class="line">    &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>调用 <code>StatementParser#parse()</code> 实现方法，对 SQL 进行解析。具体解析过程，另开文章分享。</p>
<h2 id="4-2-Statement"><a href="#4-2-Statement" class="headerlink" title="4.2 Statement"></a>4.2 Statement</h2><p>不同 SQL 解析后，返回对应的 SQL 结果,即 Statement。大体结构如下：</p>
<p><img src="http://www.yunai.me/images/Sharding-JDBC/2017_07_26/07.png" alt=""></p>
<p>Statement 包含两部分信息：</p>
<ul>
<li><p>分片上下文：用于 SQL 路由。</p>
<p>  <img src="http://www.yunai.me/images/Sharding-JDBC/2017_07_26/08.png" alt=""></p>
</li>
<li><p>SQL 标记对象：用于 SQL 改写。</p>
<p> <img src="http://www.yunai.me/images/Sharding-JDBC/2017_07_26/09.png" alt=""></p>
</li>
</ul>
<p>我们会在后文增删改查SQL解析的过程中分享到它们。</p>
<h2 id="4-3-预告"><a href="#4-3-预告" class="headerlink" title="4.3 预告"></a>4.3 预告</h2><table>
<thead>
<tr>
<th>Parser</th>
<th>Statement</th>
<th>分享文章</th>
</tr>
</thead>
<tbody>
<tr>
<td>SelectStatementParser</td>
<td>SelectStatement + AbstractSQLStatement</td>
<td><a href="http://www.yunai.me/images/common/wechat_mp.jpeg">《查询SQL解析》</a></td>
</tr>
<tr>
<td>InsertStatementParser</td>
<td>InsertStatement</td>
<td><a href="http://www.yunai.me/images/common/wechat_mp.jpeg">《插入SQL解析》</a></td>
</tr>
<tr>
<td>UpdateStatementParser</td>
<td>UpdateStatement</td>
<td><a href="http://www.yunai.me/images/common/wechat_mp.jpeg">《更新SQL解析》</a></td>
</tr>
<tr>
<td>DeleteStatementParser</td>
<td>DeleteStatement</td>
<td><a href="http://www.yunai.me/images/common/wechat_mp.jpeg">《删除SQL解析》</a></td>
</tr>
</tbody>
</table>
<h1 id="5-彩蛋"><a href="#5-彩蛋" class="headerlink" title="5. 彩蛋"></a>5. 彩蛋</h1><p>老铁，是不是有丢丢长？<br>如果有地方错误，烦请指出🙂。<br>如果有地方不是很理解，可以加我的公众号<strong>（<a href="http://www.yunai.me/images/common/wechat_mp.jpeg">芋艿的后端小屋</a>）</strong>留言，我会<strong>逐条认真耐心</strong>回复。<br>如果觉得还凑合，劳驾分享朋友圈或者基佬。</p>
<p><a href="http://www.yunai.me/images/common/wechat_mp.jpeg">《查询SQL解析》</a>已经写了一半，预计很快…</p>
<p><img src="http://www.yunai.me/images/common/wechat_mp.jpeg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://www.yunai.me/images/common/wechat_mp.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;🙂🙂🙂关注&lt;strong&gt;微信公众号：&lt;a href=&quot;http://www.yunai.m
    
    </summary>
    
      <category term="Sharding-JDBC" scheme="http://www.yunai.me/categories/Sharding-JDBC/"/>
    
    
  </entry>
  
  <entry>
    <title>Sharding-JDBC 源码分析 —— SQL 解析（一）之词法解析</title>
    <link href="http://www.yunai.me/Sharding-JDBC/sql-parse-1/"/>
    <id>http://www.yunai.me/Sharding-JDBC/sql-parse-1/</id>
    <published>2017-07-22T16:00:00.000Z</published>
    <updated>2017-07-27T16:58:03.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://www.yunai.me/images/common/wechat_mp.jpeg" alt=""></p>
<blockquote>
<p>🙂🙂🙂关注**微信公众号：【芋艿的后端小屋】**有福利：</p>
<ol>
<li>RocketMQ / MyCAT / Sharding-JDBC <strong>所有</strong>源码分析文章列表</li>
<li>RocketMQ / MyCAT / Sharding-JDBC <strong>中文注释源码 GitHub 地址</strong></li>
<li>您对于源码的疑问每条留言<strong>都</strong>将得到<strong>认真</strong>回复。<strong>甚至不知道如何读源码也可以请教噢</strong>。</li>
<li><strong>新的</strong>源码解析文章<strong>实时</strong>收到通知。<strong>每周更新一篇左右</strong>。</li>
<li><strong>认真的</strong>源码交流微信群。</li>
</ol>
</blockquote>
<hr>
<ul>
<li><a href="#">1. 概述</a></li>
<li><a href="#">2. Lexer 词法解析器</a></li>
<li><a href="#">3. Token 词法标记</a>
<ul>
<li><a href="#">3.1 DefaultKeyword 词法关键词</a></li>
<li><a href="#">3.2 Literals 词法字面量标记</a>
<ul>
<li><a href="#">3.2.1 Literals.IDENTIFIER 词法关键词</a></li>
<li><a href="#">3.2.2 Literals.VARIABLE 变量</a></li>
<li><a href="#">3.2.3 Literals.CHARS 字符串</a></li>
<li><a href="#">3.2.4 Literals.HEX 十六进制</a></li>
<li><a href="#">3.2.5 Literals.INT 整数</a></li>
<li><a href="#">3.2.6 Literals.FLOAT 浮点数</a></li>
</ul>
</li>
<li><a href="#">3.3 Symbol 词法符号标记</a></li>
<li><a href="#">3.4 Assist 词法辅助标记</a></li>
</ul>
</li>
<li><a href="#">4. 彩蛋</a></li>
</ul>
<hr>
<h1>1. 概述</h1>
<p><strong>SQL 解析引擎</strong>，数据库中间件必备的功能和流程。Sharding-JDBC 在 <code>1.5.0.M1</code> 正式发布时，将 SQL 解析引擎从 Druid 替换成了自研的。<strong>新引擎仅解析分片上下文，对于 SQL 采用&quot;半理解&quot;理念，进一步提升性能和兼容性，同时降低了代码复杂度</strong>（不理解没关系，我们后续会更新文章解释该优点）。 国内另一款数据库中间件 MyCAT SQL 解析引擎也是 Druid，目前也在开发属于自己的 SQL 解析引擎。</p>
<p>可能有同学看到<strong>SQL 解析</strong>会被吓到，请淡定，耐心往下看。《SQL 解析》内容我们会分成 5 篇相对简短的文章，让大家能够相对轻松愉快的去理解：</p>
<ol>
<li>词法解析</li>
<li>插入 SQL 解析</li>
<li>查询 SQL 解析</li>
<li>更新 SQL 解析</li>
<li>删除 SQL 解析</li>
</ol>
<hr>
<p><img src="http://www.yunai.me/images/Sharding-JDBC/2017_07_23/01.png" alt=""></p>
<p><strong>SQL 解析引擎</strong>在 <code>parsing</code> 包下，如上图所见包含两大组件：</p>
<ol>
<li>Lexer：<strong>词法</strong>解析器。</li>
<li>Parser：<strong>SQL</strong>解析器。</li>
</ol>
<p>两者都是解析器，区别在于 Lexer 只做词法的解析，不关注上下文，将字符串拆解成 N 个词法。而 Parser 在 Lexer 的基础上，还需要理解 SQL 。打个比方：</p>
<p><figure class="highlight sql"><table><tr><td class="code"><pre><div class="line">SQL ：<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t_user  </div><div class="line">Lexer ：[<span class="keyword">SELECT</span>] [ * ] [<span class="keyword">FROM</span>] [t_user]  </div><div class="line">Parser ：这是一条 [<span class="keyword">SELECT</span>] 查询表为 [t_user] ，并且返回 [ * ] 所有字段的 <span class="keyword">SQL</span>。</div></pre></td></tr></table></figure></p>
<p>🙂不完全懂？没关系，本文的主角是 Lexer，我们通过源码一点一点理解。一共 1400 行左右代码左右，还包含注释等等，实际更少噢。</p>
<h1>2. Lexer 词法解析器</h1>
<p><strong>Lexer 原理</strong>：<strong>顺序顺序顺序</strong> 解析 SQL，将字符串拆解成 N 个词法。</p>
<p>核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// Lexer.java</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Lexer</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 输出字符串</div><div class="line">     * 比如：SQL</div><div class="line">     */</div><div class="line">    <span class="meta">@Getter</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String input;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 词法标记字典</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Dictionary dictionary;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 解析到 SQL 的 offset</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> offset;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 当前 词法标记</div><div class="line">     */</div><div class="line">    <span class="meta">@Getter</span></div><div class="line">    <span class="keyword">private</span> Token currentToken;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 分析下一个词法标记.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@see</span> #currentToken</div><div class="line">     * <span class="doctag">@see</span> #offset</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">nextToken</span><span class="params">()</span> </span>&#123;</div><div class="line">        skipIgnoredToken();</div><div class="line">        <span class="keyword">if</span> (isVariableBegin()) &#123; <span class="comment">// 变量</span></div><div class="line">            currentToken = <span class="keyword">new</span> Tokenizer(input, dictionary, offset).scanVariable();</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isNCharBegin()) &#123; <span class="comment">// N\</span></div><div class="line">            currentToken = <span class="keyword">new</span> Tokenizer(input, dictionary, ++offset).scanChars();</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isIdentifierBegin()) &#123; <span class="comment">// Keyword + Literals.IDENTIFIER</span></div><div class="line">            currentToken = <span class="keyword">new</span> Tokenizer(input, dictionary, offset).scanIdentifier();</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isHexDecimalBegin()) &#123; <span class="comment">// 十六进制</span></div><div class="line">            currentToken = <span class="keyword">new</span> Tokenizer(input, dictionary, offset).scanHexDecimal();</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isNumberBegin()) &#123; <span class="comment">// 数字（整数+浮点数）</span></div><div class="line">            currentToken = <span class="keyword">new</span> Tokenizer(input, dictionary, offset).scanNumber();</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isSymbolBegin()) &#123; <span class="comment">// 符号</span></div><div class="line">            currentToken = <span class="keyword">new</span> Tokenizer(input, dictionary, offset).scanSymbol();</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isCharsBegin()) &#123; <span class="comment">// 字符串，例如："abc"</span></div><div class="line">            currentToken = <span class="keyword">new</span> Tokenizer(input, dictionary, offset).scanChars();</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isEnd()) &#123; <span class="comment">// 结束</span></div><div class="line">            currentToken = <span class="keyword">new</span> Token(Assist.END, <span class="string">""</span>, offset);</div><div class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 分析错误，无符合条件的词法标记</span></div><div class="line">            currentToken = <span class="keyword">new</span> Token(Assist.ERROR, <span class="string">""</span>, offset);</div><div class="line">        &#125;</div><div class="line">        offset = currentToken.getEndPosition();</div><div class="line">        <span class="comment">// System.out.println("| " + currentToken.getLiterals() + " | " + currentToken.getType() + " | " + currentToken.getEndPosition() + " |");</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 跳过忽略的词法标记</div><div class="line">     * 1. 空格</div><div class="line">     * 2. SQL Hint</div><div class="line">     * 3. SQL 注释</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">skipIgnoredToken</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// 空格</span></div><div class="line">        offset = <span class="keyword">new</span> Tokenizer(input, dictionary, offset).skipWhitespace();</div><div class="line">        <span class="comment">// SQL Hint</span></div><div class="line">        <span class="keyword">while</span> (isHintBegin()) &#123;</div><div class="line">            offset = <span class="keyword">new</span> Tokenizer(input, dictionary, offset).skipHint();</div><div class="line">            offset = <span class="keyword">new</span> Tokenizer(input, dictionary, offset).skipWhitespace();</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// SQL 注释</span></div><div class="line">        <span class="keyword">while</span> (isCommentBegin()) &#123;</div><div class="line">            offset = <span class="keyword">new</span> Tokenizer(input, dictionary, offset).skipComment();</div><div class="line">            offset = <span class="keyword">new</span> Tokenizer(input, dictionary, offset).skipWhitespace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>通过 <code>#nextToken()</code> 方法，不断解析出 Token(<em>词法标记</em>)。我们来执行一次，看看 SQL 会被拆解成哪些 Token。</p>
<p><figure class="highlight sql"><table><tr><td class="code"><pre><div class="line">SQL ：<span class="keyword">SELECT</span> i.* <span class="keyword">FROM</span> t_order o <span class="keyword">JOIN</span> t_order_item i <span class="keyword">ON</span> o.order_id=i.order_id <span class="keyword">WHERE</span> o.user_id=? <span class="keyword">AND</span> o.order_id=?</div></pre></td></tr></table></figure></p>
<table>
<thead>
<tr>
<th>literals</th>
<th>TokenType类</th>
<th>TokenType值</th>
<th>endPosition</th>
</tr>
</thead>
<tbody>
<tr>
<td>SELECT</td>
<td>DefaultKeyword</td>
<td>SELECT</td>
<td>6</td>
</tr>
<tr>
<td>i</td>
<td>Literals</td>
<td>IDENTIFIER</td>
<td>8</td>
</tr>
<tr>
<td>.</td>
<td>Symbol</td>
<td>DOT</td>
<td>9</td>
</tr>
<tr>
<td>*</td>
<td>Symbol</td>
<td>STAR</td>
<td>10</td>
</tr>
<tr>
<td>FROM</td>
<td>DefaultKeyword</td>
<td>FROM</td>
<td>15</td>
</tr>
<tr>
<td>t_order</td>
<td>Literals</td>
<td>IDENTIFIER</td>
<td>23</td>
</tr>
<tr>
<td>o</td>
<td>Literals</td>
<td>IDENTIFIER</td>
<td>25</td>
</tr>
<tr>
<td>JOIN</td>
<td>DefaultKeyword</td>
<td>JOIN</td>
<td>30</td>
</tr>
<tr>
<td>t_order_item</td>
<td>Literals</td>
<td>IDENTIFIER</td>
<td>43</td>
</tr>
<tr>
<td>i</td>
<td>Literals</td>
<td>IDENTIFIER</td>
<td>45</td>
</tr>
<tr>
<td>ON</td>
<td>DefaultKeyword</td>
<td>ON</td>
<td>48</td>
</tr>
<tr>
<td>o</td>
<td>Literals</td>
<td>IDENTIFIER</td>
<td>50</td>
</tr>
<tr>
<td>.</td>
<td>Symbol</td>
<td>DOT</td>
<td>51</td>
</tr>
<tr>
<td>order_id</td>
<td>Literals</td>
<td>IDENTIFIER</td>
<td>59</td>
</tr>
<tr>
<td>=</td>
<td>Symbol</td>
<td>EQ</td>
<td>60</td>
</tr>
<tr>
<td>i</td>
<td>Literals</td>
<td>IDENTIFIER</td>
<td>61</td>
</tr>
<tr>
<td>.</td>
<td>Symbol</td>
<td>DOT</td>
<td>62</td>
</tr>
<tr>
<td>order_id</td>
<td>Literals</td>
<td>IDENTIFIER</td>
<td>70</td>
</tr>
<tr>
<td>WHERE</td>
<td>DefaultKeyword</td>
<td>WHERE</td>
<td>76</td>
</tr>
<tr>
<td>o</td>
<td>Literals</td>
<td>IDENTIFIER</td>
<td>78</td>
</tr>
<tr>
<td>.</td>
<td>Symbol</td>
<td>DOT</td>
<td>79</td>
</tr>
<tr>
<td>user_id</td>
<td>Literals</td>
<td>IDENTIFIER</td>
<td>86</td>
</tr>
<tr>
<td>=</td>
<td>Symbol</td>
<td>EQ</td>
<td>87</td>
</tr>
<tr>
<td>?</td>
<td>Symbol</td>
<td>QUESTION</td>
<td>88</td>
</tr>
<tr>
<td>AND</td>
<td>DefaultKeyword</td>
<td>AND</td>
<td>92</td>
</tr>
<tr>
<td>o</td>
<td>Literals</td>
<td>IDENTIFIER</td>
<td>94</td>
</tr>
<tr>
<td>.</td>
<td>Symbol</td>
<td>DOT</td>
<td>95</td>
</tr>
<tr>
<td>order_id</td>
<td>Literals</td>
<td>IDENTIFIER</td>
<td>103</td>
</tr>
<tr>
<td>=</td>
<td>Symbol</td>
<td>EQ</td>
<td>104</td>
</tr>
<tr>
<td>?</td>
<td>Symbol</td>
<td>QUESTION</td>
<td>105</td>
</tr>
<tr>
<td></td>
<td>Assist</td>
<td>END</td>
<td>105</td>
</tr>
</tbody>
</table>
<p>眼尖的同学可能看到了 Tokenizer。对的，它是 Lexer 的好基佬，负责<strong>分词</strong>。</p>
<p><em>我们来总结下，<code>Lexer#nextToken()</code> 方法里，使用 <code>#skipIgnoredToken()</code> 方法跳过忽略的 Token，通过 <code>#isXXXX()</code> 方法判断好下一个 Token 的类型后，<strong>交给 Tokenizer 进行分词返回 Token</strong>。‼️此处可以考虑做个优化，不需要每次都 <code>new Tokenizer(...)</code> 出来，一个 Lexer 搭配一个 Tokenizer。</em></p>
<hr>
<p>由于不同数据库遵守 SQL 规范略有不同，所以不同的数据库对应不同的 Lexer。</p>
<p><img src="http://www.yunai.me/images/Sharding-JDBC/2017_07_23/02.png" alt=""></p>
<p>子 Lexer 通过重写方法实现自己独有的 SQL 语法。</p>
<h1>3. Token 词法标记</h1>
<p>上文我们已经看过 Token 的例子，一共有 3 个属性：</p>
<ul>
<li>TokenType type ：词法标记类型</li>
<li>String literals ：词法字面量标记</li>
<li>int endPosition ：<code>literals</code> 在 SQL 里的结束位置</li>
</ul>
<p>TokenType 词法标记类型，一共分成 4 个大类：</p>
<ul>
<li>DefaultKeyword ：词法关键词</li>
<li>Literals ：词法字面量标记</li>
<li>Symbol ：词法符号标记</li>
<li>Assist ：词法辅助标记</li>
</ul>
<p><img src="http://www.yunai.me/images/Sharding-JDBC/2017_07_23/03.png" alt=""></p>
<h2>3.1 DefaultKeyword 词法关键词</h2>
<p><img src="http://www.yunai.me/images/Sharding-JDBC/2017_07_23/04.png" alt=""></p>
<p><strong>不同数据库有自己独有的_词法关键词_，例如 MySQL 熟知的分页 Limit。</strong></p>
<p>我们以 MySQL 举个例子，当创建 MySQLLexer 时，会加载 DefaultKeyword 和 MySQLKeyword（ <em>OracleLexer、PostgreSQLLexer、SQLServerLexer 同 MySQLLexer</em> ）。核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// MySQLLexer.java</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MySQLLexer</span> <span class="keyword">extends</span> <span class="title">Lexer</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 字典</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Dictionary dictionary = <span class="keyword">new</span> Dictionary(MySQLKeyword.values());</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MySQLLexer</span><span class="params">(<span class="keyword">final</span> String input)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(input, dictionary);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Dictionary.java</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Dictionary</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 词法关键词Map</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Keyword&gt; tokens = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">1024</span>);</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dictionary</span><span class="params">(<span class="keyword">final</span> Keyword... dialectKeywords)</span> </span>&#123;</div><div class="line">        fill(dialectKeywords);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 装上默认词法关键词 + 方言词法关键词</div><div class="line">     * 不同的数据库有相同的默认词法关键词，有有不同的方言关键词</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> dialectKeywords 方言词法关键词</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fill</span><span class="params">(<span class="keyword">final</span> Keyword... dialectKeywords)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (DefaultKeyword each : DefaultKeyword.values()) &#123;</div><div class="line">            tokens.put(each.name(), each);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (Keyword each : dialectKeywords) &#123;</div><div class="line">            tokens.put(each.toString(), each);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Keyword 与 Literals.IDENTIFIER 是一起解析的，我们放在 Literals.IDENTIFIER 处一起分析。</p>
<h2>3.2 Literals 词法字面量标记</h2>
<p>Literals 词法字面量标记，一共分成 6 种：</p>
<ul>
<li>IDENTIFIER ：词法关键词</li>
<li>VARIABLE ：变量</li>
<li>CHARS ：字符串</li>
<li>HEX ：十六进制</li>
<li>INT ：整数</li>
<li>FLOAT ：浮点数</li>
</ul>
<h3>3.2.1 Literals.IDENTIFIER 词法关键词</h3>
<p>词法关键词。例如：表名，查询字段 等等。</p>
<p>解析 Literals.IDENTIFIER 与 Keyword 核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// Lexer.java</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isIdentifierBegin</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">return</span> isIdentifierBegin(getCurrentChar(<span class="number">0</span>));</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isIdentifierBegin</span><span class="params">(<span class="keyword">final</span> <span class="keyword">char</span> ch)</span> </span>&#123;</div><div class="line">   <span class="keyword">return</span> CharType.isAlphabet(ch) || <span class="string">'`'</span> == ch || <span class="string">'_'</span> == ch || <span class="string">'$'</span> == ch;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Tokenizer.java</span></div><div class="line"><span class="comment">/**</span></div><div class="line">* 扫描标识符.</div><div class="line">*</div><div class="line">* <span class="doctag">@return</span> 标识符标记</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> Token <span class="title">scanIdentifier</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="comment">// `字段`，例如：SELECT `id` FROM t_user 中的 `id`</span></div><div class="line">   <span class="keyword">if</span> (<span class="string">'`'</span> == charAt(offset)) &#123;</div><div class="line">       <span class="keyword">int</span> length = getLengthUntilTerminatedChar(<span class="string">'`'</span>);</div><div class="line">       <span class="keyword">return</span> <span class="keyword">new</span> Token(Literals.IDENTIFIER, input.substring(offset, offset + length), offset + length);</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">int</span> length = <span class="number">0</span>;</div><div class="line">   <span class="keyword">while</span> (isIdentifierChar(charAt(offset + length))) &#123;</div><div class="line">       length++;</div><div class="line">   &#125;</div><div class="line">   String literals = input.substring(offset, offset + length);</div><div class="line">   <span class="comment">// 处理 order / group 作为表名</span></div><div class="line">   <span class="keyword">if</span> (isAmbiguousIdentifier(literals)) &#123;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">new</span> Token(processAmbiguousIdentifier(offset + length, literals), literals, offset + length);</div><div class="line">   &#125;</div><div class="line">   <span class="comment">// 从 词法关键词 查找是否是 Keyword，如果是，则返回 Keyword，否则返回 Literals.IDENTIFIER</span></div><div class="line">   <span class="keyword">return</span> <span class="keyword">new</span> Token(dictionary.findTokenType(literals, Literals.IDENTIFIER), literals, offset + length);</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line">* 计算到结束字符的长度</div><div class="line">*</div><div class="line">* <span class="doctag">@see</span> #hasEscapeChar(char, int) 处理类似 SELECT a AS `b``c` FROM table。此处连续的 "``" 不是结尾，如果传递的是 "`" 会产生误判，所以加了这个判断</div><div class="line">* <span class="doctag">@param</span> terminatedChar 结束字符</div><div class="line">* <span class="doctag">@return</span> 长度</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getLengthUntilTerminatedChar</span><span class="params">(<span class="keyword">final</span> <span class="keyword">char</span> terminatedChar)</span> </span>&#123;</div><div class="line">   <span class="keyword">int</span> length = <span class="number">1</span>;</div><div class="line">   <span class="keyword">while</span> (terminatedChar != charAt(offset + length) || hasEscapeChar(terminatedChar, offset + length)) &#123;</div><div class="line">       <span class="keyword">if</span> (offset + length &gt;= input.length()) &#123;</div><div class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> UnterminatedCharException(terminatedChar);</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">if</span> (hasEscapeChar(terminatedChar, offset + length)) &#123;</div><div class="line">           length++;</div><div class="line">       &#125;</div><div class="line">       length++;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> length + <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line">* 是否是 Escape 字符</div><div class="line">*</div><div class="line">* <span class="doctag">@param</span> charIdentifier 字符</div><div class="line">* <span class="doctag">@param</span> offset 位置</div><div class="line">* <span class="doctag">@return</span> 是否</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">hasEscapeChar</span><span class="params">(<span class="keyword">final</span> <span class="keyword">char</span> charIdentifier, <span class="keyword">final</span> <span class="keyword">int</span> offset)</span> </span>&#123;</div><div class="line">   <span class="keyword">return</span> charIdentifier == charAt(offset) &amp;&amp; charIdentifier == charAt(offset + <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isIdentifierChar</span><span class="params">(<span class="keyword">final</span> <span class="keyword">char</span> ch)</span> </span>&#123;</div><div class="line">   <span class="keyword">return</span> CharType.isAlphabet(ch) || CharType.isDigital(ch) || <span class="string">'_'</span> == ch || <span class="string">'$'</span> == ch || <span class="string">'#'</span> == ch;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line">* 是否是引起歧义的标识符</div><div class="line">* 例如 "SELECT * FROM group"，此时 "group" 代表的是表名，而非词法关键词</div><div class="line">*</div><div class="line">* <span class="doctag">@param</span> literals 标识符</div><div class="line">* <span class="doctag">@return</span> 是否</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isAmbiguousIdentifier</span><span class="params">(<span class="keyword">final</span> String literals)</span> </span>&#123;</div><div class="line">   <span class="keyword">return</span> DefaultKeyword.ORDER.name().equalsIgnoreCase(literals) || DefaultKeyword.GROUP.name().equalsIgnoreCase(literals);</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line">* 获取引起歧义的标识符对应的词法标记类型</div><div class="line">*</div><div class="line">* <span class="doctag">@param</span> offset 位置</div><div class="line">* <span class="doctag">@param</span> literals 标识符</div><div class="line">* <span class="doctag">@return</span> 词法标记类型</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">private</span> TokenType <span class="title">processAmbiguousIdentifier</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> offset, <span class="keyword">final</span> String literals)</span> </span>&#123;</div><div class="line">   <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">   <span class="keyword">while</span> (CharType.isWhitespace(charAt(offset + i))) &#123;</div><div class="line">       i++;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">if</span> (DefaultKeyword.BY.name().equalsIgnoreCase(String.valueOf(<span class="keyword">new</span> <span class="keyword">char</span>[] &#123;charAt(offset + i), charAt(offset + i + <span class="number">1</span>)&#125;))) &#123;</div><div class="line">       <span class="keyword">return</span> dictionary.findTokenType(literals);</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> Literals.IDENTIFIER;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3>3.2.2 Literals.VARIABLE 变量</h3>
<p>变量。例如：<code>SELECT @@VERSION</code> 。</p>
<p>解析核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// Lexer.java</span></div><div class="line"><span class="comment">/**</span></div><div class="line">* 是否是 变量</div><div class="line">* MySQL 与 SQL Server 支持</div><div class="line">* </div><div class="line">* <span class="doctag">@see</span> Tokenizer#scanVariable()</div><div class="line">* <span class="doctag">@return</span> 是否</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isVariableBegin</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Tokenizer.java</span></div><div class="line"><span class="comment">/**</span></div><div class="line">* 扫描变量.</div><div class="line">* 在 MySQL 里，@代表用户变量；@@代表系统变量。</div><div class="line">* 在 SQLServer 里，有 @@。</div><div class="line">*</div><div class="line">* <span class="doctag">@return</span> 变量标记</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> Token <span class="title">scanVariable</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">int</span> length = <span class="number">1</span>;</div><div class="line">   <span class="keyword">if</span> (<span class="string">'@'</span> == charAt(offset + <span class="number">1</span>)) &#123;</div><div class="line">       length++;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">while</span> (isVariableChar(charAt(offset + length))) &#123;</div><div class="line">       length++;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> <span class="keyword">new</span> Token(Literals.VARIABLE, input.substring(offset, offset + length), offset + length);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3>3.2.3 Literals.CHARS 字符串</h3>
<p>字符串。例如：<code>SELECT &quot;123&quot;</code> 。</p>
<p>解析核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// Lexer.java</span></div><div class="line"><span class="comment">/**</span></div><div class="line">* 是否 N\</div><div class="line">* 目前 SQLServer 独有：在 SQL Server 中處理 Unicode 字串常數時，必需為所有的 Unicode 字串加上前置詞 N</div><div class="line">*</div><div class="line">* <span class="doctag">@see</span> Tokenizer#scanChars()</div><div class="line">* <span class="doctag">@return</span> 是否</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isNCharBegin</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">return</span> isSupportNChars() &amp;&amp; <span class="string">'N'</span> == getCurrentChar(<span class="number">0</span>) &amp;&amp; <span class="string">'\''</span> == getCurrentChar(<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isCharsBegin</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">return</span> <span class="string">'\''</span> == getCurrentChar(<span class="number">0</span>) || <span class="string">'\"'</span> == getCurrentChar(<span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Tokenizer.java</span></div><div class="line"><span class="comment">/**</span></div><div class="line">* 扫描字符串.</div><div class="line">*</div><div class="line">* <span class="doctag">@return</span> 字符串标记</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> Token <span class="title">scanChars</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">return</span> scanChars(charAt(offset));</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">private</span> Token <span class="title">scanChars</span><span class="params">(<span class="keyword">final</span> <span class="keyword">char</span> terminatedChar)</span> </span>&#123;</div><div class="line">   <span class="keyword">int</span> length = getLengthUntilTerminatedChar(terminatedChar);</div><div class="line">   <span class="keyword">return</span> <span class="keyword">new</span> Token(Literals.CHARS, input.substring(offset + <span class="number">1</span>, offset + length - <span class="number">1</span>), offset + length);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3>3.2.4 Literals.HEX 十六进制</h3>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// Lexer.java</span></div><div class="line"><span class="comment">/**</span></div><div class="line">* 是否是 十六进制</div><div class="line">*</div><div class="line">* <span class="doctag">@see</span> Tokenizer#scanHexDecimal()</div><div class="line">* <span class="doctag">@return</span> 是否</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isHexDecimalBegin</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">return</span> <span class="string">'0'</span> == getCurrentChar(<span class="number">0</span>) &amp;&amp; <span class="string">'x'</span> == getCurrentChar(<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Tokenizer.java</span></div><div class="line"><span class="comment">/**</span></div><div class="line">* 扫描十六进制数.</div><div class="line">*</div><div class="line">* <span class="doctag">@return</span> 十六进制数标记</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> Token <span class="title">scanHexDecimal</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">int</span> length = HEX_BEGIN_SYMBOL_LENGTH;</div><div class="line">   <span class="comment">// 负数</span></div><div class="line">   <span class="keyword">if</span> (<span class="string">'-'</span> == charAt(offset + length)) &#123;</div><div class="line">       length++;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">while</span> (isHex(charAt(offset + length))) &#123;</div><div class="line">       length++;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> <span class="keyword">new</span> Token(Literals.HEX, input.substring(offset, offset + length), offset + length);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3>3.2.5 Literals.INT 整数</h3>
<p>整数。例如：<code>SELECT * FROM t_user WHERE id = 1</code>。</p>
<p>Literals.INT 与 Literals.FLOAT 是一起解析的，我们放在 Literals.FLOAT 处一起分析。</p>
<h3>3.2.6 Literals.FLOAT 浮点数</h3>
<p>浮点数。例如：<code>SELECT * FROM t_user WHERE id = 1.0</code>。
浮点数包含几种：&quot;1.0&quot;，&quot;1.0F&quot;，&quot;7.823E5&quot;（科学计数法）。</p>
<p>解析核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// Lexer.java</span></div><div class="line"><span class="comment">/**</span></div><div class="line">* 是否是 数字</div><div class="line">* '-' 需要特殊处理。".2" 被处理成省略0的小数，"-.2" 不能被处理成省略的小数，否则会出问题。</div><div class="line">* 例如说，"SELECT a-.2" 处理的结果是 "SELECT" / "a" / "-" / ".2"</div><div class="line">*</div><div class="line">* <span class="doctag">@return</span> 是否</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isNumberBegin</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">return</span> CharType.isDigital(getCurrentChar(<span class="number">0</span>)) <span class="comment">// 数字</span></div><div class="line">           || (<span class="string">'.'</span> == getCurrentChar(<span class="number">0</span>) &amp;&amp; CharType.isDigital(getCurrentChar(<span class="number">1</span>)) &amp;&amp; !isIdentifierBegin(getCurrentChar(-<span class="number">1</span>)) <span class="comment">// 浮点数</span></div><div class="line">           || (<span class="string">'-'</span> == getCurrentChar(<span class="number">0</span>) &amp;&amp; (<span class="string">'.'</span> == getCurrentChar(<span class="number">0</span>) || CharType.isDigital(getCurrentChar(<span class="number">1</span>))))); <span class="comment">// 负数</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Tokenizer.java</span></div><div class="line"><span class="comment">/**</span></div><div class="line">* 扫描数字.</div><div class="line">* 解析数字的结果会有两种：整数 和 浮点数.</div><div class="line">*</div><div class="line">* <span class="doctag">@return</span> 数字标记</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> Token <span class="title">scanNumber</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">int</span> length = <span class="number">0</span>;</div><div class="line">   <span class="comment">// 负数</span></div><div class="line">   <span class="keyword">if</span> (<span class="string">'-'</span> == charAt(offset + length)) &#123;</div><div class="line">       length++;</div><div class="line">   &#125;</div><div class="line">   <span class="comment">// 浮点数</span></div><div class="line">   length += getDigitalLength(offset + length);</div><div class="line">   <span class="keyword">boolean</span> isFloat = <span class="keyword">false</span>;</div><div class="line">   <span class="keyword">if</span> (<span class="string">'.'</span> == charAt(offset + length)) &#123;</div><div class="line">       isFloat = <span class="keyword">true</span>;</div><div class="line">       length++;</div><div class="line">       length += getDigitalLength(offset + length);</div><div class="line">   &#125;</div><div class="line">   <span class="comment">// 科学计数表示，例如：SELECT 7.823E5</span></div><div class="line">   <span class="keyword">if</span> (isScientificNotation(offset + length)) &#123;</div><div class="line">       isFloat = <span class="keyword">true</span>;</div><div class="line">       length++;</div><div class="line">       <span class="keyword">if</span> (<span class="string">'+'</span> == charAt(offset + length) || <span class="string">'-'</span> == charAt(offset + length)) &#123;</div><div class="line">           length++;</div><div class="line">       &#125;</div><div class="line">       length += getDigitalLength(offset + length);</div><div class="line">   &#125;</div><div class="line">   <span class="comment">// 浮点数，例如：SELECT 1.333F</span></div><div class="line">   <span class="keyword">if</span> (isBinaryNumber(offset + length)) &#123;</div><div class="line">       isFloat = <span class="keyword">true</span>;</div><div class="line">       length++;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> <span class="keyword">new</span> Token(isFloat ? Literals.FLOAT : Literals.INT, input.substring(offset, offset + length), offset + length);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里要特别注意下：<strong>&quot;-&quot;</strong>。在数字表达实例，可以判定为 负号 和 减号（不考虑科学计数法）。</p>
<ul>
<li>&quot;.2&quot;  解析结果是 &quot;.2&quot;</li>
<li>&quot;-.2&quot; 解析结果不能是 &quot;-.2&quot;，而是 &quot;-&quot; 和 &quot;.2&quot;。</li>
</ul>
<h2>3.3 Symbol 词法符号标记</h2>
<p>词法符号标记。例如：&quot;{&quot;, &quot;}&quot;, &quot;&gt;=&quot; 等等。</p>
<p>解析核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// Lexer.java</span></div><div class="line"><span class="comment">/**</span></div><div class="line">* 是否是 符号</div><div class="line">*</div><div class="line">* <span class="doctag">@see</span> Tokenizer#scanSymbol()</div><div class="line">* <span class="doctag">@return</span> 是否</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isSymbolBegin</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">return</span> CharType.isSymbol(getCurrentChar(<span class="number">0</span>));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// CharType.java</span></div><div class="line"><span class="comment">/**</span></div><div class="line">* 判断是否为符号.</div><div class="line">*</div><div class="line">* <span class="doctag">@param</span> ch 待判断的字符</div><div class="line">* <span class="doctag">@return</span> 是否为符号</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isSymbol</span><span class="params">(<span class="keyword">final</span> <span class="keyword">char</span> ch)</span> </span>&#123;</div><div class="line">   <span class="keyword">return</span> <span class="string">'('</span> == ch || <span class="string">')'</span> == ch || <span class="string">'['</span> == ch || <span class="string">']'</span> == ch || <span class="string">'&#123;'</span> == ch || <span class="string">'&#125;'</span> == ch || <span class="string">'+'</span> == ch || <span class="string">'-'</span> == ch || <span class="string">'*'</span> == ch || <span class="string">'/'</span> == ch || <span class="string">'%'</span> == ch || <span class="string">'^'</span> == ch || <span class="string">'='</span> == ch</div><div class="line">           || <span class="string">'&gt;'</span> == ch || <span class="string">'&lt;'</span> == ch || <span class="string">'~'</span> == ch || <span class="string">'!'</span> == ch || <span class="string">'?'</span> == ch || <span class="string">'&amp;'</span> == ch || <span class="string">'|'</span> == ch || <span class="string">'.'</span> == ch || <span class="string">':'</span> == ch || <span class="string">'#'</span> == ch || <span class="string">','</span> == ch || <span class="string">';'</span> == ch;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Tokenizer.java</span></div><div class="line"><span class="comment">/**</span></div><div class="line">* 扫描符号.</div><div class="line">*</div><div class="line">* <span class="doctag">@return</span> 符号标记</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> Token <span class="title">scanSymbol</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">int</span> length = <span class="number">0</span>;</div><div class="line">   <span class="keyword">while</span> (CharType.isSymbol(charAt(offset + length))) &#123;</div><div class="line">       length++;</div><div class="line">   &#125;</div><div class="line">   String literals = input.substring(offset, offset + length);</div><div class="line">   <span class="comment">// 倒序遍历，查询符合条件的 符号。例如 literals = ";;"，会是拆分成两个 ";"。如果基于正序，literals = "&lt;="，会被解析成 "&lt;" + "="。</span></div><div class="line">   Symbol symbol;</div><div class="line">   <span class="keyword">while</span> (<span class="keyword">null</span> == (symbol = Symbol.literalsOf(literals))) &#123;</div><div class="line">       literals = input.substring(offset, offset + --length);</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> <span class="keyword">new</span> Token(symbol, literals, offset + length);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2>3.4 Assist 词法辅助标记</h2>
<p>Assist 词法辅助标记，一共分成 2 种：</p>
<ul>
<li>END ：分析结束</li>
<li>ERROR ：分析错误。</li>
</ul>
<h1>4. 彩蛋</h1>
<p>老铁，是不是比想象中简单一些？！继续加油写 Parser 相关的文章！来一波微信公众号关注吧。</p>
<hr>
<p><strong>Sharding-JDBC 正在收集使用公司名单：<a href="https://github.com/dangdangdotcom/sharding-jdbc/issues/234" target="_blank" rel="external">传送门</a>。🙂 你的登记，会让更多人参与和使用 Sharding-JDBC。Sharding-JDBC 也会因此，能够覆盖更广的场景。登记吧，少年！</strong></p>
<hr>
<p><strong>我创建了一个微信群【源码圈】，希望和大家分享交流读源码的经验。<br>
读源码先难后易，掌握方法后，可以做更有深度的学习。<br>
而且掌握方法并不难噢。<br>
加群方式：微信公众号发送关键字【qun】。</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://www.yunai.me/images/common/wechat_mp.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;🙂🙂🙂关注**微信公众号：【芋艿的后端小屋】**有福利：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Rock
    
    </summary>
    
      <category term="Sharding-JDBC" scheme="http://www.yunai.me/categories/Sharding-JDBC/"/>
    
    
  </entry>
  
  <entry>
    <title>MyCAT 源码分析  —— SQL ON MongoDB</title>
    <link href="http://www.yunai.me/MyCAT/connect-mongodb/"/>
    <id>http://www.yunai.me/MyCAT/connect-mongodb/</id>
    <published>2017-07-18T16:00:00.000Z</published>
    <updated>2017-07-27T16:54:57.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://www.yunai.me/images/common/wechat_mp.jpeg" alt=""></p>
<blockquote>
<p>🙂🙂🙂关注**微信公众号：【芋艿的后端小屋】**有福利：</p>
<ol>
<li>RocketMQ / MyCAT / Sharding-JDBC <strong>所有</strong>源码分析文章列表</li>
<li>RocketMQ / MyCAT / Sharding-JDBC <strong>中文注释源码 GitHub 地址</strong></li>
<li>您对于源码的疑问每条留言<strong>都</strong>将得到<strong>认真</strong>回复。<strong>甚至不知道如何读源码也可以请教噢</strong>。</li>
<li><strong>新的</strong>源码解析文章<strong>实时</strong>收到通知。<strong>每周更新一篇左右</strong>。</li>
<li><strong>认真的</strong>源码交流微信群。</li>
</ol>
</blockquote>
<hr>
<ul>
<li><a href="#">1. 概述</a></li>
<li><a href="#">2. 主流程</a></li>
<li><a href="#">3. 查询操作</a></li>
<li><a href="#">4. 插入操作</a></li>
<li><a href="#">5. 彩蛋</a></li>
</ul>
<hr>
<h1>1. 概述</h1>
<p>可能你在看到这个标题会小小的吃惊，MyCAT 能使用 MongoDB 做数据节点。是的，没错，确实可以。<br>
吼吼吼，让我们开启这段神奇的“旅途”。</p>
<p>本文主要分成四部分：</p>
<ol>
<li>总体流程，让你有个整体的认识</li>
<li>查询操作</li>
<li>插入操作</li>
<li>彩蛋，😈彩蛋，🙂彩蛋</li>
</ol>
<p>建议你看过这两篇文章（<em>非必须</em>）：</p>
<ol>
<li><a href="http://www.yunai.me/MyCAT/single-db-single-table-insert/?self">《MyCAT 源码分析 —— 【单库单表】插入》</a></li>
<li><a href="http://www.yunai.me/MyCAT/single-db-single-table-select/?self">《MyCAT 源码分析 —— 【单库单表】查询》</a></li>
</ol>
<h1>2. 主流程</h1>
<p><img src="http://www.yunai.me/images/MyCAT/2017_07_19/01.png" alt=""></p>
<ol>
<li><code>MyCAT Server</code> 接收 <code>MySQL Client</code> 基于 <strong>MySQL协议</strong> 的请求，翻译 <strong>SQL</strong> 成 <strong>MongoDB操作</strong> 发送给 <code>MongoDB Server</code>。</li>
<li><code>MyCAT Server</code> 接收 <code>MongoDB Server</code> 返回的 <strong>MongoDB数据</strong>，翻译成 <code>MySQL数据结果</code> 返回给 <code>MySQL Client</code>。</li>
</ol>
<p>这样一看，MyCAT 连接 MongoDB 是不是少神奇一点列。</p>
<hr>
<p><img src="http://www.yunai.me/images/MyCAT/2017_07_19/02.png" alt=""></p>
<blockquote>
<p>Java数据库连接，（Java Database Connectivity，简称JDBC）是Java语言中用来规范客户端程序如何来访问数据库的应用程序接口，提供了诸如查询和更新数据库中数据的方法。JDBC也是Sun Microsystems的商标。JDBC是面向关系型数据库的。</p>
</blockquote>
<p>MyCAT 使用 JDBC 规范，抽象了对 MongoDB 的访问。通过这样的方式，MyCAT 也抽象了 SequoiaDB 的访问。可能这样说法有些抽象，看个类图压压惊。</p>
<p><img src="http://www.yunai.me/images/MyCAT/2017_07_19/03.png" alt=""></p>
<p>是不是熟悉的味道。<strong>不得不说 JDBC 规范的精妙。</strong></p>
<h1>3. 查询操作</h1>
<p><figure class="highlight sql"><table><tr><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>, <span class="keyword">name</span> <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> <span class="keyword">name</span> &gt; <span class="string">''</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> _id <span class="keyword">DESC</span>;</div></pre></td></tr></table></figure></p>
<p><img src="http://www.yunai.me/images/MyCAT/2017_07_19/04.png" alt=""></p>
<p>看顺序图已经很方便的理解整体逻辑，我就不多废话啦。我们来看几个核心的代码逻辑。</p>
<p><strong>1、查询 MongoDB</strong></p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// MongoSQLParser.java</span></div><div class="line"><span class="function"><span class="keyword">public</span> MongoData <span class="title">query</span><span class="params">()</span> <span class="keyword">throws</span> MongoSQLException </span>&#123;</div><div class="line">   <span class="keyword">if</span> (!(statement <span class="keyword">instanceof</span> SQLSelectStatement)) &#123;</div><div class="line">       <span class="comment">//return null;</span></div><div class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"not a query sql statement"</span>);</div><div class="line">   &#125;</div><div class="line">   MongoData mongo = <span class="keyword">new</span> MongoData();</div><div class="line">   DBCursor c = <span class="keyword">null</span>;</div><div class="line">   SQLSelectStatement selectStmt = (SQLSelectStatement) statement;</div><div class="line">   SQLSelectQuery sqlSelectQuery = selectStmt.getSelect().getQuery();</div><div class="line">   <span class="keyword">int</span> icount = <span class="number">0</span>;</div><div class="line">   <span class="keyword">if</span> (sqlSelectQuery <span class="keyword">instanceof</span> MySqlSelectQueryBlock) &#123;</div><div class="line">       MySqlSelectQueryBlock mysqlSelectQuery = (MySqlSelectQueryBlock) selectStmt.getSelect().getQuery();</div><div class="line"></div><div class="line">       BasicDBObject fields = <span class="keyword">new</span> BasicDBObject();</div><div class="line"></div><div class="line">       <span class="comment">// 显示（返回）的字段</span></div><div class="line">       <span class="keyword">for</span> (SQLSelectItem item : mysqlSelectQuery.getSelectList()) &#123;</div><div class="line">           <span class="comment">//System.out.println(item.toString());</span></div><div class="line">           <span class="keyword">if</span> (!(item.getExpr() <span class="keyword">instanceof</span> SQLAllColumnExpr)) &#123;</div><div class="line">               <span class="keyword">if</span> (item.getExpr() <span class="keyword">instanceof</span> SQLAggregateExpr) &#123;</div><div class="line">                   SQLAggregateExpr expr = (SQLAggregateExpr) item.getExpr();</div><div class="line">                   <span class="keyword">if</span> (expr.getMethodName().equals(<span class="string">"COUNT"</span>)) &#123; <span class="comment">// TODO 待读：count（*）</span></div><div class="line">                       icount = <span class="number">1</span>;</div><div class="line">                       mongo.setField(getExprFieldName(expr), Types.BIGINT);</div><div class="line">                   &#125;</div><div class="line">                   fields.put(getExprFieldName(expr), <span class="number">1</span>);</div><div class="line">               &#125; <span class="keyword">else</span> &#123;</div><div class="line">                   fields.put(getFieldName(item), <span class="number">1</span>);</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line"></div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="comment">// 表名</span></div><div class="line">       SQLTableSource table = mysqlSelectQuery.getFrom();</div><div class="line">       DBCollection coll = <span class="keyword">this</span>._db.getCollection(table.toString());</div><div class="line">       mongo.setTable(table.toString());</div><div class="line"></div><div class="line">       <span class="comment">// WHERE</span></div><div class="line">       SQLExpr expr = mysqlSelectQuery.getWhere();</div><div class="line">       DBObject query = parserWhere(expr);</div><div class="line"></div><div class="line">       <span class="comment">// GROUP BY</span></div><div class="line">       SQLSelectGroupByClause groupby = mysqlSelectQuery.getGroupBy();</div><div class="line">       BasicDBObject gbkey = <span class="keyword">new</span> BasicDBObject();</div><div class="line">       <span class="keyword">if</span> (groupby != <span class="keyword">null</span>) &#123;</div><div class="line">           <span class="keyword">for</span> (SQLExpr gbexpr : groupby.getItems()) &#123;</div><div class="line">               <span class="keyword">if</span> (gbexpr <span class="keyword">instanceof</span> SQLIdentifierExpr) &#123;</div><div class="line">                   String name = ((SQLIdentifierExpr) gbexpr).getName();</div><div class="line">                   gbkey.put(name, Integer.valueOf(<span class="number">1</span>));</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">           icount = <span class="number">2</span>;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="comment">// SKIP / LIMIT</span></div><div class="line">       <span class="keyword">int</span> limitoff = <span class="number">0</span>;</div><div class="line">       <span class="keyword">int</span> limitnum = <span class="number">0</span>;</div><div class="line">       <span class="keyword">if</span> (mysqlSelectQuery.getLimit() != <span class="keyword">null</span>) &#123;</div><div class="line">           limitoff = getSQLExprToInt(mysqlSelectQuery.getLimit().getOffset());</div><div class="line">           limitnum = getSQLExprToInt(mysqlSelectQuery.getLimit().getRowCount());</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">if</span> (icount == <span class="number">1</span>) &#123; <span class="comment">// COUNT（*）</span></div><div class="line">           mongo.setCount(coll.count(query));</div><div class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (icount == <span class="number">2</span>) &#123; <span class="comment">// MapReduce</span></div><div class="line">           BasicDBObject initial = <span class="keyword">new</span> BasicDBObject();</div><div class="line">           initial.put(<span class="string">"num"</span>, <span class="number">0</span>);</div><div class="line">           String reduce = <span class="string">"function (obj, prev) &#123; "</span> + <span class="string">"  prev.num++&#125;"</span>;</div><div class="line">           mongo.setGrouyBy(coll.group(gbkey, query, initial, reduce));</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           <span class="keyword">if</span> ((limitoff &gt; <span class="number">0</span>) || (limitnum &gt; <span class="number">0</span>)) &#123;</div><div class="line">               c = coll.find(query, fields).skip(limitoff).limit(limitnum);</div><div class="line">           &#125; <span class="keyword">else</span> &#123;</div><div class="line">               c = coll.find(query, fields);</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           <span class="comment">// order by</span></div><div class="line">           SQLOrderBy orderby = mysqlSelectQuery.getOrderBy();</div><div class="line">           <span class="keyword">if</span> (orderby != <span class="keyword">null</span>) &#123;</div><div class="line">               BasicDBObject order = <span class="keyword">new</span> BasicDBObject();</div><div class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; orderby.getItems().size(); i++) &#123;</div><div class="line">                   SQLSelectOrderByItem orderitem = orderby.getItems().get(i);</div><div class="line">                   order.put(orderitem.getExpr().toString(), getSQLExprToAsc(orderitem.getType()));</div><div class="line">               &#125;</div><div class="line">               c.sort(order);</div><div class="line">               <span class="comment">// System.out.println(order);</span></div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">       mongo.setCursor(c);</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> mongo;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>2、查询条件</strong></p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// MongoSQLParser.java</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parserWhere</span><span class="params">(SQLExpr aexpr, BasicDBObject o)</span> </span>&#123;</div><div class="line">   <span class="keyword">if</span> (aexpr <span class="keyword">instanceof</span> SQLBinaryOpExpr) &#123;</div><div class="line">       SQLBinaryOpExpr expr = (SQLBinaryOpExpr) aexpr;</div><div class="line">       SQLExpr exprL = expr.getLeft();</div><div class="line">       <span class="keyword">if</span> (!(exprL <span class="keyword">instanceof</span> SQLBinaryOpExpr)) &#123;</div><div class="line">           <span class="keyword">if</span> (expr.getOperator().getName().equals(<span class="string">"="</span>)) &#123;</div><div class="line">               o.put(exprL.toString(), getExpValue(expr.getRight()));</div><div class="line">           &#125; <span class="keyword">else</span> &#123;</div><div class="line">               String op = <span class="string">""</span>;</div><div class="line">               <span class="keyword">if</span> (expr.getOperator().getName().equals(<span class="string">"&lt;"</span>)) &#123;</div><div class="line">                   op = <span class="string">"$lt"</span>;</div><div class="line">               &#125; <span class="keyword">else</span> <span class="keyword">if</span> (expr.getOperator().getName().equals(<span class="string">"&lt;="</span>)) &#123;</div><div class="line">                   op = <span class="string">"$lte"</span>;</div><div class="line">               &#125; <span class="keyword">else</span> <span class="keyword">if</span> (expr.getOperator().getName().equals(<span class="string">"&gt;"</span>)) &#123;</div><div class="line">                   op = <span class="string">"$gt"</span>;</div><div class="line">               &#125; <span class="keyword">else</span> <span class="keyword">if</span> (expr.getOperator().getName().equals(<span class="string">"&gt;="</span>)) &#123;</div><div class="line">                   op = <span class="string">"$gte"</span>;</div><div class="line">               &#125; <span class="keyword">else</span> <span class="keyword">if</span> (expr.getOperator().getName().equals(<span class="string">"!="</span>)) &#123;</div><div class="line">                   op = <span class="string">"$ne"</span>;</div><div class="line">               &#125; <span class="keyword">else</span> <span class="keyword">if</span> (expr.getOperator().getName().equals(<span class="string">"&lt;&gt;"</span>)) &#123;</div><div class="line">                   op = <span class="string">"$ne"</span>;</div><div class="line">               &#125;</div><div class="line">               parserDBObject(o, exprL.toString(), op, getExpValue(expr.getRight()));</div><div class="line">           &#125;</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           <span class="keyword">if</span> (expr.getOperator().getName().equals(<span class="string">"AND"</span>)) &#123;</div><div class="line">               parserWhere(exprL, o);</div><div class="line">               parserWhere(expr.getRight(), o);</div><div class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (expr.getOperator().getName().equals(<span class="string">"OR"</span>)) &#123;</div><div class="line">               orWhere(exprL, expr.getRight(), o);</div><div class="line">           &#125; <span class="keyword">else</span> &#123;</div><div class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Can't identify the operation of  of where"</span>);</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">orWhere</span><span class="params">(SQLExpr exprL, SQLExpr exprR, BasicDBObject ob)</span> </span>&#123;</div><div class="line">   BasicDBObject xo = <span class="keyword">new</span> BasicDBObject();</div><div class="line">   BasicDBObject yo = <span class="keyword">new</span> BasicDBObject();</div><div class="line">   parserWhere(exprL, xo);</div><div class="line">   parserWhere(exprR, yo);</div><div class="line">   ob.put(<span class="string">"$or"</span>, <span class="keyword">new</span> Object[]&#123;xo, yo&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>3、解析 MongoDB 数据</strong></p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// MongoResultSet.java</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">MongoResultSet</span><span class="params">(MongoData mongo, String schema)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">   <span class="keyword">this</span>._cursor = mongo.getCursor();</div><div class="line">   <span class="keyword">this</span>._schema = schema;</div><div class="line">   <span class="keyword">this</span>._table = mongo.getTable();</div><div class="line">   <span class="keyword">this</span>.isSum = mongo.getCount() &gt; <span class="number">0</span>;</div><div class="line">   <span class="keyword">this</span>._sum = mongo.getCount();</div><div class="line">   <span class="keyword">this</span>.isGroupBy = mongo.getType();</div><div class="line"></div><div class="line">   <span class="keyword">if</span> (<span class="keyword">this</span>.isGroupBy) &#123;</div><div class="line">       dblist = mongo.getGrouyBys();</div><div class="line">       <span class="keyword">this</span>.isSum = <span class="keyword">true</span>;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">if</span> (<span class="keyword">this</span>._cursor != <span class="keyword">null</span>) &#123;</div><div class="line">       select = _cursor.getKeysWanted().keySet().toArray(<span class="keyword">new</span> String[<span class="number">0</span>]);</div><div class="line">       <span class="comment">// 解析 fields</span></div><div class="line">       <span class="keyword">if</span> (<span class="keyword">this</span>._cursor.hasNext()) &#123;</div><div class="line">           _cur = _cursor.next();</div><div class="line">           <span class="keyword">if</span> (_cur != <span class="keyword">null</span>) &#123;</div><div class="line">               <span class="keyword">if</span> (select.length == <span class="number">0</span>) &#123;</div><div class="line">                   SetFields(_cur.keySet());</div><div class="line">               &#125;</div><div class="line">               _row = <span class="number">1</span>;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">       <span class="comment">// 设置 fields 类型</span></div><div class="line">       <span class="keyword">if</span> (select.length == <span class="number">0</span>) &#123;</div><div class="line">           select = <span class="keyword">new</span> String[]&#123;<span class="string">"_id"</span>&#125;;</div><div class="line">           SetFieldType(<span class="keyword">true</span>);</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           SetFieldType(<span class="keyword">false</span>);</div><div class="line">       &#125;</div><div class="line">   &#125; <span class="keyword">else</span> &#123;</div><div class="line">       SetFields(mongo.getFields().keySet());<span class="comment">//new String[]&#123;"COUNT(*)"&#125;;</span></div><div class="line">       SetFieldType(mongo.getFields());</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>当使用 <code>SELECT *</code> 查询字段时，fields 使用第一条数据返回的 fields。即使，后面的数据有其他 fields，也不返回。</li>
</ul>
<p><strong>4、返回数据给 MySQL Client</strong></p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// JDBCConnection.java</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ouputResultSet</span><span class="params">(ServerConnection sc, String sql)</span></span></div><div class="line">       <span class="keyword">throws</span> SQLException &#123;</div><div class="line">   ResultSet rs = <span class="keyword">null</span>;</div><div class="line">   Statement stmt = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">   <span class="keyword">try</span> &#123;</div><div class="line">       stmt = con.createStatement();</div><div class="line">       rs = stmt.executeQuery(sql);</div><div class="line"></div><div class="line">       <span class="comment">// header</span></div><div class="line">       List&lt;FieldPacket&gt; fieldPks = <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line">       ResultSetUtil.resultSetToFieldPacket(sc.getCharset(), fieldPks, rs, <span class="keyword">this</span>.isSpark);</div><div class="line">       <span class="keyword">int</span> colunmCount = fieldPks.size();</div><div class="line">       ByteBuffer byteBuf = sc.allocate();</div><div class="line">       ResultSetHeaderPacket headerPkg = <span class="keyword">new</span> ResultSetHeaderPacket();</div><div class="line">       headerPkg.fieldCount = fieldPks.size();</div><div class="line">       headerPkg.packetId = ++packetId;</div><div class="line">       byteBuf = headerPkg.write(byteBuf, sc, <span class="keyword">true</span>);</div><div class="line">       byteBuf.flip();</div><div class="line">       <span class="keyword">byte</span>[] header = <span class="keyword">new</span> <span class="keyword">byte</span>[byteBuf.limit()];</div><div class="line">       byteBuf.get(header);</div><div class="line">       byteBuf.clear();</div><div class="line">       List&lt;<span class="keyword">byte</span>[]&gt; fields = <span class="keyword">new</span> ArrayList&lt;<span class="keyword">byte</span>[]&gt;(fieldPks.size());</div><div class="line">       <span class="keyword">for</span> (FieldPacket curField : fieldPks) &#123;</div><div class="line">           curField.packetId = ++packetId;</div><div class="line">           byteBuf = curField.write(byteBuf, sc, <span class="keyword">false</span>);</div><div class="line">           byteBuf.flip();</div><div class="line">           <span class="keyword">byte</span>[] field = <span class="keyword">new</span> <span class="keyword">byte</span>[byteBuf.limit()];</div><div class="line">           byteBuf.get(field);</div><div class="line">           byteBuf.clear();</div><div class="line">           fields.add(field);</div><div class="line">       &#125;</div><div class="line">       <span class="comment">// header eof</span></div><div class="line">       EOFPacket eofPckg = <span class="keyword">new</span> EOFPacket();</div><div class="line">       eofPckg.packetId = ++packetId;</div><div class="line">       byteBuf = eofPckg.write(byteBuf, sc, <span class="keyword">false</span>);</div><div class="line">       byteBuf.flip();</div><div class="line">       <span class="keyword">byte</span>[] eof = <span class="keyword">new</span> <span class="keyword">byte</span>[byteBuf.limit()];</div><div class="line">       byteBuf.get(eof);</div><div class="line">       byteBuf.clear();</div><div class="line">       <span class="keyword">this</span>.respHandler.fieldEofResponse(header, fields, eof, <span class="keyword">this</span>);</div><div class="line"></div><div class="line">       <span class="comment">// row</span></div><div class="line">       <span class="keyword">while</span> (rs.next()) &#123;</div><div class="line">           RowDataPacket curRow = <span class="keyword">new</span> RowDataPacket(colunmCount);</div><div class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; colunmCount; i++) &#123;</div><div class="line">               <span class="keyword">int</span> j = i + <span class="number">1</span>;</div><div class="line">               <span class="keyword">if</span> (MysqlDefs.isBianry((<span class="keyword">byte</span>) fieldPks.get(i).type)) &#123;</div><div class="line">                   curRow.add(rs.getBytes(j));</div><div class="line">               &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fieldPks.get(i).type == MysqlDefs.FIELD_TYPE_DECIMAL ||</div><div class="line">                       fieldPks.get(i).type == (MysqlDefs.FIELD_TYPE_NEW_DECIMAL - <span class="number">256</span>)) &#123; <span class="comment">// field type is unsigned byte</span></div><div class="line">                   <span class="comment">// ensure that do not use scientific notation format</span></div><div class="line">                   BigDecimal val = rs.getBigDecimal(j);</div><div class="line">                   curRow.add(StringUtil.encode(val != <span class="keyword">null</span> ? val.toPlainString() : <span class="keyword">null</span>, sc.getCharset()));</div><div class="line">               &#125; <span class="keyword">else</span> &#123;</div><div class="line">                   curRow.add(StringUtil.encode(rs.getString(j), sc.getCharset()));</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">           curRow.packetId = ++packetId;</div><div class="line">           byteBuf = curRow.write(byteBuf, sc, <span class="keyword">false</span>);</div><div class="line">           byteBuf.flip();</div><div class="line">           <span class="keyword">byte</span>[] row = <span class="keyword">new</span> <span class="keyword">byte</span>[byteBuf.limit()];</div><div class="line">           byteBuf.get(row);</div><div class="line">           byteBuf.clear();</div><div class="line">           <span class="keyword">this</span>.respHandler.rowResponse(row, <span class="keyword">this</span>);</div><div class="line">       &#125;</div><div class="line">       fieldPks.clear();</div><div class="line">       <span class="comment">// row eof</span></div><div class="line">       eofPckg = <span class="keyword">new</span> EOFPacket();</div><div class="line">       eofPckg.packetId = ++packetId;</div><div class="line">       byteBuf = eofPckg.write(byteBuf, sc, <span class="keyword">false</span>);</div><div class="line">       byteBuf.flip();</div><div class="line">       eof = <span class="keyword">new</span> <span class="keyword">byte</span>[byteBuf.limit()];</div><div class="line">       byteBuf.get(eof);</div><div class="line">       sc.recycle(byteBuf);</div><div class="line">       <span class="keyword">this</span>.respHandler.rowEofResponse(eof, <span class="keyword">this</span>);</div><div class="line">   &#125; <span class="keyword">finally</span> &#123;</div><div class="line">       <span class="keyword">if</span> (rs != <span class="keyword">null</span>) &#123;</div><div class="line">           <span class="keyword">try</span> &#123;</div><div class="line">               rs.close();</div><div class="line">           &#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">if</span> (stmt != <span class="keyword">null</span>) &#123;</div><div class="line">           <span class="keyword">try</span> &#123;</div><div class="line">               stmt.close();</div><div class="line">           &#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// MongoResultSet.java</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getString</span><span class="params">(String columnLabel)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">   Object x = getObject(columnLabel);</div><div class="line">   <span class="keyword">if</span> (x == <span class="keyword">null</span>) &#123;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> x.toString();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>当返回字段值是 Object 时，返回该对象.toString()。例如：</li>
</ul>
<p><figure class="highlight"><table><tr><td class="code"><pre><div class="line">mysql&gt; select * from user order by _id asc;</div><div class="line">+--------------------------+------+-------------------------------+</div><div class="line">| _id                      | name | profile                       |</div><div class="line">+--------------------------+------+-------------------------------+</div><div class="line">| 1                        | 123  | &#123; "age" : 1 , "height" : 100&#125; |</div></pre></td></tr></table></figure></p>
<h1>4. 插入操作</h1>
<p><img src="http://www.yunai.me/images/MyCAT/2017_07_19/05.png" alt=""></p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// MongoSQLParser.java</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">executeUpdate</span><span class="params">()</span> <span class="keyword">throws</span> MongoSQLException </span>&#123;</div><div class="line">   <span class="keyword">if</span> (statement <span class="keyword">instanceof</span> SQLInsertStatement) &#123;</div><div class="line">       <span class="keyword">return</span> InsertData((SQLInsertStatement) statement);</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">if</span> (statement <span class="keyword">instanceof</span> SQLUpdateStatement) &#123;</div><div class="line">       <span class="keyword">return</span> UpData((SQLUpdateStatement) statement);</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">if</span> (statement <span class="keyword">instanceof</span> SQLDropTableStatement) &#123;</div><div class="line">       <span class="keyword">return</span> dropTable((SQLDropTableStatement) statement);</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">if</span> (statement <span class="keyword">instanceof</span> SQLDeleteStatement) &#123;</div><div class="line">       <span class="keyword">return</span> DeleteDate((SQLDeleteStatement) statement);</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">if</span> (statement <span class="keyword">instanceof</span> SQLCreateTableStatement) &#123;</div><div class="line">       <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">InsertData</span><span class="params">(SQLInsertStatement state)</span> </span>&#123;</div><div class="line">   <span class="keyword">if</span> (state.getValues().getValues().size() == <span class="number">0</span>) &#123;</div><div class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"number of  columns error"</span>);</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">if</span> (state.getValues().getValues().size() != state.getColumns().size()) &#123;</div><div class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"number of values and columns have to match"</span>);</div><div class="line">   &#125;</div><div class="line">   SQLTableSource table = state.getTableSource();</div><div class="line">   BasicDBObject o = <span class="keyword">new</span> BasicDBObject();</div><div class="line">   <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">   <span class="keyword">for</span> (SQLExpr col : state.getColumns()) &#123;</div><div class="line">       o.put(getFieldName2(col), getExpValue(state.getValues().getValues().get(i)));</div><div class="line">       i++;</div><div class="line">   &#125;</div><div class="line">   DBCollection coll = <span class="keyword">this</span>._db.getCollection(table.toString());</div><div class="line">   coll.insert(o);</div><div class="line">   <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1>5. 彩蛋</h1>
<p>老铁，看到这里，来一波微信公众号关注吧？！</p>
<p><img src="http://www.yunai.me/images/common/wechat_mp.jpeg" alt="wechat_mp"></p>
<p><strong>1、支持多 MongoDB ，并使用 MyCAT 进行分片。</strong></p>
<p>MyCAT 配置：<a href="https://github.com/YunaiV/Mycat-Server/tree/1.6/src/test/resources/multi_mongodb" target="_blank" rel="external">multi_mongodb</a></p>
<p><strong>2、支持 MongoDB + MySQL 作为同一个 MyCAT Table 的数据节点。查询时，可以合并数据结果。</strong></p>
<p>查询时，返回 MySQL 数据记录字段要比 MongoDB 数据记录字段全，否则，合并结果时会报错。</p>
<p>MyCAT 配置：<a href="https://github.com/YunaiV/Mycat-Server/tree/1.6/src/test/resources/single_mongodb_mysql" target="_blank" rel="external">single_mongodb_mysql</a></p>
<p><strong>3、MongoDB 作为数据节点时，可以使用 MyCAT 提供的数据库主键字段功能。</strong></p>
<p>MyCAT 配置：<a href="https://github.com/YunaiV/Mycat-Server/tree/1.6/src/test/resources/single_mongodb" target="_blank" rel="external">single_mongodb</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://www.yunai.me/images/common/wechat_mp.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;🙂🙂🙂关注**微信公众号：【芋艿的后端小屋】**有福利：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Rock
    
    </summary>
    
      <category term="MyCAT" scheme="http://www.yunai.me/categories/MyCAT/"/>
    
    
  </entry>
  
  <entry>
    <title>MyCAT 源码分析  —— PreparedStatement 重新入门</title>
    <link href="http://www.yunai.me/MyCAT/what-is-PreparedStatement/"/>
    <id>http://www.yunai.me/MyCAT/what-is-PreparedStatement/</id>
    <published>2017-07-16T16:00:00.000Z</published>
    <updated>2017-07-27T16:54:49.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://www.yunai.me/images/common/wechat_mp.jpeg" alt=""></p>
<blockquote>
<p>🙂🙂🙂关注**微信公众号：【芋艿的后端小屋】**有福利：</p>
<ol>
<li>RocketMQ / MyCAT / Sharding-JDBC <strong>所有</strong>源码分析文章列表</li>
<li>RocketMQ / MyCAT / Sharding-JDBC <strong>中文注释源码 GitHub 地址</strong></li>
<li>您对于源码的疑问每条留言<strong>都</strong>将得到<strong>认真</strong>回复。<strong>甚至不知道如何读源码也可以请教噢</strong>。</li>
<li><strong>新的</strong>源码解析文章<strong>实时</strong>收到通知。<strong>每周更新一篇左右</strong>。</li>
<li><strong>认真的</strong>源码交流微信群。</li>
</ol>
</blockquote>
<hr>
<ul>
<li><a href="#">1. 概述</a></li>
<li><a href="#">2. JDBC Client 实现</a></li>
<li><a href="#">3. MyCAT Server 实现</a>
<ul>
<li><a href="#">3.1 创建 PreparedStatement</a></li>
<li><a href="#">3.2 执行 SQL</a></li>
</ul>
</li>
<li><a href="#">4. 彩蛋</a></li>
</ul>
<hr>
<h1>1. 概述</h1>
<p>相信很多同学在学习 JDBC 时，都碰到 <code>PreparedStatement</code> 和 <code>Statement</code>。究竟该使用哪个呢？最终很可能是<strong>懵里懵懂</strong>的看了各种总结，使用 <code>PreparedStatement</code>。那么本文，通过 MyCAT 对 <code>PreparedStatement</code> 的实现对大家能够重新理解下。</p>
<p>本文主要分成两部分：</p>
<ol>
<li>JDBC Client 如何实现 <code>PreparedStatement</code>。</li>
<li>MyCAT Server 如何处理 <code>PreparedStatement</code>。</li>
</ol>
<p>😈 Let's Go。</p>
<h1>2. JDBC Client 实现</h1>
<p>首先，我们来看一段大家最喜欢复制粘贴之一的代码，JDBC PreparedStatement 查询 MySQL 数据库：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PreparedStatementDemo</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;</div><div class="line">        <span class="comment">// 1. 获得数据库连接</span></div><div class="line">        Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</div><div class="line">        Connection conn = DriverManager.getConnection(<span class="string">"jdbc:mysql://127.0.0.1:8066/dbtest?useServerPrepStmts=true"</span>, <span class="string">"root"</span>, <span class="string">"123456"</span>);</div><div class="line"></div><div class="line">        <span class="comment">// PreparedStatement</span></div><div class="line">        PreparedStatement ps = conn.prepareStatement(<span class="string">"SELECT id, username, password FROM t_user WHERE id = ?"</span>);</div><div class="line">        ps.setLong(<span class="number">1</span>, Math.abs(<span class="keyword">new</span> Random().nextLong()));</div><div class="line"></div><div class="line">        <span class="comment">// execute</span></div><div class="line">        ps.executeQuery();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>获取 MySQL 连接时，<code>useServerPrepStmts=true</code>  是<strong>非常非常非常重要</strong>的参数。如果不配置，<code>PreparedStatement</code> 实际是个<strong>假</strong>的 <code>PreparedStatement</code>（新版本默认为 FALSE，据说部分老版本默认为 TRUE），未开启服务端级别的 SQL 预编译。</p>
<p>WHY ？来看下 JDBC 里面是怎么实现的。</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// com.mysql.jdbc.ConnectionImpl.java</span></div><div class="line"><span class="function"><span class="keyword">public</span> PreparedStatement <span class="title">prepareStatement</span><span class="params">(String sql, <span class="keyword">int</span> resultSetType, <span class="keyword">int</span> resultSetConcurrency)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">   <span class="keyword">synchronized</span> (getConnectionMutex()) &#123;</div><div class="line">       checkClosed();</div><div class="line">       </div><div class="line">       PreparedStatement pStmt = <span class="keyword">null</span>;</div><div class="line">       <span class="keyword">boolean</span> canServerPrepare = <span class="keyword">true</span>;</div><div class="line">       String nativeSql = getProcessEscapeCodesForPrepStmts() ? nativeSQL(sql) : sql;</div><div class="line"></div><div class="line">       <span class="keyword">if</span> (<span class="keyword">this</span>.useServerPreparedStmts &amp;&amp; getEmulateUnsupportedPstmts()) &#123;</div><div class="line">           canServerPrepare = canHandleAsServerPreparedStatement(nativeSql);</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="keyword">if</span> (<span class="keyword">this</span>.useServerPreparedStmts &amp;&amp; canServerPrepare) &#123;</div><div class="line">           <span class="keyword">if</span> (<span class="keyword">this</span>.getCachePreparedStatements()) &#123; <span class="comment">// 从缓存中获取 pStmt</span></div><div class="line">               <span class="keyword">synchronized</span> (<span class="keyword">this</span>.serverSideStatementCache) &#123;</div><div class="line">                   pStmt = (com.mysql.jdbc.ServerPreparedStatement) <span class="keyword">this</span>.serverSideStatementCache</div><div class="line">                           .remove(makePreparedStatementCacheKey(<span class="keyword">this</span>.database, sql));</div><div class="line"></div><div class="line">                   <span class="keyword">if</span> (pStmt != <span class="keyword">null</span>) &#123;</div><div class="line">                       ((com.mysql.jdbc.ServerPreparedStatement) pStmt).setClosed(<span class="keyword">false</span>);</div><div class="line">                       pStmt.clearParameters(); <span class="comment">// 清理上次留下的参数</span></div><div class="line">                   &#125;</div><div class="line"></div><div class="line">                   <span class="keyword">if</span> (pStmt == <span class="keyword">null</span>) &#123;</div><div class="line">                        <span class="comment">// .... 省略代码 ：向 Server 提交 SQL 预编译。</span></div><div class="line">                   &#125;</div><div class="line">               &#125;</div><div class="line">           &#125; <span class="keyword">else</span> &#123;</div><div class="line">               <span class="keyword">try</span> &#123;</div><div class="line">                   <span class="comment">// 向 Server 提交 SQL 预编译。</span></div><div class="line">                   pStmt = ServerPreparedStatement.getInstance(getMultiHostSafeProxy(), nativeSql, <span class="keyword">this</span>.database, resultSetType, resultSetConcurrency);</div><div class="line"></div><div class="line">                   pStmt.setResultSetType(resultSetType);</div><div class="line">                   pStmt.setResultSetConcurrency(resultSetConcurrency);</div><div class="line">               &#125; <span class="keyword">catch</span> (SQLException sqlEx) &#123;</div><div class="line">                   <span class="comment">// Punt, if necessary</span></div><div class="line">                   <span class="keyword">if</span> (getEmulateUnsupportedPstmts()) &#123;</div><div class="line">                       pStmt = (PreparedStatement) clientPrepareStatement(nativeSql, resultSetType, resultSetConcurrency, <span class="keyword">false</span>);</div><div class="line">                   &#125; <span class="keyword">else</span> &#123;</div><div class="line">                       <span class="keyword">throw</span> sqlEx;</div><div class="line">                   &#125;</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           pStmt = (PreparedStatement) clientPrepareStatement(nativeSql, resultSetType, resultSetConcurrency, <span class="keyword">false</span>);</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="keyword">return</span> pStmt;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>【前者】当 Client 开启 <code>useServerPreparedStmts</code> 并且 Server 支持 <code>ServerPrepare</code>，<strong>Client 会向 Server 提交 SQL 预编译请求</strong>。</li>
</ul>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.useServerPreparedStmts &amp;&amp; canServerPrepare) &#123;</div><div class="line">    pStmt = ServerPreparedStatement.getInstance(getMultiHostSafeProxy(), nativeSql, <span class="keyword">this</span>.database, resultSetType, resultSetConcurrency);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>【后者】当 Client 未开启 <code>useServerPreparedStmts</code> 或者 Server 不支持 <code>ServerPrepare</code>，Client 创建 <code>PreparedStatement</code>，<strong>_不会_向 Server 提交 SQL 预编译请求</strong>。</li>
</ul>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">pStmt = (PreparedStatement) clientPrepareStatement(nativeSql, resultSetType, resultSetConcurrency, <span class="keyword">false</span>);</div></pre></td></tr></table></figure></p>
<p><strong>即使这样，究竟为什么性能会更好呢？</strong></p>
<ul>
<li>【前者】返回的 <code>PreparedStatement</code> 对象类是 <code>JDBC42ServerPreparedStatement.java</code>，后续每次执行 SQL 只需将对应占位符?对应的值提交给 Server即可，减少网络传输和 SQL 解析开销。</li>
<li>【后者】返回的 <code>PreparedStatement</code> 对象类是 <code>JDBC42PreparedStatement.java</code>，后续每次执行 SQL 需要将<strong>完整</strong>的 SQL 提交给 Server，增加了网络传输和 SQL 解析开销。</li>
</ul>
<p><em>🌚：【前者】性能一定比【后者】好吗？相信你已经有了正确的答案。</em></p>
<h1>3. MyCAT Server 实现</h1>
<h2>3.1 创建 PreparedStatement</h2>
<p>该操作对应 Client <code>conn.prepareStatement(....)</code>。</p>
<p><img src="http://www.yunai.me/images/MyCAT/2017_07_17/01.png" alt=""></p>
<p>MyCAT 接收到请求后，创建 <code>PreparedStatement</code>，并返回 <code>statementId</code> 等信息。Client 发起 SQL 执行时，需要将 <code>statementId</code> 带给 MyCAT。核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// ServerPrepareHandler.java</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">(String sql)</span> </span>&#123;</div><div class="line">LOGGER.debug(<span class="string">"use server prepare, sql: "</span> + sql);</div><div class="line"></div><div class="line">   PreparedStatement pstmt = pstmtForSql.get(sql);</div><div class="line">   <span class="keyword">if</span> (pstmt == <span class="keyword">null</span>) &#123; <span class="comment">// 缓存中获取</span></div><div class="line">   	<span class="comment">// 解析获取字段个数和参数个数</span></div><div class="line">   	<span class="keyword">int</span> columnCount = getColumnCount(sql);</div><div class="line">   	<span class="keyword">int</span> paramCount = getParamCount(sql);</div><div class="line">       pstmt = <span class="keyword">new</span> PreparedStatement(++pstmtId, sql, columnCount, paramCount);</div><div class="line">       pstmtForSql.put(pstmt.getStatement(), pstmt);</div><div class="line">       pstmtForId.put(pstmt.getId(), pstmt);</div><div class="line">   &#125;</div><div class="line">   PreparedStmtResponse.response(pstmt, source);</div><div class="line">&#125;</div><div class="line"><span class="comment">// PreparedStmtResponse.java</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">response</span><span class="params">(PreparedStatement pstmt, FrontendConnection c)</span> </span>&#123;</div><div class="line">   <span class="keyword">byte</span> packetId = <span class="number">0</span>;</div><div class="line"></div><div class="line">   <span class="comment">// write preparedOk packet</span></div><div class="line">   PreparedOkPacket preparedOk = <span class="keyword">new</span> PreparedOkPacket();</div><div class="line">   preparedOk.packetId = ++packetId;</div><div class="line">   preparedOk.statementId = pstmt.getId();</div><div class="line">   preparedOk.columnsNumber = pstmt.getColumnsNumber();</div><div class="line">   preparedOk.parametersNumber = pstmt.getParametersNumber();</div><div class="line">   ByteBuffer buffer = preparedOk.write(c.allocate(), c,<span class="keyword">true</span>);</div><div class="line"></div><div class="line">   <span class="comment">// write parameter field packet</span></div><div class="line">   <span class="keyword">int</span> parametersNumber = preparedOk.parametersNumber;</div><div class="line">   <span class="keyword">if</span> (parametersNumber &gt; <span class="number">0</span>) &#123;</div><div class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; parametersNumber; i++) &#123;</div><div class="line">           FieldPacket field = <span class="keyword">new</span> FieldPacket();</div><div class="line">           field.packetId = ++packetId;</div><div class="line">           buffer = field.write(buffer, c,<span class="keyword">true</span>);</div><div class="line">       &#125;</div><div class="line">       EOFPacket eof = <span class="keyword">new</span> EOFPacket();</div><div class="line">       eof.packetId = ++packetId;</div><div class="line">       buffer = eof.write(buffer, c,<span class="keyword">true</span>);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="comment">// write column field packet</span></div><div class="line">   <span class="keyword">int</span> columnsNumber = preparedOk.columnsNumber;</div><div class="line">   <span class="keyword">if</span> (columnsNumber &gt; <span class="number">0</span>) &#123;</div><div class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; columnsNumber; i++) &#123;</div><div class="line">           FieldPacket field = <span class="keyword">new</span> FieldPacket();</div><div class="line">           field.packetId = ++packetId;</div><div class="line">           buffer = field.write(buffer, c,<span class="keyword">true</span>);</div><div class="line">       &#125;</div><div class="line">       EOFPacket eof = <span class="keyword">new</span> EOFPacket();</div><div class="line">       eof.packetId = ++packetId;</div><div class="line">       buffer = eof.write(buffer, c,<span class="keyword">true</span>);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="comment">// send buffer</span></div><div class="line">   c.write(buffer);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>每个连接之间，PreparedStatement 不共享，即不同连接，即使 SQL相同，对应的 PreparedStatement 不同。</strong></p>
<h2>3.2 执行 SQL</h2>
<p>该操作对应 Client <code>conn.execute(....)</code>。</p>
<p><img src="http://www.yunai.me/images/MyCAT/2017_07_17/02.png" alt=""></p>
<p>MyCAT 接收到请求后，将 PreparedStatement 使用请求的参数格式化成可执行的 SQL 进行执行。伪代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">String sql = pstmt.sql.format(request.params);</div><div class="line">execute(sql);</div></pre></td></tr></table></figure></p>
<p>核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// ServerPrepareHandler.java</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(<span class="keyword">byte</span>[] data)</span> </span>&#123;</div><div class="line">   <span class="keyword">long</span> pstmtId = ByteUtil.readUB4(data, <span class="number">5</span>);</div><div class="line">   PreparedStatement pstmt = <span class="keyword">null</span>;</div><div class="line">   <span class="keyword">if</span> ((pstmt = pstmtForId.get(pstmtId)) == <span class="keyword">null</span>) &#123;</div><div class="line">       source.writeErrMessage(ErrorCode.ER_ERROR_WHEN_EXECUTING_COMMAND, <span class="string">"Unknown pstmtId when executing."</span>);</div><div class="line">   &#125; <span class="keyword">else</span> &#123;</div><div class="line">       <span class="comment">// 参数读取</span></div><div class="line">       ExecutePacket packet = <span class="keyword">new</span> ExecutePacket(pstmt);</div><div class="line">       <span class="keyword">try</span> &#123;</div><div class="line">           packet.read(data, source.getCharset());</div><div class="line">       &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</div><div class="line">           source.writeErrMessage(ErrorCode.ER_ERROR_WHEN_EXECUTING_COMMAND, e.getMessage());</div><div class="line">           <span class="keyword">return</span>;</div><div class="line">       &#125;</div><div class="line">       BindValue[] bindValues = packet.values;</div><div class="line">       <span class="comment">// 还原sql中的动态参数为实际参数值</span></div><div class="line">       String sql = prepareStmtBindValue(pstmt, bindValues);</div><div class="line">       <span class="comment">// 执行sql</span></div><div class="line">       source.getSession2().setPrepared(<span class="keyword">true</span>);</div><div class="line">       source.query(sql);</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> String <span class="title">prepareStmtBindValue</span><span class="params">(PreparedStatement pstmt, BindValue[] bindValues)</span> </span>&#123;</div><div class="line">   String sql = pstmt.getStatement();</div><div class="line">   <span class="keyword">int</span>[] paramTypes = pstmt.getParametersType();</div><div class="line"></div><div class="line">   StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">   <span class="keyword">int</span> idx = <span class="number">0</span>;</div><div class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, len = sql.length(); i &lt; len; i++) &#123;</div><div class="line">       <span class="keyword">char</span> c = sql.charAt(i);</div><div class="line">       <span class="keyword">if</span> (c != <span class="string">'?'</span>) &#123;</div><div class="line">           sb.append(c);</div><div class="line">           <span class="keyword">continue</span>;</div><div class="line">       &#125;</div><div class="line">       <span class="comment">// 处理占位符?</span></div><div class="line">       <span class="keyword">int</span> paramType = paramTypes[idx];</div><div class="line">       BindValue bindValue = bindValues[idx];</div><div class="line">       idx++;</div><div class="line">       <span class="comment">// 处理字段为空的情况</span></div><div class="line">       <span class="keyword">if</span> (bindValue.isNull) &#123;</div><div class="line">           sb.append(<span class="string">"NULL"</span>);</div><div class="line">           <span class="keyword">continue</span>;</div><div class="line">       &#125;</div><div class="line">       <span class="comment">// 非空情况, 根据字段类型获取值</span></div><div class="line">       <span class="keyword">switch</span> (paramType &amp; <span class="number">0xff</span>) &#123;</div><div class="line">           <span class="keyword">case</span> Fields.FIELD_TYPE_TINY:</div><div class="line">               sb.append(String.valueOf(bindValue.byteBinding));</div><div class="line">               <span class="keyword">break</span>;</div><div class="line">           <span class="keyword">case</span> Fields.FIELD_TYPE_SHORT:</div><div class="line">               sb.append(String.valueOf(bindValue.shortBinding));</div><div class="line">               <span class="keyword">break</span>;</div><div class="line">           <span class="keyword">case</span> Fields.FIELD_TYPE_LONG:</div><div class="line">               sb.append(String.valueOf(bindValue.intBinding));</div><div class="line">               <span class="keyword">break</span>;</div><div class="line">           <span class="comment">// .... 省略非核心代码</span></div><div class="line">        &#125;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="keyword">return</span> sb.toString();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1>4. 彩蛋</h1>
<p>💯 看到此处是不是真爱？！反正我信了。<br>
给老铁们额外加个🍗。</p>
<p>细心的同学们可能已经注意到 JDBC Client 是支持缓存 <code>PreparedStatement</code>，无需每次都让 Server 进行创建。</p>
<p>当配置 MySQL 数据连接 <code>cachePrepStmts=true</code> 时开启 Client 级别的缓存。But，<strong>此处的缓存又和一般的缓存不一样</strong>，是使用 <code>remove</code> 的方式获得的，并且创建好 <code>PreparedStatement</code> 时也不添加到缓存。那什么时候添加缓存呢？在 <code>pstmt.close()</code> 时，并且**<code>pstmt</code> 是通过缓存获取时**，添加到缓存。核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// ServerPreparedStatement.java</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">   MySQLConnection locallyScopedConn = <span class="keyword">this</span>.connection;</div><div class="line"></div><div class="line">   <span class="keyword">if</span> (locallyScopedConn == <span class="keyword">null</span>) &#123;</div><div class="line">       <span class="keyword">return</span>; <span class="comment">// already closed</span></div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="keyword">synchronized</span> (locallyScopedConn.getConnectionMutex()) &#123;</div><div class="line">       <span class="keyword">if</span> (<span class="keyword">this</span>.isCached &amp;&amp; isPoolable() &amp;&amp; !<span class="keyword">this</span>.isClosed) &#123;</div><div class="line">           clearParameters();</div><div class="line">           <span class="keyword">this</span>.isClosed = <span class="keyword">true</span>;</div><div class="line">           <span class="keyword">this</span>.connection.recachePreparedStatement(<span class="keyword">this</span>);</div><div class="line">           <span class="keyword">return</span>;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       realClose(<span class="keyword">true</span>, <span class="keyword">true</span>);</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// ConnectionImpl.java</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recachePreparedStatement</span><span class="params">(ServerPreparedStatement pstmt)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">   <span class="keyword">synchronized</span> (getConnectionMutex()) &#123;</div><div class="line">       <span class="keyword">if</span> (getCachePreparedStatements() &amp;&amp; pstmt.isPoolable()) &#123;</div><div class="line">           <span class="keyword">synchronized</span> (<span class="keyword">this</span>.serverSideStatementCache) &#123;</div><div class="line">               <span class="keyword">this</span>.serverSideStatementCache.put(makePreparedStatementCacheKey(pstmt.currentCatalog, pstmt.originalSql), pstmt);</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>为什么要这么实现？<code>PreparedStatement</code> 是有状态的变量，我们会去 <code>setXXX(pos, value)</code>，一旦多线程共享，会导致错乱。</p>
<p>🗿 这个“彩蛋”还满意么？<strong>请关注我的公众号：芋艿的后端小屋</strong>。下一篇更新：《MyCAT源码解析 —— MongoDB》，极大可能就在本周噢。</p>
<p><img src="http://www.yunai.me/images/common/wechat_mp.jpeg" alt="wechat_mp"></p>
<p>另外推荐一篇文章：<a href="https://www.zybuluo.com/stefanlu/note/254899" rel="external nofollow noopener noreferrer" target="_blank">《JDBC PreparedStatement》</a>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://www.yunai.me/images/common/wechat_mp.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;🙂🙂🙂关注**微信公众号：【芋艿的后端小屋】**有福利：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Rock
    
    </summary>
    
      <category term="MyCAT" scheme="http://www.yunai.me/categories/MyCAT/"/>
    
    
  </entry>
  
  <entry>
    <title>为什么阅读 Sharding-JDBC 源码？</title>
    <link href="http://www.yunai.me/Sharding-JDBC/why-read-Sharding-JDBC-source-code/"/>
    <id>http://www.yunai.me/Sharding-JDBC/why-read-Sharding-JDBC-source-code/</id>
    <published>2017-07-15T16:00:00.000Z</published>
    <updated>2017-07-27T17:54:13.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://www.yunai.me/images/common/wechat_mp.jpeg" alt=""></p>
<blockquote>
<p>🙂🙂🙂关注<strong>微信公众号：【芋艿的后端小屋】</strong>有福利：  </p>
<ol>
<li>RocketMQ / MyCAT / Sharding-JDBC <strong>所有</strong>源码分析文章列表  </li>
<li>RocketMQ / MyCAT / Sharding-JDBC <strong>中文注释源码 GitHub 地址</strong>  </li>
<li>您对于源码的疑问每条留言<strong>都</strong>将得到<strong>认真</strong>回复。<strong>甚至不知道如何读源码也可以请教噢</strong>。  </li>
<li><strong>新的</strong>源码解析文章<strong>实时</strong>收到通知。<strong>每周更新一篇左右</strong>。</li>
<li><strong>认真的</strong>源码交流微信群。</li>
</ol>
</blockquote>
<hr>
<h2 id="为什么阅读-Sharding-JDBC-源码？"><a href="#为什么阅读-Sharding-JDBC-源码？" class="headerlink" title="为什么阅读 Sharding-JDBC 源码？"></a>为什么阅读 Sharding-JDBC 源码？</h2><ol>
<li>看完大部分的 MyCAT 源码，有惊喜的地方，也有失望的地方，因而想看看 Sharding-JDBC 进行下对比。尽管，Sharding-JDBC 是 Client 端级别，MyCAT 是 Server 级别。</li>
<li>Sharding-JDBC 经历过当当本身业务的考验，从可靠性上来说会更让人有信赖感。</li>
<li>文档更加完善，开发体系更加健全。</li>
<li>Sharding-JDBC 1.5.0.M3 发布。</li>
<li><strong>最大努力送达型</strong>事务支持，想要进一步了解分布式事务的解决方案。Last But Very Importment。</li>
</ol>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ul>
<li><p>FROM MyCAT</p>
<p>  <strong>从 MyCAT 阅读计划复制，用于对比。</strong></p>
</li>
<li><p>[ ] <del>NIO</del></p>
</li>
<li>[ ] <del>分布式事务</del></li>
<li>[ ] <del>MyCAT 主从</del></li>
<li>[ ] <del>支持prepare预编译指令</del></li>
<li>[ ] 自增序列</li>
<li>[ ] 单库任意 Join</li>
<li>[ ] 跨库2表 Join</li>
<li>[ ] <del>跨库多表 Join</del></li>
<li>[ ] SQL 解析</li>
<li>[ ] 读写分离</li>
<li>[ ] MySQL 主从</li>
<li>[ ] <del>自动故障切换</del></li>
<li>[ ] <del>Galera Cluster 集群</del></li>
<li>[ ] <del>MHA 集群</del></li>
<li>[ ] <del>Percona 集群</del></li>
<li>[ ] <del>服务降级</del></li>
<li>[ ] <del>多租户</del></li>
<li>[ ] 路由</li>
<li>[ ] <del>MyCAT 集群</del></li>
<li>[ ] 注解</li>
<li>[ ] <del>缓存</del></li>
<li>[ ] 监控</li>
<li>[ ] <del>Mongodb</del></li>
<li>[ ] 内存管理</li>
<li>[ ] 数据聚合</li>
<li>[ ] 数据排序</li>
<li>[ ] 分表</li>
<li>[ ] 分库</li>
<li>[ ] 全局表</li>
<li>[ ] <del>E/R关系</del></li>
<li>[ ] 服务降级</li>
<li>[ ] SQL 注入攻击拦截</li>
<li>[ ] <del>MySQL 协议</del></li>
<li>[ ] <del>PostgreSQL 协议</del></li>
<li><p>[ ] 存储过程</p>
</li>
<li><p>FROM Sharding-JDBC</p>
<p>  <strong>从 官网 介绍获取。</strong></p>
</li>
<li><p>[ ] 分布式事务 ：最大努力送达型事务</p>
</li>
<li>[ ] 分布式事务 ：TCC型事务(TBD)</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://www.yunai.me/images/common/wechat_mp.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;🙂🙂🙂关注&lt;strong&gt;微信公众号：【芋艿的后端小屋】&lt;/strong&gt;有福利：  &lt;/p
    
    </summary>
    
      <category term="Sharding-JDBC" scheme="http://www.yunai.me/categories/Sharding-JDBC/"/>
    
    
  </entry>
  
  <entry>
    <title>MyCAT 源码分析  —— XA分布式事务</title>
    <link href="http://www.yunai.me/MyCAT/xa-distributed-transaction/"/>
    <id>http://www.yunai.me/MyCAT/xa-distributed-transaction/</id>
    <published>2017-07-14T16:00:00.000Z</published>
    <updated>2017-07-27T16:54:45.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://www.yunai.me/images/common/wechat_mp.jpeg" alt=""></p>
<blockquote>
<p>🙂🙂🙂关注**微信公众号：【芋艿的后端小屋】**有福利：</p>
<ol>
<li>RocketMQ / MyCAT / Sharding-JDBC <strong>所有</strong>源码分析文章列表</li>
<li>RocketMQ / MyCAT / Sharding-JDBC <strong>中文注释源码 GitHub 地址</strong></li>
<li>您对于源码的疑问每条留言<strong>都</strong>将得到<strong>认真</strong>回复。<strong>甚至不知道如何读源码也可以请教噢</strong>。</li>
<li><strong>新的</strong>源码解析文章<strong>实时</strong>收到通知。<strong>每周更新一篇左右</strong>。</li>
<li><strong>认真的</strong>源码交流微信群。</li>
</ol>
</blockquote>
<hr>
<ul>
<li><a href="#">1. 概述</a></li>
<li><a href="#">2. XA 概念</a></li>
<li><a href="#">3. MyCAT 代码实现</a>
<ul>
<li><a href="#">3.1 JDBC Demo 代码</a></li>
<li><a href="#">3.2 MyCAT 开启 XA 事务</a></li>
<li><a href="#">3.3 MyCAT 接收 SQL</a></li>
<li><a href="#">3.4 MySQL 接收 COMMIT</a>
<ul>
<li><a href="#">3.4.1 单节点事务 or 多节点事务</a></li>
<li><a href="#">3.4.2 协调日志</a></li>
<li><a href="#">3.4.3 MultiNodeCoordinator</a></li>
</ul>
</li>
<li><a href="#">3.5 MyCAT 启动回滚 XA事务</a></li>
</ul>
</li>
<li><a href="#">4. MyCAT 实现缺陷</a>
<ul>
<li><a href="#">4.1 协调日志写入性能</a></li>
<li><a href="#">4.2 数据节点未全部 PREPARE 就进行 COMMIT</a></li>
<li><a href="#">4.3 MyCAT 启动回滚 PREPARE 的 XA事务</a></li>
<li><a href="#">4.4 单节点事务未记录协调日志</a></li>
<li><a href="#">4.5 XA COMMIT 部分节点挂了重新恢复后，未进一步处理</a></li>
</ul>
</li>
<li><a href="#">5. 彩蛋</a></li>
</ul>
<hr>
<h1>1. 概述</h1>
<p>数据库拆分后，业务上会碰到需要分布式事务的场景。MyCAT 基于 XA 实现分布式事务。国内目前另外一款很火的数据库中间件 Sharding-JDBC 准备基于 TCC 实现分布式事务。</p>
<p>本文内容分成三部分：</p>
<ol>
<li>XA 概念简述</li>
<li>MyCAT 代码如何实现 XA</li>
<li>MyCAT 在实现 XA 存在的一些缺陷</li>
</ol>
<h1>2. XA 概念</h1>
<blockquote></blockquote>
<p>X/Open 组织（即现在的 Open Group ）定义了分布式事务处理模型。 X/Open DTP 模型（ 1994 ）包括：</p>
<ol>
<li>应用程序（ <strong>AP</strong> ）</li>
<li>事务管理器（ <strong>TM</strong> ）</li>
<li>资源管理器（ <strong>RM</strong> ）</li>
<li>通信资源管理器（ <strong>CRM</strong> ）<br>
一般，常见的事务管理器（ TM ）是交易中间件，常见的资源管理器（ <strong>RM</strong> ）是数据库，常见的通信资源管理器（ <strong>CRM</strong> ）是消息中间件，下图是X/Open DTP模型：</li>
</ol>
<p><img src="http://www.yunai.me/images/MyCAT/2017_07_15/01.png" alt=""></p>
<blockquote>
<p>一般的编程方式是这样的：</p>
</blockquote>
<ol>
<li>配置 <strong>TM</strong> ，通过 <strong>TM</strong> 或者 <strong>RM</strong> 提供的方式，把 <strong>RM</strong> 注册到 <strong>TM</strong>。可以理解为给 <strong>TM</strong> 注册 <strong>RM</strong> 作为数据源。一个 <strong>TM</strong> 可以注册多个 <strong>RM</strong>。</li>
<li><strong>AP</strong> 从 <strong>TM</strong> 获取资源管理器的代理（例如：使用JTA接口，从TM管理的上下文中，获取出这个TM所管理的RM的JDBC连接或JMS连接）<br>
<strong>AP</strong> 向 <strong>TM</strong> 发起一个全局事务。这时，<strong>TM</strong> 会通知各个 <strong>RM</strong>。<strong>XID</strong>（全局事务ID）会通知到各个RM。</li>
<li><strong>AP</strong> 通过 <strong>TM</strong> 中获取的连接，<strong>间接</strong>操作 <strong>RM</strong> 进行业务操作。这时，<strong>TM</strong> 在每次 <strong>AP</strong> 操作时把 <strong>XID</strong>(包括所属分支的信息)传递给 <strong>RM</strong>，<strong>RM</strong> 正是通过这个 <strong>XID</strong> 关联来操作和事务的关系的。</li>
<li><strong>AP</strong> 结束全局事务时，<strong>TM</strong> 会通知 <strong>RM</strong> 全局事务结束。开始二段提交，也就是prepare - commit的过程。</li>
</ol>
<hr>
<blockquote>
<p>XA协议指的是TM（事务管理器）和RM（资源管理器）之间的接口。目前主流的关系型数据库产品都是实现了XA接口的。JTA(Java Transaction API)是符合X/Open DTP模型的，事务管理器和资源管理器之间也使用了XA协议。 本质上也是借助两阶段提交协议来实现分布式事务的，下面分别来看看XA事务成功和失败的模型图：</p>
</blockquote>
<p><img src="http://www.yunai.me/images/MyCAT/2017_07_15/02.png" alt="成功"></p>
<p><img src="http://www.yunai.me/images/MyCAT/2017_07_15/03.png" alt="失败"></p>
<hr>
<p>😈 看到这里是不是有种黑人问号的感觉？淡定！我们接下来看 MyCAT 代码层面是如何实现 XA 的。另外，有兴趣对概念了解更多的，可以参看如下文章：</p>
<ol>
<li><a href="http://www.infoq.com/cn/articles/xa-transactions-handle" rel="external nofollow noopener noreferrer" target="_blank">《XA事务处理》</a></li>
<li><a href="https://dev.mysql.com/doc/refman/5.7/en/xa-statements.html" rel="external nofollow noopener noreferrer" target="_blank">《XA Transaction SQL Syntax》</a></li>
<li><a href="http://www.voidcn.com/blog/gao1738/article/p-4554083.html" rel="external nofollow noopener noreferrer" target="_blank">《MySQL XA 事务支持调研》</a></li>
</ol>
<h1>3. MyCAT 代码实现</h1>
<ul>
<li>MyCAT ：TM，协调者。</li>
<li>数据节点 ：RM，参与者。</li>
</ul>
<h2>3.1 JDBC Demo 代码</h2>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCATXAClientDemo</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;</div><div class="line">        <span class="comment">// 1. 获得数据库连接</span></div><div class="line">        Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</div><div class="line">        Connection conn = DriverManager.getConnection(<span class="string">"jdbc:mysql://127.0.0.1:8066/dbtest"</span>, <span class="string">"root"</span>, <span class="string">"123456"</span>);</div><div class="line">        conn.setAutoCommit(<span class="keyword">false</span>);</div><div class="line"></div><div class="line">        <span class="comment">// 2. 开启 MyCAT XA 事务</span></div><div class="line">        conn.prepareStatement(<span class="string">"set xa=on"</span>).execute();</div><div class="line"></div><div class="line">        <span class="comment">// 3. 插入 SQL</span></div><div class="line">        <span class="comment">// 3.1 SQL1 A库</span></div><div class="line">        <span class="keyword">long</span> uid = Math.abs(<span class="keyword">new</span> Random().nextLong());</div><div class="line">        String username = UUID.randomUUID().toString();</div><div class="line">        String password = UUID.randomUUID().toString();</div><div class="line">        String sql1 = String.format(<span class="string">"insert into t_user(id, username, password) VALUES (%d, '%s', '%s')"</span>,</div><div class="line">                uid, username, password);</div><div class="line">        conn.prepareStatement(sql1).execute();</div><div class="line">        <span class="comment">// 3.2 SQL2 B库</span></div><div class="line">        <span class="keyword">long</span> orderId = Math.abs(<span class="keyword">new</span> Random().nextLong());</div><div class="line">        String nickname = UUID.randomUUID().toString();</div><div class="line">        String sql2 = String.format(<span class="string">"insert into t_order(id, uid, nickname) VALUES(%d, %s, '%s')"</span>, orderId, uid, nickname);</div><div class="line">        conn.prepareStatement(sql2).execute();</div><div class="line"></div><div class="line">        <span class="comment">// 4. 提交 XA 事务</span></div><div class="line">        conn.commit();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li><code>set xa=on</code> MyCAT 开启 XA 事务。</li>
<li><code>conn.commit</code> 提交 XA 事务。</li>
</ul>
<h2>3.2 MyCAT 开启 XA 事务</h2>
<p>当 MyCAT 接收到 <code>set xa = on</code> 命令时，开启 XA 事务，并生成 XA 事务编号。XA 事务编号生成算法为 UUID。核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// SetHandler.java</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(String stmt, ServerConnection c, <span class="keyword">int</span> offset)</span> </span>&#123;</div><div class="line">		<span class="keyword">int</span> rs = ServerParseSet.parse(stmt, offset);</div><div class="line">		<span class="keyword">switch</span> (rs &amp; <span class="number">0xff</span>) &#123;</div><div class="line">		<span class="comment">// ... 省略代码</span></div><div class="line">		<span class="keyword">case</span> XA_FLAG_ON: &#123;</div><div class="line">			<span class="keyword">if</span> (c.isAutocommit()) &#123;</div><div class="line">				c.writeErrMessage(ErrorCode.ERR_WRONG_USED, <span class="string">"set xa cmd on can't used in autocommit connection "</span>);</div><div class="line">				<span class="keyword">return</span>;</div><div class="line">			&#125;</div><div class="line">			c.getSession2().setXATXEnabled(<span class="keyword">true</span>);</div><div class="line">			c.write(c.writeToBuffer(OkPacket.OK, c.allocate()));</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">case</span> XA_FLAG_OFF: &#123;</div><div class="line">			c.writeErrMessage(ErrorCode.ERR_WRONG_USED,</div><div class="line">					<span class="string">"set xa cmd off not for external use "</span>);</div><div class="line">			<span class="keyword">return</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="comment">// ... 省略代码</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// NonBlockingSession.java</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setXATXEnabled</span><span class="params">(<span class="keyword">boolean</span> xaTXEnabled)</span> </span>&#123;</div><div class="line">   <span class="keyword">if</span> (xaTXEnabled) &#123;</div><div class="line">       <span class="keyword">if</span> (<span class="keyword">this</span>.xaTXID == <span class="keyword">null</span>) &#123;</div><div class="line">           xaTXID = genXATXID(); <span class="comment">// 😈😈😈获得 XA 事务编号</span></div><div class="line">       &#125;</div><div class="line">   &#125; <span class="keyword">else</span> &#123;</div><div class="line">       <span class="keyword">this</span>.xaTXID = <span class="keyword">null</span>;</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">private</span> String <span class="title">genXATXID</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">return</span> MycatServer.getInstance().getXATXIDGLOBAL();</div><div class="line">&#125;</div><div class="line"><span class="comment">// MycatServer.java</span></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getXATXIDGLOBAL</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">return</span> <span class="string">"'"</span> + getUUID() + <span class="string">"'"</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getUUID</span><span class="params">()</span> </span>&#123; <span class="comment">// 😈😈😈</span></div><div class="line">   String s = UUID.randomUUID().toString();</div><div class="line">   <span class="keyword">return</span> s.substring(<span class="number">0</span>, <span class="number">8</span>) + s.substring(<span class="number">9</span>, <span class="number">13</span>) + s.substring(<span class="number">14</span>, <span class="number">18</span>) + s.substring(<span class="number">19</span>, <span class="number">23</span>) + s.substring(<span class="number">24</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2>3.3 MyCAT 接收 SQL</h2>
<p>此处 SQL 指的是 <code>insert</code>、<code>update</code>、<code>delete</code> 操作。</p>
<p>当向某个数据节点<strong>第一次</strong>发起 SQL 时，会在 SQL 前面附加 <code>XA START 'xaTranId'</code>，并设置该数据节点<strong>连接</strong>事务状态为 <code>TxState.TX_STARTED_STATE</code>（<em>分布式事务状态，下文会专门整理</em>）。核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// MySQLConnection.java</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">synAndDoExecute</span><span class="params">(String xaTxID, RouteResultsetNode rrn,</span></span></div><div class="line">                                 <span class="keyword">int</span> clientCharSetIndex, <span class="keyword">int</span> clientTxIsoLation,</div><div class="line">                                 <span class="keyword">boolean</span> clientAutoCommit) &#123;</div><div class="line">   String xaCmd = <span class="keyword">null</span>;</div><div class="line">   <span class="keyword">boolean</span> conAutoComit = <span class="keyword">this</span>.autocommit;</div><div class="line">   String conSchema = <span class="keyword">this</span>.schema;</div><div class="line">   <span class="comment">// never executed modify sql,so auto commit</span></div><div class="line">   <span class="keyword">boolean</span> expectAutocommit = !modifiedSQLExecuted || isFromSlaveDB() || clientAutoCommit;</div><div class="line">   <span class="keyword">if</span> (expectAutocommit == <span class="keyword">false</span> &amp;&amp; xaTxID != <span class="keyword">null</span> &amp;&amp; xaStatus == TxState.TX_INITIALIZE_STATE) &#123; <span class="comment">// 😈😈😈</span></div><div class="line">       xaCmd = <span class="string">"XA START "</span> + xaTxID + <span class="string">';'</span>;</div><div class="line">       <span class="keyword">this</span>.xaStatus = TxState.TX_STARTED_STATE;</div><div class="line">   &#125;</div><div class="line">   <span class="comment">// .... 省略代码</span></div><div class="line">   StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">   <span class="comment">// .... 省略代码</span></div><div class="line">   <span class="keyword">if</span> (xaCmd != <span class="keyword">null</span>) &#123;</div><div class="line">       sb.append(xaCmd);</div><div class="line">   &#125;</div><div class="line">   <span class="comment">// and our query sql to multi command at last</span></div><div class="line">   sb.append(rrn.getStatement() + <span class="string">";"</span>);</div><div class="line">   <span class="comment">// syn and execute others</span></div><div class="line">   <span class="keyword">this</span>.sendQueryCmd(sb.toString());</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>举个 变量<code>sb</code> 的例子：</p>
<p><figure class="highlight sql"><table><tr><td class="code"><pre><div class="line"><span class="keyword">SET</span> <span class="keyword">names</span> utf8;<span class="keyword">SET</span> autocommit=<span class="number">0</span>;XA <span class="keyword">START</span> <span class="string">'1f2da7353e8846e5833b8d8dd041cfb1'</span>,<span class="string">'db2'</span>;<span class="keyword">insert</span> <span class="keyword">into</span> t_user(<span class="keyword">id</span>, username, <span class="keyword">password</span>) <span class="keyword">VALUES</span> (<span class="number">3400</span>, <span class="string">'b7c5ec1f-11cc-4599-851c-06ad617fec42'</span>, <span class="string">'d2694679-f6a2-4623-a339-48d4a868be90'</span>);</div></pre></td></tr></table></figure></p>
<h2>3.4 MySQL 接收 COMMIT</h2>
<h3>3.4.1 单节点事务 or 多节点事务</h3>
<p><code>COMMIT</code> 执行时，MyCAT 会判断 XA 事务里，涉及到的数据库节点数量。</p>
<ul>
<li>如果节点数量为 1，单节点事务，使用 <code>CommitNodeHandler</code> 处理。</li>
<li>如果节点数量 &gt; 1，多节点事务，使用 <code>MultiNodeCoordinator</code> 处理。</li>
</ul>
<p><code>CommitNodeHandler</code> 相比 <code>MultiNodeCoordinator</code> 来说，只有一个数据节点，不需要进行多节点协调，逻辑会相对简单，有兴趣的同学可以另外看。我们主要分析 <code>MultiNodeCoordinator</code>。</p>
<h3>3.4.2 协调日志</h3>
<p><strong>协调日志</strong>，记录协调过程中各数据节点 XA 事务状态，处理<strong>MyCAT异常奔溃</strong>或者<strong>数据节点部分XA COMMIT，另外部分 XA PREPARE</strong>下的状态恢复。</p>
<p><strong>XA 事务共有种</strong>：</p>
<ol>
<li>TX_INITIALIZE_STATE ：事务初始化</li>
<li>TX_STARTED_STATE ：事务开始完成</li>
<li>TX_PREPARED_STATE ：事务准备完成</li>
<li>TX_COMMITED_STATE ：事务提交完成</li>
<li>TX_ROLLBACKED_STATE ：事务回滚完成</li>
</ol>
<p><strong>状态变更流</strong> ：TX_INITIALIZE_STATE =&gt; TX_STARTED_STATE =&gt; TX_PREPARED_STATE =&gt; TX_COMMITED_STATE / TX_ROLLBACKED_STATE 。</p>
<p><strong>协调日志包含两个部分</strong>：</p>
<ol>
<li>CoordinatorLogEntry ：协调者日志</li>
<li>ParticipantLogEntry ：参与者日志。<strong>此处，数据节点扮演参与者的角色。下文中，可能会出现参与者与数据节点混用的情况，望见谅。</strong></li>
</ol>
<p><em>一次 XA 事务，对应一条 <code>CoordinatorLogEntry</code>。一条<code>CoordinatorLogEntry</code> 包含 N条<code>ParticipantLogEntry</code></em>。 核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// CoordinatorLogEntry ：协调者日志</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CoordinatorLogEntry</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * XA 事务编号</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String id;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 参与者日志数组</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> ParticipantLogEntry[] participants;</div><div class="line">&#125;</div><div class="line"><span class="comment">// ParticipantLogEntry ：参与者日志</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParticipantLogEntry</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * XA 事务编号</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> String coordinatorId;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 数据库 uri</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> String uri;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 过期描述</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">long</span> expires;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * XA 事务状态</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> txState;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 参与者名字</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> String resourceName;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>MyCAT 记录协调日志以 JSON格式 到文件</strong>。<strong>每行</strong>包含一条<code>CoordinatorLogEntry</code>。举个例子：</p>
<p><figure class="highlight json"><table><tr><td class="code"><pre><div class="line">&#123;<span class="attr">"id"</span>:<span class="string">"'e827b3fe666c4d968961350d19adda31'"</span>,<span class="attr">"participants"</span>:[&#123;<span class="attr">"uri"</span>:<span class="string">"127.0.0.1"</span>,<span class="attr">"state"</span>:<span class="string">"3"</span>,<span class="attr">"expires"</span>:<span class="number">0</span>,<span class="attr">"resourceName"</span>:<span class="string">"db3"</span>&#125;,&#123;<span class="attr">"uri"</span>:<span class="string">"127.0.0.1"</span>,<span class="attr">"state"</span>:<span class="string">"3"</span>,<span class="attr">"expires"</span>:<span class="number">0</span>,<span class="attr">"resourceName"</span>:<span class="string">"db1"</span>&#125;]&#125;</div><div class="line">&#123;<span class="attr">"id"</span>:<span class="string">"'f00b61fa17cb4ec5b8264a6d82f847d0'"</span>,<span class="attr">"participants"</span>:[&#123;<span class="attr">"uri"</span>:<span class="string">"127.0.0.1"</span>,<span class="attr">"state"</span>:<span class="string">"3"</span>,<span class="attr">"expires"</span>:<span class="number">0</span>,<span class="attr">"resourceName"</span>:<span class="string">"db2"</span>&#125;,&#123;<span class="attr">"uri"</span>:<span class="string">"127.0.0.1"</span>,<span class="attr">"state"</span>:<span class="string">"3"</span>,<span class="attr">"expires"</span>:<span class="number">0</span>,<span class="attr">"resourceName"</span>:<span class="string">"db1"</span>&#125;]&#125;</div></pre></td></tr></table></figure></p>
<p>实现类为：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// XA 协调者日志 存储接口：https://github.com/YunaiV/Mycat-Server/blob/1.6/src/main/java/io/mycat/backend/mysql/xa/recovery/Repository.java</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Repository</span> </span>&#123;&#125;</div><div class="line"><span class="comment">// XA 协调者日志 文件存储：https://github.com/YunaiV/Mycat-Server/blob/1.6/src/main/java/io/mycat/backend/mysql/xa/recovery/impl/FileSystemRepository.java</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileSystemRepository</span> <span class="keyword">implements</span> <span class="title">Repository</span> </span>&#123;&#125;</div><div class="line"><span class="comment">// XA 协调者日志 文件存储：https://github.com/YunaiV/Mycat-Server/blob/1.6/src/main/java/io/mycat/backend/mysql/xa/recovery/impl/InMemoryRepository.java</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InMemoryRepository</span> <span class="keyword">implements</span> <span class="title">Repository</span> </span>&#123;&#125;</div></pre></td></tr></table></figure></p>
<p>目前日志文件写入的方式性能较差，这里我们不做分析，在【4. MyCAT 实现缺陷】里一起讲。</p>
<h3>3.4.3 MultiNodeCoordinator</h3>
<p>敲敲敲，这里是本文的重点之一噢。😈</p>
<p><strong>第一阶段：发起 PREPARE。</strong></p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">executeBatchNodeCmd</span><span class="params">(SQLCtrlCommand cmdHandler)</span> </span>&#123;</div><div class="line">   <span class="keyword">this</span>.cmdHandler = cmdHandler;</div><div class="line">   <span class="keyword">final</span> <span class="keyword">int</span> initCount = session.getTargetCount();</div><div class="line">   runningCount.set(initCount);</div><div class="line">   nodeCount = initCount;</div><div class="line">   failed.set(<span class="keyword">false</span>);</div><div class="line">   faileCount.set(<span class="number">0</span>);</div><div class="line">   <span class="comment">//recovery nodes log</span></div><div class="line">   ParticipantLogEntry[] participantLogEntry = <span class="keyword">new</span> ParticipantLogEntry[initCount];</div><div class="line">   <span class="comment">// 执行</span></div><div class="line">   <span class="keyword">int</span> started = <span class="number">0</span>;</div><div class="line">   <span class="keyword">for</span> (RouteResultsetNode rrn : session.getTargetKeys()) &#123;</div><div class="line">       <span class="keyword">if</span> (rrn == <span class="keyword">null</span>) &#123;</div><div class="line">           <span class="keyword">continue</span>;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">final</span> BackendConnection conn = session.getTarget(rrn);</div><div class="line">       <span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</div><div class="line">           conn.setResponseHandler(<span class="keyword">this</span>);</div><div class="line">           <span class="comment">//process the XA_END XA_PREPARE Command</span></div><div class="line">           MySQLConnection mysqlCon = (MySQLConnection) conn;</div><div class="line">           String xaTxId = <span class="keyword">null</span>;</div><div class="line">           <span class="keyword">if</span> (session.getXaTXID() != <span class="keyword">null</span>) &#123;</div><div class="line">               xaTxId = session.getXaTXID() + <span class="string">",'"</span> + mysqlCon.getSchema() + <span class="string">"'"</span>;</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">if</span> (mysqlCon.getXaStatus() == TxState.TX_STARTED_STATE) &#123; <span class="comment">// XA 事务</span></div><div class="line">               <span class="comment">//recovery Log</span></div><div class="line">               participantLogEntry[started] = <span class="keyword">new</span> ParticipantLogEntry(xaTxId, conn.getHost(), <span class="number">0</span>, conn.getSchema(), ((MySQLConnection) conn).getXaStatus());</div><div class="line">               String[] cmds = <span class="keyword">new</span> String[]&#123;<span class="string">"XA END "</span> + xaTxId, <span class="comment">// XA END 命令</span></div><div class="line">                       <span class="string">"XA PREPARE "</span> + xaTxId&#125;; <span class="comment">// XA PREPARE 命令</span></div><div class="line">               mysqlCon.execBatchCmd(cmds);</div><div class="line">           &#125; <span class="keyword">else</span> &#123; <span class="comment">// 非 XA 事务</span></div><div class="line">               <span class="comment">// recovery Log</span></div><div class="line">               participantLogEntry[started] = <span class="keyword">new</span> ParticipantLogEntry(xaTxId, conn.getHost(), <span class="number">0</span>, conn.getSchema(), ((MySQLConnection) conn).getXaStatus());</div><div class="line">               cmdHandler.sendCommand(session, conn);</div><div class="line">           &#125;</div><div class="line">           ++started;</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">   <span class="comment">// xa recovery log</span></div><div class="line">   <span class="keyword">if</span> (session.getXaTXID() != <span class="keyword">null</span>) &#123;</div><div class="line">       CoordinatorLogEntry coordinatorLogEntry = <span class="keyword">new</span> CoordinatorLogEntry(session.getXaTXID(), <span class="keyword">false</span>, participantLogEntry);</div><div class="line">       inMemoryRepository.put(session.getXaTXID(), coordinatorLogEntry);</div><div class="line">       fileRepository.writeCheckpoint(inMemoryRepository.getAllCoordinatorLogEntries());</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">if</span> (started &lt; nodeCount) &#123; <span class="comment">// TODO 疑问：如何触发</span></div><div class="line">       runningCount.set(started);</div><div class="line">       LOGGER.warn(<span class="string">"some connection failed to execute "</span> + (nodeCount - started));</div><div class="line">       <span class="comment">/**</span></div><div class="line">        * assumption: only caused by front-end connection close. &lt;br/&gt;</div><div class="line">        * Otherwise, packet must be returned to front-end</div><div class="line">        */</div><div class="line">       failed.set(<span class="keyword">true</span>);</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>向各数据节点发送 <code>XA END</code> + <code>XA PREPARE</code> 指令。举个 变量<code>cmds</code> 例子：</li>
</ul>
<p><figure class="highlight sql"><table><tr><td class="code"><pre><div class="line">XA <span class="keyword">END</span> <span class="string">'4cbb18214d0b47adbdb0658598666677'</span>,<span class="string">'db3'</span>;XA <span class="keyword">PREPARE</span> <span class="string">'4cbb18214d0b47adbdb0658598666677'</span>,<span class="string">'db3'</span>;</div></pre></td></tr></table></figure></p>
<ul>
<li>记录协调日志。每条参与者日志状态为 <code>TxState.TX_STARTED_STATE</code>。</li>
</ul>
<hr>
<p><strong>第二阶段：发起 COMMIT。</strong></p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">okResponse</span><span class="params">(<span class="keyword">byte</span>[] ok, BackendConnection conn)</span> </span>&#123;</div><div class="line">   <span class="comment">// process the XA Transatcion 2pc commit</span></div><div class="line">   <span class="keyword">if</span> (conn <span class="keyword">instanceof</span> MySQLConnection) &#123;</div><div class="line">       MySQLConnection mysqlCon = (MySQLConnection) conn;</div><div class="line">       <span class="keyword">switch</span> (mysqlCon.getXaStatus()) &#123;</div><div class="line">           <span class="keyword">case</span> TxState.TX_STARTED_STATE:</div><div class="line">               <span class="comment">//if there have many SQL execute wait the okResponse,will come to here one by one</span></div><div class="line">               <span class="comment">//should be wait all nodes ready ,then send xa commit to all nodes.</span></div><div class="line">               <span class="keyword">if</span> (mysqlCon.batchCmdFinished()) &#123;</div><div class="line">                   String xaTxId = session.getXaTXID();</div><div class="line">                   String cmd = <span class="string">"XA COMMIT "</span> + xaTxId + <span class="string">",'"</span> + mysqlCon.getSchema() + <span class="string">"'"</span>;</div><div class="line">                   <span class="keyword">if</span> (LOGGER.isDebugEnabled()) &#123;</div><div class="line">                       LOGGER.debug(<span class="string">"Start execute the cmd :"</span> + cmd + <span class="string">",current host:"</span> + mysqlCon.getHost() + <span class="string">":"</span> + mysqlCon.getPort());</div><div class="line">                   &#125;</div><div class="line">                   <span class="comment">// recovery log</span></div><div class="line">                   CoordinatorLogEntry coordinatorLogEntry = inMemoryRepository.get(xaTxId);</div><div class="line">                   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; coordinatorLogEntry.participants.length; i++) &#123;</div><div class="line">                       LOGGER.debug(<span class="string">"[In Memory CoordinatorLogEntry]"</span> + coordinatorLogEntry.participants[i]);</div><div class="line">                       <span class="keyword">if</span> (coordinatorLogEntry.participants[i].resourceName.equals(conn.getSchema())) &#123;</div><div class="line">                           coordinatorLogEntry.participants[i].txState = TxState.TX_PREPARED_STATE;</div><div class="line">                       &#125;</div><div class="line">                   &#125;</div><div class="line">                   inMemoryRepository.put(xaTxId, coordinatorLogEntry);</div><div class="line">                   fileRepository.writeCheckpoint(inMemoryRepository.getAllCoordinatorLogEntries());</div><div class="line">                   <span class="comment">// send commit</span></div><div class="line">                   mysqlCon.setXaStatus(TxState.TX_PREPARED_STATE);</div><div class="line">                   mysqlCon.execCmd(cmd);</div><div class="line">               &#125;</div><div class="line">               <span class="keyword">return</span>;</div><div class="line">           <span class="keyword">case</span> TxState.TX_PREPARED_STATE: &#123;</div><div class="line">               <span class="comment">// recovery log</span></div><div class="line">               String xaTxId = session.getXaTXID();</div><div class="line">               CoordinatorLogEntry coordinatorLogEntry = inMemoryRepository.get(xaTxId);</div><div class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; coordinatorLogEntry.participants.length; i++) &#123;</div><div class="line">                   <span class="keyword">if</span> (coordinatorLogEntry.participants[i].resourceName.equals(conn.getSchema())) &#123;</div><div class="line">                       coordinatorLogEntry.participants[i].txState = TxState.TX_COMMITED_STATE;</div><div class="line">                   &#125;</div><div class="line">               &#125;</div><div class="line">               inMemoryRepository.put(xaTxId, coordinatorLogEntry);</div><div class="line">               fileRepository.writeCheckpoint(inMemoryRepository.getAllCoordinatorLogEntries());</div><div class="line">               <span class="comment">// XA reset status now</span></div><div class="line">               mysqlCon.setXaStatus(TxState.TX_INITIALIZE_STATE);</div><div class="line">               <span class="keyword">break</span>;</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">default</span>:</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">   <span class="comment">// 释放连接</span></div><div class="line">   <span class="keyword">if</span> (<span class="keyword">this</span>.cmdHandler.relaseConOnOK()) &#123;</div><div class="line">       session.releaseConnection(conn);</div><div class="line">   &#125; <span class="keyword">else</span> &#123;</div><div class="line">       session.releaseConnectionIfSafe(conn, LOGGER.isDebugEnabled(), <span class="keyword">false</span>);</div><div class="line">   &#125;</div><div class="line">   <span class="comment">// 是否所有节点都完成commit，如果是，则返回Client 成功</span></div><div class="line">   <span class="keyword">if</span> (<span class="keyword">this</span>.finished()) &#123;</div><div class="line">       cmdHandler.okResponse(session, ok);</div><div class="line">       <span class="keyword">if</span> (cmdHandler.isAutoClearSessionCons()) &#123;</div><div class="line">           session.clearResources(<span class="keyword">false</span>);</div><div class="line">       &#125;</div><div class="line">       <span class="comment">/* 1.  事务提交后,xa 事务结束   */</span></div><div class="line">       <span class="keyword">if</span> (session.getXaTXID() != <span class="keyword">null</span>) &#123;</div><div class="line">           session.setXATXEnabled(<span class="keyword">false</span>);</div><div class="line">       &#125;</div><div class="line">       <span class="comment">/* 2. preAcStates 为true,事务结束后,需要设置为true。preAcStates 为ac上一个状态    */</span></div><div class="line">       <span class="keyword">if</span> (session.getSource().isPreAcStates()) &#123;</div><div class="line">           session.getSource().setAutocommit(<span class="keyword">true</span>);</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li><code>mysqlCon.batchCmdFinished()</code> 每个数据节点，第一次返回的是 <code>XA END</code> 成功，第二次返回的是 <code>XA PREPARE</code>。在 <code>XA PREPARE</code> 成功后，记录该数据节点的<strong>参与者日志</strong>状态为 <code>TxState.TX_PREPARED_STATE</code>。之后，向该数据节点发起 <code>XA COMMIT</code> 命令。</li>
<li><code>XA COMMIT</code> 返回成功后，记录该数据节点的<strong>事务参与者日志</strong>状态为 <code>TxState.TX_COMMITED_STATE</code>。</li>
<li>当所有数据节点（参与者）都执行完成 <code>XA COMMIT</code> 返回，即 <code>this.finished() == true</code>，返回 MySQL Client XA 事务提交成功。</li>
</ul>
<p>[x] <code>XA PREPARE</code> 和 <code>XA COMMIT</code>，数据节点可能返回失败，目前暂时没模拟出来，对应方法为 <code>#errorResponse(....)</code>。</p>
<h2>3.5 MyCAT 启动回滚 XA事务</h2>
<p>MyCAT 启动时，会<strong>回滚处于TxState.TX_PREPARED_STATE</strong>的 <code>ParticipantLogEntry</code> 对应的数据节点的 XA 事务。代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// MycatServer.java</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">performXARecoveryLog</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="comment">// fetch the recovery log</span></div><div class="line">   CoordinatorLogEntry[] coordinatorLogEntries = getCoordinatorLogEntries();</div><div class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; coordinatorLogEntries.length; i++) &#123;</div><div class="line">       CoordinatorLogEntry coordinatorLogEntry = coordinatorLogEntries[i];</div><div class="line">       <span class="keyword">boolean</span> needRollback = <span class="keyword">false</span>;</div><div class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; coordinatorLogEntry.participants.length; j++) &#123;</div><div class="line">           ParticipantLogEntry participantLogEntry = coordinatorLogEntry.participants[j];</div><div class="line">           <span class="keyword">if</span> (participantLogEntry.txState == TxState.TX_PREPARED_STATE) &#123;</div><div class="line">               needRollback = <span class="keyword">true</span>;</div><div class="line">               <span class="keyword">break</span>;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">if</span> (needRollback) &#123;</div><div class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; coordinatorLogEntry.participants.length; j++) &#123;</div><div class="line">               ParticipantLogEntry participantLogEntry = coordinatorLogEntry.participants[j];</div><div class="line">               <span class="comment">//XA rollback</span></div><div class="line">               String xacmd = <span class="string">"XA ROLLBACK "</span> + coordinatorLogEntry.id + <span class="string">';'</span>;</div><div class="line">               OneRawSQLQueryResultHandler resultHandler = <span class="keyword">new</span> OneRawSQLQueryResultHandler(<span class="keyword">new</span> String[<span class="number">0</span>], <span class="keyword">new</span> XARollbackCallback());</div><div class="line">               outloop:</div><div class="line">               <span class="keyword">for</span> (SchemaConfig schema : MycatServer.getInstance().getConfig().getSchemas().values()) &#123;</div><div class="line">                   <span class="keyword">for</span> (TableConfig table : schema.getTables().values()) &#123;</div><div class="line">                       <span class="keyword">for</span> (String dataNode : table.getDataNodes()) &#123;</div><div class="line">                           PhysicalDBNode dn = MycatServer.getInstance().getConfig().getDataNodes().get(dataNode);</div><div class="line">                           <span class="keyword">if</span> (dn.getDbPool().getSource().getConfig().getIp().equals(participantLogEntry.uri)</div><div class="line">                                   &amp;&amp; dn.getDatabase().equals(participantLogEntry.resourceName)) &#123;</div><div class="line">                               <span class="comment">//XA STATE ROLLBACK</span></div><div class="line">                               participantLogEntry.txState = TxState.TX_ROLLBACKED_STATE;</div><div class="line">                               SQLJob sqlJob = <span class="keyword">new</span> SQLJob(xacmd, dn.getDatabase(), resultHandler, dn.getDbPool().getSource());</div><div class="line">                               sqlJob.run();</div><div class="line">                               <span class="keyword">break</span> outloop;</div><div class="line">                           &#125;</div><div class="line">                       &#125;</div><div class="line">                   &#125;</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">   <span class="comment">// init into in memory cached</span></div><div class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; coordinatorLogEntries.length; i++) &#123;</div><div class="line">  MultiNodeCoordinator.inMemoryRepository.put(coordinatorLogEntries[i].id, coordinatorLogEntries[i]);</div><div class="line">   &#125;</div><div class="line">   <span class="comment">// discard the recovery log</span></div><div class="line">    MultiNodeCoordinator.fileRepository.writeCheckpoint(MultiNodeCoordinator.inMemoryRepository.getAllCoordinatorLogEntries());</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1>4. MyCAT 实现缺陷</h1>
<p>MyCAT 1.6.5 版本实现弱XA事务，相对来说，笔者认为距离实际生产使用存在一些差距。下面罗列可能存在的缺陷，如有错误，麻烦指出。🙂希望 MyCAT 在分布式事务的实现上，能够越来越给力。</p>
<h2>4.1 协调日志写入性能</h2>
<p>1、<code>CoordinatorLogEntry</code>、<code>ParticipantLogEntry</code> 在每次写入文件时，是将内存中所有的日志<strong>全部重新</strong>写入，导致写入性能随着 XA 事务次数的增加，性能会越来越糟糕，导致 XA 事务整体性能会非常差。另外，该方法是<strong>同步</strong>的，也加大了写入的延迟。</p>
<p>建议：先获得可写入文件的 OFFSET，写入协调日志到文件，内存维护好 XA事务编号 与 OFFSET 的映射关系，从而实现<strong>顺序写入</strong> + <strong>并行写入</strong>。</p>
<p>2、内存里维护了所有的协调日志，占用内存会越来越大，并且无释放机制。即使重启，协调日志也会重新加载到内存。</p>
<p>建议：已完全回滚或者提交的协调日志不放入内存。另外有文件存储好 XA事务编号 与 OFFSET 的映射关系。</p>
<p>3、协调日志只写入单个文件。</p>
<p>建议：分拆协调日志文件。</p>
<p>PS：有兴趣的同学可以看下 <code>RocketMQ</code> 对 <code>CommitLog</code> 的存储，性能上很赞！</p>
<h2>4.2 数据节点未全部 PREPARE 就进行 COMMIT</h2>
<p>XA 事务定义，需要等待所有参与者<strong>全部</strong> <code>XA PREPARE</code> 成功完成后发起 <code>XA COMMIT</code>。目前 MyCAT 是某个数据节点 <code>XA PREPARE</code> 完成后<strong>立即</strong>进行 <code>XA COMMIT</code>。比如说：第一个数据节点提交了 <code>XA END;XA PREPARE</code> 时，第二个数据节在进行 <code>XA END;XA PREAPRE;</code> 前挂了，第一个节点依然会 <code>XA COMMIT</code> 成功。</p>
<p>建议：按照严格的 XA 事务定义。</p>
<h2>4.3 MyCAT 启动回滚 PREPARE 的 XA事务</h2>
<p>1、MyCAT 启动时，回滚所有的 <code>PREPARE</code> 的 XA 事务，可能某个 XA 事务，部分 <code>COMMIT</code>，部分 <code>PREPARE</code>。此时直接回滚，会导致数据不一致。</p>
<p>建议：当判断到某个 XA 事务存在 <code>PREPARE</code> 的参与者，<strong>同时判断该 XA 事务里其他参与者的事务状态</strong>以及<strong>数据节点里 XA 事务状态</strong>，比如参与者为 <code>MySQL</code>时，可以使用 <code>XA RECOVER</code> 查询处于 <code>PREPARE</code> 所有的 XA 事务。</p>
<p>2、回滚 <code>PREPARE</code> 是异步进行的，在未进行完成时已经设置文件里回滚成功。如果异步过程中失败，会导致 XA 事务状态不一致。</p>
<p>建议：回调成功后，更新该 XA 事务状态。</p>
<h2>4.4 单节点事务未记录协调日志</h2>
<p>该情况较为极端。发起 <code>XA PREPARE</code>完后，MyCAT 挂了。重启后，该 XA 事务在 MyCAT 里就“消失“了，参与者的该 XA 事务一直处于 <code>PREPARE</code> 状态。从理论上来说，需要回滚该 XA 事务。</p>
<p>建议：记录协调日志。</p>
<h2>4.5 XA COMMIT 部分节点挂了重新恢复后，未进一步处理</h2>
<p>当一部分节点 <code>XA COMMIT</code> 完成，另外一部分此时挂了。在管理员重启挂掉的节点，其对应的 XA 事务未进一步处理，导致数据不一致。</p>
<p>建议：😈木有建议。也很好奇，如果是这样的情况，如何处理较为合适。如有大大知道，烦请告知下。</p>
<h1>5. 彩蛋</h1>
<p>例行“彩蛋”？</p>
<ul>
<li><a href="http://blog.csdn.net/d6619309/article/details/52330334" rel="external nofollow noopener noreferrer" target="_blank">《Mycat源码篇 : MyCat事务管理机制分析》</a> 来自 MyCAT Committer 的文章</li>
<li><a href="http://mysql.taobao.org/monthly/2015/04/05/" rel="external nofollow noopener noreferrer" target="_blank">《MySQL · 捉虫动态 · 连接断开导致XA事务丢失》</a></li>
<li><a href="http://www.infoq.com/cn/articles/solution-of-distributed-system-transaction-consistency" rel="external nofollow noopener noreferrer" target="_blank">《分布式系统事务一致性解决方案》</a></li>
<li><a href="http://blog.csdn.net/fly2749/article/details/44998203" rel="external nofollow noopener noreferrer" target="_blank">《MySQL数据库分布式事务XA优缺点与改进方案》</a></li>
<li><a href="http://www.hollischuang.com/archives/1580" rel="external nofollow noopener noreferrer" target="_blank">《深入理解分布式系统的2PC和3PC》</a></li>
<li><a href="https://github.com/YunaiV/yunaiv.github.io/blob/master/source/_drafts/MyCAT/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1.xmind" target="_blank" rel="external">【分布式事务.xmind】</a> 笔者拙作</li>
<li><a href="http://www.yunai.me/RocketMQ/message-transaction/?self">《RocketMQ 源码分析 —— 事务消息》</a> 笔者拙作</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://www.yunai.me/images/common/wechat_mp.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;🙂🙂🙂关注**微信公众号：【芋艿的后端小屋】**有福利：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Rock
    
    </summary>
    
      <category term="MyCAT" scheme="http://www.yunai.me/categories/MyCAT/"/>
    
    
  </entry>
  
  <entry>
    <title>MyCAT 源码分析  —— 跨库两表Join</title>
    <link href="http://www.yunai.me/MyCAT/two-table-share-join/"/>
    <id>http://www.yunai.me/MyCAT/two-table-share-join/</id>
    <published>2017-07-11T16:00:00.000Z</published>
    <updated>2017-07-27T16:54:41.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://www.yunai.me/images/common/wechat_mp.jpeg" alt=""></p>
<blockquote>
<p>🙂🙂🙂关注**微信公众号：【芋艿的后端小屋】**有福利：</p>
<ol>
<li>RocketMQ / MyCAT / Sharding-JDBC <strong>所有</strong>源码分析文章列表</li>
<li>RocketMQ / MyCAT / Sharding-JDBC <strong>中文注释源码 GitHub 地址</strong></li>
<li>您对于源码的疑问每条留言<strong>都</strong>将得到<strong>认真</strong>回复。<strong>甚至不知道如何读源码也可以请教噢</strong>。</li>
<li><strong>新的</strong>源码解析文章<strong>实时</strong>收到通知。<strong>每周更新一篇左右</strong>。</li>
<li><strong>认真的</strong>源码交流微信群。</li>
</ol>
</blockquote>
<hr>
<ul>
<li><a href="#">1. 概述</a></li>
<li><a href="#">2. 主流程</a></li>
<li><a href="#">3. ShareJoin</a>
<ul>
<li><a href="#">3.1 JoinParser</a></li>
<li><a href="#">3.2 ShareJoin.processSQL(...)</a></li>
<li><a href="#">3.3 BatchSQLJob</a></li>
<li><a href="#">3.4 ShareDBJoinHandler</a></li>
<li><a href="#">3.5 ShareRowOutPutDataHandler</a></li>
</ul>
</li>
<li><a href="#">4. 彩蛋</a></li>
</ul>
<hr>
<h1>1. 概述</h1>
<p>MyCAT 支持跨库表 Join，目前版本仅支持跨库<strong>两</strong>表 Join。虽然如此，已经能够满足我们大部分的业务场景。况且，Join 过多的表可能带来的性能问题也是很麻烦的。</p>
<p>本文主要分享：</p>
<ol>
<li>整体流程、调用顺序图</li>
<li>核心代码的分析</li>
</ol>
<p>前置阅读：<a href="http://www.yunai.me/MyCAT/single-db-single-table-select/?yunai">《MyCAT 源码分析 —— 【单库单表】查询》</a>。</p>
<p>OK，Let's Go。</p>
<h1>2. 主流程</h1>
<p>当执行跨库两表 Join SQL 时，经历的大体流程如下：</p>
<p><img src="http://www.yunai.me/images/MyCAT/2017_07_12/01.png" alt=""></p>
<p>SQL 上，需要添加注解 <code>/*!mycat:catlet=io.mycat.catlets.ShareJoin */ ${SQL}</code> 。<code>RouteService#route(...)</code> 解析注解 <code>mycat:catlet</code> 后，路由给 <code>HintCatletHandler</code> 作进一步处理。</p>
<p><code>HintCatletHandler</code> 获取注解对应的 <code>Catlet</code> 实现类，<code>io.mycat.catlets.ShareJoin</code> 就是其中一种实现（目前也只有这一种实现），提供了跨库两表 Join 的功能。从类命名上看，<code>ShareJoin</code> 很大可能性后续会提供<strong>完整</strong>的跨库多表的 Join 功能。</p>
<p>核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// HintCatletHandler.java</span></div><div class="line"><span class="function"><span class="keyword">public</span> RouteResultset <span class="title">route</span><span class="params">(SystemConfig sysConfig, SchemaConfig schema,</span></span></div><div class="line">                           <span class="keyword">int</span> sqlType, String realSQL, String charset, ServerConnection sc,</div><div class="line">                           LayerCachePool cachePool, String hintSQLValue, <span class="keyword">int</span> hintSqlType, Map hintMap)</div><div class="line">       <span class="keyword">throws</span> SQLNonTransientException &#123;</div><div class="line">   String cateletClass = hintSQLValue;</div><div class="line">   <span class="keyword">if</span> (LOGGER.isDebugEnabled()) &#123;</div><div class="line">       LOGGER.debug(<span class="string">"load catelet class:"</span> + hintSQLValue + <span class="string">" to run sql "</span> + realSQL);</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">try</span> &#123;</div><div class="line">       Catlet catlet = (Catlet) MycatServer.getInstance().getCatletClassLoader().getInstanceofClass(cateletClass);</div><div class="line">       catlet.route(sysConfig, schema, sqlType, realSQL, charset, sc, cachePool);</div><div class="line">       catlet.processSQL(realSQL, <span class="keyword">new</span> EngineCtx(sc.getSession2()));</div><div class="line">   &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">       LOGGER.warn(<span class="string">"catlet error "</span> + e);</div><div class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> SQLNonTransientException(e);</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1>3. ShareJoin</h1>
<p>目前支持跨库<strong>两</strong>表 Join。<code>ShareJoin</code> 将 SQL 拆分成左表 SQL 和 右表 SQL，发送给各数据节点执行，汇总数据结果进行合后返回。</p>
<p>伪代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// SELECT u.id, o.id FROM t_order o </span></div><div class="line"><span class="comment">// INNER JOIN t_user u ON o.uid = u.id</span></div><div class="line"><span class="comment">// 【顺序】查询左表</span></div><div class="line">String leftSQL = <span class="string">"SELECT o.id, u.id FROM t_order o"</span>;</div><div class="line">List leftList = dn[<span class="number">0</span>].select(leftSQL) + dn[<span class="number">1</span>].select(leftSQL) + ... + dn[n].select(leftsql);</div><div class="line"><span class="comment">// 【并行】查询右表</span></div><div class="line">String rightSQL = <span class="string">"SELECT u.id FROM t_user u WHERE u.id IN ($&#123;leftList.uid&#125;)"</span>;</div><div class="line"><span class="keyword">for</span> (dn : dns) &#123; <span class="comment">// 此处是并行执行，使用回调逻辑</span></div><div class="line">    <span class="keyword">for</span> (rightRecord : dn.select(rightSQL)) &#123; <span class="comment">// 查询右表</span></div><div class="line">        <span class="comment">// 合并结果</span></div><div class="line">        <span class="keyword">for</span> (leftRecord : leftList) &#123;</div><div class="line">            <span class="keyword">if</span> (leftRecord.uid == rightRecord.id) &#123;</div><div class="line">                write(leftRecord + leftRecord.uid 拼接结果);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>实际情况会更加复杂，我们接下来一点点往下看。</p>
<h2>3.1 JoinParser</h2>
<p><code>JoinParser</code> 负责对 SQL 进行解析。整体流程如下：</p>
<p><img src="http://www.yunai.me/images/MyCAT/2017_07_12/02.png" alt=""></p>
<p>举个例子，<code>/*!mycat:catlet=io.mycat.catlets.ShareJoin */ SELECT o.id, u.username from t_order o join t_user u on o.uid = u.id;</code> 解析后，<code>TableFilter</code> 结果如下：</p>
<p><img src="http://www.yunai.me/images/MyCAT/2017_07_12/03.png" alt=""></p>
<ul>
<li>tName ：表名</li>
<li>tAlia ：表自定义命名</li>
<li>where ：过滤条件</li>
<li>order ：排序条件</li>
<li>parenTable ：左连接的 Join 的表名。<code>t_user</code>表 在 <code>join</code>属性 的 <code>parenTable</code> 为 &quot;o&quot;，即 <code>t_order</code>。</li>
<li>joinParentkey ：左连接的 Join 字段</li>
<li>joinKey ：join 字段。<code>t_user</code>表 在 <code>join</code>属性 为 <code>id</code>。</li>
<li>join ：子 tableFilter。即，该表连接的右边的表。</li>
<li>parent ：和 <code>join</code>属性 相对。</li>
</ul>
<p>看到此处，大家可能有疑问，为什么要把 SQL 解析成 <code>TableFilter</code>。<code>JoinParser</code> 根据 <code>TableFilter</code> 生成数据节点执行 SQL。代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// TableFilter.java</span></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getSQL</span><span class="params">()</span> </span>&#123;</div><div class="line">   String sql = <span class="string">""</span>;</div><div class="line">   <span class="comment">// fields</span></div><div class="line">   <span class="keyword">for</span> (Entry&lt;String, String&gt; entry : fieldAliasMap.entrySet()) &#123;</div><div class="line">       String key = entry.getKey();</div><div class="line">       String val = entry.getValue();</div><div class="line">       <span class="keyword">if</span> (val == <span class="keyword">null</span>) &#123;</div><div class="line">           sql = unionsql(sql, getFieldfrom(key), <span class="string">","</span>);</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           sql = unionsql(sql, getFieldfrom(key) + <span class="string">" as "</span> + val, <span class="string">","</span>);</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">   <span class="comment">// where</span></div><div class="line">   <span class="keyword">if</span> (parent == <span class="keyword">null</span>) &#123;    <span class="comment">// on/where 等于号左边的表</span></div><div class="line">       String parentJoinKey = getJoinKey(<span class="keyword">true</span>);</div><div class="line">       <span class="comment">// fix sharejoin bug：</span></div><div class="line">       <span class="comment">// (AbstractConnection.java:458) -close connection,reason:program err:java.lang.IndexOutOfBoundsException:</span></div><div class="line">       <span class="comment">// 原因是左表的select列没有包含 join 列，在获取结果时报上面的错误</span></div><div class="line">       <span class="keyword">if</span> (sql != <span class="keyword">null</span> &amp;&amp; parentJoinKey != <span class="keyword">null</span> &amp;&amp;</div><div class="line">               !sql.toUpperCase().contains(parentJoinKey.trim().toUpperCase())) &#123;</div><div class="line">           sql += <span class="string">", "</span> + parentJoinKey;</div><div class="line">       &#125;</div><div class="line">       sql = <span class="string">"select "</span> + sql + <span class="string">" from "</span> + tName;</div><div class="line">       <span class="keyword">if</span> (!(where.trim().equals(<span class="string">""</span>))) &#123;</div><div class="line">           sql += <span class="string">" where "</span> + where.trim();</div><div class="line">       &#125;</div><div class="line">   &#125; <span class="keyword">else</span> &#123;    <span class="comment">// on/where 等于号右边边的表</span></div><div class="line">       <span class="keyword">if</span> (allField) &#123;</div><div class="line">           sql = <span class="string">"select "</span> + sql + <span class="string">" from "</span> + tName;</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           sql = unionField(<span class="string">"select "</span> + joinKey, sql, <span class="string">","</span>);</div><div class="line">           sql = sql + <span class="string">" from "</span> + tName;</div><div class="line">           <span class="comment">//sql="select "+joinKey+","+sql+" from "+tName;</span></div><div class="line">       &#125;</div><div class="line">       <span class="keyword">if</span> (!(where.trim().equals(<span class="string">""</span>))) &#123;</div><div class="line">           sql += <span class="string">" where "</span> + where.trim() + <span class="string">" and ("</span> + joinKey + <span class="string">" in %s )"</span>;</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           sql += <span class="string">" where "</span> + joinKey + <span class="string">" in %s "</span>;</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">   <span class="comment">// order</span></div><div class="line">   <span class="keyword">if</span> (!(order.trim().equals(<span class="string">""</span>))) &#123;</div><div class="line">       sql += <span class="string">" order by "</span> + order.trim();</div><div class="line">   &#125;</div><div class="line">   <span class="comment">// limit</span></div><div class="line">   <span class="keyword">if</span> (parent == <span class="keyword">null</span>) &#123;</div><div class="line">       <span class="keyword">if</span> ((rowCount &gt; <span class="number">0</span>) &amp;&amp; (offset &gt; <span class="number">0</span>)) &#123;</div><div class="line">           sql += <span class="string">" limit"</span> + offset + <span class="string">","</span> + rowCount;</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           <span class="keyword">if</span> (rowCount &gt; <span class="number">0</span>) &#123;</div><div class="line">               sql += <span class="string">" limit "</span> + rowCount;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> sql;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>当 <code>parent</code> 为空时，即<strong>on/where 等于号左边的表</strong>。例如：<code>select id, uid from t_order</code>。</li>
<li>当 <code>parent</code>  不为空时，即<strong>on/where 等于号右边的表</strong>。例如：<code>select id, username from t_user where id in (1, 2, 3)</code>。</li>
</ul>
<h2>3.2 ShareJoin.processSQL(...)</h2>
<p>当 SQL 解析完后，生成<strong>左边的表</strong>执行的 SQL，发送给对应的数据节点查询数据。大体流程如下：</p>
<p><img src="http://www.yunai.me/images/MyCAT/2017_07_12/04.png" alt=""></p>
<p>当 SQL 为 <code>/*!mycat:catlet=io.mycat.catlets.ShareJoin */ SELECT o.id, u.username from t_order o join t_user u on o.uid = u.id;</code> 时，
<code>sql = getSql()</code> 的返回结果为 <code>select id, uid from t_order</code>。</p>
<p>生成<strong>左边的表</strong>执行的 SQL 后，<strong>顺序顺序顺序</strong>发送给对应的数据节点查询数据。具体顺序查询是怎么实现的，我们来看下章 <strong>BatchSQLJob</strong>。</p>
<h2>3.3 BatchSQLJob</h2>
<p><img src="http://www.yunai.me/images/MyCAT/2017_07_12/05.png" alt=""></p>
<p><code>EngineCtx</code> 对 <code>BatchSQLJob</code> 封装，提供上层两个方法：</p>
<ol>
<li>executeNativeSQLSequnceJob ：顺序（非并发）在每个数据节点执行SQL任务</li>
<li>executeNativeSQLParallJob ：并发在每个数据节点执行SQL任务</li>
</ol>
<p>核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// EngineCtx.java</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">executeNativeSQLSequnceJob</span><span class="params">(String[] dataNodes, String sql,</span></span></div><div class="line">		SQLJobHandler jobHandler) &#123;</div><div class="line">	<span class="keyword">for</span> (String dataNode : dataNodes) &#123;</div><div class="line">		SQLJob job = <span class="keyword">new</span> SQLJob(jobId.incrementAndGet(), sql, dataNode,</div><div class="line">				jobHandler, <span class="keyword">this</span>);</div><div class="line">		bachJob.addJob(job, <span class="keyword">false</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">executeNativeSQLParallJob</span><span class="params">(String[] dataNodes, String sql,</span></span></div><div class="line">		SQLJobHandler jobHandler) &#123;</div><div class="line">	<span class="keyword">for</span> (String dataNode : dataNodes) &#123;</div><div class="line">		SQLJob job = <span class="keyword">new</span> SQLJob(jobId.incrementAndGet(), sql, dataNode,</div><div class="line">				jobHandler, <span class="keyword">this</span>);</div><div class="line">		bachJob.addJob(job, <span class="keyword">true</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p><code>BatchSQLJob</code> 通过<strong>执行中任务列表</strong>、<strong>待执行任务列表</strong>来实现<strong>顺序/并发</strong>执行任务。核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// BatchSQLJob.java</span></div><div class="line"><span class="comment">/**</span></div><div class="line">* 执行中任务列表</div><div class="line">*/</div><div class="line"><span class="keyword">private</span> ConcurrentHashMap&lt;Integer, SQLJob&gt; runningJobs = <span class="keyword">new</span> ConcurrentHashMap&lt;Integer, SQLJob&gt;();</div><div class="line"><span class="comment">/**</span></div><div class="line">* 待执行任务列表</div><div class="line">*/</div><div class="line"><span class="keyword">private</span> ConcurrentLinkedQueue&lt;SQLJob&gt; waitingJobs = <span class="keyword">new</span> ConcurrentLinkedQueue&lt;SQLJob&gt;();</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addJob</span><span class="params">(SQLJob newJob, <span class="keyword">boolean</span> parallExecute)</span> </span>&#123;</div><div class="line">   <span class="keyword">if</span> (parallExecute) &#123;</div><div class="line">       runJob(newJob);</div><div class="line">   &#125; <span class="keyword">else</span> &#123;</div><div class="line">       waitingJobs.offer(newJob);</div><div class="line">       <span class="keyword">if</span> (runningJobs.isEmpty()) &#123; <span class="comment">// 若无正在执行中的任务，则从等待队列里获取任务进行执行。</span></div><div class="line">           SQLJob job = waitingJobs.poll();</div><div class="line">           <span class="keyword">if</span> (job != <span class="keyword">null</span>) &#123;</div><div class="line">               runJob(job);</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">jobFinished</span><span class="params">(SQLJob sqlJob)</span> </span>&#123;</div><div class="line">	runningJobs.remove(sqlJob.getId());</div><div class="line">	SQLJob job = waitingJobs.poll();</div><div class="line">	<span class="keyword">if</span> (job != <span class="keyword">null</span>) &#123;</div><div class="line">		runJob(job);</div><div class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">if</span> (noMoreJobInput) &#123;</div><div class="line">			<span class="keyword">return</span> runningJobs.isEmpty() &amp;&amp; waitingJobs.isEmpty();</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li><strong>顺序</strong>执行时，当 <code>runningJobs</code> 存在执行中的任务时，<code>#addJob(...)</code> 时，不立即执行，添加到 <code>waitingJobs</code>。当 <code>SQLJob</code> 完成时，顺序调用下一个任务。</li>
<li><strong>并发</strong>执行时，<code>#addJob(...)</code> 时，立即执行。</li>
</ul>
<hr>
<p><code>SQLJob</code> SQL 异步执行任务。其 <code>jobHandler(SQLJobHandler)</code> 属性，在 SQL 执行有返回结果时，会进行回调，从而实现异步执行。</p>
<p>在 <code>ShareJoin</code> 里，<code>SQLJobHandler</code> 有两个实现：<code>ShareDBJoinHandler</code>、<code>ShareRowOutPutDataHandler</code>。前者，<strong>左边的表</strong>执行的 SQL 回调；后者，<strong>右边的表</strong>执行的 SQL 回调。</p>
<p><img src="http://www.yunai.me/images/MyCAT/2017_07_12/06.png" alt=""></p>
<h2>3.4 ShareDBJoinHandler</h2>
<p><code>ShareDBJoinHandler</code>，<strong>左边的表</strong>执行的 SQL 回调。流程如下：</p>
<p><img src="http://www.yunai.me/images/MyCAT/2017_07_12/07.png" alt=""></p>
<ul>
<li><code>#fieldEofResponse(...)</code> ：接收数据节点返回的 fields，放入内存。</li>
<li><code>#rowResponse(...)</code> ：接收数据节点返回的 row，放入内存。</li>
<li><code>#rowEofResponse(...)</code> ：接收完一个数据节点返回所有的 row。当所有数据节点都完成 SQL 执行时，提交<strong>右边的表</strong>执行的 SQL 任务，<strong>并行</strong>执行，即图中**#createQryJob(...)**。</li>
</ul>
<p>当 SQL 为 <code>/*!mycat:catlet=io.mycat.catlets.ShareJoin */ SELECT o.id, u.username from t_order o join t_user u on o.uid = u.id;</code> 时，
<code>sql = getChildSQL()</code> 的返回结果为 <code>select id, username from t_user where id in (1, 2, 3)</code>。</p>
<p>核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// ShareJoin.java</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createQryJob</span><span class="params">(<span class="keyword">int</span> batchSize)</span> </span>&#123;</div><div class="line">   <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">   Map&lt;String, <span class="keyword">byte</span>[]&gt; batchRows = <span class="keyword">new</span> ConcurrentHashMap&lt;String, <span class="keyword">byte</span>[]&gt;();</div><div class="line">   String theId = <span class="keyword">null</span>;</div><div class="line">   StringBuilder sb = <span class="keyword">new</span> StringBuilder().append(<span class="string">'('</span>);</div><div class="line">   String svalue = <span class="string">""</span>;</div><div class="line">   <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; e : ids.entrySet()) &#123;</div><div class="line">       theId = e.getKey();</div><div class="line">       <span class="keyword">byte</span>[] rowbyte = rows.remove(theId);</div><div class="line">       <span class="keyword">if</span> (rowbyte != <span class="keyword">null</span>) &#123;</div><div class="line">           batchRows.put(theId, rowbyte);</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">if</span> (!svalue.equals(e.getValue())) &#123;</div><div class="line">           <span class="keyword">if</span> (joinKeyType == Fields.FIELD_TYPE_VAR_STRING</div><div class="line">                   || joinKeyType == Fields.FIELD_TYPE_STRING) &#123; <span class="comment">// joinkey 为varchar</span></div><div class="line">               sb.append(<span class="string">"'"</span>).append(e.getValue()).append(<span class="string">"'"</span>).append(<span class="string">','</span>); <span class="comment">// ('digdeep','yuanfang')</span></div><div class="line">           &#125; <span class="keyword">else</span> &#123; <span class="comment">// 默认joinkey为int/long</span></div><div class="line">               sb.append(e.getValue()).append(<span class="string">','</span>); <span class="comment">// (1,2,3)</span></div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">       svalue = e.getValue();</div><div class="line">       <span class="keyword">if</span> (count++ &gt; batchSize) &#123;</div><div class="line">           <span class="keyword">break</span>;</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</div><div class="line">       <span class="keyword">return</span>;</div><div class="line">   &#125;</div><div class="line">   jointTableIsData = <span class="keyword">true</span>;</div><div class="line">   sb.deleteCharAt(sb.length() - <span class="number">1</span>).append(<span class="string">')'</span>);</div><div class="line">   String sql = String.format(joinParser.getChildSQL(), sb);</div><div class="line">   getRoute(sql);</div><div class="line">   ctx.executeNativeSQLParallJob(getDataNodes(), sql, <span class="keyword">new</span> ShareRowOutPutDataHandler(<span class="keyword">this</span>, fields, joinindex, joinParser.getJoinRkey(), batchRows, ctx.getSession()));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2>3.5 ShareRowOutPutDataHandler</h2>
<p><code>ShareRowOutPutDataHandler</code>，<strong>右边的表</strong>执行的 SQL 回调。流程如下：</p>
<p><img src="http://www.yunai.me/images/MyCAT/2017_07_12/08.png" alt=""></p>
<ul>
<li><code>#fieldEofResponse(...)</code> ：接收数据节点返回的 fields，返回 header 给 MySQL Client。</li>
<li><code>#rowResponse(...)</code> ：接收数据节点返回的 row，匹配左表的记录，返回合并后返回的 row 给 MySQL Client。</li>
<li><code>#rowEofResponse(...)</code> ：当所有 row 都返回完后，返回 eof 给 MySQL Client。</li>
</ul>
<p>核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="comment">// ShareRowOutPutDataHandler.java</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onRowData</span><span class="params">(String dataNode, <span class="keyword">byte</span>[] rowData)</span> </span>&#123;</div><div class="line">   RowDataPacket rowDataPkgold = ResultSetUtil.parseRowData(rowData, bfields);</div><div class="line">   <span class="comment">//拷贝一份batchRows</span></div><div class="line">   Map&lt;String, <span class="keyword">byte</span>[]&gt; batchRowsCopy = <span class="keyword">new</span> ConcurrentHashMap&lt;String, <span class="keyword">byte</span>[]&gt;();</div><div class="line">   batchRowsCopy.putAll(arows);</div><div class="line">   <span class="comment">// 获取Id字段，</span></div><div class="line">   String id = ByteUtil.getString(rowDataPkgold.fieldValues.get(joinR));</div><div class="line">   <span class="comment">// 查找ID对应的A表的记录</span></div><div class="line">   <span class="keyword">byte</span>[] arow = getRow(batchRowsCopy, id, joinL);</div><div class="line">   <span class="keyword">while</span> (arow != <span class="keyword">null</span>) &#123;</div><div class="line">       RowDataPacket rowDataPkg = ResultSetUtil.parseRowData(arow, afields);<span class="comment">//ctx.getAllFields());</span></div><div class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; rowDataPkgold.fieldCount; i++) &#123;</div><div class="line">           <span class="comment">// 设置b.name 字段</span></div><div class="line">           <span class="keyword">byte</span>[] bname = rowDataPkgold.fieldValues.get(i);</div><div class="line">           rowDataPkg.add(bname);</div><div class="line">           rowDataPkg.addFieldCount(<span class="number">1</span>);</div><div class="line">       &#125;</div><div class="line">       <span class="comment">// huangyiming add</span></div><div class="line">       MiddlerResultHandler middlerResultHandler = session.getMiddlerResultHandler();</div><div class="line">       <span class="keyword">if</span> (<span class="keyword">null</span> == middlerResultHandler) &#123;</div><div class="line">           ctx.writeRow(rowDataPkg);</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           <span class="keyword">if</span> (middlerResultHandler <span class="keyword">instanceof</span> MiddlerQueryResultHandler) &#123;</div><div class="line">               <span class="keyword">byte</span>[] columnData = rowDataPkg.fieldValues.get(<span class="number">0</span>);</div><div class="line">               <span class="keyword">if</span> (columnData != <span class="keyword">null</span> &amp;&amp; columnData.length &gt; <span class="number">0</span>) &#123;</div><div class="line">                   String rowValue = <span class="keyword">new</span> String(columnData);</div><div class="line">                   middlerResultHandler.add(rowValue);</div><div class="line">               &#125;</div><div class="line">               <span class="comment">//&#125;</span></div><div class="line">           &#125;</div><div class="line"></div><div class="line">       &#125;</div><div class="line">       arow = getRow(batchRowsCopy, id, joinL);</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1>4. 彩蛋</h1>
<p>如下是本文涉及到的核心类，有兴趣的同学可以翻一翻。</p>
<p><img src="http://www.yunai.me/images/MyCAT/2017_07_12/09.png" alt=""></p>
<p><code>ShareJoin</code> 另外不支持的功能：</p>
<ol>
<li>只支持 inner join，不支持 left join、right join 等等连接。</li>
<li>不支持 order by。</li>
<li>不支持 group by 以及 相关聚合函数。</li>
<li>即使 join 左表的字段未声明为返回 fields 也会返回。</li>
</ol>
<p>恩，<strong>MyCAT 弱XA</strong> 源码继续走起！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://www.yunai.me/images/common/wechat_mp.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;🙂🙂🙂关注**微信公众号：【芋艿的后端小屋】**有福利：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Rock
    
    </summary>
    
      <category term="MyCAT" scheme="http://www.yunai.me/categories/MyCAT/"/>
    
    
  </entry>
  
  <entry>
    <title>MyCAT 源码解析 —— 分片结果合并（一）</title>
    <link href="http://www.yunai.me/MyCAT/sharding-result-merge-first/"/>
    <id>http://www.yunai.me/MyCAT/sharding-result-merge-first/</id>
    <published>2017-06-12T16:00:00.000Z</published>
    <updated>2017-07-27T16:54:37.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://www.yunai.me/images/common/wechat_mp.jpeg" alt=""></p>
<blockquote>
<p>🙂🙂🙂关注**微信公众号：【芋艿的后端小屋】**有福利：</p>
<ol>
<li>RocketMQ / MyCAT / Sharding-JDBC <strong>所有</strong>源码分析文章列表</li>
<li>RocketMQ / MyCAT / Sharding-JDBC <strong>中文注释源码 GitHub 地址</strong></li>
<li>您对于源码的疑问每条留言<strong>都</strong>将得到<strong>认真</strong>回复。<strong>甚至不知道如何读源码也可以请教噢</strong>。</li>
<li><strong>新的</strong>源码解析文章<strong>实时</strong>收到通知。<strong>每周更新一篇左右</strong>。</li>
<li><strong>认真的</strong>源码交流微信群。</li>
</ol>
</blockquote>
<hr>
<h1>1. 概述</h1>
<p>相信很多同学看过 MySQL 各种优化的文章，里面 99% 会提到：单表数据量大了，需要进行分片（水平拆分 or 垂直拆分）。分片之后，业务上必然面临的场景：跨分片的数据合并。今天我们就一起来瞅瞅 MyCAT 是如何实现<strong>分片结果合并</strong>。</p>
<p>跨分片查询大体流程如下：</p>
<p><img src="http://www.yunai.me/images/MyCAT/2017_06_13/flow.png" alt="flow"></p>
<p>和 <a href="http://www.yunai.me/Mycat/single-db-single-table-select/">《【单库单表】查询》</a> 不同的两个过程：</p>
<ul>
<li>【2】多分片执行 SQL</li>
<li>【4】合并多分片结果</li>
</ul>
<p>下面，我们来逐条讲解这两个过程。</p>
<h1>2. 多分片执行 SQL</h1>
<p><img src="http://www.yunai.me/images/MyCAT/2017_06_13/execute_sql.png" alt="execute_sql"></p>
<p>经过 SQL 解析后，计算出需要执行 SQL 的<strong>分片节点</strong>，遍历<strong>分片节点</strong>发送 SQL 进行执行。</p>
<p><strong>核心代码</strong>：</p>
<ul>
<li><a href="https://github.com/YunaiV/Mycat-Server/blob/1.6/src/main/java/io/mycat/backend/mysql/nio/handler/MultiNodeQueryHandler.java" target="_blank" rel="external">MultiNodeQueryHandler.java#execute(...)</a></li>
</ul>
<p><em><strong>SQL 解析</strong> 详细过程，我们另开文章，避免内容过多，影响大家对 <strong>分片结果合并</strong> 流程和逻辑的理解。</em></p>
<h1>3. 合并多分片结果</h1>
<p><img src="http://www.yunai.me/images/MyCAT/2017_06_13/handle_response.png" alt="handle_response"></p>
<p>和 <a href="http://www.yunai.me/Mycat/single-db-single-table-select/">《【单库单表】查询》</a> 不同，多个<strong>分片节点</strong>都会<strong>分别</strong>响应 <em>记录头(header)</em> 和 <em>记录行(row)</em> 。在开始分析 MyCAT 是怎么合并多分片结果之前，我们先来回想下 SQL 的执行顺序。</p>
<p><figure class="highlight sql"><table><tr><td class="code"><pre><div class="line">FROM       // [1] 选择表</div><div class="line">WHERE      // [2] 过滤表</div><div class="line">GROUP BY   // [3] 分组</div><div class="line"><span class="keyword">SELECT</span>     // [<span class="number">4</span>] 普通字段，<span class="keyword">max</span> / <span class="keyword">min</span> / <span class="keyword">avg</span> / <span class="keyword">sum</span> / <span class="keyword">count</span> 等函数，<span class="keyword">distinct</span></div><div class="line"><span class="keyword">HAVING</span>     // [<span class="number">5</span>] 再过滤表</div><div class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span>   // [<span class="number">6</span>] 排序</div><div class="line"><span class="keyword">LIMIT</span>      // [<span class="number">7</span>] 分页</div></pre></td></tr></table></figure></p>
<h2>3.1 记录头(header)</h2>
<p>多个<strong>分片节点</strong>响应时，会响应多次 <em>记录头(header)</em> 。MyCAT 在实际处理时，只处理第一个返回的 <em>记录头(header)</em> 。因此，在使用时要保证表的 Schema 相同。</p>
<p><strong>分片节点</strong>响应的 <em>记录头(header)</em> 可以直接返回 MySQL Client 吗？答案是不可以。<code>AVG</code>函数 是特殊情况，MyCAT 需要将 <code>AVG</code> 拆成 <code>SUM</code> + <code>COUNT</code> 进行计算。举个例子：</p>
<p><figure class="highlight"><table><tr><td class="code"><pre><div class="line">// [1] MySQL Client =&gt; MyCAT ：</div><div class="line">SELECT AVG(age) FROM student;</div><div class="line"></div><div class="line">// [2] MyCAT =&gt; MySQL Server ：</div><div class="line">SELECT SUM(age) AS AVG0SUM, COUNT(age) AS AVG0COUNT FROM student;</div><div class="line"></div><div class="line">// [3] 最终：AVG(age) = SUM(age) AS AVG0SUM / COUNT(age)</div></pre></td></tr></table></figure></p>
<p><strong>核心代码</strong>：</p>
<ul>
<li><a href="https://github.com/YunaiV/Mycat-Server/blob/1.6/src/main/java/io/mycat/backend/mysql/nio/handler/MultiNodeQueryHandler.java" target="_blank" rel="external">MultiNodeQueryHandler.java#fieldEofResponse(...)</a>。</li>
</ul>
<h2>3.2 记录行(row)</h2>
<h3>3.1 AbstractDataNodeMerge</h3>
<p>MyCAT 对分片结果合并通过 <code>AbstractDataNodeMerge</code> 子类来完成。</p>
<p><img src="http://www.yunai.me/images/MyCAT/2017_06_13/merge_service.png" alt="merge_service"></p>
<p><code>AbstractDataNodeMerge</code> ：</p>
<ul>
<li>-packs ：待合并记录行(row)队列。队列尾部插入 <code>END_FLAG_PACK</code> 表示队列已结束。</li>
<li>-running ：合并逻辑是否正在执行中的标记。</li>
<li>~onRowMetaData(...) ：根据**记录列信息(ColMeta)**构建对应的排序组件和聚合组件。需要子类进行实现。</li>
<li>~onNewRecord(...) ：插入记录行(row) 到 <code>packs</code>。</li>
<li>~outputMergeResult(...) ：插入 <code>END_FLAG_PACK</code> 到 <code>packs</code>。</li>
<li>~run(...) ：执行<strong>合并</strong>分片结果逻辑，并将合并结果返回给 MySQL Client。需要子类进行实现。</li>
</ul>
<p><img src="http://www.yunai.me/images/MyCAT/2017_06_13/AbstractDataNodeMerge_run.png" alt="AbstractDataNodeMerge_run.png"></p>
<p><em><em>通过 <code>running</code> 标记保证同一条 SQL 同时只有一个线程正在执行，并且不需要等到每个分片结果都返回就可以执行</em>聚合</em>逻辑。当然，<em>排序</em>逻辑需要等到所有分片结果都返回才可以执行。**</p>
<p><strong>核心代码</strong>：</p>
<ul>
<li><a href="https://github.com/YunaiV/Mycat-Server/blob/1.6/src/main/java/io/mycat/sqlengine/mpp/AbstractDataNodeMerge.java" target="_blank" rel="external">AbstractDataNodeMerge.java</a></li>
<li><a href="https://github.com/YunaiV/Mycat-Server/blob/1.6/src/main/java/io/mycat/sqlengine/mpp/DataNodeMergeManager.java" target="_blank" rel="external">DataNodeMergeManager.java#run(...)</a></li>
</ul>
<h3>3.2 DataNodeMergeManager</h3>
<p><code>AbstractDataNodeMerge</code> 有两种子类实现：</p>
<ul>
<li><code>DataMergeService</code> ：基于<strong>堆内内存</strong>合并分片结果。</li>
<li><code>DataNodeMergeManager</code> ：基于<strong>堆外内存</strong>合并分片结果。</li>
</ul>
<p>目前官方默认配置使用 <code>DataNodeMergeManager</code>。主要有如下优点：</p>
<ol>
<li>可以使用更大的内存空间。当并发量大或者数据量大时，更大的内存空间意味着更好的性能。</li>
<li>减少 GC 暂停时间。记录行(row)对象小且重用性很低，需要能够进行类似 C / C++ 的自主内存释放。</li>
<li>更快的内存复制和读取速度，对排序和聚合带来很好的提速。</li>
</ol>
<p>如果对<strong>堆外内存</strong>不太了解，推荐阅读如下文章：</p>
<ol>
<li><a href="http://www.jianshu.com/p/50be08b54bee" rel="external nofollow noopener noreferrer" target="_blank">《从0到1起步-跟我进入堆外内存的奇妙世界》</a></li>
<li><a href="http://www.infoq.com/cn/news/2014/12/external-memory-heap-memory" rel="external nofollow noopener noreferrer" target="_blank">《堆内内存还是堆外内存？》</a></li>
<li><a href="http://www.cnblogs.com/moonandstar08/p/5107648.html" rel="external nofollow noopener noreferrer" target="_blank">《JAVA堆外内存》</a></li>
<li><a href="https://yq.aliyun.com/articles/2948?spm=5176.100239.blogcont62539.11.a3HdFE" rel="external nofollow noopener noreferrer" target="_blank">《JVM源码分析之堆外内存完全解读》</a></li>
</ol>
<p>本文主要分析 <code>DataNodeMergeManager</code> 实现，<code>DataMergeService</code> 可以自己阅读或者等待后续文章（😈<strong>欢迎订阅我的公众号噢</strong>）。</p>
<p><code>DataNodeMergeManager</code> 有三个组件：</p>
<ul>
<li><code>globalSorter</code> ：<code>UnsafeExternalRowSorter</code> =&gt; 实现记录行(row)<strong>合并并排序</strong>逻辑。</li>
<li><code>globalMergeResult</code> ：<code>UnsafeExternalRowSorter</code> =&gt; 实现记录行(row)<strong>合并不排序</strong>逻辑。</li>
<li><code>unsafeRowGrouper</code> ： <code>UnsafeRowGrouper</code> =&gt; 实现记录行(row)<strong>聚合</strong>逻辑。</li>
</ul>
<p><code>DataNodeMergeManager#run(...)</code> 逻辑如下：</p>
<ul>
<li>[1] 写入记录行(row)到 <code>UnsafeRow</code>。</li>
<li>[2] 根据情况将 <code>UnsafeRow</code> 插入对应组件。</li>
<li>[3] 当所有 <code>UnsafeRow</code> 插入完后，根据情况使用组件聚合、排序。</li>
</ul>
<table>
<thead>
<tr>
<th>是否排序</th>
<th>是否聚合</th>
<th>依赖组件</th>
<th>[2]</th>
<th>[3]</th>
</tr>
</thead>
<tbody>
<tr>
<td>否</td>
<td>否</td>
<td><code>globalSorter</code></td>
<td>插入 <code>globalSorter</code></td>
<td>使用 <code>globalSorter</code> 合并并排序</td>
</tr>
<tr>
<td>是</td>
<td>否</td>
<td><code>globalMergeResult</code></td>
<td>插入 <code>globalMergeResult</code></td>
<td>使用 <code>globalMergeResult</code> 合并不排序</td>
</tr>
<tr>
<td>否</td>
<td>是</td>
<td><code>unsafeRowGrouper</code> + <code>globalSorter</code></td>
<td>插入 <code>unsafeRowGrouper</code> 进行聚合</td>
<td>使用 <code>globalSorter</code> 合并并排序</td>
</tr>
<tr>
<td>是</td>
<td>是</td>
<td><code>unsafeRowGrouper</code> + <code>globalMergeResult</code></td>
<td>插入 <code>unsafeRowGrouper</code> 进行聚合</td>
<td>使用 <code>globalMergeResult</code> 合并不排序</td>
</tr>
</tbody>
</table>
<p><strong>核心代码</strong>：</p>
<ul>
<li><a href="https://github.com/YunaiV/Mycat-Server/blob/1.6/src/main/java/io/mycat/sqlengine/mpp/DataNodeMergeManager.java" target="_blank" rel="external">DataNodeMergeManager.java</a>。</li>
</ul>
<p>🙃看到这里，可能很多同学都有点懵逼，问题不大，我们继续往下瞅。</p>
<h3>3.3 UnsafeRow</h3>
<p><img src="http://www.yunai.me/images/MyCAT/2017_06_13/unsafe_row.png" alt="unsafe_row"></p>
<p>记录行(row)写到 <code>UnsafeRow</code> 的 <code>baseObject</code> 属性，结构如下：</p>
<p><img src="http://www.yunai.me/images/MyCAT/2017_06_13/unsafe_row_object.png" alt="unsafe_row_object">
<img src="http://www.yunai.me/images/MyCAT/2017_06_13/unsafe_row_2.png" alt="unsafe_row_2.png"></p>
<ul>
<li>拆分成三个区域，<strong>每个区域按照格子记录信息，每个格子 64bits(8 Bytes)</strong>。</li>
<li>记录行(row)按照字段顺序位置记录到 <code>baseObject</code>。</li>
<li>[1] 空标记位区域 ：标记字段对应的值是否为 NULL。
<ul>
<li>当字段对应的值为 NULL 时，其对应的字段顺序对应的 bit 设置为 1。举个例子，第 0 个位置字段为 NULL，则第一个格子对应的 64 bits 从右边第一个 bit 设置为 1。</li>
<li>因为每个格子是 64 bits，每 64 个字段占用一个格子，不满一个格子，按照一个格子计算。因此，该区域的长度(<code>bitSetWidthInBytes</code>) = 字段占用的格子数 * 64 bits。</li>
</ul>
</li>
<li>[2] 位置长度区域 ：记录字段对应的值在<code>[3]区域</code>所在的位置和长度。
<ul>
<li>每个字段记录<code>[2]区域</code>的位置 = <code>baseOffset</code> + <code>bitSetWidthInBytes</code> + 8 Bytes * 字段顺序。</li>
<li>占用一个格子，前 32 bits 为<code>[3]区域</code>的位置，后 32 bits 为字段对应的值长度。</li>
</ul>
</li>
<li>[3] 值区域 ：记录字段对应的值。
<ul>
<li>每个字段对应的值占用格子数 = 字段对应的值长度 / 8 Byte，如果无法整除再 + 1。</li>
<li>因为字段对应的值可能无法刚好占满每个格子，未使用的 bit 用 0 占位。</li>
</ul>
</li>
</ul>
<p><strong>写入 <code>UnsafeRow</code>，MyCAT 可以顺序访问每个字段，而不需要在记录行(row)进行遍历。</strong></p>
<p>🙃日常开发使用位操作的机会比较少，可能较为难理解，需要反复理解下，相信会获得很大启发。恩，该部分代码引用自开源运算框架 <code>Spark</code>，是不是更加有动力列😈。</p>
<p><strong>核心代码</strong>：</p>
<ul>
<li><a href="https://github.com/YunaiV/Mycat-Server/blob/1.6/src/main/java/io/mycat/memory/unsafe/row/UnsafeRow.java" target="_blank" rel="external">UnsafeRow.java</a></li>
<li><a href="https://github.com/YunaiV/Mycat-Server/blob/1.6/src/main/java/io/mycat/memory/unsafe/row/BufferHolder.java" target="_blank" rel="external">BufferHolder.java</a></li>
<li><a href="https://github.com/YunaiV/Mycat-Server/blob/1.6/src/main/java/io/mycat/memory/unsafe/row/UnsafeRowWriter.java" target="_blank" rel="external">UnsafeRowWriter.java</a></li>
</ul>
<h3>3.4 UnsafeExternalRowSorter</h3>
<p>如果使用 Java 实现 <code>SELECT * FROM student ORDER BY age desc, nickname asc</code>，不考虑算法优化的情况下，我们可以简单如下实现：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">Collections.sort(students, <span class="keyword">new</span> Comparator&lt;Comparable&gt;() &#123;</div><div class="line">       <span class="meta">@Override</span></div><div class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student o1, Student o2)</span> </span>&#123;</div><div class="line">           <span class="keyword">int</span> cmp = compare(o2.age, o1.age);</div><div class="line">           <span class="keyword">return</span> cmp != <span class="number">0</span> ? cmp : compare(o1.nickname, o2.nickname);</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>从功能上，<code>UnsafeExternalRowSorter</code> 是这么实现排序逻辑。当然肯定的是，不是这么“简单”的实现。</p>
<p><img src="http://www.yunai.me/images/MyCAT/2017_06_13/sorter_write.jpeg" alt="sorter_write"></p>
<p><code>UnsafeRow</code> 会写入到两个地方：</p>
<ol>
<li><code>List&lt;MemoryBlock&gt;</code> ：内存块数组。当前 <code>MemoryBlock</code> 无法容纳写入的 <code>UnsafeRow</code> 时，生成新的 <code>MemoryBlock</code> 提供写入。每条 <code>UnsafeRow</code> 存储在 <code>MemoryBlock</code> 由 长度 + 字节内容 组成。</li>
<li><code>LongArray</code> ：每条 <code>UnsafeRow</code> 存储在 <code>LongArray</code> 由两部分组成：address + prefix。
<ul>
<li><code>address</code> ：<code>UnsafeRow</code> 存储在 <code>List&lt;MemoryBlock&gt;</code> 的位置。前 13 bits 记录所在 <code>MemoryBlock</code> 的 index，后 51 bit 记录在 <code>MemoryBlock</code> 的 offset。</li>
<li><code>prefix</code> ：<code>UnsafeRow</code> 第一个排序字段<strong>值</strong>前 64 bits 计算的值。</li>
</ul>
</li>
</ol>
<p><strong><code>UnsafeExternalRowSorter</code> 排序实现方式</strong> ：提供 <strong><a href="http://blog.csdn.net/yangzhongblog/article/details/8184707" rel="external nofollow noopener noreferrer" target="_blank">TimSort</a></strong> 和 <strong>RadixSort</strong> 两种排序算法，前者为默认实现。<strong>TimSort</strong> 折半查找时，使用 <code>LongArray</code>，先比较 <code>prefix</code>，若相等，则顺序对比每个排序字段直到不等，提升计算效率。插入操作在 <code>LongArray</code> 操作，<code>List&lt;MemoryBlock&gt;</code> 只作为原始数据。</p>
<p>另外，当需要排序特别大的数据量时，会使用存储数据到文件进行排序。限于笔者暂时未阅读该处源码，后续会另开文章分析。🙂</p>
<p>核心源码：</p>
<ul>
<li><a href="https://github.com/YunaiV/Mycat-Server/blob/1.6/src/main/java/io/mycat/memory/unsafe/utils/sort/UnsafeExternalRowSorter.java" target="_blank" rel="external">UnsafeExternalRowSorter.java</a></li>
<li><a href="https://github.com/YunaiV/Mycat-Server/blob/1.6/src/main/java/io/mycat/memory/unsafe/utils/sort/UnsafeExternalRowSorter.java" target="_blank" rel="external">UnsafeExternalRowSorter.java</a></li>
<li><a href="https://github.com/YunaiV/Mycat-Server/blob/1.6/src/main/java/io/mycat/memory/unsafe/utils/sort/TimSort.java" target="_blank" rel="external">TimSort.java</a></li>
</ul>
<h3>3.5 UnsafeRowGrouper</h3>
<p>如果使用 Java 实现 <code>SELECT nickname, COUNT(*) FROM student group by nickname</code>，不考虑算法优化的情况下，我们可以简单如下实现：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">Map&lt;String, List&lt;Object&gt;&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line"><span class="comment">// 聚合</span></div><div class="line"><span class="keyword">for</span> (student : students) &#123;</div><div class="line">    <span class="keyword">if</span> (map.contains(student.nickname)) &#123;</div><div class="line">        map.put(student.nickname, map.get(student.nickname).get(<span class="number">1</span>) + <span class="number">1</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        List&lt;Object&gt; value = <span class="keyword">new</span> Array&lt;&gt;();</div><div class="line">        value.add(nickname);</div><div class="line">        value.add(<span class="number">1</span>);</div><div class="line">        map.put(student.nickname, value);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 输出</span></div><div class="line"><span class="keyword">for</span> (value : map.values) &#123;</div><div class="line">    System.out.println(value);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>从功能上，<code>UnsafeRowGrouper</code> 是这么实现排序逻辑。当然肯定的是，也不是这么“简单”的实现。</p>
<p>😈具体怎么实现的呢？我们在《MyCAT 源码解析 —— 分片结果合并（二）》继续分析。</p>
<h1>4. 救护中心</h1>
<p>看到此处的应该是真爱吧？！如果内容上有什么错误或者难懂的地方，可以关注我的微信公众号给我留言，我会很认真的逐条解答的。“万一”觉得本文还可以，希望转发到朋友圈让更多的人看到。</p>
<p>最后的最后，感谢耐心阅读本文的同学。</p>
<p><img src="http://www.yunai.me/images/common/wechat_mp.jpeg" alt="wechat_mp"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://www.yunai.me/images/common/wechat_mp.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;🙂🙂🙂关注**微信公众号：【芋艿的后端小屋】**有福利：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Rock
    
    </summary>
    
      <category term="MyCAT" scheme="http://www.yunai.me/categories/MyCAT/"/>
    
    
  </entry>
  
  <entry>
    <title>MyCAT 源码分析 —— 【单库单表】查询</title>
    <link href="http://www.yunai.me/MyCAT/single-db-single-table-select/"/>
    <id>http://www.yunai.me/MyCAT/single-db-single-table-select/</id>
    <published>2017-05-29T16:00:00.000Z</published>
    <updated>2017-07-27T16:54:31.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://www.yunai.me/images/common/wechat_mp.jpeg" alt=""></p>
<blockquote>
<p>🙂🙂🙂关注**微信公众号：【芋艿的后端小屋】**有福利：</p>
<ol>
<li>RocketMQ / MyCAT / Sharding-JDBC <strong>所有</strong>源码分析文章列表</li>
<li>RocketMQ / MyCAT / Sharding-JDBC <strong>中文注释源码 GitHub 地址</strong></li>
<li>您对于源码的疑问每条留言<strong>都</strong>将得到<strong>认真</strong>回复。<strong>甚至不知道如何读源码也可以请教噢</strong>。</li>
<li><strong>新的</strong>源码解析文章<strong>实时</strong>收到通知。<strong>每周更新一篇左右</strong>。</li>
<li><strong>认真的</strong>源码交流微信群。</li>
</ol>
</blockquote>
<hr>
<ul>
<li><a href="#">1. 概述</a></li>
<li><a href="#">2. 接收请求，解析 SQL</a></li>
<li><a href="#">3. 获得路由结果</a></li>
<li><a href="#">4. 获得 MySQL 连接，执行 SQL</a></li>
<li><a href="#">5. 响应执行 SQL 结果</a></li>
<li><a href="#">6. 其他 ：更新 / 删除</a></li>
</ul>
<h1>1. 概述</h1>
<blockquote>
<p>内容形态以 顺序图 + 核心代码 为主。<br>
如果有地方表述不错误或者不清晰，欢迎留言。<br>
对于内容形态，非常纠结，如果有建议，特别特别特别欢迎您提出。<br>
微信号：wangwenbin-server。</p>
</blockquote>
<p>本文讲解 【单库单表】查询 所涉及到的代码。</p>
<p>😂内容和 <a href="http://www.yunai.me/Mycat/single-db-single-table-insert/">《MyCAT 源码分析 —— 【单库单表】插入》</a> 超级相似，一方面本身流程基本相同，另外一方面文章结构没拆分好。我们使用 🚀 标记差异的逻辑。</p>
<p>交互如下图：</p>
<p><img src="http://www.yunai.me/images/MyCAT/2017_05_30/01.png" alt="单库单表查询简图"></p>
<p>整个过程，MyCAT Server 流程如下：</p>
<ol>
<li>接收 MySQL Client 请求，解析 SQL。</li>
<li>获得路由结果，进行路由。</li>
<li>获得 MySQL 连接，执行 SQL。</li>
<li>响应执行结果，发送结果给 MySQL Client。</li>
</ol>
<p>我们逐个步骤分析，一起来看看源码。</p>
<h1>2. 接收请求，解析 SQL</h1>
<p><img src="http://www.yunai.me/images/MyCAT/2017_05_30/02.png" alt="【单库单表】查询（01主流程）"></p>
<h2>【1 - 2】</h2>
<p>接收<strong>一条</strong> MySQL 命令。在【1】之前，还有请求数据读取、拆成单条 MySQL SQL。</p>
<h2>【3】</h2>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="comment">// ⬇️⬇️⬇️【FrontendCommandHandler.java】</span></div><div class="line"> <span class="number">2</span>: <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FrontendCommandHandler</span> <span class="keyword">implements</span> <span class="title">NIOHandler</span> </span>&#123;</div><div class="line"> <span class="number">3</span>: </div><div class="line"> <span class="number">4</span>:     <span class="meta">@Override</span></div><div class="line"> <span class="number">5</span>:     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(<span class="keyword">byte</span>[] data)</span> </span>&#123;</div><div class="line"> <span class="number">6</span>:     </div><div class="line"> <span class="number">7</span>:         <span class="comment">// .... 省略部分代码</span></div><div class="line"> <span class="number">8</span>:         <span class="keyword">switch</span> (data[<span class="number">4</span>]) <span class="comment">// </span></div><div class="line"> <span class="number">9</span>:         &#123;</div><div class="line"><span class="number">10</span>:             <span class="keyword">case</span> MySQLPacket.COM_INIT_DB:</div><div class="line"><span class="number">11</span>:                 commands.doInitDB();</div><div class="line"><span class="number">12</span>:                 source.initDB(data);</div><div class="line"><span class="number">13</span>:                 <span class="keyword">break</span>;</div><div class="line"><span class="number">14</span>:             <span class="keyword">case</span> MySQLPacket.COM_QUERY: <span class="comment">// 查询命令</span></div><div class="line"><span class="number">15</span>:                 <span class="comment">// 计数查询命令</span></div><div class="line"><span class="number">16</span>:                 commands.doQuery();</div><div class="line"><span class="number">17</span>:                 <span class="comment">// 执行查询命令</span></div><div class="line"><span class="number">18</span>:                 source.query(data);</div><div class="line"><span class="number">19</span>:                 <span class="keyword">break</span>;</div><div class="line"><span class="number">20</span>:             <span class="keyword">case</span> MySQLPacket.COM_PING:</div><div class="line"><span class="number">21</span>:                 commands.doPing();</div><div class="line"><span class="number">22</span>:                 source.ping();</div><div class="line"><span class="number">23</span>:                 <span class="keyword">break</span>;</div><div class="line"><span class="number">24</span>:             <span class="comment">// .... 省略部分case</span></div><div class="line"><span class="number">25</span>:         &#125;</div><div class="line"><span class="number">26</span>:     &#125;</div><div class="line"><span class="number">27</span>: </div><div class="line"><span class="number">28</span>: &#125;</div></pre></td></tr></table></figure></p>
<p><code>INSERT</code>/<code>SELECT</code>/<code>UPDATE</code>/<code>DELETE</code> 等 SQL 归属于 <code>MySQLPacket.COM_QUERY</code>，详细可见：<a href="http://hutaow.com/blog/2013/11/06/mysql-protocol-analysis/#42-" rel="external nofollow noopener noreferrer" target="_blank">《MySQL协议分析#4.2 客户端命令请求报文（客户端 -&gt; 服务器）》</a>。</p>
<h2>【4】</h2>
<p>将 二进制数组 解析成 SQL。核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="comment">// ⬇️⬇️⬇️【FrontendConnection.java】</span></div><div class="line"> <span class="number">2</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">byte</span>[] data)</span> </span>&#123;</div><div class="line"> <span class="number">3</span>: 	<span class="comment">// 取得语句</span></div><div class="line"> <span class="number">4</span>: 	String sql = <span class="keyword">null</span>;		</div><div class="line"> <span class="number">5</span>: 	<span class="keyword">try</span> &#123;</div><div class="line"> <span class="number">6</span>: 		MySQLMessage mm = <span class="keyword">new</span> MySQLMessage(data);</div><div class="line"> <span class="number">7</span>: 		mm.position(<span class="number">5</span>);</div><div class="line"> <span class="number">8</span>: 		sql = mm.readString(charset);</div><div class="line"> <span class="number">9</span>: 	&#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</div><div class="line"><span class="number">10</span>: 		writeErrMessage(ErrorCode.ER_UNKNOWN_CHARACTER_SET, <span class="string">"Unknown charset '"</span> + charset + <span class="string">"'"</span>);</div><div class="line"><span class="number">11</span>: 		<span class="keyword">return</span>;</div><div class="line"><span class="number">12</span>: 	&#125;		</div><div class="line"><span class="number">13</span>: 	<span class="comment">// 执行语句</span></div><div class="line"><span class="number">14</span>: 	<span class="keyword">this</span>.query( sql );</div><div class="line"><span class="number">15</span>: &#125;</div></pre></td></tr></table></figure></p>
<h2>【5】</h2>
<p>解析 SQL 类型。核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="comment">// ⬇️⬇️⬇️【ServerQueryHandler.java】</span></div><div class="line"> <span class="number">2</span>: <span class="meta">@Override</span></div><div class="line"> <span class="number">3</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">(String sql)</span> </span>&#123;</div><div class="line"> <span class="number">4</span>: 	<span class="comment">// 解析 SQL 类型</span></div><div class="line"> <span class="number">5</span>: 	<span class="keyword">int</span> rs = ServerParse.parse(sql);</div><div class="line"> <span class="number">6</span>: 	<span class="keyword">int</span> sqlType = rs &amp; <span class="number">0xff</span>;</div><div class="line"> <span class="number">7</span>: 	</div><div class="line"> <span class="number">8</span>: 	<span class="keyword">switch</span> (sqlType) &#123;</div><div class="line"> <span class="number">9</span>: 	<span class="comment">//explain sql</span></div><div class="line"><span class="number">10</span>: 	<span class="keyword">case</span> ServerParse.EXPLAIN:</div><div class="line"><span class="number">11</span>: 		ExplainHandler.handle(sql, c, rs &gt;&gt;&gt; <span class="number">8</span>);</div><div class="line"><span class="number">12</span>: 		<span class="keyword">break</span>;</div><div class="line"><span class="number">13</span>: 	<span class="comment">// .... 省略部分case</span></div><div class="line"><span class="number">14</span>: 		<span class="keyword">break</span>;</div><div class="line"><span class="number">15</span>: 	<span class="keyword">case</span> ServerParse.SELECT:</div><div class="line"><span class="number">16</span>: 		SelectHandler.handle(sql, c, rs &gt;&gt;&gt; <span class="number">8</span>);</div><div class="line"><span class="number">17</span>: 		<span class="keyword">break</span>;</div><div class="line"><span class="number">18</span>: 	<span class="comment">// .... 省略部分case</span></div><div class="line"><span class="number">19</span>: 	<span class="keyword">default</span>:</div><div class="line"><span class="number">20</span>: 		<span class="keyword">if</span>(readOnly)&#123;</div><div class="line"><span class="number">21</span>: 			LOGGER.warn(<span class="keyword">new</span> StringBuilder().append(<span class="string">"User readonly:"</span>).append(sql).toString());</div><div class="line"><span class="number">22</span>: 			c.writeErrMessage(ErrorCode.ER_USER_READ_ONLY, <span class="string">"User readonly"</span>);</div><div class="line"><span class="number">23</span>: 			<span class="keyword">break</span>;</div><div class="line"><span class="number">24</span>: 		&#125;</div><div class="line"><span class="number">25</span>: 		c.execute(sql, rs &amp; <span class="number">0xff</span>);</div><div class="line"><span class="number">26</span>: 	&#125;</div><div class="line"><span class="number">27</span>: &#125;</div><div class="line"><span class="number">28</span>: </div><div class="line"><span class="number">29</span>:</div><div class="line"><span class="number">30</span>: <span class="comment">// ⬇️⬇️⬇️【ServerParse.java】</span></div><div class="line"><span class="number">31</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">parse</span><span class="params">(String stmt)</span> </span>&#123;</div><div class="line"><span class="number">32</span>: 	<span class="keyword">int</span> length = stmt.length();</div><div class="line"><span class="number">33</span>: 	<span class="comment">//FIX BUG FOR SQL SUCH AS /XXXX/SQL</span></div><div class="line"><span class="number">34</span>: 	<span class="keyword">int</span> rt = -<span class="number">1</span>;</div><div class="line"><span class="number">35</span>: 	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; ++i) &#123;</div><div class="line"><span class="number">36</span>: 		<span class="keyword">switch</span> (stmt.charAt(i)) &#123;</div><div class="line"><span class="number">37</span>: 		<span class="comment">// .... 省略部分case			case 'I':</span></div><div class="line"><span class="number">38</span>: 		<span class="keyword">case</span> <span class="string">'i'</span>:</div><div class="line"><span class="number">39</span>: 			rt = insertCheck(stmt, i);</div><div class="line"><span class="number">40</span>: 			<span class="keyword">if</span> (rt != OTHER) &#123;</div><div class="line"><span class="number">41</span>: 				<span class="keyword">return</span> rt;</div><div class="line"><span class="number">42</span>: 			&#125;</div><div class="line"><span class="number">43</span>: 			<span class="keyword">continue</span>;</div><div class="line"><span class="number">44</span>: 			<span class="comment">// .... 省略部分case</span></div><div class="line"><span class="number">45</span>: 		<span class="keyword">case</span> <span class="string">'S'</span>:</div><div class="line"><span class="number">46</span>: 		<span class="keyword">case</span> <span class="string">'s'</span>:</div><div class="line"><span class="number">47</span>: 			rt = sCheck(stmt, i);</div><div class="line"><span class="number">48</span>: 			<span class="keyword">if</span> (rt != OTHER) &#123;</div><div class="line"><span class="number">49</span>: 				<span class="keyword">return</span> rt;</div><div class="line"><span class="number">50</span>: 			&#125;</div><div class="line"><span class="number">51</span>: 			<span class="keyword">continue</span>;</div><div class="line"><span class="number">52</span>: 			<span class="comment">// .... 省略部分case</span></div><div class="line"><span class="number">53</span>: 		<span class="keyword">default</span>:</div><div class="line"><span class="number">54</span>: 			<span class="keyword">continue</span>;</div><div class="line"><span class="number">55</span>: 		&#125;</div><div class="line"><span class="number">56</span>: 	&#125;</div><div class="line"><span class="number">57</span>: 	<span class="keyword">return</span> OTHER;</div><div class="line"><span class="number">58</span>: &#125;</div></pre></td></tr></table></figure></p>
<h2>🚀【6】【7】</h2>
<p>解析 Select SQL 类型，分发到对应的逻辑。核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="comment">// ⬇️⬇️⬇️【SelectHandler.java】</span></div><div class="line"> <span class="number">2</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(String stmt, ServerConnection c, <span class="keyword">int</span> offs)</span> </span>&#123;</div><div class="line"> <span class="number">3</span>: 	<span class="keyword">int</span> offset = offs;</div><div class="line"> <span class="number">4</span>: 	<span class="keyword">switch</span> (ServerParseSelect.parse(stmt, offs)) &#123; <span class="comment">// 解析 Select SQL 类型</span></div><div class="line"> <span class="number">5</span>: 	<span class="keyword">case</span> ServerParseSelect.VERSION_COMMENT: <span class="comment">// select @@VERSION_COMMENT;</span></div><div class="line"> <span class="number">6</span>: 		SelectVersionComment.response(c);</div><div class="line"> <span class="number">7</span>: 		<span class="keyword">break</span>;</div><div class="line"> <span class="number">8</span>: 	<span class="keyword">case</span> ServerParseSelect.DATABASE: <span class="comment">// select DATABASE();</span></div><div class="line"> <span class="number">9</span>: 		SelectDatabase.response(c);</div><div class="line"><span class="number">10</span>: 		<span class="keyword">break</span>;</div><div class="line"><span class="number">11</span>: 	<span class="keyword">case</span> ServerParseSelect.USER: <span class="comment">// select CURRENT_USER();</span></div><div class="line"><span class="number">12</span>:         SelectUser.response(c);</div><div class="line"><span class="number">13</span>: 		<span class="keyword">break</span>;</div><div class="line"><span class="number">14</span>: 	<span class="keyword">case</span> ServerParseSelect.VERSION: <span class="comment">// select VERSION();</span></div><div class="line"><span class="number">15</span>: 		SelectVersion.response(c);</div><div class="line"><span class="number">16</span>: 		<span class="keyword">break</span>;</div><div class="line"><span class="number">17</span>: 	<span class="keyword">case</span> ServerParseSelect.SESSION_INCREMENT: <span class="comment">// select @@session.auto_increment_increment;</span></div><div class="line"><span class="number">18</span>: 		SessionIncrement.response(c);</div><div class="line"><span class="number">19</span>: 		<span class="keyword">break</span>;</div><div class="line"><span class="number">20</span>: 	<span class="keyword">case</span> ServerParseSelect.SESSION_ISOLATION: <span class="comment">// select @@session.tx_isolation;</span></div><div class="line"><span class="number">21</span>: 		SessionIsolation.response(c);</div><div class="line"><span class="number">22</span>: 		<span class="keyword">break</span>;</div><div class="line"><span class="number">23</span>: 	<span class="keyword">case</span> ServerParseSelect.LAST_INSERT_ID: <span class="comment">// select LAST_INSERT_ID();</span></div><div class="line"><span class="number">24</span>: 		<span class="comment">// ....省略代码</span></div><div class="line"><span class="number">25</span>: 		<span class="keyword">break</span>;</div><div class="line"><span class="number">26</span>: 	<span class="keyword">case</span> ServerParseSelect.IDENTITY: <span class="comment">// select @@identity</span></div><div class="line"><span class="number">27</span>: 		<span class="comment">// ....省略代码</span></div><div class="line"><span class="number">28</span>: 		<span class="keyword">break</span>;</div><div class="line"><span class="number">29</span>:     <span class="keyword">case</span> ServerParseSelect.SELECT_VAR_ALL: <span class="comment">//</span></div><div class="line"><span class="number">30</span>:         SelectVariables.execute(c,stmt);</div><div class="line"><span class="number">31</span>:             <span class="keyword">break</span>;</div><div class="line"><span class="number">32</span>:     <span class="keyword">case</span> ServerParseSelect.SESSION_TX_READ_ONLY: <span class="comment">//</span></div><div class="line"><span class="number">33</span>:         SelectTxReadOnly.response(c);</div><div class="line"><span class="number">34</span>: 			<span class="keyword">break</span>;</div><div class="line"><span class="number">35</span>: 	<span class="keyword">default</span>: <span class="comment">// 其他，例如 select * from table</span></div><div class="line"><span class="number">36</span>: 		c.execute(stmt, ServerParse.SELECT);</div><div class="line"><span class="number">37</span>: 	&#125;</div><div class="line"><span class="number">38</span>: &#125;</div><div class="line"><span class="number">39</span>: <span class="comment">// ⬇️⬇️⬇️【ServerParseSelect.java】</span></div><div class="line"><span class="number">40</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">parse</span><span class="params">(String stmt, <span class="keyword">int</span> offset)</span> </span>&#123;</div><div class="line"><span class="number">41</span>: 	<span class="keyword">int</span> i = offset;</div><div class="line"><span class="number">42</span>: 	<span class="keyword">for</span> (; i &lt; stmt.length(); ++i) &#123;</div><div class="line"><span class="number">43</span>: 		<span class="keyword">switch</span> (stmt.charAt(i)) &#123;</div><div class="line"><span class="number">44</span>: 		<span class="keyword">case</span> <span class="string">' '</span>:</div><div class="line"><span class="number">45</span>: 			<span class="keyword">continue</span>;</div><div class="line"><span class="number">46</span>: 		<span class="keyword">case</span> <span class="string">'/'</span>:</div><div class="line"><span class="number">47</span>: 		<span class="keyword">case</span> <span class="string">'#'</span>:</div><div class="line"><span class="number">48</span>: 			i = ParseUtil.comment(stmt, i);</div><div class="line"><span class="number">49</span>: 			<span class="keyword">continue</span>;</div><div class="line"><span class="number">50</span>: 		<span class="keyword">case</span> <span class="string">'@'</span>:</div><div class="line"><span class="number">51</span>: 			<span class="keyword">return</span> select2Check(stmt, i);</div><div class="line"><span class="number">52</span>: 		<span class="keyword">case</span> <span class="string">'D'</span>:</div><div class="line"><span class="number">53</span>: 		<span class="keyword">case</span> <span class="string">'d'</span>:</div><div class="line"><span class="number">54</span>: 			<span class="keyword">return</span> databaseCheck(stmt, i);</div><div class="line"><span class="number">55</span>: 		<span class="keyword">case</span> <span class="string">'L'</span>:</div><div class="line"><span class="number">56</span>: 		<span class="keyword">case</span> <span class="string">'l'</span>:</div><div class="line"><span class="number">57</span>: 			<span class="keyword">return</span> lastInsertCheck(stmt, i);</div><div class="line"><span class="number">58</span>: 		<span class="keyword">case</span> <span class="string">'U'</span>:</div><div class="line"><span class="number">59</span>: 		<span class="keyword">case</span> <span class="string">'u'</span>:</div><div class="line"><span class="number">60</span>: 			<span class="keyword">return</span> userCheck(stmt, i);</div><div class="line"><span class="number">61</span>: 		<span class="keyword">case</span> <span class="string">'C'</span>:</div><div class="line"><span class="number">62</span>: 		<span class="keyword">case</span> <span class="string">'c'</span>:</div><div class="line"><span class="number">63</span>: 			<span class="keyword">return</span> currentUserCheck(stmt, i);</div><div class="line"><span class="number">64</span>: 		<span class="keyword">case</span> <span class="string">'V'</span>:</div><div class="line"><span class="number">65</span>: 		<span class="keyword">case</span> <span class="string">'v'</span>:</div><div class="line"><span class="number">66</span>: 			<span class="keyword">return</span> versionCheck(stmt, i);</div><div class="line"><span class="number">67</span>: 		<span class="keyword">default</span>:</div><div class="line"><span class="number">68</span>: 			<span class="keyword">return</span> OTHER;</div><div class="line"><span class="number">69</span>: 		&#125;</div><div class="line"><span class="number">70</span>: 	&#125;</div><div class="line"><span class="number">71</span>: 	<span class="keyword">return</span> OTHER;</div><div class="line"><span class="number">72</span>: &#125;</div></pre></td></tr></table></figure></p>
<h2>【8】</h2>
<p>执行 SQL，详细解析见下文，核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="comment">// ⬇️⬇️⬇️【ServerConnection.java】</span></div><div class="line"> <span class="number">2</span>: <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerConnection</span> <span class="keyword">extends</span> <span class="title">FrontendConnection</span> </span>&#123;</div><div class="line"> <span class="number">3</span>: 	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(String sql, <span class="keyword">int</span> type)</span> </span>&#123;</div><div class="line"> <span class="number">4</span>: 		<span class="comment">// .... 省略代码</span></div><div class="line"> <span class="number">5</span>: 		SchemaConfig schema = MycatServer.getInstance().getConfig().getSchemas().get(db);</div><div class="line"> <span class="number">6</span>: 		<span class="keyword">if</span> (schema == <span class="keyword">null</span>) &#123;</div><div class="line"> <span class="number">7</span>: 			writeErrMessage(ErrorCode.ERR_BAD_LOGICDB,</div><div class="line"> <span class="number">8</span>: 					<span class="string">"Unknown MyCAT Database '"</span> + db + <span class="string">"'"</span>);</div><div class="line"> <span class="number">9</span>: 			<span class="keyword">return</span>;</div><div class="line"><span class="number">10</span>: 		&#125;</div><div class="line"><span class="number">11</span>: </div><div class="line"><span class="number">12</span>: 		<span class="comment">// .... 省略代码</span></div><div class="line"><span class="number">13</span>: </div><div class="line"><span class="number">14</span>: 		<span class="comment">// 路由到后端数据库，执行 SQL</span></div><div class="line"><span class="number">15</span>: 		routeEndExecuteSQL(sql, type, schema);</div><div class="line"><span class="number">16</span>: 	&#125;</div><div class="line"><span class="number">17</span>: 	</div><div class="line"><span class="number">18</span>:     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">routeEndExecuteSQL</span><span class="params">(String sql, <span class="keyword">final</span> <span class="keyword">int</span> type, <span class="keyword">final</span> SchemaConfig schema)</span> </span>&#123;</div><div class="line"><span class="number">19</span>: 		<span class="comment">// 路由计算</span></div><div class="line"><span class="number">20</span>: 		RouteResultset rrs = <span class="keyword">null</span>;</div><div class="line"><span class="number">21</span>: 		<span class="keyword">try</span> &#123;</div><div class="line"><span class="number">22</span>: 			rrs = MycatServer</div><div class="line"><span class="number">23</span>: 					.getInstance()</div><div class="line"><span class="number">24</span>: 					.getRouterservice()</div><div class="line"><span class="number">25</span>: 					.route(MycatServer.getInstance().getConfig().getSystem(),</div><div class="line"><span class="number">26</span>: 							schema, type, sql, <span class="keyword">this</span>.charset, <span class="keyword">this</span>);</div><div class="line"><span class="number">27</span>: </div><div class="line"><span class="number">28</span>: 		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"><span class="number">29</span>: 			StringBuilder s = <span class="keyword">new</span> StringBuilder();</div><div class="line"><span class="number">30</span>: 			LOGGER.warn(s.append(<span class="keyword">this</span>).append(sql).toString() + <span class="string">" err:"</span> + e.toString(),e);</div><div class="line"><span class="number">31</span>: 			String msg = e.getMessage();</div><div class="line"><span class="number">32</span>: 			writeErrMessage(ErrorCode.ER_PARSE_ERROR, msg == <span class="keyword">null</span> ? e.getClass().getSimpleName() : msg);</div><div class="line"><span class="number">33</span>: 			<span class="keyword">return</span>;</div><div class="line"><span class="number">34</span>: 		&#125;</div><div class="line"><span class="number">35</span>: </div><div class="line"><span class="number">36</span>: 		<span class="comment">// 执行 SQL</span></div><div class="line"><span class="number">37</span>: 		<span class="keyword">if</span> (rrs != <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">38</span>: 			<span class="comment">// session执行</span></div><div class="line"><span class="number">39</span>: 			session.execute(rrs, rrs.isSelectForUpdate() ? ServerParse.UPDATE : type);</div><div class="line"><span class="number">40</span>: 		&#125;</div><div class="line"><span class="number">41</span>: 		</div><div class="line"><span class="number">42</span>:  	&#125;</div><div class="line"><span class="number">43</span>: </div><div class="line"><span class="number">44</span>: &#125;</div></pre></td></tr></table></figure></p>
<h1>3. 获得路由结果</h1>
<p><img src="http://www.yunai.me/images/MyCAT/2017_05_30/03.png" alt="【单库单表】插入（02获取路由）"></p>
<h2>【 1 -  5 】</h2>
<p>获得路由主流程。核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="comment">// ⬇️⬇️⬇️【SelectHandler.java】</span></div><div class="line"> <span class="number">2</span>: <span class="function"><span class="keyword">public</span> RouteResultset <span class="title">route</span><span class="params">(SystemConfig sysconf, SchemaConfig schema,</span></span></div><div class="line"> <span class="number">3</span>: 		<span class="keyword">int</span> sqlType, String stmt, String charset, ServerConnection sc)</div><div class="line"> 4: 		<span class="keyword">throws</span> SQLNonTransientException &#123;</div><div class="line"> <span class="number">5</span>: 	RouteResultset rrs = <span class="keyword">null</span>;</div><div class="line"> <span class="number">6</span>: </div><div class="line"> <span class="number">7</span>: 	<span class="comment">// SELECT 类型的SQL, 检测缓存是否存在</span></div><div class="line"> <span class="number">8</span>: 	<span class="keyword">if</span> (sqlType == ServerParse.SELECT) &#123;</div><div class="line"> <span class="number">9</span>: 		cacheKey = schema.getName() + stmt;			</div><div class="line"><span class="number">10</span>: 		rrs = (RouteResultset) sqlRouteCache.get(cacheKey);</div><div class="line"><span class="number">11</span>: 		<span class="keyword">if</span> (rrs != <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">12</span>: 			checkMigrateRule(schema.getName(),rrs,sqlType);</div><div class="line"><span class="number">13</span>: 			<span class="keyword">return</span> rrs;</div><div class="line"><span class="number">14</span>: 			&#125;</div><div class="line"><span class="number">15</span>: 		&#125;</div><div class="line"><span class="number">16</span>: 	&#125;</div><div class="line"><span class="number">17</span>: </div><div class="line"><span class="number">18</span>: 	<span class="comment">// .... 省略代码</span></div><div class="line"><span class="number">19</span>: 	<span class="keyword">int</span> hintLength = RouteService.isHintSql(stmt);</div><div class="line"><span class="number">20</span>: 	<span class="keyword">if</span>(hintLength != -<span class="number">1</span>)&#123; <span class="comment">// TODO 待读：hint</span></div><div class="line"><span class="number">21</span>: 		<span class="comment">// .... 省略代码</span></div><div class="line"><span class="number">22</span>: 		&#125;</div><div class="line"><span class="number">23</span>: 	&#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">24</span>: 		stmt = stmt.trim();</div><div class="line"><span class="number">25</span>: 		rrs = RouteStrategyFactory.getRouteStrategy().route(sysconf, schema, sqlType, stmt,</div><div class="line"><span class="number">26</span>: 				charset, sc, tableId2DataNodeCache);</div><div class="line"><span class="number">27</span>: 	&#125;</div><div class="line"><span class="number">28</span>: </div><div class="line"><span class="number">29</span>: 	<span class="comment">// 记录查询命令路由结果缓存</span></div><div class="line"><span class="number">30</span>: 	<span class="keyword">if</span> (rrs != <span class="keyword">null</span> &amp;&amp; sqlType == ServerParse.SELECT &amp;&amp; rrs.isCacheAble()) &#123;</div><div class="line"><span class="number">31</span>: 		sqlRouteCache.putIfAbsent(cacheKey, rrs);</div><div class="line"><span class="number">32</span>: 	&#125;</div><div class="line"><span class="number">33</span>: 	<span class="comment">// .... 省略代码		return rrs;</span></div><div class="line"><span class="number">34</span>: &#125;</div><div class="line"><span class="number">35</span>: <span class="comment">// ⬇️⬇️⬇️【AbstractRouteStrategy.java】</span></div><div class="line"><span class="number">36</span>: <span class="meta">@Override</span></div><div class="line"><span class="number">37</span>: <span class="function"><span class="keyword">public</span> RouteResultset <span class="title">route</span><span class="params">(SystemConfig sysConfig, SchemaConfig schema, <span class="keyword">int</span> sqlType, String origSQL,</span></span></div><div class="line"><span class="number">38</span>: 		String charset, ServerConnection sc, LayerCachePool cachePool) <span class="keyword">throws</span> SQLNonTransientException &#123;</div><div class="line"><span class="number">39</span>: </div><div class="line"><span class="number">40</span>: 	<span class="comment">// .... 省略代码</span></div><div class="line"><span class="number">41</span>: </div><div class="line"><span class="number">42</span>: 	<span class="comment">// 处理一些路由之前的逻辑;全局序列号，父子表插入</span></div><div class="line"><span class="number">43</span>: 	<span class="keyword">if</span> (beforeRouteProcess(schema, sqlType, origSQL, sc) ) &#123;</div><div class="line"><span class="number">44</span>: 		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line"><span class="number">45</span>: 	&#125;</div><div class="line"><span class="number">46</span>: </div><div class="line"><span class="number">47</span>: 	<span class="comment">// .... 省略代码</span></div><div class="line"><span class="number">48</span>: </div><div class="line"><span class="number">49</span>: 	<span class="comment">// 检查是否有分片</span></div><div class="line"><span class="number">50</span>: 	<span class="keyword">if</span> (schema.isNoSharding() &amp;&amp; ServerParse.SHOW != sqlType) &#123;</div><div class="line"><span class="number">51</span>: 		rrs = RouterUtil.routeToSingleNode(rrs, schema.getDataNode(), stmt);</div><div class="line"><span class="number">52</span>: 	&#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">53</span>: 		RouteResultset returnedSet = routeSystemInfo(schema, sqlType, stmt, rrs);</div><div class="line"><span class="number">54</span>: 		<span class="keyword">if</span> (returnedSet == <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">55</span>: 			rrs = routeNormalSqlWithAST(schema, stmt, rrs, charset, cachePool,sqlType,sc);</div><div class="line"><span class="number">56</span>: 		&#125;</div><div class="line"><span class="number">57</span>: 	&#125;</div><div class="line"><span class="number">58</span>: </div><div class="line"><span class="number">59</span>: 	<span class="keyword">return</span> rrs;</div><div class="line"><span class="number">60</span>: &#125;</div></pre></td></tr></table></figure></p>
<p>🚀【3】第 7 至 16 行 ：当 Select SQL 存在路由结果缓存时，直接返回缓存。
🚀【6】第 29 至 32 行 ：记录 Select SQL 路由结果到缓存。</p>
<p><em><strong>路由</strong> 详细解析，我们另开文章，避免内容过多，影响大家对【插入】流程和逻辑的理解。</em></p>
<h1>4. 获得 MySQL 连接，执行 SQL</h1>
<p><img src="http://www.yunai.me/images/MyCAT/2017_05_29/03.png" alt="【单库单表】查询（03执行 SQL）"></p>
<h2>【 1 - 8 】</h2>
<p>获得 MySQL 连接。</p>
<ul>
<li>PhysicalDBNode ：物理数据库节点。</li>
<li>PhysicalDatasource ：物理数据库数据源。</li>
</ul>
<h2>【 9 - 13 】</h2>
<p>发送 SQL 到 MySQL Server，执行 SQL。</p>
<h1>🚀 5. 响应执行 SQL 结果</h1>
<p><img src="http://www.yunai.me/images/MyCAT/2017_05_30/04.png" alt="【单库单表】查询（04执行响应）"></p>
<p>核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="comment">// ⬇️⬇️⬇️【MySQLConnectionHandler.java】</span></div><div class="line"> <span class="number">2</span>: <span class="meta">@Override</span></div><div class="line"> <span class="number">3</span>: <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">handleData</span><span class="params">(<span class="keyword">byte</span>[] data)</span> </span>&#123;</div><div class="line"> <span class="number">4</span>: 	<span class="keyword">switch</span> (resultStatus) &#123;</div><div class="line"> <span class="number">5</span>: 	<span class="keyword">case</span> RESULT_STATUS_INIT:</div><div class="line"> <span class="number">6</span>: 		<span class="keyword">switch</span> (data[<span class="number">4</span>]) &#123;</div><div class="line"> <span class="number">7</span>: 		<span class="keyword">case</span> OkPacket.FIELD_COUNT:</div><div class="line"> <span class="number">8</span>: 			handleOkPacket(data);</div><div class="line"> <span class="number">9</span>: 			<span class="keyword">break</span>;</div><div class="line"><span class="number">10</span>: 		<span class="keyword">case</span> ErrorPacket.FIELD_COUNT:</div><div class="line"><span class="number">11</span>: 			handleErrorPacket(data);</div><div class="line"><span class="number">12</span>: 			<span class="keyword">break</span>;</div><div class="line"><span class="number">13</span>: 		<span class="keyword">case</span> RequestFilePacket.FIELD_COUNT:</div><div class="line"><span class="number">14</span>: 			handleRequestPacket(data);</div><div class="line"><span class="number">15</span>: 			<span class="keyword">break</span>;</div><div class="line"><span class="number">16</span>: 		<span class="keyword">default</span>: <span class="comment">// 初始化 header fields</span></div><div class="line"><span class="number">17</span>: 			resultStatus = RESULT_STATUS_HEADER;</div><div class="line"><span class="number">18</span>: 			header = data;</div><div class="line"><span class="number">19</span>: 			fields = <span class="keyword">new</span> ArrayList&lt;<span class="keyword">byte</span>[]&gt;((<span class="keyword">int</span>) ByteUtil.readLength(data,</div><div class="line"><span class="number">20</span>: 					<span class="number">4</span>));</div><div class="line"><span class="number">21</span>: 		&#125;</div><div class="line"><span class="number">22</span>: 		<span class="keyword">break</span>;</div><div class="line"><span class="number">23</span>: 	<span class="keyword">case</span> RESULT_STATUS_HEADER:</div><div class="line"><span class="number">24</span>: 		<span class="keyword">switch</span> (data[<span class="number">4</span>]) &#123;</div><div class="line"><span class="number">25</span>: 		<span class="keyword">case</span> ErrorPacket.FIELD_COUNT:</div><div class="line"><span class="number">26</span>: 			resultStatus = RESULT_STATUS_INIT;</div><div class="line"><span class="number">27</span>: 			handleErrorPacket(data);</div><div class="line"><span class="number">28</span>: 			<span class="keyword">break</span>;</div><div class="line"><span class="number">29</span>: 		<span class="keyword">case</span> EOFPacket.FIELD_COUNT: <span class="comment">// 解析 fields 结束</span></div><div class="line"><span class="number">30</span>: 			resultStatus = RESULT_STATUS_FIELD_EOF;</div><div class="line"><span class="number">31</span>: 			handleFieldEofPacket(data);</div><div class="line"><span class="number">32</span>: 			<span class="keyword">break</span>;</div><div class="line"><span class="number">33</span>: 		<span class="keyword">default</span>: <span class="comment">// 解析 fields</span></div><div class="line"><span class="number">34</span>: 			fields.add(data);</div><div class="line"><span class="number">35</span>: 		&#125;</div><div class="line"><span class="number">36</span>: 		<span class="keyword">break</span>;</div><div class="line"><span class="number">37</span>: 	<span class="keyword">case</span> RESULT_STATUS_FIELD_EOF:</div><div class="line"><span class="number">38</span>: 		<span class="keyword">switch</span> (data[<span class="number">4</span>]) &#123;</div><div class="line"><span class="number">39</span>: 		<span class="keyword">case</span> ErrorPacket.FIELD_COUNT:</div><div class="line"><span class="number">40</span>: 			resultStatus = RESULT_STATUS_INIT;</div><div class="line"><span class="number">41</span>: 			handleErrorPacket(data);</div><div class="line"><span class="number">42</span>: 			<span class="keyword">break</span>;</div><div class="line"><span class="number">43</span>: 		<span class="keyword">case</span> EOFPacket.FIELD_COUNT: <span class="comment">// 解析 每行记录 结束</span></div><div class="line"><span class="number">44</span>: 			resultStatus = RESULT_STATUS_INIT;</div><div class="line"><span class="number">45</span>: 			handleRowEofPacket(data);</div><div class="line"><span class="number">46</span>: 			<span class="keyword">break</span>;</div><div class="line"><span class="number">47</span>: 		<span class="keyword">default</span>: <span class="comment">// 每行记录</span></div><div class="line"><span class="number">48</span>: 			handleRowPacket(data);</div><div class="line"><span class="number">49</span>: 		&#125;</div><div class="line"><span class="number">50</span>: 		<span class="keyword">break</span>;</div><div class="line"><span class="number">51</span>: 	<span class="keyword">default</span>:</div><div class="line"><span class="number">52</span>: 		<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"unknown status!"</span>);</div><div class="line"><span class="number">53</span>: 	&#125;</div><div class="line"><span class="number">54</span>: &#125;</div></pre></td></tr></table></figure></p>
<h1>6. 其他 ：更新 / 删除</h1>
<p>流程基本和 <a href="http://www.yunai.me/Mycat/single-db-single-table-insert/">《MyCAT源码分析：【单库单表】插入》</a> 相同。我们就不另外文章解析。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://www.yunai.me/images/common/wechat_mp.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;🙂🙂🙂关注**微信公众号：【芋艿的后端小屋】**有福利：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Rock
    
    </summary>
    
      <category term="MyCAT" scheme="http://www.yunai.me/categories/MyCAT/"/>
    
    
  </entry>
  
  <entry>
    <title>MyCAT 源码分析 —— 【单库单表】插入</title>
    <link href="http://www.yunai.me/MyCAT/single-db-single-table-insert/"/>
    <id>http://www.yunai.me/MyCAT/single-db-single-table-insert/</id>
    <published>2017-05-28T16:00:00.000Z</published>
    <updated>2017-07-27T16:54:27.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://www.yunai.me/images/common/wechat_mp.jpeg" alt=""></p>
<blockquote>
<p>🙂🙂🙂关注**微信公众号：【芋艿的后端小屋】**有福利：</p>
<ol>
<li>RocketMQ / MyCAT / Sharding-JDBC <strong>所有</strong>源码分析文章列表</li>
<li>RocketMQ / MyCAT / Sharding-JDBC <strong>中文注释源码 GitHub 地址</strong></li>
<li>您对于源码的疑问每条留言<strong>都</strong>将得到<strong>认真</strong>回复。<strong>甚至不知道如何读源码也可以请教噢</strong>。</li>
<li><strong>新的</strong>源码解析文章<strong>实时</strong>收到通知。<strong>每周更新一篇左右</strong>。</li>
<li><strong>认真的</strong>源码交流微信群。</li>
</ol>
</blockquote>
<hr>
<ul>
<li><a href="#">1. 概述</a></li>
<li><a href="#">2. 接收请求，解析 SQL</a></li>
<li><a href="#">3. 获得路由结果</a></li>
<li><a href="#">4. 获得 MySQL 连接，执行 SQL</a></li>
<li><a href="#">5. 响应执行 SQL 结果</a></li>
</ul>
<h1>1. 概述</h1>
<blockquote>
<p>内容形态以 顺序图 + 核心代码 为主。<br>
如果有地方表述不错误或者不清晰，欢迎留言。<br>
对于内容形态，非常纠结，如果有建议，特别特别特别欢迎您提出。<br>
微信号：wangwenbin-server。</p>
</blockquote>
<p>本文讲解 【单库单表】插入 所涉及到的代码。交互如下图：</p>
<p><img src="http://www.yunai.me/images/MyCAT/2017_05_29/05.png" alt="单库单表插入简图"></p>
<p>整个过程，MyCAT Server 流程如下：</p>
<ol>
<li>接收 MySQL Client 请求，解析 SQL。</li>
<li>获得路由结果，进行路由。</li>
<li>获得 MySQL 连接，执行 SQL。</li>
<li>响应执行结果，发送结果给 MySQL Client。</li>
</ol>
<p>我们逐个步骤分析，一起来看看源码。</p>
<h1>2. 接收请求，解析 SQL</h1>
<p><img src="http://www.yunai.me/images/MyCAT/2017_05_29/01.png" alt="【单库单表】插入（01主流程）"></p>
<h2>【 1 - 2 】</h2>
<p>接收<strong>一条</strong> MySQL 命令。在【1】之前，还有请求数据读取、拆成单条 MySQL SQL。</p>
<h2>【 3 】</h2>
<p>不同 MySQL 命令，分发到不同的方法执行。核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="comment">// ⬇️⬇️⬇️【FrontendCommandHandler.java】</span></div><div class="line"> <span class="number">2</span>: <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FrontendCommandHandler</span> <span class="keyword">implements</span> <span class="title">NIOHandler</span> </span>&#123;</div><div class="line"> <span class="number">3</span>: </div><div class="line"> <span class="number">4</span>:     <span class="meta">@Override</span></div><div class="line"> <span class="number">5</span>:     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(<span class="keyword">byte</span>[] data)</span> </span>&#123;</div><div class="line"> <span class="number">6</span>:     </div><div class="line"> <span class="number">7</span>:         <span class="comment">// .... 省略部分代码</span></div><div class="line"> <span class="number">8</span>:         <span class="keyword">switch</span> (data[<span class="number">4</span>]) <span class="comment">// </span></div><div class="line"> <span class="number">9</span>:         &#123;</div><div class="line"><span class="number">10</span>:             <span class="keyword">case</span> MySQLPacket.COM_INIT_DB:</div><div class="line"><span class="number">11</span>:                 commands.doInitDB();</div><div class="line"><span class="number">12</span>:                 source.initDB(data);</div><div class="line"><span class="number">13</span>:                 <span class="keyword">break</span>;</div><div class="line"><span class="number">14</span>:             <span class="keyword">case</span> MySQLPacket.COM_QUERY: <span class="comment">// 查询命令</span></div><div class="line"><span class="number">15</span>:                 <span class="comment">// 计数查询命令</span></div><div class="line"><span class="number">16</span>:                 commands.doQuery();</div><div class="line"><span class="number">17</span>:                 <span class="comment">// 执行查询命令</span></div><div class="line"><span class="number">18</span>:                 source.query(data);</div><div class="line"><span class="number">19</span>:                 <span class="keyword">break</span>;</div><div class="line"><span class="number">20</span>:             <span class="keyword">case</span> MySQLPacket.COM_PING:</div><div class="line"><span class="number">21</span>:                 commands.doPing();</div><div class="line"><span class="number">22</span>:                 source.ping();</div><div class="line"><span class="number">23</span>:                 <span class="keyword">break</span>;</div><div class="line"><span class="number">24</span>:             <span class="comment">// .... 省略部分case</span></div><div class="line"><span class="number">25</span>:         &#125;</div><div class="line"><span class="number">26</span>:     &#125;</div><div class="line"><span class="number">27</span>: </div><div class="line"><span class="number">28</span>: &#125;</div></pre></td></tr></table></figure></p>
<p><code>INSERT</code>/<code>SELECT</code>/<code>UPDATE</code>/<code>DELETE</code> 等 SQL 归属于 <code>MySQLPacket.COM_QUERY</code>，详细可见：<a href="http://hutaow.com/blog/2013/11/06/mysql-protocol-analysis/#42-" rel="external nofollow noopener noreferrer" target="_blank">《MySQL协议分析#4.2 客户端命令请求报文（客户端 -&gt; 服务器）》</a>。</p>
<p>##【 4 】</p>
<p>将 二进制数组 解析成 SQL。核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="comment">// ⬇️⬇️⬇️【FrontendConnection.java】</span></div><div class="line"> <span class="number">2</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">byte</span>[] data)</span> </span>&#123;</div><div class="line"> <span class="number">3</span>: 	<span class="comment">// 取得语句</span></div><div class="line"> <span class="number">4</span>: 	String sql = <span class="keyword">null</span>;		</div><div class="line"> <span class="number">5</span>: 	<span class="keyword">try</span> &#123;</div><div class="line"> <span class="number">6</span>: 		MySQLMessage mm = <span class="keyword">new</span> MySQLMessage(data);</div><div class="line"> <span class="number">7</span>: 		mm.position(<span class="number">5</span>);</div><div class="line"> <span class="number">8</span>: 		sql = mm.readString(charset);</div><div class="line"> <span class="number">9</span>: 	&#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</div><div class="line"><span class="number">10</span>: 		writeErrMessage(ErrorCode.ER_UNKNOWN_CHARACTER_SET, <span class="string">"Unknown charset '"</span> + charset + <span class="string">"'"</span>);</div><div class="line"><span class="number">11</span>: 		<span class="keyword">return</span>;</div><div class="line"><span class="number">12</span>: 	&#125;		</div><div class="line"><span class="number">13</span>: 	<span class="comment">// 执行语句</span></div><div class="line"><span class="number">14</span>: 	<span class="keyword">this</span>.query( sql );</div><div class="line"><span class="number">15</span>: &#125;</div></pre></td></tr></table></figure></p>
<p>##【 5 】</p>
<p>解析 SQL 类型。核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="comment">// ⬇️⬇️⬇️【ServerQueryHandler.java】</span></div><div class="line"> <span class="number">2</span>: <span class="meta">@Override</span></div><div class="line"> <span class="number">3</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">(String sql)</span> </span>&#123;</div><div class="line"> <span class="number">4</span>: 	<span class="comment">// 解析 SQL 类型</span></div><div class="line"> <span class="number">5</span>: 	<span class="keyword">int</span> rs = ServerParse.parse(sql);</div><div class="line"> <span class="number">6</span>: 	<span class="keyword">int</span> sqlType = rs &amp; <span class="number">0xff</span>;</div><div class="line"> <span class="number">7</span>: 	</div><div class="line"> <span class="number">8</span>: 	<span class="keyword">switch</span> (sqlType) &#123;</div><div class="line"> <span class="number">9</span>: 	<span class="comment">//explain sql</span></div><div class="line"><span class="number">10</span>: 	<span class="keyword">case</span> ServerParse.EXPLAIN:</div><div class="line"><span class="number">11</span>: 		ExplainHandler.handle(sql, c, rs &gt;&gt;&gt; <span class="number">8</span>);</div><div class="line"><span class="number">12</span>: 		<span class="keyword">break</span>;</div><div class="line"><span class="number">13</span>: 	<span class="comment">// .... 省略部分case</span></div><div class="line"><span class="number">14</span>: 		<span class="keyword">break</span>;</div><div class="line"><span class="number">15</span>: 	<span class="keyword">case</span> ServerParse.SELECT:</div><div class="line"><span class="number">16</span>: 		SelectHandler.handle(sql, c, rs &gt;&gt;&gt; <span class="number">8</span>);</div><div class="line"><span class="number">17</span>: 		<span class="keyword">break</span>;</div><div class="line"><span class="number">18</span>: 	<span class="comment">// .... 省略部分case</span></div><div class="line"><span class="number">19</span>: 	<span class="keyword">default</span>:</div><div class="line"><span class="number">20</span>: 		<span class="keyword">if</span>(readOnly)&#123;</div><div class="line"><span class="number">21</span>: 			LOGGER.warn(<span class="keyword">new</span> StringBuilder().append(<span class="string">"User readonly:"</span>).append(sql).toString());</div><div class="line"><span class="number">22</span>: 			c.writeErrMessage(ErrorCode.ER_USER_READ_ONLY, <span class="string">"User readonly"</span>);</div><div class="line"><span class="number">23</span>: 			<span class="keyword">break</span>;</div><div class="line"><span class="number">24</span>: 		&#125;</div><div class="line"><span class="number">25</span>: 		c.execute(sql, rs &amp; <span class="number">0xff</span>);</div><div class="line"><span class="number">26</span>: 	&#125;</div><div class="line"><span class="number">27</span>: &#125;</div><div class="line"><span class="number">28</span>: </div><div class="line"><span class="number">29</span>:</div><div class="line"><span class="number">30</span>: <span class="comment">// ⬇️⬇️⬇️【ServerParse.java】</span></div><div class="line"><span class="number">31</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">parse</span><span class="params">(String stmt)</span> </span>&#123;</div><div class="line"><span class="number">32</span>: 	<span class="keyword">int</span> length = stmt.length();</div><div class="line"><span class="number">33</span>: 	<span class="comment">//FIX BUG FOR SQL SUCH AS /XXXX/SQL</span></div><div class="line"><span class="number">34</span>: 	<span class="keyword">int</span> rt = -<span class="number">1</span>;</div><div class="line"><span class="number">35</span>: 	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; ++i) &#123;</div><div class="line"><span class="number">36</span>: 		<span class="keyword">switch</span> (stmt.charAt(i)) &#123;</div><div class="line"><span class="number">37</span>: 		<span class="comment">// .... 省略部分case			case 'I':</span></div><div class="line"><span class="number">38</span>: 		<span class="keyword">case</span> <span class="string">'i'</span>:</div><div class="line"><span class="number">39</span>: 			rt = insertCheck(stmt, i);</div><div class="line"><span class="number">40</span>: 			<span class="keyword">if</span> (rt != OTHER) &#123;</div><div class="line"><span class="number">41</span>: 				<span class="keyword">return</span> rt;</div><div class="line"><span class="number">42</span>: 			&#125;</div><div class="line"><span class="number">43</span>: 			<span class="keyword">continue</span>;</div><div class="line"><span class="number">44</span>: 			<span class="comment">// .... 省略部分case</span></div><div class="line"><span class="number">45</span>: 		<span class="keyword">case</span> <span class="string">'S'</span>:</div><div class="line"><span class="number">46</span>: 		<span class="keyword">case</span> <span class="string">'s'</span>:</div><div class="line"><span class="number">47</span>: 			rt = sCheck(stmt, i);</div><div class="line"><span class="number">48</span>: 			<span class="keyword">if</span> (rt != OTHER) &#123;</div><div class="line"><span class="number">49</span>: 				<span class="keyword">return</span> rt;</div><div class="line"><span class="number">50</span>: 			&#125;</div><div class="line"><span class="number">51</span>: 			<span class="keyword">continue</span>;</div><div class="line"><span class="number">52</span>: 			<span class="comment">// .... 省略部分case</span></div><div class="line"><span class="number">53</span>: 		<span class="keyword">default</span>:</div><div class="line"><span class="number">54</span>: 			<span class="keyword">continue</span>;</div><div class="line"><span class="number">55</span>: 		&#125;</div><div class="line"><span class="number">56</span>: 	&#125;</div><div class="line"><span class="number">57</span>: 	<span class="keyword">return</span> OTHER;</div><div class="line"><span class="number">58</span>: &#125;</div></pre></td></tr></table></figure></p>
<p>##【 6 】</p>
<p>执行 SQL，详细解析见下文，核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="comment">// ⬇️⬇️⬇️【ServerConnection.java】</span></div><div class="line"> <span class="number">2</span>: <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerConnection</span> <span class="keyword">extends</span> <span class="title">FrontendConnection</span> </span>&#123;</div><div class="line"> <span class="number">3</span>: 	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(String sql, <span class="keyword">int</span> type)</span> </span>&#123;</div><div class="line"> <span class="number">4</span>: 		<span class="comment">// .... 省略代码</span></div><div class="line"> <span class="number">5</span>: 		SchemaConfig schema = MycatServer.getInstance().getConfig().getSchemas().get(db);</div><div class="line"> <span class="number">6</span>: 		<span class="keyword">if</span> (schema == <span class="keyword">null</span>) &#123;</div><div class="line"> <span class="number">7</span>: 			writeErrMessage(ErrorCode.ERR_BAD_LOGICDB,</div><div class="line"> <span class="number">8</span>: 					<span class="string">"Unknown MyCAT Database '"</span> + db + <span class="string">"'"</span>);</div><div class="line"> <span class="number">9</span>: 			<span class="keyword">return</span>;</div><div class="line"><span class="number">10</span>: 		&#125;</div><div class="line"><span class="number">11</span>: </div><div class="line"><span class="number">12</span>: 		<span class="comment">// .... 省略代码</span></div><div class="line"><span class="number">13</span>: </div><div class="line"><span class="number">14</span>: 		<span class="comment">// 路由到后端数据库，执行 SQL</span></div><div class="line"><span class="number">15</span>: 		routeEndExecuteSQL(sql, type, schema);</div><div class="line"><span class="number">16</span>: 	&#125;</div><div class="line"><span class="number">17</span>: 	</div><div class="line"><span class="number">18</span>:     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">routeEndExecuteSQL</span><span class="params">(String sql, <span class="keyword">final</span> <span class="keyword">int</span> type, <span class="keyword">final</span> SchemaConfig schema)</span> </span>&#123;</div><div class="line"><span class="number">19</span>: 		<span class="comment">// 路由计算</span></div><div class="line"><span class="number">20</span>: 		RouteResultset rrs = <span class="keyword">null</span>;</div><div class="line"><span class="number">21</span>: 		<span class="keyword">try</span> &#123;</div><div class="line"><span class="number">22</span>: 			rrs = MycatServer</div><div class="line"><span class="number">23</span>: 					.getInstance()</div><div class="line"><span class="number">24</span>: 					.getRouterservice()</div><div class="line"><span class="number">25</span>: 					.route(MycatServer.getInstance().getConfig().getSystem(),</div><div class="line"><span class="number">26</span>: 							schema, type, sql, <span class="keyword">this</span>.charset, <span class="keyword">this</span>);</div><div class="line"><span class="number">27</span>: </div><div class="line"><span class="number">28</span>: 		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"><span class="number">29</span>: 			StringBuilder s = <span class="keyword">new</span> StringBuilder();</div><div class="line"><span class="number">30</span>: 			LOGGER.warn(s.append(<span class="keyword">this</span>).append(sql).toString() + <span class="string">" err:"</span> + e.toString(),e);</div><div class="line"><span class="number">31</span>: 			String msg = e.getMessage();</div><div class="line"><span class="number">32</span>: 			writeErrMessage(ErrorCode.ER_PARSE_ERROR, msg == <span class="keyword">null</span> ? e.getClass().getSimpleName() : msg);</div><div class="line"><span class="number">33</span>: 			<span class="keyword">return</span>;</div><div class="line"><span class="number">34</span>: 		&#125;</div><div class="line"><span class="number">35</span>: </div><div class="line"><span class="number">36</span>: 		<span class="comment">// 执行 SQL</span></div><div class="line"><span class="number">37</span>: 		<span class="keyword">if</span> (rrs != <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">38</span>: 			<span class="comment">// session执行</span></div><div class="line"><span class="number">39</span>: 			session.execute(rrs, rrs.isSelectForUpdate() ? ServerParse.UPDATE : type);</div><div class="line"><span class="number">40</span>: 		&#125;</div><div class="line"><span class="number">41</span>: 		</div><div class="line"><span class="number">42</span>:  	&#125;</div><div class="line"><span class="number">43</span>: </div><div class="line"><span class="number">44</span>: &#125;</div></pre></td></tr></table></figure></p>
<h1>3. 获得路由结果</h1>
<p><img src="http://www.yunai.me/images/MyCAT/2017_05_29/02.png" alt="【单库单表】插入（02获取路由）"></p>
<h2>【 1 - 2 】【 12 】</h2>
<p>获得路由主流程。核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="comment">// ⬇️⬇️⬇️【RouteService.java】</span></div><div class="line"> <span class="number">2</span>: <span class="function"><span class="keyword">public</span> RouteResultset <span class="title">route</span><span class="params">(SystemConfig sysconf, SchemaConfig schema,</span></span></div><div class="line"> <span class="number">3</span>: 		<span class="keyword">int</span> sqlType, String stmt, String charset, ServerConnection sc)</div><div class="line"> 4: 		<span class="keyword">throws</span> SQLNonTransientException &#123;</div><div class="line"> <span class="number">5</span>: 	RouteResultset rrs = <span class="keyword">null</span>;</div><div class="line"> <span class="number">6</span>: 	<span class="comment">// .... 省略代码</span></div><div class="line"> <span class="number">7</span>: 	<span class="keyword">int</span> hintLength = RouteService.isHintSql(stmt);</div><div class="line"> <span class="number">8</span>: 	<span class="keyword">if</span>(hintLength != -<span class="number">1</span>)&#123; <span class="comment">// TODO 待读：hint</span></div><div class="line"> <span class="number">9</span>: 		<span class="comment">// .... 省略代码</span></div><div class="line"><span class="number">10</span>: 		&#125;</div><div class="line"><span class="number">11</span>: 	&#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">12</span>: 		stmt = stmt.trim();</div><div class="line"><span class="number">13</span>: 		rrs = RouteStrategyFactory.getRouteStrategy().route(sysconf, schema, sqlType, stmt,</div><div class="line"><span class="number">14</span>: 				charset, sc, tableId2DataNodeCache);</div><div class="line"><span class="number">15</span>: 	&#125;</div><div class="line"><span class="number">16</span>: </div><div class="line"><span class="number">17</span>: 	<span class="comment">// .... 省略代码		return rrs;</span></div><div class="line"><span class="number">18</span>: &#125;</div><div class="line"><span class="number">19</span>: <span class="comment">// ⬇️⬇️⬇️【AbstractRouteStrategy.java】</span></div><div class="line"><span class="number">20</span>: <span class="meta">@Override</span></div><div class="line"><span class="number">21</span>: <span class="function"><span class="keyword">public</span> RouteResultset <span class="title">route</span><span class="params">(SystemConfig sysConfig, SchemaConfig schema, <span class="keyword">int</span> sqlType, String origSQL,</span></span></div><div class="line"><span class="number">22</span>: 		String charset, ServerConnection sc, LayerCachePool cachePool) <span class="keyword">throws</span> SQLNonTransientException &#123;</div><div class="line"><span class="number">23</span>: </div><div class="line"><span class="number">24</span>: 	<span class="comment">// .... 省略代码</span></div><div class="line"><span class="number">25</span>: </div><div class="line"><span class="number">26</span>: 	<span class="comment">// 处理一些路由之前的逻辑;全局序列号，父子表插入</span></div><div class="line"><span class="number">27</span>: 	<span class="keyword">if</span> (beforeRouteProcess(schema, sqlType, origSQL, sc) ) &#123;</div><div class="line"><span class="number">28</span>: 		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line"><span class="number">29</span>: 	&#125;</div><div class="line"><span class="number">30</span>: </div><div class="line"><span class="number">31</span>: 	<span class="comment">// .... 省略代码</span></div><div class="line"><span class="number">32</span>: </div><div class="line"><span class="number">33</span>: 	<span class="comment">// 检查是否有分片</span></div><div class="line"><span class="number">34</span>: 	<span class="keyword">if</span> (schema.isNoSharding() &amp;&amp; ServerParse.SHOW != sqlType) &#123;</div><div class="line"><span class="number">35</span>: 		rrs = RouterUtil.routeToSingleNode(rrs, schema.getDataNode(), stmt);</div><div class="line"><span class="number">36</span>: 	&#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">37</span>: 		RouteResultset returnedSet = routeSystemInfo(schema, sqlType, stmt, rrs);</div><div class="line"><span class="number">38</span>: 		<span class="keyword">if</span> (returnedSet == <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">39</span>: 			rrs = routeNormalSqlWithAST(schema, stmt, rrs, charset, cachePool,sqlType,sc);</div><div class="line"><span class="number">40</span>: 		&#125;</div><div class="line"><span class="number">41</span>: 	&#125;</div><div class="line"><span class="number">42</span>: </div><div class="line"><span class="number">43</span>: 	<span class="keyword">return</span> rrs;</div><div class="line"><span class="number">44</span>: &#125;</div></pre></td></tr></table></figure></p>
<p><em><strong>路由</strong> 详细解析，我们另开文章，避免内容过多，影响大家对【插入】流程和逻辑的理解。</em></p>
<h2>【 3 - 6 】</h2>
<p>路由<strong>前置</strong>处理。当符合如下三种情况下，进行处理：</p>
<p>{ 1 } 使用<strong>全局序列号</strong>：</p>
<p><figure class="highlight sql"><table><tr><td class="code"><pre><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">table</span> (<span class="keyword">id</span>, <span class="keyword">name</span>) <span class="keyword">values</span> (<span class="keyword">NEXT</span> <span class="keyword">VALUE</span> <span class="keyword">FOR</span> MYCATSEQ_ID, <span class="string">'name'</span>)</div></pre></td></tr></table></figure></p>
<p>{ 2 } ER 子表插入<br>
{ 3 } 主键使用自增 ID 插入：</p>
<p><figure class="highlight"><table><tr><td class="code"><pre><div class="line">insert into table (name) values ('name')</div><div class="line">===&gt;</div><div class="line">insert into table (id, name) values (NEXT VALUE FOR MYCATSEQ_ID, 'name')</div><div class="line">```  </div><div class="line"></div><div class="line">情况 &#123; 1 &#125; &#123; 3 &#125; 情况类似，使用全局序列号。</div><div class="line"></div><div class="line">核心代码如下：</div><div class="line"></div><div class="line">```Java</div><div class="line">  1: // ⬇️⬇️⬇️【AbstractRouteStrategy.java】</div><div class="line">  2: private boolean beforeRouteProcess(SchemaConfig schema, int sqlType, String origSQL, ServerConnection sc)</div><div class="line">  3: 		throws SQLNonTransientException &#123;</div><div class="line">  4: 	return  // 处理 id 使用 全局序列号</div><div class="line">  5:             RouterUtil.processWithMycatSeq(schema, sqlType, origSQL, sc)</div><div class="line">  6:             // 处理 ER 子表</div><div class="line">  7: 			|| (sqlType == ServerParse.INSERT &amp;&amp; RouterUtil.processERChildTable(schema, origSQL, sc))</div><div class="line">  8:             // 处理 id 自增长</div><div class="line">  9: 			|| (sqlType == ServerParse.INSERT &amp;&amp; RouterUtil.processInsert(schema, sqlType, origSQL, sc));</div><div class="line"> 10: &#125;</div></pre></td></tr></table></figure></p>
<p><code>RouterUtil.java</code> 处理 SQL 考虑性能，实现会比较 C-style，代码咱就不贴了，传送门：https://github.com/YunaiV/Mycat-Server/blob/1.6/src/main/java/io/mycat/route/util/RouterUtil.java。 （😈该仓库从官方 Fork，逐步完善中文注释，欢迎 Star）</p>
<h2>【 7 - 11 】</h2>
<p>当<strong>前置</strong>路由处理<strong>全局序列号</strong>时，添加到全局序列处理器（<code>MyCATSequnceProcessor</code>）。该处理器会异步生成 ID，替换 SQL 内的 <code>NEXT VALUE FOR MYCATSEQ_</code> 正则。例如：</p>
<p><figure class="highlight sql"><table><tr><td class="code"><pre><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">table</span> (<span class="keyword">id</span>, <span class="keyword">name</span>) <span class="keyword">values</span> (<span class="keyword">NEXT</span> <span class="keyword">VALUE</span> <span class="keyword">FOR</span> MYCATSEQ_ID, <span class="string">'name'</span>)</div><div class="line">===&gt;</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">table</span> (<span class="keyword">id</span>, <span class="keyword">name</span>) <span class="keyword">values</span> (<span class="number">868348974560579584</span>, <span class="string">'name'</span>)</div></pre></td></tr></table></figure></p>
<p>异步处理完后，调用 <code>ServerConnection#routeEndExecuteSQL(sql, type, schema)</code> 方法重新执行 SQL。</p>
<p>核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="comment">// ⬇️⬇️⬇️【RouterUtil.java】</span></div><div class="line"> <span class="number">2</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">processSQL</span><span class="params">(ServerConnection sc,SchemaConfig schema,String sql,<span class="keyword">int</span> sqlType)</span></span>&#123;</div><div class="line"> <span class="number">3</span>: 	SessionSQLPair sessionSQLPair = <span class="keyword">new</span> SessionSQLPair(sc.getSession2(), schema, sql, sqlType);</div><div class="line"> <span class="number">4</span>: 	MycatServer.getInstance().getSequnceProcessor().addNewSql(sessionSQLPair);</div><div class="line"> <span class="number">5</span>: &#125;</div><div class="line"> <span class="number">6</span>: <span class="comment">// ⬇️⬇️⬇️【MyCATSequnceProcessor.java】</span></div><div class="line"> <span class="number">7</span>: <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCATSequnceProcessor</span> </span>&#123;</div><div class="line"> <span class="number">8</span>: 	<span class="keyword">private</span> LinkedBlockingQueue&lt;SessionSQLPair&gt; seqSQLQueue = <span class="keyword">new</span> LinkedBlockingQueue&lt;SessionSQLPair&gt;();</div><div class="line"> <span class="number">9</span>: 	<span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> running=<span class="keyword">true</span>;</div><div class="line"><span class="number">10</span>: 	</div><div class="line"><span class="number">11</span>: 	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addNewSql</span><span class="params">(SessionSQLPair pair)</span> </span>&#123;</div><div class="line"><span class="number">12</span>: 		seqSQLQueue.add(pair);</div><div class="line"><span class="number">13</span>: 	&#125;</div><div class="line"><span class="number">14</span>: </div><div class="line"><span class="number">15</span>: 	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">executeSeq</span><span class="params">(SessionSQLPair pair)</span> </span>&#123;</div><div class="line"><span class="number">16</span>: 		<span class="keyword">try</span> &#123;</div><div class="line"><span class="number">17</span>: 			</div><div class="line"><span class="number">18</span>: 			<span class="comment">// 使用Druid解析器实现sequence处理  @兵临城下</span></div><div class="line"><span class="number">19</span>: 			DruidSequenceHandler sequenceHandler = <span class="keyword">new</span> DruidSequenceHandler(MycatServer</div><div class="line"><span class="number">20</span>: 					.getInstance().getConfig().getSystem().getSequnceHandlerType());</div><div class="line"><span class="number">21</span>: </div><div class="line"><span class="number">22</span>: 			<span class="comment">// 生成可执行 SQL ：目前主要是生成 id</span></div><div class="line"><span class="number">23</span>: 			String charset = pair.session.getSource().getCharset();</div><div class="line"><span class="number">24</span>: 			String executeSql = sequenceHandler.getExecuteSql(pair.sql,charset == <span class="keyword">null</span> ? <span class="string">"utf-8"</span>:charset);</div><div class="line"><span class="number">25</span>: </div><div class="line"><span class="number">26</span>: 			<span class="comment">// 执行 SQL</span></div><div class="line"><span class="number">27</span>: 			pair.session.getSource().routeEndExecuteSQL(executeSql, pair.type,pair.schema);</div><div class="line"><span class="number">28</span>: 		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"><span class="number">29</span>: 			LOGGER.error(<span class="string">"MyCATSequenceProcessor.executeSeq(SesionSQLPair)"</span>,e);</div><div class="line"><span class="number">30</span>: 			pair.session.getSource().writeErrMessage(ErrorCode.ER_YES,<span class="string">"mycat sequnce err."</span> + e);</div><div class="line"><span class="number">31</span>: 			<span class="keyword">return</span>;</div><div class="line"><span class="number">32</span>: 		&#125;</div><div class="line"><span class="number">33</span>: 	&#125;</div><div class="line"><span class="number">34</span>: 	</div><div class="line"><span class="number">35</span>: 	<span class="class"><span class="keyword">class</span> <span class="title">ExecuteThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line"><span class="number">36</span>: 		</div><div class="line"><span class="number">37</span>: 		<span class="function"><span class="keyword">public</span> <span class="title">ExecuteThread</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="number">38</span>: 			setDaemon(<span class="keyword">true</span>); <span class="comment">// 设置为后台线程,防止throw RuntimeExecption进程仍然存在的问题</span></div><div class="line"><span class="number">39</span>: 		&#125;</div><div class="line"><span class="number">40</span>: 		</div><div class="line"><span class="number">41</span>: 		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="number">42</span>: 			<span class="keyword">while</span> (running) &#123;</div><div class="line"><span class="number">43</span>: 				<span class="keyword">try</span> &#123;</div><div class="line"><span class="number">44</span>: 					SessionSQLPair pair=seqSQLQueue.poll(<span class="number">100</span>,TimeUnit.MILLISECONDS);</div><div class="line"><span class="number">45</span>: 					<span class="keyword">if</span>(pair!=<span class="keyword">null</span>)&#123;</div><div class="line"><span class="number">46</span>:                         executeSeq(pair);</div><div class="line"><span class="number">47</span>: 					&#125;</div><div class="line"><span class="number">48</span>: 				&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"><span class="number">49</span>: 					LOGGER.warn(<span class="string">"MyCATSequenceProcessor$ExecutorThread"</span>,e);</div><div class="line"><span class="number">50</span>: 				&#125;</div><div class="line"><span class="number">51</span>: 			&#125;</div><div class="line"><span class="number">52</span>: 		&#125;</div><div class="line"><span class="number">53</span>: 	&#125;</div><div class="line"><span class="number">54</span>: &#125;</div></pre></td></tr></table></figure></p>
<p>❓此处有个疑问：<code>MyCATSequnceProcessor</code> 是单线程，会不会插入性能有一定的影响？后续咱做下性能测试。</p>
<h1>4. 获得 MySQL 连接，执行 SQL</h1>
<p><img src="http://www.yunai.me/images/MyCAT/2017_05_29/03.png" alt="【单库单表】插入（03执行 SQL）"></p>
<h2>【 1 - 8 】</h2>
<p>获得 MySQL 连接。</p>
<ul>
<li>PhysicalDBNode ：物理数据库节点。</li>
<li>PhysicalDatasource ：物理数据库数据源。</li>
</ul>
<h2>【 9 - 13 】</h2>
<p>发送 SQL 到 MySQL Server，执行 SQL。</p>
<h1>5. 响应执行 SQL 结果</h1>
<p><img src="http://www.yunai.me/images/MyCAT/2017_05_29/04.png" alt="【单库单表】插入（04执行响应）"></p>
<h2>【 1 - 4 】</h2>
<p>处理 MySQL Server 响应数据包。</p>
<h2>【 5 - 8 】</h2>
<p>发送插入成功结果给 MySQL Client。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://www.yunai.me/images/common/wechat_mp.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;🙂🙂🙂关注**微信公众号：【芋艿的后端小屋】**有福利：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Rock
    
    </summary>
    
      <category term="MyCAT" scheme="http://www.yunai.me/categories/MyCAT/"/>
    
    
  </entry>
  
  <entry>
    <title>MyCAT 源码分析 —— 调试环境搭建</title>
    <link href="http://www.yunai.me/MyCAT/build-debugging-environment/"/>
    <id>http://www.yunai.me/MyCAT/build-debugging-environment/</id>
    <published>2017-05-22T16:00:00.000Z</published>
    <updated>2017-07-27T16:54:23.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://www.yunai.me/images/common/wechat_mp.jpeg" alt=""></p>
<blockquote>
<p>🙂🙂🙂关注**微信公众号：【芋艿的后端小屋】**有福利：</p>
<ol>
<li>RocketMQ / MyCAT / Sharding-JDBC <strong>所有</strong>源码分析文章列表</li>
<li>RocketMQ / MyCAT / Sharding-JDBC <strong>中文注释源码 GitHub 地址</strong></li>
<li>您对于源码的疑问每条留言<strong>都</strong>将得到<strong>认真</strong>回复。<strong>甚至不知道如何读源码也可以请教噢</strong>。</li>
<li><strong>新的</strong>源码解析文章<strong>实时</strong>收到通知。<strong>每周更新一篇左右</strong>。</li>
<li><strong>认真的</strong>源码交流微信群。</li>
</ol>
</blockquote>
<hr>
<ul>
<li><a href="#">1. 依赖工具</a></li>
<li><a href="#">2. 源码拉取</a></li>
<li><a href="#">3. 数据库配置</a></li>
<li><a href="#">4. MyCat 配置</a></li>
<li><a href="#">5. MyCAT 启动</a></li>
<li><a href="#">6. MyCAT 测试</a></li>
<li><a href="#">7. 交流</a></li>
</ul>
<h1>1. 依赖工具</h1>
<ul>
<li>Maven</li>
<li>Git</li>
<li>JDK</li>
<li>MySQL</li>
<li>IntelliJ IDEA</li>
</ul>
<h1>2. 源码拉取</h1>
<p>从官方仓库 <a href="https://github.com/MyCATApache/Mycat-Server" target="_blank" rel="external">https://github.com/MyCATApache/Mycat-Server</a> <code>Fork</code> 出属于自己的仓库。为什么要 <code>Fork</code> ？既然开始阅读、调试源码，我们可能会写一些注释，有了自己的仓库，可以进行自由的提交。😈</p>
<p>使用 <code>IntelliJ IDEA</code> 从 <code>Fork</code> 出来的仓库拉取代码。拉取完成后，<code>Maven</code> 会下载依赖包，可能会花费一些时间，耐心等待下。</p>
<h1>3. 数据库配置</h1>
<p>我们要搭建的是<strong>非分片表</strong>的调试环境，需要创建一个数据库和表：</p>
<ol>
<li>创建数据库：<code>db01</code> 。</li>
<li>创建数据库表：<code>travelrecord</code> 。</li>
</ol>
<p><figure class="highlight sql"><table><tr><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`travelrecord`</span> (</div><div class="line">  <span class="string">`id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</div><div class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> latin1 <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</div><div class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">1</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COLLATE</span>=utf8_bin</div></pre></td></tr></table></figure></p>
<h1>4. MyCAT 配置</h1>
<p>为了避免对实现源码产生影响，我们选择对 <code>test</code> 目录做变更。</p>
<p>1、在 <code>resources</code> 目录下新建文件夹 <code>backups</code> ，将原 <code>resources</code> 下的所有文件移到 <code>backups</code> 下，这样我们的环境就干干净了。<br>
2、在 <code>resources</code> 目录下新建 <code>schema.xml</code> 文件，配置 <code>MyCAT</code> 的逻辑库、表、数据节点、数据源。</p>
<p><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0"?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE mycat:schema SYSTEM "schema.dtd"&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">mycat:schema</span> <span class="attr">xmlns:mycat</span>=<span class="string">"http://io.mycat/"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">"dbtest"</span> <span class="attr">checkSQLschema</span>=<span class="string">"true"</span> <span class="attr">sqlMaxLimit</span>=<span class="string">"100"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">"travelrecord"</span> <span class="attr">dataNode</span>=<span class="string">"dn1"</span> <span class="attr">autoIncrement</span>=<span class="string">"true"</span> <span class="attr">primaryKey</span>=<span class="string">"id"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">schema</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">"dn1"</span> <span class="attr">dataHost</span>=<span class="string">"localhost1"</span> <span class="attr">database</span>=<span class="string">"db1"</span> /&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">"localhost1"</span> <span class="attr">maxCon</span>=<span class="string">"1000"</span> <span class="attr">minCon</span>=<span class="string">"10"</span> <span class="attr">balance</span>=<span class="string">"0"</span></span></div><div class="line">			  <span class="attr">writeType</span>=<span class="string">"0"</span> <span class="attr">dbType</span>=<span class="string">"mysql"</span> <span class="attr">dbDriver</span>=<span class="string">"native"</span> <span class="attr">switchType</span>=<span class="string">"1"</span> <span class="attr">slaveThreshold</span>=<span class="string">"100"</span>&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">"hostM1"</span> <span class="attr">url</span>=<span class="string">"127.0.0.1:33061"</span> <span class="attr">user</span>=<span class="string">"root"</span> <span class="attr">password</span>=<span class="string">"123456"</span>&gt;</span> <span class="comment">&lt;!-- ‼️‼️‼️ url、user、password 设置成你的数据库 --&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">mycat:schema</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>3、在 <code>resources</code> 目录下新建 <code>server.xml</code> 文件，配置 <code>MyCAT</code> 系统配置。</p>
<p><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE mycat:server SYSTEM "server.dtd"&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">mycat:server</span> <span class="attr">xmlns:mycat</span>=<span class="string">"http://io.mycat/"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">system</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"nonePasswordLogin"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span> <span class="comment">&lt;!-- 0为需要密码登陆、1为不需要密码登陆 ,默认为0，设置为1则需要指定默认账户--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"useHandshakeV10"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"useSqlStat"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span>  <span class="comment">&lt;!-- 1为开启实时统计、0为关闭 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"useGlobleTableCheck"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span>  <span class="comment">&lt;!-- 1为开启全加班一致性检测、0为关闭 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sequnceHandlerType"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"processorBufferPoolType"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"handleDistributedTransactions"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"useOffHeapForMerge"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"memoryPageSize"</span>&gt;</span>64k<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"spillsFileBufferSize"</span>&gt;</span>1k<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"useStreamOutput"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"systemReserveMemorySize"</span>&gt;</span>384m<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"useZKSwitch"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">system</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">user</span> <span class="attr">name</span>=<span class="string">"root"</span> <span class="attr">defaultAccount</span>=<span class="string">"true"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"schemas"</span>&gt;</span>dbtest<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">user</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">mycat:server</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h1>5. MyCAT 启动</h1>
<p>1、在 <code>java</code> 目录下新建 <code>debugger</code> 包，和原先已存在的包做区分。<br>
2、在 <code>debbuger</code> 包下新建 <code>MycatStartupTest.java</code> ：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">package</span> debugger;</div><div class="line"></div><div class="line"><span class="keyword">import</span> io.mycat.MycatStartup;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * &#123;<span class="doctag">@link</span> io.mycat.MycatStartup&#125;测试</div><div class="line"> *</div><div class="line"> * Created by yunai on 2017/5/22.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MycatStartupTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        MycatStartup.main(args);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>3、运行 <code>MycatStartupTest.java</code> ，当看到输出日志 <code>MyCAT Server startup successfully. see logs in logs/mycat.log</code> 即为启动成功。</p>
<p>截止目前，<code>test</code> 目录如下：</p>
<p><img src="http://www.yunai.me/images/MyCAT/2017_05_23/01.png" alt="test目录.png"></p>
<h1>6. MyCAT 测试</h1>
<p>调试环境已经搭建完成，我们看看是否正确。</p>
<p>使用 <code>MySQL</code> 客户端连接 <code>MyCAT</code> ：</p>
<ul>
<li>HOST ：127.0.0.1</li>
<li>PORT ：8066</li>
<li>USERNAME ：root</li>
<li>PASSWORD ：123456</li>
</ul>
<p><figure class="highlight"><table><tr><td class="code"><pre><div class="line">mysql&gt; insert into travelrecord(name) values ('haha');</div><div class="line">Query OK, 1 rows affected (0.01 sec)</div><div class="line"></div><div class="line">mysql&gt; select * from travelrecord;</div><div class="line">+--------------------+------+</div><div class="line">| id                 | name |</div><div class="line">+--------------------+------+</div><div class="line">| 866707181398003712 | haha |</div><div class="line">+--------------------+------+</div><div class="line">1 rows in set (0.05 sec)</div></pre></td></tr></table></figure></p>
<p>成功。😈😈😈</p>
<h1>7. 交流</h1>
<p>感谢阅读、收藏、关注。<br>
<strong>知其然知其所以然。学习 MyCAT 会是一段很愉快的旅程。如果有你的交流，相信会更加愉快。欢迎添加微信：<code>wangwenbin-server</code> 进行探讨。</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://www.yunai.me/images/common/wechat_mp.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;🙂🙂🙂关注**微信公众号：【芋艿的后端小屋】**有福利：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Rock
    
    </summary>
    
      <category term="MyCAT" scheme="http://www.yunai.me/categories/MyCAT/"/>
    
    
  </entry>
  
  <entry>
    <title>为什么阅读 MyCAT 源码？</title>
    <link href="http://www.yunai.me/MyCAT/why-read-MyCAT-source-code/"/>
    <id>http://www.yunai.me/MyCAT/why-read-MyCAT-source-code/</id>
    <published>2017-05-21T16:00:00.000Z</published>
    <updated>2017-07-27T16:54:14.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://www.yunai.me/images/common/wechat_mp.jpeg" alt=""></p>
<blockquote>
<p>🙂🙂🙂关注**微信公众号：【芋艿的后端小屋】**有福利：</p>
<ol>
<li>RocketMQ / MyCAT / Sharding-JDBC <strong>所有</strong>源码分析文章列表</li>
<li>RocketMQ / MyCAT / Sharding-JDBC <strong>中文注释源码 GitHub 地址</strong></li>
<li>您对于源码的疑问每条留言<strong>都</strong>将得到<strong>认真</strong>回复。<strong>甚至不知道如何读源码也可以请教噢</strong>。</li>
<li><strong>新的</strong>源码解析文章<strong>实时</strong>收到通知。<strong>每周更新一篇左右</strong>。</li>
<li><strong>认真的</strong>源码交流微信群。</li>
</ol>
</blockquote>
<hr>
<h2>为什么阅读 MyCAT 源码？</h2>
<ul>
<li>深入了解<strong>数据库中间件</strong> ，知其然知其所以然。</li>
<li>NIO 的实现 与 Netty 有什么特殊的地方？</li>
<li>分布式事务如何实现的？</li>
<li>内存管理</li>
<li>SQL 解析</li>
<li>等等</li>
</ul>
<h2>功能点</h2>
<ul>
<li>[ ] NIO</li>
<li>[x] 分布式事务</li>
<li>[ ] MyCAT 主从</li>
<li>[x] 支持prepare预编译指令</li>
<li>[ ] 自增序列 30%</li>
<li>[ ] 单库任意 Join Doing</li>
<li>[x] 跨库2表 Join</li>
<li>[ ] 跨库多表 Join</li>
<li>[ ] SQL 解析</li>
<li>[ ] 读写分离</li>
<li>[ ] MySQL 主从</li>
<li>[ ] 自动故障切换</li>
<li>[ ] Galera Cluster 集群</li>
<li>[ ] MHA 集群</li>
<li>[ ] Percona 集群</li>
<li>[ ] 服务降级</li>
<li>[ ] 多租户</li>
<li>[ ] 路由</li>
<li>[ ] MyCAT 集群</li>
<li>[ ] 注解</li>
<li>[ ] 缓存</li>
<li>[ ] 监控</li>
<li>[ ] Mongodb</li>
<li>[ ] 内存管理 20%</li>
<li>[ ] 数据聚合 30%</li>
<li>[ ] 数据排序 25%</li>
<li>[ ] 分表</li>
<li>[ ] 分库 50%</li>
<li>[ ] 全局表</li>
<li>[ ] E/R关系</li>
<li>[ ] 服务降级</li>
<li>[ ] SQL 注入攻击拦截</li>
<li>[ ] MySQL 协议</li>
<li>[ ] PostgreSQL 协议</li>
<li>[ ] 存储过程</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://www.yunai.me/images/common/wechat_mp.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;🙂🙂🙂关注**微信公众号：【芋艿的后端小屋】**有福利：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Rock
    
    </summary>
    
      <category term="MyCAT" scheme="http://www.yunai.me/categories/MyCAT/"/>
    
    
  </entry>
  
  <entry>
    <title>RocketMQ 源码分析 —— 事务消息</title>
    <link href="http://www.yunai.me/RocketMQ/message-transaction/"/>
    <id>http://www.yunai.me/RocketMQ/message-transaction/</id>
    <published>2017-05-20T16:00:00.000Z</published>
    <updated>2017-07-27T16:57:54.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://www.yunai.me/images/common/wechat_mp.jpeg" alt=""></p>
<blockquote>
<p>🙂🙂🙂关注**微信公众号：【芋艿的后端小屋】**有福利：</p>
<ol>
<li>RocketMQ / MyCAT / Sharding-JDBC <strong>所有</strong>源码分析文章列表</li>
<li>RocketMQ / MyCAT / Sharding-JDBC <strong>中文注释源码 GitHub 地址</strong></li>
<li>您对于源码的疑问每条留言<strong>都</strong>将得到<strong>认真</strong>回复。<strong>甚至不知道如何读源码也可以请教噢</strong>。</li>
<li><strong>新的</strong>源码解析文章<strong>实时</strong>收到通知。<strong>每周更新一篇左右</strong>。</li>
<li><strong>认真的</strong>源码交流微信群。</li>
</ol>
</blockquote>
<hr>
<ul>
<li><a href="#">1. 概述</a></li>
<li><a href="#">2. 事务消息发送</a>
<ul>
<li><a href="#">2.1 Producer 发送事务消息</a></li>
<li><a href="#">2.2 Broker 处理结束事务请求</a></li>
<li><a href="#">2.3 Broker 生成 ConsumeQueue</a></li>
</ul>
</li>
<li><a href="#">3. 事务消息回查</a>
<ul>
<li><a href="#">3.1 Broker 发起【事务消息回查】</a>
<ul>
<li><a href="#">3.1.1 官方V3.1.4：基于文件系统</a>
<ul>
<li><a href="#">3.1.1.1 存储消息到 CommitLog</a></li>
<li><a href="#">3.1.1.2 写【事务消息】状态存储（TranStateTable）</a></li>
<li><a href="#">3.1.1.3 【事务消息】回查</a></li>
<li><a href="#">3.1.1.4 初始化【事务消息】状态存储（TranStateTable）</a></li>
<li><a href="#">3.1.1.5 补充</a></li>
</ul>
</li>
<li><a href="#">3.1.2 官方V4.0.0：基于数据库</a></li>
</ul>
</li>
<li><a href="#">3.2 Producer 接收【事务消息回查】</a></li>
</ul>
</li>
</ul>
<h1>1. 概述</h1>
<p><strong>必须必须必须</strong> 前置阅读内容：</p>
<ul>
<li><a href="https://help.aliyun.com/document_detail/43348.html?spm=5176.doc43490.6.566.Zd5Bl7" rel="external nofollow noopener noreferrer" target="_blank">《事务消息（阿里云）》</a></li>
</ul>
<h1>2. 事务消息发送</h1>
<h2>2.1 Producer 发送事务消息</h2>
<ul>
<li>活动图如下（结合 <code>核心代码</code> 理解）：</li>
</ul>
<p><img src="http://www.yunai.me/images/RocketMQ/2017_05_21/03.png" alt="Producer发送事务消息"></p>
<ul>
<li>实现代码如下：</li>
</ul>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">  <span class="number">1</span>: <span class="comment">// ⬇️⬇️⬇️【DefaultMQProducerImpl.java】</span></div><div class="line">  <span class="number">2</span>: <span class="comment">/**</span></div><div class="line">  3:  * 发送事务消息</div><div class="line">  4:  *</div><div class="line">  5:  * <span class="doctag">@param</span> msg 消息</div><div class="line">  6:  * <span class="doctag">@param</span> tranExecuter 【本地事务】执行器</div><div class="line">  7:  * <span class="doctag">@param</span> arg 【本地事务】执行器参数</div><div class="line">  8:  * <span class="doctag">@return</span> 事务发送结果</div><div class="line">  9:  * <span class="doctag">@throws</span> MQClientException 当 Client 发生异常时</div><div class="line"> 10:  */</div><div class="line"> <span class="number">11</span>: <span class="function"><span class="keyword">public</span> TransactionSendResult <span class="title">sendMessageInTransaction</span><span class="params">(<span class="keyword">final</span> Message msg, <span class="keyword">final</span> LocalTransactionExecuter tranExecuter, <span class="keyword">final</span> Object arg)</span></span></div><div class="line"> 12:     <span class="keyword">throws</span> MQClientException &#123;</div><div class="line"> <span class="number">13</span>:     <span class="keyword">if</span> (<span class="keyword">null</span> == tranExecuter) &#123;</div><div class="line"> <span class="number">14</span>:         <span class="keyword">throw</span> <span class="keyword">new</span> MQClientException(<span class="string">"tranExecutor is null"</span>, <span class="keyword">null</span>);</div><div class="line"> <span class="number">15</span>:     &#125;</div><div class="line"> <span class="number">16</span>:     Validators.checkMessage(msg, <span class="keyword">this</span>.defaultMQProducer);</div><div class="line"> <span class="number">17</span>: </div><div class="line"> <span class="number">18</span>:     <span class="comment">// 发送【Half消息】</span></div><div class="line"> <span class="number">19</span>:     SendResult sendResult;</div><div class="line"> <span class="number">20</span>:     MessageAccessor.putProperty(msg, MessageConst.PROPERTY_TRANSACTION_PREPARED, <span class="string">"true"</span>);</div><div class="line"> <span class="number">21</span>:     MessageAccessor.putProperty(msg, MessageConst.PROPERTY_PRODUCER_GROUP, <span class="keyword">this</span>.defaultMQProducer.getProducerGroup());</div><div class="line"> <span class="number">22</span>:     <span class="keyword">try</span> &#123;</div><div class="line"> <span class="number">23</span>:         sendResult = <span class="keyword">this</span>.send(msg);</div><div class="line"> <span class="number">24</span>:     &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"> <span class="number">25</span>:         <span class="keyword">throw</span> <span class="keyword">new</span> MQClientException(<span class="string">"send message Exception"</span>, e);</div><div class="line"> <span class="number">26</span>:     &#125;</div><div class="line"> <span class="number">27</span>: </div><div class="line"> <span class="number">28</span>:     <span class="comment">// 处理发送【Half消息】结果</span></div><div class="line"> <span class="number">29</span>:     LocalTransactionState localTransactionState = LocalTransactionState.UNKNOW;</div><div class="line"> <span class="number">30</span>:     Throwable localException = <span class="keyword">null</span>;</div><div class="line"> <span class="number">31</span>:     <span class="keyword">switch</span> (sendResult.getSendStatus()) &#123;</div><div class="line"> <span class="number">32</span>:         <span class="comment">// 发送【Half消息】成功，执行【本地事务】逻辑</span></div><div class="line"> <span class="number">33</span>:         <span class="keyword">case</span> SEND_OK: &#123;</div><div class="line"> <span class="number">34</span>:             <span class="keyword">try</span> &#123;</div><div class="line"> <span class="number">35</span>:                 <span class="keyword">if</span> (sendResult.getTransactionId() != <span class="keyword">null</span>) &#123; <span class="comment">// 事务编号。目前开源版本暂时没用到，猜想ONS在使用。</span></div><div class="line"> <span class="number">36</span>:                     msg.putUserProperty(<span class="string">"__transactionId__"</span>, sendResult.getTransactionId());</div><div class="line"> <span class="number">37</span>:                 &#125;</div><div class="line"> <span class="number">38</span>: </div><div class="line"> <span class="number">39</span>:                 <span class="comment">// 执行【本地事务】逻辑</span></div><div class="line"> <span class="number">40</span>:                 localTransactionState = tranExecuter.executeLocalTransactionBranch(msg, arg);</div><div class="line"> <span class="number">41</span>:                 <span class="keyword">if</span> (<span class="keyword">null</span> == localTransactionState) &#123;</div><div class="line"> <span class="number">42</span>:                     localTransactionState = LocalTransactionState.UNKNOW;</div><div class="line"> <span class="number">43</span>:                 &#125;</div><div class="line"> <span class="number">44</span>: </div><div class="line"> <span class="number">45</span>:                 <span class="keyword">if</span> (localTransactionState != LocalTransactionState.COMMIT_MESSAGE) &#123;</div><div class="line"> <span class="number">46</span>:                     log.info(<span class="string">"executeLocalTransactionBranch return &#123;&#125;"</span>, localTransactionState);</div><div class="line"> <span class="number">47</span>:                     log.info(msg.toString());</div><div class="line"> <span class="number">48</span>:                 &#125;</div><div class="line"> <span class="number">49</span>:             &#125; <span class="keyword">catch</span> (Throwable e) &#123;</div><div class="line"> <span class="number">50</span>:                 log.info(<span class="string">"executeLocalTransactionBranch exception"</span>, e);</div><div class="line"> <span class="number">51</span>:                 log.info(msg.toString());</div><div class="line"> <span class="number">52</span>:                 localException = e;</div><div class="line"> <span class="number">53</span>:             &#125;</div><div class="line"> <span class="number">54</span>:         &#125;</div><div class="line"> <span class="number">55</span>:         <span class="keyword">break</span>;</div><div class="line"> <span class="number">56</span>:         <span class="comment">// 发送【Half消息】失败，标记【本地事务】状态为回滚</span></div><div class="line"> <span class="number">57</span>:         <span class="keyword">case</span> FLUSH_DISK_TIMEOUT:</div><div class="line"> <span class="number">58</span>:         <span class="keyword">case</span> FLUSH_SLAVE_TIMEOUT:</div><div class="line"> <span class="number">59</span>:         <span class="keyword">case</span> SLAVE_NOT_AVAILABLE:</div><div class="line"> <span class="number">60</span>:             localTransactionState = LocalTransactionState.ROLLBACK_MESSAGE;</div><div class="line"> <span class="number">61</span>:             <span class="keyword">break</span>;</div><div class="line"> <span class="number">62</span>:         <span class="keyword">default</span>:</div><div class="line"> <span class="number">63</span>:             <span class="keyword">break</span>;</div><div class="line"> <span class="number">64</span>:     &#125;</div><div class="line"> <span class="number">65</span>: </div><div class="line"> <span class="number">66</span>:     <span class="comment">// 结束事务：提交消息 COMMIT / ROLLBACK</span></div><div class="line"> <span class="number">67</span>:     <span class="keyword">try</span> &#123;</div><div class="line"> <span class="number">68</span>:         <span class="keyword">this</span>.endTransaction(sendResult, localTransactionState, localException);</div><div class="line"> <span class="number">69</span>:     &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"> <span class="number">70</span>:         log.warn(<span class="string">"local transaction execute "</span> + localTransactionState + <span class="string">", but end broker transaction failed"</span>, e);</div><div class="line"> <span class="number">71</span>:     &#125;</div><div class="line"> <span class="number">72</span>: </div><div class="line"> <span class="number">73</span>:     <span class="comment">// 返回【事务发送结果】</span></div><div class="line"> <span class="number">74</span>:     TransactionSendResult transactionSendResult = <span class="keyword">new</span> TransactionSendResult();</div><div class="line"> <span class="number">75</span>:     transactionSendResult.setSendStatus(sendResult.getSendStatus());</div><div class="line"> <span class="number">76</span>:     transactionSendResult.setMessageQueue(sendResult.getMessageQueue());</div><div class="line"> <span class="number">77</span>:     transactionSendResult.setMsgId(sendResult.getMsgId());</div><div class="line"> <span class="number">78</span>:     transactionSendResult.setQueueOffset(sendResult.getQueueOffset());</div><div class="line"> <span class="number">79</span>:     transactionSendResult.setTransactionId(sendResult.getTransactionId());</div><div class="line"> <span class="number">80</span>:     transactionSendResult.setLocalTransactionState(localTransactionState);</div><div class="line"> <span class="number">81</span>:     <span class="keyword">return</span> transactionSendResult;</div><div class="line"> <span class="number">82</span>: &#125;</div><div class="line"> <span class="number">83</span>: </div><div class="line"> <span class="number">84</span>: <span class="comment">/**</span></div><div class="line"> 85:  * 结束事务：提交消息 COMMIT / ROLLBACK</div><div class="line"> 86:  *</div><div class="line"> 87:  * <span class="doctag">@param</span> sendResult 发送【Half消息】结果</div><div class="line"> 88:  * <span class="doctag">@param</span> localTransactionState 【本地事务】状态</div><div class="line"> 89:  * <span class="doctag">@param</span> localException 执行【本地事务】逻辑产生的异常</div><div class="line"> 90:  * <span class="doctag">@throws</span> RemotingException 当远程调用发生异常时</div><div class="line"> 91:  * <span class="doctag">@throws</span> MQBrokerException 当 Broker 发生异常时</div><div class="line"> 92:  * <span class="doctag">@throws</span> InterruptedException 当线程中断时</div><div class="line"> 93:  * <span class="doctag">@throws</span> UnknownHostException 当解码消息编号失败是</div><div class="line"> 94:  */</div><div class="line"> <span class="number">95</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">endTransaction</span><span class="params">(//</span></span></div><div class="line"> <span class="number">96</span>:     <span class="keyword">final</span> SendResult sendResult, //</div><div class="line"> <span class="number">97</span>:     <span class="keyword">final</span> LocalTransactionState localTransactionState, //</div><div class="line"> <span class="number">98</span>:     <span class="keyword">final</span> Throwable localException) <span class="keyword">throws</span> RemotingException, MQBrokerException, InterruptedException, UnknownHostException &#123;</div><div class="line"> <span class="number">99</span>:     <span class="comment">// 解码消息编号</span></div><div class="line"><span class="number">100</span>:     <span class="keyword">final</span> MessageId id;</div><div class="line"><span class="number">101</span>:     <span class="keyword">if</span> (sendResult.getOffsetMsgId() != <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">102</span>:         id = MessageDecoder.decodeMessageId(sendResult.getOffsetMsgId());</div><div class="line"><span class="number">103</span>:     &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">104</span>:         id = MessageDecoder.decodeMessageId(sendResult.getMsgId());</div><div class="line"><span class="number">105</span>:     &#125;</div><div class="line"><span class="number">106</span>: </div><div class="line"><span class="number">107</span>:     <span class="comment">// 创建请求</span></div><div class="line"><span class="number">108</span>:     String transactionId = sendResult.getTransactionId();</div><div class="line"><span class="number">109</span>:     <span class="keyword">final</span> String brokerAddr = <span class="keyword">this</span>.mQClientFactory.findBrokerAddressInPublish(sendResult.getMessageQueue().getBrokerName());</div><div class="line"><span class="number">110</span>:     EndTransactionRequestHeader requestHeader = <span class="keyword">new</span> EndTransactionRequestHeader();</div><div class="line"><span class="number">111</span>:     requestHeader.setTransactionId(transactionId);</div><div class="line"><span class="number">112</span>:     requestHeader.setCommitLogOffset(id.getOffset());</div><div class="line"><span class="number">113</span>:     <span class="keyword">switch</span> (localTransactionState) &#123;</div><div class="line"><span class="number">114</span>:         <span class="keyword">case</span> COMMIT_MESSAGE:</div><div class="line"><span class="number">115</span>:             requestHeader.setCommitOrRollback(MessageSysFlag.TRANSACTION_COMMIT_TYPE);</div><div class="line"><span class="number">116</span>:             <span class="keyword">break</span>;</div><div class="line"><span class="number">117</span>:         <span class="keyword">case</span> ROLLBACK_MESSAGE:</div><div class="line"><span class="number">118</span>:             requestHeader.setCommitOrRollback(MessageSysFlag.TRANSACTION_ROLLBACK_TYPE);</div><div class="line"><span class="number">119</span>:             <span class="keyword">break</span>;</div><div class="line"><span class="number">120</span>:         <span class="keyword">case</span> UNKNOW:</div><div class="line"><span class="number">121</span>:             requestHeader.setCommitOrRollback(MessageSysFlag.TRANSACTION_NOT_TYPE);</div><div class="line"><span class="number">122</span>:             <span class="keyword">break</span>;</div><div class="line"><span class="number">123</span>:         <span class="keyword">default</span>:</div><div class="line"><span class="number">124</span>:             <span class="keyword">break</span>;</div><div class="line"><span class="number">125</span>:     &#125;</div><div class="line"><span class="number">126</span>:     requestHeader.setProducerGroup(<span class="keyword">this</span>.defaultMQProducer.getProducerGroup());</div><div class="line"><span class="number">127</span>:     requestHeader.setTranStateTableOffset(sendResult.getQueueOffset());</div><div class="line"><span class="number">128</span>:     requestHeader.setMsgId(sendResult.getMsgId());</div><div class="line"><span class="number">129</span>:     String remark = localException != <span class="keyword">null</span> ? (<span class="string">"executeLocalTransactionBranch exception: "</span> + localException.toString()) : <span class="keyword">null</span>;</div><div class="line"><span class="number">130</span>: </div><div class="line"><span class="number">131</span>:     <span class="comment">// 提交消息 COMMIT / ROLLBACK。！！！通信方式为：Oneway！！！</span></div><div class="line"><span class="number">132</span>:     <span class="keyword">this</span>.mQClientFactory.getMQClientAPIImpl().endTransactionOneway(brokerAddr, requestHeader, remark, <span class="keyword">this</span>.defaultMQProducer.getSendMsgTimeout());</div><div class="line"><span class="number">133</span>: &#125;</div></pre></td></tr></table></figure></p>
<h2>2.2 Broker 处理结束事务请求</h2>
<ul>
<li>🦅 查询请求的消息，进行<strong>提交 / 回滚</strong>。实现代码如下：</li>
</ul>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="comment">// ⬇️⬇️⬇️【EndTransactionProcessor.java】</span></div><div class="line"> <span class="number">2</span>: <span class="function"><span class="keyword">public</span> RemotingCommand <span class="title">processRequest</span><span class="params">(ChannelHandlerContext ctx, RemotingCommand request)</span> <span class="keyword">throws</span> RemotingCommandException </span>&#123;</div><div class="line"> <span class="number">3</span>:     <span class="keyword">final</span> RemotingCommand response = RemotingCommand.createResponseCommand(<span class="keyword">null</span>);</div><div class="line"> <span class="number">4</span>:     <span class="keyword">final</span> EndTransactionRequestHeader requestHeader = (EndTransactionRequestHeader) request.decodeCommandCustomHeader(EndTransactionRequestHeader.class);</div><div class="line"> <span class="number">5</span>: </div><div class="line"> <span class="number">6</span>:     <span class="comment">// 省略代码 =》打印日志（只处理 COMMIT / ROLLBACK）</span></div><div class="line"> <span class="number">7</span>: </div><div class="line"> <span class="number">8</span>:     <span class="comment">// 查询提交的消息</span></div><div class="line"> <span class="number">9</span>:     <span class="keyword">final</span> MessageExt msgExt = <span class="keyword">this</span>.brokerController.getMessageStore().lookMessageByOffset(requestHeader.getCommitLogOffset());</div><div class="line"><span class="number">10</span>:     <span class="keyword">if</span> (msgExt != <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">11</span>:         <span class="comment">// 省略代码 =》校验消息</span></div><div class="line"><span class="number">12</span>: </div><div class="line"><span class="number">13</span>:         <span class="comment">// 生成消息</span></div><div class="line"><span class="number">14</span>:         MessageExtBrokerInner msgInner = <span class="keyword">this</span>.endMessageTransaction(msgExt);</div><div class="line"><span class="number">15</span>:         msgInner.setSysFlag(MessageSysFlag.resetTransactionValue(msgInner.getSysFlag(), requestHeader.getCommitOrRollback()));</div><div class="line"><span class="number">16</span>:         msgInner.setQueueOffset(requestHeader.getTranStateTableOffset());</div><div class="line"><span class="number">17</span>:         msgInner.setPreparedTransactionOffset(requestHeader.getCommitLogOffset());</div><div class="line"><span class="number">18</span>:         msgInner.setStoreTimestamp(msgExt.getStoreTimestamp());</div><div class="line"><span class="number">19</span>:         <span class="keyword">if</span> (MessageSysFlag.TRANSACTION_ROLLBACK_TYPE == requestHeader.getCommitOrRollback()) &#123;</div><div class="line"><span class="number">20</span>:             msgInner.setBody(<span class="keyword">null</span>);</div><div class="line"><span class="number">21</span>:         &#125;</div><div class="line"><span class="number">22</span>: </div><div class="line"><span class="number">23</span>:         <span class="comment">// 存储生成消息</span></div><div class="line"><span class="number">24</span>:         <span class="keyword">final</span> MessageStore messageStore = <span class="keyword">this</span>.brokerController.getMessageStore();</div><div class="line"><span class="number">25</span>:         <span class="keyword">final</span> PutMessageResult putMessageResult = messageStore.putMessage(msgInner);</div><div class="line"><span class="number">26</span>: </div><div class="line"><span class="number">27</span>:         <span class="comment">// 处理存储结果</span></div><div class="line"><span class="number">28</span>:         <span class="keyword">if</span> (putMessageResult != <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">29</span>:             <span class="keyword">switch</span> (putMessageResult.getPutMessageStatus()) &#123;</div><div class="line"><span class="number">30</span>:                 <span class="comment">// Success</span></div><div class="line"><span class="number">31</span>:                 <span class="keyword">case</span> PUT_OK:</div><div class="line"><span class="number">32</span>:                 <span class="keyword">case</span> FLUSH_DISK_TIMEOUT:</div><div class="line"><span class="number">33</span>:                 <span class="keyword">case</span> FLUSH_SLAVE_TIMEOUT:</div><div class="line"><span class="number">34</span>:                 <span class="keyword">case</span> SLAVE_NOT_AVAILABLE:</div><div class="line"><span class="number">35</span>:                     response.setCode(ResponseCode.SUCCESS);</div><div class="line"><span class="number">36</span>:                     response.setRemark(<span class="keyword">null</span>);</div><div class="line"><span class="number">37</span>:                     <span class="keyword">break</span>;</div><div class="line"><span class="number">38</span>:                 <span class="comment">// Failed</span></div><div class="line"><span class="number">39</span>:                 <span class="keyword">case</span> CREATE_MAPEDFILE_FAILED:</div><div class="line"><span class="number">40</span>:                     response.setCode(ResponseCode.SYSTEM_ERROR);</div><div class="line"><span class="number">41</span>:                     response.setRemark(<span class="string">"create maped file failed."</span>);</div><div class="line"><span class="number">42</span>:                     <span class="keyword">break</span>;</div><div class="line"><span class="number">43</span>:                 <span class="keyword">case</span> MESSAGE_ILLEGAL:</div><div class="line"><span class="number">44</span>:                 <span class="keyword">case</span> PROPERTIES_SIZE_EXCEEDED:</div><div class="line"><span class="number">45</span>:                     response.setCode(ResponseCode.MESSAGE_ILLEGAL);</div><div class="line"><span class="number">46</span>:                     response.setRemark(<span class="string">"the message is illegal, maybe msg body or properties length not matched. msg body length limit 128k, msg properties length limit 32k."</span>);</div><div class="line"><span class="number">47</span>:                     <span class="keyword">break</span>;</div><div class="line"><span class="number">48</span>:                 <span class="keyword">case</span> SERVICE_NOT_AVAILABLE:</div><div class="line"><span class="number">49</span>:                     response.setCode(ResponseCode.SERVICE_NOT_AVAILABLE);</div><div class="line"><span class="number">50</span>:                     response.setRemark(<span class="string">"service not available now."</span>);</div><div class="line"><span class="number">51</span>:                     <span class="keyword">break</span>;</div><div class="line"><span class="number">52</span>:                 <span class="keyword">case</span> OS_PAGECACHE_BUSY:</div><div class="line"><span class="number">53</span>:                     response.setCode(ResponseCode.SYSTEM_ERROR);</div><div class="line"><span class="number">54</span>:                     response.setRemark(<span class="string">"OS page cache busy, please try another machine"</span>);</div><div class="line"><span class="number">55</span>:                     <span class="keyword">break</span>;</div><div class="line"><span class="number">56</span>:                 <span class="keyword">case</span> UNKNOWN_ERROR:</div><div class="line"><span class="number">57</span>:                     response.setCode(ResponseCode.SYSTEM_ERROR);</div><div class="line"><span class="number">58</span>:                     response.setRemark(<span class="string">"UNKNOWN_ERROR"</span>);</div><div class="line"><span class="number">59</span>:                     <span class="keyword">break</span>;</div><div class="line"><span class="number">60</span>:                 <span class="keyword">default</span>:</div><div class="line"><span class="number">61</span>:                     response.setCode(ResponseCode.SYSTEM_ERROR);</div><div class="line"><span class="number">62</span>:                     response.setRemark(<span class="string">"UNKNOWN_ERROR DEFAULT"</span>);</div><div class="line"><span class="number">63</span>:                     <span class="keyword">break</span>;</div><div class="line"><span class="number">64</span>:             &#125;</div><div class="line"><span class="number">65</span>: </div><div class="line"><span class="number">66</span>:             <span class="keyword">return</span> response;</div><div class="line"><span class="number">67</span>:         &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">68</span>:             response.setCode(ResponseCode.SYSTEM_ERROR);</div><div class="line"><span class="number">69</span>:             response.setRemark(<span class="string">"store putMessage return null"</span>);</div><div class="line"><span class="number">70</span>:         &#125;</div><div class="line"><span class="number">71</span>:     &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">72</span>:         response.setCode(ResponseCode.SYSTEM_ERROR);</div><div class="line"><span class="number">73</span>:         response.setRemark(<span class="string">"find prepared transaction message failed"</span>);</div><div class="line"><span class="number">74</span>:         <span class="keyword">return</span> response;</div><div class="line"><span class="number">75</span>:     &#125;</div><div class="line"><span class="number">76</span>: </div><div class="line"><span class="number">77</span>:     <span class="keyword">return</span> response;</div><div class="line"><span class="number">78</span>: &#125;</div></pre></td></tr></table></figure></p>
<h2>2.3 Broker 生成 ConsumeQueue</h2>
<ul>
<li>🦅 事务消息，提交（<code>COMMIT</code>）后才生成 <code>ConsumeQueue</code>。</li>
</ul>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="comment">// ⬇️⬇️⬇️【DefaultMessageStore.java】</span></div><div class="line"> <span class="number">2</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doDispatch</span><span class="params">(DispatchRequest req)</span> </span>&#123;</div><div class="line"> <span class="number">3</span>:     <span class="comment">// 非事务消息 或 事务提交消息 建立 消息位置信息 到 ConsumeQueue</span></div><div class="line"> <span class="number">4</span>:     <span class="keyword">final</span> <span class="keyword">int</span> tranType = MessageSysFlag.getTransactionValue(req.getSysFlag());</div><div class="line"> <span class="number">5</span>:     <span class="keyword">switch</span> (tranType) &#123;</div><div class="line"> <span class="number">6</span>:         <span class="keyword">case</span> MessageSysFlag.TRANSACTION_NOT_TYPE: <span class="comment">// 非事务消息</span></div><div class="line"> <span class="number">7</span>:         <span class="keyword">case</span> MessageSysFlag.TRANSACTION_COMMIT_TYPE: <span class="comment">// 事务消息COMMIT</span></div><div class="line"> <span class="number">8</span>:             DefaultMessageStore.<span class="keyword">this</span>.putMessagePositionInfo(req.getTopic(), req.getQueueId(), req.getCommitLogOffset(), req.getMsgSize(),</div><div class="line"> <span class="number">9</span>:                 req.getTagsCode(), req.getStoreTimestamp(), req.getConsumeQueueOffset());</div><div class="line"><span class="number">10</span>:             <span class="keyword">break</span>;</div><div class="line"><span class="number">11</span>:         <span class="keyword">case</span> MessageSysFlag.TRANSACTION_PREPARED_TYPE: <span class="comment">// 事务消息PREPARED</span></div><div class="line"><span class="number">12</span>:         <span class="keyword">case</span> MessageSysFlag.TRANSACTION_ROLLBACK_TYPE: <span class="comment">// 事务消息ROLLBACK</span></div><div class="line"><span class="number">13</span>:             <span class="keyword">break</span>;</div><div class="line"><span class="number">14</span>:     &#125;</div><div class="line"><span class="number">15</span>:     <span class="comment">// 省略代码 =》 建立 索引信息 到 IndexFile</span></div><div class="line"><span class="number">16</span>: &#125;</div></pre></td></tr></table></figure></p>
<h1>3. 事务消息回查</h1>
<ul>
<li>【事务消息回查】功能曾经开源过，目前（V4.0.0）暂未开源。如下是该功能的开源情况：</li>
</ul>
<table>
<thead>
<tr>
<th>版本</th>
<th>【事务消息回查】</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>官方V3.0.4 ~ V3.1.4</td>
<td>基于 文件系统 实现</td>
<td>已开源</td>
</tr>
<tr>
<td>官方V3.1.5 ~ V4.0.0</td>
<td>基于 数据库 实现</td>
<td>未完全开源</td>
</tr>
</tbody>
</table>
<p>我们来看看两种情况下是怎么实现的。</p>
<h2>3.1 Broker 发起【事务消息回查】</h2>
<h3>3.1.1 官方V3.1.4：基于文件系统</h3>
<blockquote>
<p>仓库地址：https://github.com/YunaiV/rocketmq-3.1.9/tree/release_3.1.4</p>
</blockquote>
<p>相较于普通消息，【事务消息】多依赖如下三个组件：</p>
<ul>
<li><strong>TransactionStateService</strong> ：事务状态服务，负责对【事务消息】进行管理，包括存储与更新事务消息状态、回查事务消息状态等等。</li>
<li><strong>TranStateTable</strong> ：【事务消息】状态存储。基于 <code>MappedFileQueue</code> 实现，默认存储路径为 <code>~/store/transaction/statetable</code>，每条【事务消息】状态存储结构如下：</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:left">第几位</th>
<th style="text-align:left">字段</th>
<th style="text-align:left">说明</th>
<th style="text-align:left">数据类型</th>
<th style="text-align:left">字节数</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left">offset</td>
<td style="text-align:left">CommitLog 物理存储位置</td>
<td style="text-align:left">Long</td>
<td style="text-align:left">8</td>
</tr>
<tr>
<td style="text-align:left">2</td>
<td style="text-align:left">size</td>
<td style="text-align:left">消息长度</td>
<td style="text-align:left">Int</td>
<td style="text-align:left">4</td>
</tr>
<tr>
<td style="text-align:left">3</td>
<td style="text-align:left">timestamp</td>
<td style="text-align:left">消息存储时间，单位：秒</td>
<td style="text-align:left">Int</td>
<td style="text-align:left">4</td>
</tr>
<tr>
<td style="text-align:left">4</td>
<td style="text-align:left">producerGroupHash</td>
<td style="text-align:left">producerGroup 求 HashCode</td>
<td style="text-align:left">Int</td>
<td style="text-align:left">4</td>
</tr>
<tr>
<td style="text-align:left">5</td>
<td style="text-align:left">state</td>
<td style="text-align:left">事务状态</td>
<td style="text-align:left">Int</td>
<td style="text-align:left">4</td>
</tr>
</tbody>
</table>
<ul>
<li><strong>TranRedoLog</strong> ：<code>TranStateTable</code> 重放日志，每次<strong>写操作</strong> <code>TranStateTable</code> 记录重放日志。当 <code>Broker</code> 异常关闭时，使用 <code>TranRedoLog</code> 恢复 <code>TranStateTable</code>。基于 <code>ConsumeQueue</code> 实现，<code>Topic</code> 为 <code>TRANSACTION_REDOLOG_TOPIC_XXXX</code>，默认存储路径为 <code>~/store/transaction/redolog</code>。</li>
</ul>
<hr>
<p>简单手绘逻辑图如下😈：</p>
<p><img src="http://www.yunai.me/images/RocketMQ/2017_05_21/01.jpeg" alt="Broker_V3.1.4_基于文件系统"></p>
<h4>3.1.1.1 存储消息到 CommitLog</h4>
<ul>
<li>🦅存储【half消息】到 <code>CommitLog</code> 时，消息队列位置（<code>queueOffset</code>）使用 <code>TranStateTable</code> 最大物理位置（可写入物理位置）。这样，消息可以索引到自己对应的 <code>TranStateTable</code> 的位置和记录。</li>
</ul>
<p>核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="comment">// ⬇️⬇️⬇️【DefaultAppendMessageCallback.java】</span></div><div class="line"> <span class="number">2</span>: <span class="class"><span class="keyword">class</span> <span class="title">DefaultAppendMessageCallback</span> <span class="keyword">implements</span> <span class="title">AppendMessageCallback</span> </span>&#123;</div><div class="line"> <span class="number">3</span>:     <span class="function"><span class="keyword">public</span> AppendMessageResult <span class="title">doAppend</span><span class="params">(<span class="keyword">final</span> <span class="keyword">long</span> fileFromOffset, <span class="keyword">final</span> ByteBuffer byteBuffer,  <span class="keyword">final</span> <span class="keyword">int</span> maxBlank, <span class="keyword">final</span> Object msg)</span> </span>&#123;</div><div class="line"> <span class="number">4</span>:         <span class="comment">// ...省略代码</span></div><div class="line"> <span class="number">5</span>: </div><div class="line"> <span class="number">6</span>:         <span class="comment">// 事务消息需要特殊处理 </span></div><div class="line"> <span class="number">7</span>:         <span class="keyword">final</span> <span class="keyword">int</span> tranType = MessageSysFlag.getTransactionValue(msgInner.getSysFlag());</div><div class="line"> <span class="number">8</span>:         <span class="keyword">switch</span> (tranType) &#123;</div><div class="line"> <span class="number">9</span>:         <span class="keyword">case</span> MessageSysFlag.TransactionPreparedType: <span class="comment">// 消息队列位置（queueOffset）使用 TranStateTable 最大物理位置（可写入物理位置） </span></div><div class="line"><span class="number">10</span>:             queueOffset = CommitLog.<span class="keyword">this</span>.defaultMessageStore.getTransactionStateService().getTranStateTableOffset().get();</div><div class="line"><span class="number">11</span>:             <span class="keyword">break</span>;</div><div class="line"><span class="number">12</span>:         <span class="keyword">case</span> MessageSysFlag.TransactionRollbackType:</div><div class="line"><span class="number">13</span>:             queueOffset = msgInner.getQueueOffset();</div><div class="line"><span class="number">14</span>:             <span class="keyword">break</span>;</div><div class="line"><span class="number">15</span>:         <span class="keyword">case</span> MessageSysFlag.TransactionNotType:</div><div class="line"><span class="number">16</span>:         <span class="keyword">case</span> MessageSysFlag.TransactionCommitType:</div><div class="line"><span class="number">17</span>:         <span class="keyword">default</span>:</div><div class="line"><span class="number">18</span>:             <span class="keyword">break</span>;</div><div class="line"><span class="number">19</span>:         &#125;</div><div class="line"><span class="number">20</span>: </div><div class="line"><span class="number">21</span>:         <span class="comment">// ...省略代码</span></div><div class="line"><span class="number">22</span>: </div><div class="line"><span class="number">23</span>:         <span class="keyword">switch</span> (tranType) &#123;</div><div class="line"><span class="number">24</span>:         <span class="keyword">case</span> MessageSysFlag.TransactionPreparedType:</div><div class="line"><span class="number">25</span>:             <span class="comment">// 更新 TranStateTable 最大物理位置（可写入物理位置） </span></div><div class="line"><span class="number">26</span>:             CommitLog.<span class="keyword">this</span>.defaultMessageStore.getTransactionStateService().getTranStateTableOffset().incrementAndGet();</div><div class="line"><span class="number">27</span>:             <span class="keyword">break</span>;</div><div class="line"><span class="number">28</span>:         <span class="keyword">case</span> MessageSysFlag.TransactionRollbackType:</div><div class="line"><span class="number">29</span>:             <span class="keyword">break</span>;</div><div class="line"><span class="number">30</span>:         <span class="keyword">case</span> MessageSysFlag.TransactionNotType:</div><div class="line"><span class="number">31</span>:         <span class="keyword">case</span> MessageSysFlag.TransactionCommitType:</div><div class="line"><span class="number">32</span>:             <span class="comment">// 更新下一次的ConsumeQueue信息</span></div><div class="line"><span class="number">33</span>:             CommitLog.<span class="keyword">this</span>.topicQueueTable.put(key, ++queueOffset);</div><div class="line"><span class="number">34</span>:             <span class="keyword">break</span>;</div><div class="line"><span class="number">35</span>:         <span class="keyword">default</span>:</div><div class="line"><span class="number">36</span>:             <span class="keyword">break</span>;</div><div class="line"><span class="number">37</span>:         &#125;</div><div class="line"><span class="number">38</span>: </div><div class="line"><span class="number">39</span>:         <span class="comment">// 返回结果</span></div><div class="line"><span class="number">40</span>:         <span class="keyword">return</span> result;</div><div class="line"><span class="number">41</span>:     &#125;</div><div class="line"><span class="number">42</span>: &#125;</div></pre></td></tr></table></figure></p>
<h4>3.1.1.2 写【事务消息】状态存储（TranStateTable）</h4>
<ul>
<li>🦅处理【Half消息】时，新增【事务消息】状态存储（<code>TranStateTable</code>）。</li>
<li>🦅处理【Commit / Rollback消息】时，更新 【事务消息】状态存储（<code>TranStateTable</code>） COMMIT / ROLLBACK。</li>
<li>🦅每次**写操作【**事务消息】状态存储（<code>TranStateTable</code>），记录重放日志（<code>TranRedoLog</code>）。</li>
</ul>
<p>核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">  <span class="number">1</span>: <span class="comment">// ⬇️⬇️⬇️【DispatchMessageService.java】</span></div><div class="line">  <span class="number">2</span>: <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doDispatch</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="number">3</span>:     <span class="keyword">if</span> (!<span class="keyword">this</span>.requestsRead.isEmpty()) &#123;</div><div class="line">  <span class="number">4</span>:         <span class="keyword">for</span> (DispatchRequest req : <span class="keyword">this</span>.requestsRead) &#123;</div><div class="line">  <span class="number">5</span>: </div><div class="line">  <span class="number">6</span>:             <span class="comment">// ...省略代码</span></div><div class="line">  <span class="number">7</span>: </div><div class="line">  <span class="number">8</span>:             <span class="comment">// 2、写【事务消息】状态存储（TranStateTable）</span></div><div class="line">  <span class="number">9</span>:             <span class="keyword">if</span> (req.getProducerGroup() != <span class="keyword">null</span>) &#123;</div><div class="line"> <span class="number">10</span>:                 <span class="keyword">switch</span> (tranType) &#123;</div><div class="line"> <span class="number">11</span>:                 <span class="keyword">case</span> MessageSysFlag.TransactionNotType:</div><div class="line"> <span class="number">12</span>:                     <span class="keyword">break</span>;</div><div class="line"> <span class="number">13</span>:                 <span class="keyword">case</span> MessageSysFlag.TransactionPreparedType:</div><div class="line"> <span class="number">14</span>:                     <span class="comment">// 新增 【事务消息】状态存储（TranStateTable）</span></div><div class="line"> <span class="number">15</span>:                     DefaultMessageStore.<span class="keyword">this</span>.getTransactionStateService().appendPreparedTransaction(</div><div class="line"> <span class="number">16</span>:                         req.getCommitLogOffset(), req.getMsgSize(), (<span class="keyword">int</span>) (req.getStoreTimestamp() / <span class="number">1000</span>), req.getProducerGroup().hashCode());</div><div class="line"> <span class="number">17</span>:                     <span class="keyword">break</span>;</div><div class="line"> <span class="number">18</span>:                 <span class="keyword">case</span> MessageSysFlag.TransactionCommitType:</div><div class="line"> <span class="number">19</span>:                 <span class="keyword">case</span> MessageSysFlag.TransactionRollbackType:</div><div class="line"> <span class="number">20</span>:                     <span class="comment">// 更新 【事务消息】状态存储（TranStateTable） COMMIT / ROLLBACK</span></div><div class="line"> <span class="number">21</span>:                     DefaultMessageStore.<span class="keyword">this</span>.getTransactionStateService().updateTransactionState(</div><div class="line"> <span class="number">22</span>:                         req.getTranStateTableOffset(), req.getPreparedTransactionOffset(), req.getProducerGroup().hashCode(), tranType);</div><div class="line"> <span class="number">23</span>:                     <span class="keyword">break</span>;</div><div class="line"> <span class="number">24</span>:                 &#125;</div><div class="line"> <span class="number">25</span>:             &#125;</div><div class="line"> <span class="number">26</span>:             <span class="comment">// 3、记录 TranRedoLog</span></div><div class="line"> <span class="number">27</span>:             <span class="keyword">switch</span> (tranType) &#123;</div><div class="line"> <span class="number">28</span>:             <span class="keyword">case</span> MessageSysFlag.TransactionNotType:</div><div class="line"> <span class="number">29</span>:                 <span class="keyword">break</span>;</div><div class="line"> <span class="number">30</span>:             <span class="keyword">case</span> MessageSysFlag.TransactionPreparedType:</div><div class="line"> <span class="number">31</span>:                 <span class="comment">// 记录 TranRedoLog</span></div><div class="line"> <span class="number">32</span>:                 DefaultMessageStore.<span class="keyword">this</span>.getTransactionStateService().getTranRedoLog().putMessagePostionInfoWrapper(</div><div class="line"> <span class="number">33</span>:                         req.getCommitLogOffset(), req.getMsgSize(), TransactionStateService.PreparedMessageTagsCode,</div><div class="line"> <span class="number">34</span>:                         req.getStoreTimestamp(), <span class="number">0L</span>);</div><div class="line"> <span class="number">35</span>:                 <span class="keyword">break</span>;</div><div class="line"> <span class="number">36</span>:             <span class="keyword">case</span> MessageSysFlag.TransactionCommitType:</div><div class="line"> <span class="number">37</span>:             <span class="keyword">case</span> MessageSysFlag.TransactionRollbackType:</div><div class="line"> <span class="number">38</span>:                 <span class="comment">// 记录 TranRedoLog</span></div><div class="line"> <span class="number">39</span>:                 DefaultMessageStore.<span class="keyword">this</span>.getTransactionStateService().getTranRedoLog().putMessagePostionInfoWrapper(</div><div class="line"> <span class="number">40</span>:                         req.getCommitLogOffset(), req.getMsgSize(), req.getPreparedTransactionOffset(),</div><div class="line"> <span class="number">41</span>:                         req.getStoreTimestamp(), <span class="number">0L</span>);</div><div class="line"> <span class="number">42</span>:                 <span class="keyword">break</span>;</div><div class="line"> <span class="number">43</span>:             &#125;</div><div class="line"> <span class="number">44</span>:         &#125;</div><div class="line"> <span class="number">45</span>: </div><div class="line"> <span class="number">46</span>:         <span class="comment">// ...省略代码</span></div><div class="line"> <span class="number">47</span>:     &#125;</div><div class="line"> <span class="number">48</span>: &#125;</div><div class="line"> <span class="number">49</span>: <span class="comment">// ⬇️⬇️⬇️【TransactionStateService.java】</span></div><div class="line"> <span class="number">50</span>: <span class="comment">/**</span></div><div class="line"> 51:  * 新增事务状态</div><div class="line"> 52:  *</div><div class="line"> 53:  * <span class="doctag">@param</span> clOffset commitLog 物理位置</div><div class="line"> 54:  * <span class="doctag">@param</span> size 消息长度</div><div class="line"> 55:  * <span class="doctag">@param</span> timestamp 消息存储时间</div><div class="line"> 56:  * <span class="doctag">@param</span> groupHashCode groupHashCode</div><div class="line"> 57:  * <span class="doctag">@return</span> 是否成功</div><div class="line"> 58:  */</div><div class="line"> <span class="number">59</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">appendPreparedTransaction</span><span class="params">(//</span></span></div><div class="line"> <span class="number">60</span>:         <span class="keyword">final</span> <span class="keyword">long</span> clOffset,//</div><div class="line"> <span class="number">61</span>:         <span class="keyword">final</span> <span class="keyword">int</span> size,//</div><div class="line"> <span class="number">62</span>:         <span class="keyword">final</span> <span class="keyword">int</span> timestamp,//</div><div class="line"> <span class="number">63</span>:         <span class="keyword">final</span> <span class="keyword">int</span> groupHashCode//</div><div class="line"> <span class="number">64</span>: ) &#123;</div><div class="line"> <span class="number">65</span>:     MapedFile mapedFile = <span class="keyword">this</span>.tranStateTable.getLastMapedFile();</div><div class="line"> <span class="number">66</span>:     <span class="keyword">if</span> (<span class="keyword">null</span> == mapedFile) &#123;</div><div class="line"> <span class="number">67</span>:         log.error(<span class="string">"appendPreparedTransaction: create mapedfile error."</span>);</div><div class="line"> <span class="number">68</span>:         <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line"> <span class="number">69</span>:     &#125;</div><div class="line"> <span class="number">70</span>: </div><div class="line"> <span class="number">71</span>:     <span class="comment">// 首次创建，加入定时任务中</span></div><div class="line"> <span class="number">72</span>:     <span class="keyword">if</span> (<span class="number">0</span> == mapedFile.getWrotePostion()) &#123;</div><div class="line"> <span class="number">73</span>:         <span class="keyword">this</span>.addTimerTask(mapedFile);</div><div class="line"> <span class="number">74</span>:     &#125;</div><div class="line"> <span class="number">75</span>: </div><div class="line"> <span class="number">76</span>:     <span class="keyword">this</span>.byteBufferAppend.position(<span class="number">0</span>);</div><div class="line"> <span class="number">77</span>:     <span class="keyword">this</span>.byteBufferAppend.limit(TSStoreUnitSize);</div><div class="line"> <span class="number">78</span>: </div><div class="line"> <span class="number">79</span>:     <span class="comment">// Commit Log Offset</span></div><div class="line"> <span class="number">80</span>:     <span class="keyword">this</span>.byteBufferAppend.putLong(clOffset);</div><div class="line"> <span class="number">81</span>:     <span class="comment">// Message Size</span></div><div class="line"> <span class="number">82</span>:     <span class="keyword">this</span>.byteBufferAppend.putInt(size);</div><div class="line"> <span class="number">83</span>:     <span class="comment">// Timestamp</span></div><div class="line"> <span class="number">84</span>:     <span class="keyword">this</span>.byteBufferAppend.putInt(timestamp);</div><div class="line"> <span class="number">85</span>:     <span class="comment">// Producer Group Hashcode</span></div><div class="line"> <span class="number">86</span>:     <span class="keyword">this</span>.byteBufferAppend.putInt(groupHashCode);</div><div class="line"> <span class="number">87</span>:     <span class="comment">// Transaction State</span></div><div class="line"> <span class="number">88</span>:     <span class="keyword">this</span>.byteBufferAppend.putInt(MessageSysFlag.TransactionPreparedType);</div><div class="line"> <span class="number">89</span>: </div><div class="line"> <span class="number">90</span>:     <span class="keyword">return</span> mapedFile.appendMessage(<span class="keyword">this</span>.byteBufferAppend.array());</div><div class="line"> <span class="number">91</span>: &#125;</div><div class="line"> <span class="number">92</span>: </div><div class="line"> <span class="number">93</span>: <span class="comment">/**</span></div><div class="line"> 94:  * 更新事务状态</div><div class="line"> 95:  *</div><div class="line"> 96:  * <span class="doctag">@param</span> tsOffset tranStateTable 物理位置</div><div class="line"> 97:  * <span class="doctag">@param</span> clOffset commitLog 物理位置</div><div class="line"> 98:  * <span class="doctag">@param</span> groupHashCode groupHashCode</div><div class="line"> 99:  * <span class="doctag">@param</span> state 事务状态</div><div class="line">100:  * <span class="doctag">@return</span> 是否成功</div><div class="line">101:  */</div><div class="line"><span class="number">102</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">updateTransactionState</span><span class="params">(</span></span></div><div class="line"><span class="number">103</span>:         <span class="keyword">final</span> <span class="keyword">long</span> tsOffset,</div><div class="line"><span class="number">104</span>:         <span class="keyword">final</span> <span class="keyword">long</span> clOffset,</div><div class="line"><span class="number">105</span>:         <span class="keyword">final</span> <span class="keyword">int</span> groupHashCode,</div><div class="line"><span class="number">106</span>:         <span class="keyword">final</span> <span class="keyword">int</span> state) &#123;</div><div class="line"><span class="number">107</span>:     SelectMapedBufferResult selectMapedBufferResult = <span class="keyword">this</span>.findTransactionBuffer(tsOffset);</div><div class="line"><span class="number">108</span>:     <span class="keyword">if</span> (selectMapedBufferResult != <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">109</span>:         <span class="keyword">try</span> &#123;</div><div class="line"><span class="number">110</span>: </div><div class="line"><span class="number">111</span>:             <span class="comment">// ....省略代码：校验是否能够更新</span></div><div class="line"><span class="number">112</span>: </div><div class="line"><span class="number">113</span>:             <span class="comment">// 更新事务状态</span></div><div class="line"><span class="number">114</span>:             selectMapedBufferResult.getByteBuffer().putInt(TS_STATE_POS, state);</div><div class="line"><span class="number">115</span>:         &#125;</div><div class="line"><span class="number">116</span>:         <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"><span class="number">117</span>:             log.error(<span class="string">"updateTransactionState exception"</span>, e);</div><div class="line"><span class="number">118</span>:         &#125;</div><div class="line"><span class="number">119</span>:         <span class="keyword">finally</span> &#123;</div><div class="line"><span class="number">120</span>:             selectMapedBufferResult.release();</div><div class="line"><span class="number">121</span>:         &#125;</div><div class="line"><span class="number">122</span>:     &#125;</div><div class="line"><span class="number">123</span>: </div><div class="line"><span class="number">124</span>:     <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line"><span class="number">125</span>: &#125;</div></pre></td></tr></table></figure></p>
<h4>3.1.1.3 【事务消息】回查</h4>
<ul>
<li>🦅<code>TranStateTable</code> 每个 <code>MappedFile</code> 都对应一个 <code>Timer</code>。<code>Timer</code> 固定周期（默认：60s）遍历 <code>MappedFile</code>，查找【half消息】，向 <code>Producer</code> 发起【事务消息】回查请求。【事务消息】回查结果的逻辑不在此处进行，在 <a href="#3112-%E5%86%99%E4%BA%8B%E5%8A%A1%E6%B6%88%E6%81%AF%E7%8A%B6%E6%80%81%E5%AD%98%E5%82%A8transtatetable">CommitLog dispatch</a>时执行。</li>
</ul>
<p>实现代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">  <span class="number">1</span>: <span class="comment">// ⬇️⬇️⬇️【TransactionStateService.java】</span></div><div class="line">  <span class="number">2</span>: <span class="comment">/**</span></div><div class="line">  3:  * 初始化定时任务</div><div class="line">  4:  */</div><div class="line">  <span class="number">5</span>: <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initTimerTask</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="number">6</span>:     <span class="comment">//</span></div><div class="line">  <span class="number">7</span>:     <span class="keyword">final</span> List&lt;MapedFile&gt; mapedFiles = <span class="keyword">this</span>.tranStateTable.getMapedFiles();</div><div class="line">  <span class="number">8</span>:     <span class="keyword">for</span> (MapedFile mf : mapedFiles) &#123;</div><div class="line">  <span class="number">9</span>:         <span class="keyword">this</span>.addTimerTask(mf);</div><div class="line"> <span class="number">10</span>:     &#125;</div><div class="line"> <span class="number">11</span>: &#125;</div><div class="line"> <span class="number">12</span>: </div><div class="line"> <span class="number">13</span>: <span class="comment">/**</span></div><div class="line"> 14:  * 每个文件初始化定时任务</div><div class="line"> 15:  * <span class="doctag">@param</span> mf 文件</div><div class="line"> 16:  */</div><div class="line"> <span class="number">17</span>: <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addTimerTask</span><span class="params">(<span class="keyword">final</span> MapedFile mf)</span> </span>&#123;</div><div class="line"> <span class="number">18</span>:     <span class="keyword">this</span>.timer.scheduleAtFixedRate(<span class="keyword">new</span> TimerTask() &#123;</div><div class="line"> <span class="number">19</span>:         <span class="keyword">private</span> <span class="keyword">final</span> MapedFile mapedFile = mf;</div><div class="line"> <span class="number">20</span>:         <span class="keyword">private</span> <span class="keyword">final</span> TransactionCheckExecuter transactionCheckExecuter = TransactionStateService.<span class="keyword">this</span>.defaultMessageStore.getTransactionCheckExecuter();</div><div class="line"> <span class="number">21</span>:         <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> checkTransactionMessageAtleastInterval = TransactionStateService.<span class="keyword">this</span>.defaultMessageStore.getMessageStoreConfig()</div><div class="line"> <span class="number">22</span>:                     .getCheckTransactionMessageAtleastInterval();</div><div class="line"> <span class="number">23</span>:         <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> slave = TransactionStateService.<span class="keyword">this</span>.defaultMessageStore.getMessageStoreConfig().getBrokerRole() == BrokerRole.SLAVE;</div><div class="line"> <span class="number">24</span>: </div><div class="line"> <span class="number">25</span>:         <span class="meta">@Override</span></div><div class="line"> <span class="number">26</span>:         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line"> <span class="number">27</span>:             <span class="comment">// Slave不需要回查事务状态</span></div><div class="line"> <span class="number">28</span>:             <span class="keyword">if</span> (slave) &#123;</div><div class="line"> <span class="number">29</span>:                 <span class="keyword">return</span>;</div><div class="line"> <span class="number">30</span>:             &#125;</div><div class="line"> <span class="number">31</span>:             <span class="comment">// Check功能是否开启</span></div><div class="line"> <span class="number">32</span>:             <span class="keyword">if</span> (!TransactionStateService.<span class="keyword">this</span>.defaultMessageStore.getMessageStoreConfig()</div><div class="line"> <span class="number">33</span>:                 .isCheckTransactionMessageEnable()) &#123;</div><div class="line"> <span class="number">34</span>:                 <span class="keyword">return</span>;</div><div class="line"> <span class="number">35</span>:             &#125;</div><div class="line"> <span class="number">36</span>: </div><div class="line"> <span class="number">37</span>:             <span class="keyword">try</span> &#123;</div><div class="line"> <span class="number">38</span>:                 SelectMapedBufferResult selectMapedBufferResult = mapedFile.selectMapedBuffer(<span class="number">0</span>);</div><div class="line"> <span class="number">39</span>:                 <span class="keyword">if</span> (selectMapedBufferResult != <span class="keyword">null</span>) &#123;</div><div class="line"> <span class="number">40</span>:                     <span class="keyword">long</span> preparedMessageCountInThisMapedFile = <span class="number">0</span>; <span class="comment">// 回查的【half消息】数量</span></div><div class="line"> <span class="number">41</span>:                     <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line"> <span class="number">42</span>:                     <span class="keyword">try</span> &#123;</div><div class="line"> <span class="number">43</span>:                         <span class="comment">// 循环每条【事务消息】状态，对【half消息】进行回查</span></div><div class="line"> <span class="number">44</span>:                         <span class="keyword">for</span> (; i &lt; selectMapedBufferResult.getSize(); i += TSStoreUnitSize) &#123;</div><div class="line"> <span class="number">45</span>:                             selectMapedBufferResult.getByteBuffer().position(i);</div><div class="line"> <span class="number">46</span>: </div><div class="line"> <span class="number">47</span>:                             <span class="comment">// Commit Log Offset</span></div><div class="line"> <span class="number">48</span>:                             <span class="keyword">long</span> clOffset = selectMapedBufferResult.getByteBuffer().getLong();</div><div class="line"> <span class="number">49</span>:                             <span class="comment">// Message Size</span></div><div class="line"> <span class="number">50</span>:                             <span class="keyword">int</span> msgSize = selectMapedBufferResult.getByteBuffer().getInt();</div><div class="line"> <span class="number">51</span>:                             <span class="comment">// Timestamp</span></div><div class="line"> <span class="number">52</span>:                             <span class="keyword">int</span> timestamp = selectMapedBufferResult.getByteBuffer().getInt();</div><div class="line"> <span class="number">53</span>:                             <span class="comment">// Producer Group Hashcode</span></div><div class="line"> <span class="number">54</span>:                             <span class="keyword">int</span> groupHashCode = selectMapedBufferResult.getByteBuffer().getInt();</div><div class="line"> <span class="number">55</span>:                             <span class="comment">// Transaction State</span></div><div class="line"> <span class="number">56</span>:                             <span class="keyword">int</span> tranType = selectMapedBufferResult.getByteBuffer().getInt();</div><div class="line"> <span class="number">57</span>: </div><div class="line"> <span class="number">58</span>:                             <span class="comment">// 已经提交或者回滚的消息跳过</span></div><div class="line"> <span class="number">59</span>:                             <span class="keyword">if</span> (tranType != MessageSysFlag.TransactionPreparedType) &#123;</div><div class="line"> <span class="number">60</span>:                                 <span class="keyword">continue</span>;</div><div class="line"> <span class="number">61</span>:                             &#125;</div><div class="line"> <span class="number">62</span>: </div><div class="line"> <span class="number">63</span>:                             <span class="comment">// 遇到时间不符合最小轮询间隔，终止</span></div><div class="line"> <span class="number">64</span>:                             <span class="keyword">long</span> timestampLong = timestamp * <span class="number">1000</span>;</div><div class="line"> <span class="number">65</span>:                             <span class="keyword">long</span> diff = System.currentTimeMillis() - timestampLong;</div><div class="line"> <span class="number">66</span>:                             <span class="keyword">if</span> (diff &lt; checkTransactionMessageAtleastInterval) &#123;</div><div class="line"> <span class="number">67</span>:                                 <span class="keyword">break</span>;</div><div class="line"> <span class="number">68</span>:                             &#125;</div><div class="line"> <span class="number">69</span>: </div><div class="line"> <span class="number">70</span>:                             preparedMessageCountInThisMapedFile++;</div><div class="line"> <span class="number">71</span>: </div><div class="line"> <span class="number">72</span>:                             <span class="comment">// 回查Producer</span></div><div class="line"> <span class="number">73</span>:                             <span class="keyword">try</span> &#123;</div><div class="line"> <span class="number">74</span>:                                 <span class="keyword">this</span>.transactionCheckExecuter.gotoCheck(groupHashCode, getTranStateOffset(i), clOffset, msgSize);</div><div class="line"> <span class="number">75</span>:                             &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"> <span class="number">76</span>:                                 tranlog.warn(<span class="string">"gotoCheck Exception"</span>, e);</div><div class="line"> <span class="number">77</span>:                             &#125;</div><div class="line"> <span class="number">78</span>:                         &#125;</div><div class="line"> <span class="number">79</span>: </div><div class="line"> <span class="number">80</span>:                         <span class="comment">// 无回查的【half消息】数量，且遍历完，则终止定时任务</span></div><div class="line"> <span class="number">81</span>:                         <span class="keyword">if</span> (<span class="number">0</span> == preparedMessageCountInThisMapedFile <span class="comment">//</span></div><div class="line"> <span class="number">82</span>:                                 &amp;&amp; i == mapedFile.getFileSize()) &#123;</div><div class="line"> <span class="number">83</span>:                             tranlog.info(<span class="string">"remove the transaction timer task, because no prepared message in this mapedfile[&#123;&#125;]"</span>, mapedFile.getFileName());</div><div class="line"> <span class="number">84</span>:                             <span class="keyword">this</span>.cancel();</div><div class="line"> <span class="number">85</span>:                         &#125;</div><div class="line"> <span class="number">86</span>:                     &#125; <span class="keyword">finally</span> &#123;</div><div class="line"> <span class="number">87</span>:                         selectMapedBufferResult.release();</div><div class="line"> <span class="number">88</span>:                     &#125;</div><div class="line"> <span class="number">89</span>: </div><div class="line"> <span class="number">90</span>:                     tranlog.info(<span class="string">"the transaction timer task execute over in this period, &#123;&#125; Prepared Message: &#123;&#125; Check Progress: &#123;&#125;/&#123;&#125;"</span>, mapedFile.getFileName(),<span class="comment">//</span></div><div class="line"> <span class="number">91</span>:                             preparedMessageCountInThisMapedFile, i / TSStoreUnitSize, mapedFile.getFileSize() / TSStoreUnitSize);</div><div class="line"> <span class="number">92</span>:                 &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mapedFile.isFull()) &#123;</div><div class="line"> <span class="number">93</span>:                     tranlog.info(<span class="string">"the mapedfile[&#123;&#125;] maybe deleted, cancel check transaction timer task"</span>, mapedFile.getFileName());</div><div class="line"> <span class="number">94</span>:                     <span class="keyword">this</span>.cancel();</div><div class="line"> <span class="number">95</span>:                     <span class="keyword">return</span>;</div><div class="line"> <span class="number">96</span>:                 &#125;</div><div class="line"> <span class="number">97</span>:             &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"> <span class="number">98</span>:                 log.error(<span class="string">"check transaction timer task Exception"</span>, e);</div><div class="line"> <span class="number">99</span>:             &#125;</div><div class="line"><span class="number">100</span>:         &#125;</div><div class="line"><span class="number">101</span>: </div><div class="line"><span class="number">102</span>: </div><div class="line"><span class="number">103</span>:         <span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">getTranStateOffset</span><span class="params">(<span class="keyword">final</span> <span class="keyword">long</span> currentIndex)</span> </span>&#123;</div><div class="line"><span class="number">104</span>:             <span class="keyword">long</span> offset = (<span class="keyword">this</span>.mapedFile.getFileFromOffset() + currentIndex) / TransactionStateService.TSStoreUnitSize;</div><div class="line"><span class="number">105</span>:             <span class="keyword">return</span> offset;</div><div class="line"><span class="number">106</span>:         &#125;</div><div class="line"><span class="number">107</span>:     &#125;, <span class="number">1000</span> * <span class="number">60</span>, <span class="keyword">this</span>.defaultMessageStore.getMessageStoreConfig().getCheckTransactionMessageTimerInterval());</div><div class="line"><span class="number">108</span>: &#125;</div><div class="line"><span class="number">109</span>: </div><div class="line"><span class="number">110</span>: <span class="comment">// 【DefaultTransactionCheckExecuter.java】</span></div><div class="line"><span class="number">111</span>: <span class="meta">@Override</span></div><div class="line"><span class="number">112</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">gotoCheck</span><span class="params">(<span class="keyword">int</span> producerGroupHashCode, <span class="keyword">long</span> tranStateTableOffset, <span class="keyword">long</span> commitLogOffset,</span></span></div><div class="line"><span class="number">113</span>:         <span class="keyword">int</span> msgSize) &#123;</div><div class="line"><span class="number">114</span>:     <span class="comment">// 第一步、查询Producer</span></div><div class="line"><span class="number">115</span>:     <span class="keyword">final</span> ClientChannelInfo clientChannelInfo = <span class="keyword">this</span>.brokerController.getProducerManager().pickProducerChannelRandomly(producerGroupHashCode);</div><div class="line"><span class="number">116</span>:     <span class="keyword">if</span> (<span class="keyword">null</span> == clientChannelInfo) &#123;</div><div class="line"><span class="number">117</span>:         log.warn(<span class="string">"check a producer transaction state, but not find any channel of this group[&#123;&#125;]"</span>, producerGroupHashCode);</div><div class="line"><span class="number">118</span>:         <span class="keyword">return</span>;</div><div class="line"><span class="number">119</span>:     &#125;</div><div class="line"><span class="number">120</span>: </div><div class="line"><span class="number">121</span>:     <span class="comment">// 第二步、查询消息</span></div><div class="line"><span class="number">122</span>:     SelectMapedBufferResult selectMapedBufferResult = <span class="keyword">this</span>.brokerController.getMessageStore().selectOneMessageByOffset(commitLogOffset, msgSize);</div><div class="line"><span class="number">123</span>:     <span class="keyword">if</span> (<span class="keyword">null</span> == selectMapedBufferResult) &#123;</div><div class="line"><span class="number">124</span>:         log.warn(<span class="string">"check a producer transaction state, but not find message by commitLogOffset: &#123;&#125;, msgSize: "</span>, commitLogOffset, msgSize);</div><div class="line"><span class="number">125</span>:         <span class="keyword">return</span>;</div><div class="line"><span class="number">126</span>:     &#125;</div><div class="line"><span class="number">127</span>: </div><div class="line"><span class="number">128</span>:     <span class="comment">// 第三步、向Producer发起请求</span></div><div class="line"><span class="number">129</span>:     <span class="keyword">final</span> CheckTransactionStateRequestHeader requestHeader = <span class="keyword">new</span> CheckTransactionStateRequestHeader();</div><div class="line"><span class="number">130</span>:     requestHeader.setCommitLogOffset(commitLogOffset);</div><div class="line"><span class="number">131</span>:     requestHeader.setTranStateTableOffset(tranStateTableOffset);</div><div class="line"><span class="number">132</span>:     <span class="keyword">this</span>.brokerController.getBroker2Client().checkProducerTransactionState(clientChannelInfo.getChannel(), requestHeader, selectMapedBufferResult);</div><div class="line"><span class="number">133</span>: &#125;</div></pre></td></tr></table></figure></p>
<h4>3.1.1.4 初始化【事务消息】状态存储（TranStateTable）</h4>
<ul>
<li>🦅根据最后 Broker 关闭是否正常，会有不同的初始化方式。</li>
</ul>
<p>核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">  <span class="number">1</span>: <span class="comment">// ⬇️⬇️⬇️【TransactionStateService.java】</span></div><div class="line">  <span class="number">2</span>: <span class="comment">/**</span></div><div class="line">  3:  * 初始化 TranRedoLog</div><div class="line">  4:  * <span class="doctag">@param</span> lastExitOK 是否正常退出</div><div class="line">  5:  */</div><div class="line">  <span class="number">6</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recoverStateTable</span><span class="params">(<span class="keyword">final</span> <span class="keyword">boolean</span> lastExitOK)</span> </span>&#123;</div><div class="line">  <span class="number">7</span>:     <span class="keyword">if</span> (lastExitOK) &#123;</div><div class="line">  <span class="number">8</span>:         <span class="keyword">this</span>.recoverStateTableNormal();</div><div class="line">  <span class="number">9</span>:     &#125; <span class="keyword">else</span> &#123;</div><div class="line"> <span class="number">10</span>:         <span class="comment">// 第一步，删除State Table</span></div><div class="line"> <span class="number">11</span>:         <span class="keyword">this</span>.tranStateTable.destroy();</div><div class="line"> <span class="number">12</span>:         <span class="comment">// 第二步，通过RedoLog全量恢复StateTable</span></div><div class="line"> <span class="number">13</span>:         <span class="keyword">this</span>.recreateStateTable();</div><div class="line"> <span class="number">14</span>:     &#125;</div><div class="line"> <span class="number">15</span>: &#125;</div><div class="line"> <span class="number">16</span>: </div><div class="line"> <span class="number">17</span>: <span class="comment">/**</span></div><div class="line"> 18:  * 扫描 TranRedoLog 重建 StateTable</div><div class="line"> 19:  */</div><div class="line"> <span class="number">20</span>: <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">recreateStateTable</span><span class="params">()</span> </span>&#123;</div><div class="line"> <span class="number">21</span>:     <span class="keyword">this</span>.tranStateTable = <span class="keyword">new</span> MapedFileQueue(StorePathConfigHelper.getTranStateTableStorePath(defaultMessageStore</div><div class="line"> <span class="number">22</span>:                 .getMessageStoreConfig().getStorePathRootDir()), defaultMessageStore</div><div class="line"> <span class="number">23</span>:                 .getMessageStoreConfig().getTranStateTableMapedFileSize(), <span class="keyword">null</span>);</div><div class="line"> <span class="number">24</span>: </div><div class="line"> <span class="number">25</span>:     <span class="keyword">final</span> TreeSet&lt;Long&gt; preparedItemSet = <span class="keyword">new</span> TreeSet&lt;Long&gt;();</div><div class="line"> <span class="number">26</span>: </div><div class="line"> <span class="number">27</span>:     <span class="comment">// 第一步，从头扫描RedoLog</span></div><div class="line"> <span class="number">28</span>:     <span class="keyword">final</span> <span class="keyword">long</span> minOffset = <span class="keyword">this</span>.tranRedoLog.getMinOffsetInQuque();</div><div class="line"> <span class="number">29</span>:     <span class="keyword">long</span> processOffset = minOffset;</div><div class="line"> <span class="number">30</span>:     <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line"> <span class="number">31</span>:         SelectMapedBufferResult bufferConsumeQueue = <span class="keyword">this</span>.tranRedoLog.getIndexBuffer(processOffset);</div><div class="line"> <span class="number">32</span>:         <span class="keyword">if</span> (bufferConsumeQueue != <span class="keyword">null</span>) &#123;</div><div class="line"> <span class="number">33</span>:             <span class="keyword">try</span> &#123;</div><div class="line"> <span class="number">34</span>:                 <span class="keyword">long</span> i = <span class="number">0</span>;</div><div class="line"> <span class="number">35</span>:                 <span class="keyword">for</span> (; i &lt; bufferConsumeQueue.getSize(); i += ConsumeQueue.CQStoreUnitSize) &#123;</div><div class="line"> <span class="number">36</span>:                     <span class="keyword">long</span> offsetMsg = bufferConsumeQueue.getByteBuffer().getLong();</div><div class="line"> <span class="number">37</span>:                     <span class="keyword">int</span> sizeMsg = bufferConsumeQueue.getByteBuffer().getInt();</div><div class="line"> <span class="number">38</span>:                     <span class="keyword">long</span> tagsCode = bufferConsumeQueue.getByteBuffer().getLong();</div><div class="line"> <span class="number">39</span>: </div><div class="line"> <span class="number">40</span>:                     <span class="keyword">if</span> (TransactionStateService.PreparedMessageTagsCode == tagsCode) &#123; <span class="comment">// Prepared</span></div><div class="line"> <span class="number">41</span>:                         preparedItemSet.add(offsetMsg);</div><div class="line"> <span class="number">42</span>:                     &#125; <span class="keyword">else</span> &#123; <span class="comment">// Commit/Rollback</span></div><div class="line"> <span class="number">43</span>:                         preparedItemSet.remove(tagsCode);</div><div class="line"> <span class="number">44</span>:                     &#125;</div><div class="line"> <span class="number">45</span>:                 &#125;</div><div class="line"> <span class="number">46</span>: </div><div class="line"> <span class="number">47</span>:                 processOffset += i;</div><div class="line"> <span class="number">48</span>:             &#125; <span class="keyword">finally</span> &#123; <span class="comment">// 必须释放资源</span></div><div class="line"> <span class="number">49</span>:                 bufferConsumeQueue.release();</div><div class="line"> <span class="number">50</span>:             &#125;</div><div class="line"> <span class="number">51</span>:         &#125; <span class="keyword">else</span> &#123;</div><div class="line"> <span class="number">52</span>:             <span class="keyword">break</span>;</div><div class="line"> <span class="number">53</span>:         &#125;</div><div class="line"> <span class="number">54</span>:     &#125;</div><div class="line"> <span class="number">55</span>:     log.info(<span class="string">"scan transaction redolog over, End offset: &#123;&#125;,  Prepared Transaction Count: &#123;&#125;"</span>, processOffset, preparedItemSet.size());</div><div class="line"> <span class="number">56</span>: </div><div class="line"> <span class="number">57</span>:     <span class="comment">// 第二步，重建StateTable</span></div><div class="line"> <span class="number">58</span>:     Iterator&lt;Long&gt; it = preparedItemSet.iterator();</div><div class="line"> <span class="number">59</span>:     <span class="keyword">while</span> (it.hasNext()) &#123;</div><div class="line"> <span class="number">60</span>:         Long offset = it.next();</div><div class="line"> <span class="number">61</span>:         MessageExt msgExt = <span class="keyword">this</span>.defaultMessageStore.lookMessageByOffset(offset);</div><div class="line"> <span class="number">62</span>:         <span class="keyword">if</span> (msgExt != <span class="keyword">null</span>) &#123;</div><div class="line"> <span class="number">63</span>:             <span class="keyword">this</span>.appendPreparedTransaction(msgExt.getCommitLogOffset(), msgExt.getStoreSize(),</div><div class="line"> <span class="number">64</span>:                 (<span class="keyword">int</span>) (msgExt.getStoreTimestamp() / <span class="number">1000</span>),</div><div class="line"> <span class="number">65</span>:                 msgExt.getProperty(MessageConst.PROPERTY_PRODUCER_GROUP).hashCode());</div><div class="line"> <span class="number">66</span>:             <span class="keyword">this</span>.tranStateTableOffset.incrementAndGet();</div><div class="line"> <span class="number">67</span>:         &#125;</div><div class="line"> <span class="number">68</span>:     &#125;</div><div class="line"> <span class="number">69</span>: &#125;</div><div class="line"> <span class="number">70</span>: </div><div class="line"> <span class="number">71</span>: <span class="comment">/**</span></div><div class="line"> 72:  * 加载（解析）TranStateTable 的 MappedFile</div><div class="line"> 73:  * 1. 清理多余 MappedFile，设置最后一个 MappedFile的写入位置(position</div><div class="line"> 74:  * 2. 设置 TanStateTable 最大物理位置（可写入位置）</div><div class="line"> 75:  */</div><div class="line"> <span class="number">76</span>: <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">recoverStateTableNormal</span><span class="params">()</span> </span>&#123;</div><div class="line"> <span class="number">77</span>:     <span class="keyword">final</span> List&lt;MapedFile&gt; mapedFiles = <span class="keyword">this</span>.tranStateTable.getMapedFiles();</div><div class="line"> <span class="number">78</span>:     <span class="keyword">if</span> (!mapedFiles.isEmpty()) &#123;</div><div class="line"> <span class="number">79</span>:         <span class="comment">// 从倒数第三个文件开始恢复</span></div><div class="line"> <span class="number">80</span>:         <span class="keyword">int</span> index = mapedFiles.size() - <span class="number">3</span>;</div><div class="line"> <span class="number">81</span>:         <span class="keyword">if</span> (index &lt; <span class="number">0</span>) &#123;</div><div class="line"> <span class="number">82</span>:             index = <span class="number">0</span>;</div><div class="line"> <span class="number">83</span>:         &#125;</div><div class="line"> <span class="number">84</span>: </div><div class="line"> <span class="number">85</span>:         <span class="keyword">int</span> mapedFileSizeLogics = <span class="keyword">this</span>.tranStateTable.getMapedFileSize();</div><div class="line"> <span class="number">86</span>:         MapedFile mapedFile = mapedFiles.get(index);</div><div class="line"> <span class="number">87</span>:         ByteBuffer byteBuffer = mapedFile.sliceByteBuffer();</div><div class="line"> <span class="number">88</span>:         <span class="keyword">long</span> processOffset = mapedFile.getFileFromOffset();</div><div class="line"> <span class="number">89</span>:         <span class="keyword">long</span> mapedFileOffset = <span class="number">0</span>;</div><div class="line"> <span class="number">90</span>:         <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line"> <span class="number">91</span>:             <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mapedFileSizeLogics; i += TSStoreUnitSize) &#123;</div><div class="line"> <span class="number">92</span>: </div><div class="line"> <span class="number">93</span>:                 <span class="keyword">final</span> <span class="keyword">long</span> clOffset_read = byteBuffer.getLong();</div><div class="line"> <span class="number">94</span>:                 <span class="keyword">final</span> <span class="keyword">int</span> size_read = byteBuffer.getInt();</div><div class="line"> <span class="number">95</span>:                 <span class="keyword">final</span> <span class="keyword">int</span> timestamp_read = byteBuffer.getInt();</div><div class="line"> <span class="number">96</span>:                 <span class="keyword">final</span> <span class="keyword">int</span> groupHashCode_read = byteBuffer.getInt();</div><div class="line"> <span class="number">97</span>:                 <span class="keyword">final</span> <span class="keyword">int</span> state_read = byteBuffer.getInt();</div><div class="line"> <span class="number">98</span>: </div><div class="line"> <span class="number">99</span>:                 <span class="keyword">boolean</span> stateOK = <span class="keyword">false</span>;</div><div class="line"><span class="number">100</span>:                 <span class="keyword">switch</span> (state_read) &#123;</div><div class="line"><span class="number">101</span>:                 <span class="keyword">case</span> MessageSysFlag.TransactionPreparedType:</div><div class="line"><span class="number">102</span>:                 <span class="keyword">case</span> MessageSysFlag.TransactionCommitType:</div><div class="line"><span class="number">103</span>:                 <span class="keyword">case</span> MessageSysFlag.TransactionRollbackType:</div><div class="line"><span class="number">104</span>:                     stateOK = <span class="keyword">true</span>;</div><div class="line"><span class="number">105</span>:                     <span class="keyword">break</span>;</div><div class="line"><span class="number">106</span>:                 <span class="keyword">default</span>:</div><div class="line"><span class="number">107</span>:                     <span class="keyword">break</span>;</div><div class="line"><span class="number">108</span>:                 &#125;</div><div class="line"><span class="number">109</span>: </div><div class="line"><span class="number">110</span>:                 <span class="comment">// 说明当前存储单元有效</span></div><div class="line"><span class="number">111</span>:                 <span class="keyword">if</span> (clOffset_read &gt;= <span class="number">0</span> &amp;&amp; size_read &gt; <span class="number">0</span> &amp;&amp; stateOK) &#123;</div><div class="line"><span class="number">112</span>:                     mapedFileOffset = i + TSStoreUnitSize;</div><div class="line"><span class="number">113</span>:                 &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">114</span>:                     log.info(<span class="string">"recover current transaction state table file over,  "</span> + mapedFile.getFileName() + <span class="string">" "</span></div><div class="line"><span class="number">115</span>:                             + clOffset_read + <span class="string">" "</span> + size_read + <span class="string">" "</span> + timestamp_read);</div><div class="line"><span class="number">116</span>:                     <span class="keyword">break</span>;</div><div class="line"><span class="number">117</span>:                 &#125;</div><div class="line"><span class="number">118</span>:             &#125;</div><div class="line"><span class="number">119</span>: </div><div class="line"><span class="number">120</span>:             <span class="comment">// 走到文件末尾，切换至下一个文件</span></div><div class="line"><span class="number">121</span>:             <span class="keyword">if</span> (mapedFileOffset == mapedFileSizeLogics) &#123;</div><div class="line"><span class="number">122</span>:                 index++;</div><div class="line"><span class="number">123</span>:                 <span class="keyword">if</span> (index &gt;= mapedFiles.size()) &#123; <span class="comment">// 循环while结束</span></div><div class="line"><span class="number">124</span>:                     log.info(<span class="string">"recover last transaction state table file over, last maped file "</span> + mapedFile.getFileName());</div><div class="line"><span class="number">125</span>:                     <span class="keyword">break</span>;</div><div class="line"><span class="number">126</span>:                 &#125; <span class="keyword">else</span> &#123; <span class="comment">// 切换下一个文件</span></div><div class="line"><span class="number">127</span>:                     mapedFile = mapedFiles.get(index);</div><div class="line"><span class="number">128</span>:                     byteBuffer = mapedFile.sliceByteBuffer();</div><div class="line"><span class="number">129</span>:                     processOffset = mapedFile.getFileFromOffset();</div><div class="line"><span class="number">130</span>:                     mapedFileOffset = <span class="number">0</span>;</div><div class="line"><span class="number">131</span>:                     log.info(<span class="string">"recover next transaction state table file, "</span> + mapedFile.getFileName());</div><div class="line"><span class="number">132</span>:                 &#125;</div><div class="line"><span class="number">133</span>:             &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">134</span>:                 log.info(<span class="string">"recover current transaction state table queue over "</span> + mapedFile.getFileName() + <span class="string">" "</span> + (processOffset + mapedFileOffset));</div><div class="line"><span class="number">135</span>:                 <span class="keyword">break</span>;</div><div class="line"><span class="number">136</span>:             &#125;</div><div class="line"><span class="number">137</span>:         &#125;</div><div class="line"><span class="number">138</span>: </div><div class="line"><span class="number">139</span>:         <span class="comment">// 清理多余 MappedFile，设置最后一个 MappedFile的写入位置(position</span></div><div class="line"><span class="number">140</span>:         processOffset += mapedFileOffset;</div><div class="line"><span class="number">141</span>:         <span class="keyword">this</span>.tranStateTable.truncateDirtyFiles(processOffset);</div><div class="line"><span class="number">142</span>: </div><div class="line"><span class="number">143</span>:         <span class="comment">// 设置 TanStateTable 最大物理位置（可写入位置）</span></div><div class="line"><span class="number">144</span>:         <span class="keyword">this</span>.tranStateTableOffset.set(<span class="keyword">this</span>.tranStateTable.getMaxOffset() / TSStoreUnitSize);</div><div class="line"><span class="number">145</span>:         log.info(<span class="string">"recover normal over, transaction state table max offset: &#123;&#125;"</span>, <span class="keyword">this</span>.tranStateTableOffset.get());</div><div class="line"><span class="number">146</span>:     &#125;</div><div class="line"><span class="number">147</span>: &#125;</div></pre></td></tr></table></figure></p>
<h4>3.1.1.5 补充</h4>
<ul>
<li>为什么 V3.1.5 开始，使用 数据库 实现【事务状态】的存储？如下是来自官方文档的说明，可能是一部分原因：</li>
</ul>
<blockquote>
<p>RocketMQ 这种实现事务方式，没有通过 KV 存储做，而是通过 Offset 方式，存在一个显著缺陷，即通过 Offset 更改数据，会令系统的脏页过多，需要特别关注。</p>
</blockquote>
<h3>3.1.2 官方V4.0.0：基于数据库</h3>
<blockquote>
<p>仓库地址：https://github.com/apache/incubator-rocketmq</p>
</blockquote>
<p>官方V4.0.0 暂时未<strong>完全</strong>开源【事务消息回查】功能，<strong>So 我们需要进行一些猜想，可能不一定正确😈</strong>。</p>
<p>😆我们来对比【官方V3.1.4：基于文件】的实现。</p>
<ul>
<li>TransactionRecord ：记录每条【事务消息】。类似 <code>TranStateTable</code>。</li>
</ul>
<table>
<thead>
<tr>
<th>TranStateTable</th>
<th>TransactionRecord</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>offset</td>
<td>offset</td>
<td></td>
</tr>
<tr>
<td>producerGroupHash</td>
<td>producerGroup</td>
<td></td>
</tr>
<tr>
<td>size</td>
<td>无</td>
<td>非必须字段：【事务消息】回查时，使用 offset 读取 CommitLog 获得。</td>
</tr>
<tr>
<td>timestamp</td>
<td>无</td>
<td>非必须字段：【事务消息】回查时，使用 offset 读取 CommitLog 获得。</td>
</tr>
<tr>
<td>state</td>
<td>无</td>
<td>非必须字段： 事务开始，增加记录；事务结束，删除记录。</td>
</tr>
</tbody>
</table>
<p>另外，数据库本身保证了数据存储的可靠性，无需 <code>TranRedoLog</code>。</p>
<hr>
<p>简单手绘逻辑图如下😈：</p>
<p><img src="http://www.yunai.me/images/RocketMQ/2017_05_21/02.jpeg" alt="Broker_V4.0.0_基于数据库"></p>
<h2>3.2 Producer 接收【事务消息回查】</h2>
<ul>
<li>顺序图如下：</li>
</ul>
<p><img src="http://www.yunai.me/images/RocketMQ/2017_05_21/04.png" alt="Producer接收【事务消息回查】"></p>
<ul>
<li>核心代码如下：</li>
</ul>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">  <span class="number">1</span>: <span class="comment">// ⬇️⬇️⬇️【DefaultMQProducerImpl.java】</span></div><div class="line">  <span class="number">2</span>: <span class="comment">/**</span></div><div class="line">  3:  * 检查【事务状态】状态</div><div class="line">  4:  *</div><div class="line">  5:  * <span class="doctag">@param</span> addr broker地址</div><div class="line">  6:  * <span class="doctag">@param</span> msg 消息</div><div class="line">  7:  * <span class="doctag">@param</span> header 请求</div><div class="line">  8:  */</div><div class="line">  <span class="number">9</span>: <span class="meta">@Override</span></div><div class="line"> <span class="number">10</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkTransactionState</span><span class="params">(<span class="keyword">final</span> String addr, <span class="keyword">final</span> MessageExt msg, <span class="keyword">final</span> CheckTransactionStateRequestHeader header)</span> </span>&#123;</div><div class="line"> <span class="number">11</span>:     Runnable request = <span class="keyword">new</span> Runnable() &#123;</div><div class="line"> <span class="number">12</span>:         <span class="keyword">private</span> <span class="keyword">final</span> String brokerAddr = addr;</div><div class="line"> <span class="number">13</span>:         <span class="keyword">private</span> <span class="keyword">final</span> MessageExt message = msg;</div><div class="line"> <span class="number">14</span>:         <span class="keyword">private</span> <span class="keyword">final</span> CheckTransactionStateRequestHeader checkRequestHeader = header;</div><div class="line"> <span class="number">15</span>:         <span class="keyword">private</span> <span class="keyword">final</span> String group = DefaultMQProducerImpl.<span class="keyword">this</span>.defaultMQProducer.getProducerGroup();</div><div class="line"> <span class="number">16</span>: </div><div class="line"> <span class="number">17</span>:         <span class="meta">@Override</span></div><div class="line"> <span class="number">18</span>:         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line"> <span class="number">19</span>:             TransactionCheckListener transactionCheckListener = DefaultMQProducerImpl.<span class="keyword">this</span>.checkListener();</div><div class="line"> <span class="number">20</span>:             <span class="keyword">if</span> (transactionCheckListener != <span class="keyword">null</span>) &#123;</div><div class="line"> <span class="number">21</span>:                 <span class="comment">// 获取事务执行状态</span></div><div class="line"> <span class="number">22</span>:                 LocalTransactionState localTransactionState = LocalTransactionState.UNKNOW;</div><div class="line"> <span class="number">23</span>:                 Throwable exception = <span class="keyword">null</span>;</div><div class="line"> <span class="number">24</span>:                 <span class="keyword">try</span> &#123;</div><div class="line"> <span class="number">25</span>:                     localTransactionState = transactionCheckListener.checkLocalTransactionState(message);</div><div class="line"> <span class="number">26</span>:                 &#125; <span class="keyword">catch</span> (Throwable e) &#123;</div><div class="line"> <span class="number">27</span>:                     log.error(<span class="string">"Broker call checkTransactionState, but checkLocalTransactionState exception"</span>, e);</div><div class="line"> <span class="number">28</span>:                     exception = e;</div><div class="line"> <span class="number">29</span>:                 &#125;</div><div class="line"> <span class="number">30</span>: </div><div class="line"> <span class="number">31</span>:                 <span class="comment">// 处理事务结果，提交消息 COMMIT / ROLLBACK</span></div><div class="line"> <span class="number">32</span>:                 <span class="keyword">this</span>.processTransactionState(<span class="comment">//</span></div><div class="line"> <span class="number">33</span>:                     localTransactionState, <span class="comment">//</span></div><div class="line"> <span class="number">34</span>:                     group, <span class="comment">//</span></div><div class="line"> <span class="number">35</span>:                     exception);</div><div class="line"> <span class="number">36</span>:             &#125; <span class="keyword">else</span> &#123;</div><div class="line"> <span class="number">37</span>:                 log.warn(<span class="string">"checkTransactionState, pick transactionCheckListener by group[&#123;&#125;] failed"</span>, group);</div><div class="line"> <span class="number">38</span>:             &#125;</div><div class="line"> <span class="number">39</span>:         &#125;</div><div class="line"> <span class="number">40</span>: </div><div class="line"> <span class="number">41</span>:         <span class="comment">/**</span></div><div class="line"> 42:          * 处理事务结果，提交消息 COMMIT / ROLLBACK</div><div class="line"> 43:          *</div><div class="line"> 44:          * <span class="doctag">@param</span> localTransactionState 【本地事务】状态</div><div class="line"> 45:          * <span class="doctag">@param</span> producerGroup producerGroup</div><div class="line"> 46:          * <span class="doctag">@param</span> exception 检查【本地事务】状态发生的异常</div><div class="line"> 47:          */</div><div class="line"> <span class="number">48</span>:         <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processTransactionState</span><span class="params">(//</span></span></div><div class="line"> <span class="number">49</span>:             <span class="keyword">final</span> LocalTransactionState localTransactionState, //</div><div class="line"> <span class="number">50</span>:             <span class="keyword">final</span> String producerGroup, //</div><div class="line"> <span class="number">51</span>:             <span class="keyword">final</span> Throwable exception) &#123;</div><div class="line"> <span class="number">52</span>:             <span class="keyword">final</span> EndTransactionRequestHeader thisHeader = <span class="keyword">new</span> EndTransactionRequestHeader();</div><div class="line"> <span class="number">53</span>:             thisHeader.setCommitLogOffset(checkRequestHeader.getCommitLogOffset());</div><div class="line"> <span class="number">54</span>:             thisHeader.setProducerGroup(producerGroup);</div><div class="line"> <span class="number">55</span>:             thisHeader.setTranStateTableOffset(checkRequestHeader.getTranStateTableOffset());</div><div class="line"> <span class="number">56</span>:             thisHeader.setFromTransactionCheck(<span class="keyword">true</span>);</div><div class="line"> <span class="number">57</span>: </div><div class="line"> <span class="number">58</span>:             <span class="comment">// 设置消息编号</span></div><div class="line"> <span class="number">59</span>:             String uniqueKey = message.getProperties().get(MessageConst.PROPERTY_UNIQ_CLIENT_MESSAGE_ID_KEYIDX);</div><div class="line"> <span class="number">60</span>:             <span class="keyword">if</span> (uniqueKey == <span class="keyword">null</span>) &#123;</div><div class="line"> <span class="number">61</span>:                 uniqueKey = message.getMsgId();</div><div class="line"> <span class="number">62</span>:             &#125;</div><div class="line"> <span class="number">63</span>:             thisHeader.setMsgId(uniqueKey);</div><div class="line"> <span class="number">64</span>: </div><div class="line"> <span class="number">65</span>:             thisHeader.setTransactionId(checkRequestHeader.getTransactionId());</div><div class="line"> <span class="number">66</span>:             <span class="keyword">switch</span> (localTransactionState) &#123;</div><div class="line"> <span class="number">67</span>:                 <span class="keyword">case</span> COMMIT_MESSAGE:</div><div class="line"> <span class="number">68</span>:                     thisHeader.setCommitOrRollback(MessageSysFlag.TRANSACTION_COMMIT_TYPE);</div><div class="line"> <span class="number">69</span>:                     <span class="keyword">break</span>;</div><div class="line"> <span class="number">70</span>:                 <span class="keyword">case</span> ROLLBACK_MESSAGE:</div><div class="line"> <span class="number">71</span>:                     thisHeader.setCommitOrRollback(MessageSysFlag.TRANSACTION_ROLLBACK_TYPE);</div><div class="line"> <span class="number">72</span>:                     log.warn(<span class="string">"when broker check, client rollback this transaction, &#123;&#125;"</span>, thisHeader);</div><div class="line"> <span class="number">73</span>:                     <span class="keyword">break</span>;</div><div class="line"> <span class="number">74</span>:                 <span class="keyword">case</span> UNKNOW:</div><div class="line"> <span class="number">75</span>:                     thisHeader.setCommitOrRollback(MessageSysFlag.TRANSACTION_NOT_TYPE);</div><div class="line"> <span class="number">76</span>:                     log.warn(<span class="string">"when broker check, client does not know this transaction state, &#123;&#125;"</span>, thisHeader);</div><div class="line"> <span class="number">77</span>:                     <span class="keyword">break</span>;</div><div class="line"> <span class="number">78</span>:                 <span class="keyword">default</span>:</div><div class="line"> <span class="number">79</span>:                     <span class="keyword">break</span>;</div><div class="line"> <span class="number">80</span>:             &#125;</div><div class="line"> <span class="number">81</span>: </div><div class="line"> <span class="number">82</span>:             String remark = <span class="keyword">null</span>;</div><div class="line"> <span class="number">83</span>:             <span class="keyword">if</span> (exception != <span class="keyword">null</span>) &#123;</div><div class="line"> <span class="number">84</span>:                 remark = <span class="string">"checkLocalTransactionState Exception: "</span> + RemotingHelper.exceptionSimpleDesc(exception);</div><div class="line"> <span class="number">85</span>:             &#125;</div><div class="line"> <span class="number">86</span>: </div><div class="line"> <span class="number">87</span>:             <span class="keyword">try</span> &#123;</div><div class="line"> <span class="number">88</span>:                 <span class="comment">// 提交消息 COMMIT / ROLLBACK</span></div><div class="line"> <span class="number">89</span>:                 DefaultMQProducerImpl.<span class="keyword">this</span>.mQClientFactory.getMQClientAPIImpl().endTransactionOneway(brokerAddr, thisHeader, remark,</div><div class="line"> <span class="number">90</span>:                     <span class="number">3000</span>);</div><div class="line"> <span class="number">91</span>:             &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"> <span class="number">92</span>:                 log.error(<span class="string">"endTransactionOneway exception"</span>, e);</div><div class="line"> <span class="number">93</span>:             &#125;</div><div class="line"> <span class="number">94</span>:         &#125;</div><div class="line"> <span class="number">95</span>:     &#125;;</div><div class="line"> <span class="number">96</span>: </div><div class="line"> <span class="number">97</span>:     <span class="comment">// 提交执行</span></div><div class="line"> <span class="number">98</span>:     <span class="keyword">this</span>.checkExecutor.submit(request);</div><div class="line"> <span class="number">99</span>: &#125;</div><div class="line"><span class="number">100</span>: </div><div class="line"><span class="number">101</span>: <span class="comment">// ⬇️⬇️⬇️【DefaultMQProducerImpl.java】</span></div><div class="line"><span class="number">102</span>: <span class="comment">/**</span></div><div class="line">103:  * 【事务消息回查】检查监听器</div><div class="line">104:  */</div><div class="line"><span class="number">105</span>: <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TransactionCheckListener</span> </span>&#123;</div><div class="line"><span class="number">106</span>: </div><div class="line"><span class="number">107</span>:     <span class="comment">/**</span></div><div class="line">108:      * 获取（检查）【本地事务】状态</div><div class="line">109:      *</div><div class="line">110:      * <span class="doctag">@param</span> msg 消息</div><div class="line">111:      * <span class="doctag">@return</span> 事务状态</div><div class="line">112:      */</div><div class="line"><span class="number">113</span>:     <span class="function">LocalTransactionState <span class="title">checkLocalTransactionState</span><span class="params">(<span class="keyword">final</span> MessageExt msg)</span></span>;</div><div class="line"><span class="number">114</span>: </div><div class="line"><span class="number">115</span>: &#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://www.yunai.me/images/common/wechat_mp.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;🙂🙂🙂关注**微信公众号：【芋艿的后端小屋】**有福利：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Rock
    
    </summary>
    
      <category term="RocketMQ" scheme="http://www.yunai.me/categories/RocketMQ/"/>
    
    
  </entry>
  
  <entry>
    <title>RocketMQ 源码分析 —— Filtersrv</title>
    <link href="http://www.yunai.me/RocketMQ/filtersrv/"/>
    <id>http://www.yunai.me/RocketMQ/filtersrv/</id>
    <published>2017-05-16T16:00:00.000Z</published>
    <updated>2017-07-27T16:57:29.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://www.yunai.me/images/common/wechat_mp.jpeg" alt=""></p>
<blockquote>
<p>🙂🙂🙂关注**微信公众号：【芋艿的后端小屋】**有福利：</p>
<ol>
<li>RocketMQ / MyCAT / Sharding-JDBC <strong>所有</strong>源码分析文章列表</li>
<li>RocketMQ / MyCAT / Sharding-JDBC <strong>中文注释源码 GitHub 地址</strong></li>
<li>您对于源码的疑问每条留言<strong>都</strong>将得到<strong>认真</strong>回复。<strong>甚至不知道如何读源码也可以请教噢</strong>。</li>
<li><strong>新的</strong>源码解析文章<strong>实时</strong>收到通知。<strong>每周更新一篇左右</strong>。</li>
<li><strong>认真的</strong>源码交流微信群。</li>
</ol>
</blockquote>
<hr>
<ul>
<li><a href="#">1. 概述</a></li>
<li><a href="#">2. Filtersrv 注册到 Broker</a></li>
<li><a href="#">3. 过滤类</a>
<ul>
<li><a href="#">3.1 Consumer 订阅时设置 过滤类代码</a></li>
<li><a href="#">3.2 Consumer 上传 过滤类代码</a></li>
<li><a href="#">3.3 Filter 编译 过滤类代码</a></li>
</ul>
</li>
<li><a href="#">4. 过滤消息</a>
<ul>
<li><a href="#">4.1 Consumer 从 Filtersrv 拉取消息</a></li>
<li><a href="#">4.2 Filtersrv 从 Broker 拉取消息</a></li>
</ul>
</li>
<li><a href="#">5. Filtersrv 高可用</a></li>
</ul>
<h1>1. 概述</h1>
<p><code>Filtersrv</code> ，负责<strong>自定义规则</strong>过滤 <code>Consumer</code> 从 <code>Broker</code> 拉取的消息。</p>
<p><img src="http://www.yunai.me/images/RocketMQ/2017_05_17/Filtersrv.png" alt="Filtersrv.png"></p>
<p>为什么 <code>Broker</code> 不提供过滤消息的功能呢？我们来看看官方的说法：</p>
<blockquote>
<ul>
<li>Broker 端消息过滤<br>
在 Broker 中，按照 Consumer 的要求做过滤，优点是减少了对于 Consumer 无用消息的网络传输。 缺点是增加了 Broker 的负担，实现相对复杂。<br>
(1). 淘宝 Notify 支持多种过滤方式，包含直接按照消息类型过滤，灵活的语法表达式过滤，几乎可以满足最苛刻的过滤需求。<br>
(2). 淘宝 RocketMQ 支持按照简单的 Message Tag 过滤，也支持按照 Message Header、body 进行过滤。<br>
(3). CORBA Notification 规范中也支持灵活的语法表达式过滤。</li>
<li>Consumer 端消息过滤<br>
这种过滤方式可由应用完全自定义实现，但是缺点是很多无用的消息要传输到 Consumer 端。</li>
</ul>
</blockquote>
<p><strong>就是在这种考虑下，<code>Filtersrv</code> 出现了。减少了 <code>Broker</code> 的负担，又减少了 <code>Consumer</code> 接收无用的消息。当然缺点也是有的，多了一层 <code>Filtersrv</code> 网络开销。</strong></p>
<h1>2. Filtersrv 注册到 Broker</h1>
<ul>
<li>🦅 一个 <code>Filtersrv</code> <strong>只</strong>对应一个 <code>Broker</code>。</li>
<li>🦅 一个 <code>Broker</code> 可以对应<strong>多个</strong> <code>Filtersrv</code>。<strong><code>Filtersrv</code> 的高可用通过启动多个 <code>Filtersrv</code> 实现</strong>。</li>
<li>🦅 <code>Filtersrv</code> 注册失败时，主动<strong>退出关闭</strong>。</li>
</ul>
<p>核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="comment">// ⬇️⬇️⬇️【FiltersrvController.java】</span></div><div class="line"> <span class="number">2</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">initialize</span><span class="params">()</span> </span>&#123;</div><div class="line"> <span class="number">3</span>:     <span class="comment">// ....(省略代码)</span></div><div class="line"> <span class="number">4</span>: </div><div class="line"> <span class="number">5</span>:     <span class="comment">// 固定间隔注册到Broker</span></div><div class="line"> <span class="number">6</span>:     <span class="keyword">this</span>.scheduledExecutorService.scheduleAtFixedRate(<span class="keyword">new</span> Runnable() &#123;</div><div class="line"> <span class="number">7</span>: </div><div class="line"> <span class="number">8</span>:         <span class="meta">@Override</span></div><div class="line"> <span class="number">9</span>:         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="number">10</span>:             FiltersrvController.<span class="keyword">this</span>.registerFilterServerToBroker();</div><div class="line"><span class="number">11</span>:         &#125;</div><div class="line"><span class="number">12</span>:     &#125;, <span class="number">15</span>, <span class="number">10</span>, TimeUnit.SECONDS); <span class="comment">// TODO edit by 芋艿：initialDelay时间太短，可能导致初始化失败。从3=》15</span></div><div class="line"><span class="number">13</span>: </div><div class="line"><span class="number">14</span>:     <span class="comment">// ....(省略代码)</span></div><div class="line"><span class="number">15</span>: &#125;</div><div class="line"><span class="number">16</span>: </div><div class="line"><span class="number">17</span>: <span class="comment">/**</span></div><div class="line">18:  * 注册Filtersrv 到 Broker</div><div class="line">19:  * ！！！如果注册失败，关闭Filtersrv</div><div class="line">20:  */</div><div class="line"><span class="number">21</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerFilterServerToBroker</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="number">22</span>:     <span class="keyword">try</span> &#123;</div><div class="line"><span class="number">23</span>:         RegisterFilterServerResponseHeader responseHeader =</div><div class="line"><span class="number">24</span>:             <span class="keyword">this</span>.filterServerOuterAPI.registerFilterServerToBroker(</div><div class="line"><span class="number">25</span>:                 <span class="keyword">this</span>.filtersrvConfig.getConnectWhichBroker(), <span class="keyword">this</span>.localAddr());</div><div class="line"><span class="number">26</span>:         <span class="keyword">this</span>.defaultMQPullConsumer.getDefaultMQPullConsumerImpl().getPullAPIWrapper()</div><div class="line"><span class="number">27</span>:             .setDefaultBrokerId(responseHeader.getBrokerId());</div><div class="line"><span class="number">28</span>: </div><div class="line"><span class="number">29</span>:         <span class="keyword">if</span> (<span class="keyword">null</span> == <span class="keyword">this</span>.brokerName) &#123;</div><div class="line"><span class="number">30</span>:             <span class="keyword">this</span>.brokerName = responseHeader.getBrokerName();</div><div class="line"><span class="number">31</span>:         &#125;</div><div class="line"><span class="number">32</span>: </div><div class="line"><span class="number">33</span>:         log.info(<span class="string">"register filter server&lt;&#123;&#125;&gt; to broker&lt;&#123;&#125;&gt; OK, Return: &#123;&#125; &#123;&#125;"</span>,</div><div class="line"><span class="number">34</span>:             <span class="keyword">this</span>.localAddr(),</div><div class="line"><span class="number">35</span>:             <span class="keyword">this</span>.filtersrvConfig.getConnectWhichBroker(),</div><div class="line"><span class="number">36</span>:             responseHeader.getBrokerName(),</div><div class="line"><span class="number">37</span>:             responseHeader.getBrokerId());</div><div class="line"><span class="number">38</span>:     &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"><span class="number">39</span>:         log.warn(<span class="string">"register filter server Exception"</span>, e);</div><div class="line"><span class="number">40</span>: </div><div class="line"><span class="number">41</span>:         log.warn(<span class="string">"access broker failed, kill oneself"</span>);</div><div class="line"><span class="number">42</span>:         System.exit(-<span class="number">1</span>); <span class="comment">// 异常退出</span></div><div class="line"><span class="number">43</span>:     &#125;</div><div class="line"><span class="number">44</span>: &#125;</div></pre></td></tr></table></figure></p>
<h1>3. 过滤类</h1>
<p><img src="http://www.yunai.me/images/RocketMQ/2017_05_17/03.png" alt="Filtersrv过滤类"></p>
<h2>3.1 Consumer 订阅时设置 过滤类代码</h2>
<ul>
<li>🦅 <code>Consumer</code> 针对每个 <code>Topic</code> 可以订阅不同的 <code>过滤类代码</code>。</li>
</ul>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="number">1</span>: <span class="comment">// ⬇️⬇️⬇️【DefaultMQPushConsumer.java】</span></div><div class="line"><span class="number">2</span>: <span class="meta">@Override</span></div><div class="line"><span class="number">3</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(String topic, String fullClassName, String filterClassSource)</span> <span class="keyword">throws</span> MQClientException </span>&#123;</div><div class="line"><span class="number">4</span>:     <span class="keyword">this</span>.defaultMQPushConsumerImpl.subscribe(topic, fullClassName, filterClassSource);</div><div class="line"><span class="number">5</span>: &#125;</div></pre></td></tr></table></figure></p>
<h2>3.2 Consumer 上传 过滤类代码</h2>
<ul>
<li>🦅 <code>Consumer</code> 心跳注册到 <code>Broker</code> 的同时，上传 <code>过滤类代码</code> 到 <code>Broker</code> 对应的<strong>所有</strong> <code>Filtersrv</code>。</li>
</ul>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="comment">// ⬇️⬇️⬇️【MQClientInstance.java】</span></div><div class="line"> <span class="number">2</span>: <span class="comment">/**</span></div><div class="line"> 3:  * 发送心跳到Broker，上传过滤类源码到Filtersrv</div><div class="line"> 4:  */</div><div class="line"> <span class="number">5</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendHeartbeatToAllBrokerWithLock</span><span class="params">()</span> </span>&#123;</div><div class="line"> <span class="number">6</span>:     <span class="keyword">if</span> (<span class="keyword">this</span>.lockHeartbeat.tryLock()) &#123;</div><div class="line"> <span class="number">7</span>:         <span class="keyword">try</span> &#123;</div><div class="line"> <span class="number">8</span>:             <span class="keyword">this</span>.sendHeartbeatToAllBroker();</div><div class="line"> <span class="number">9</span>:             <span class="keyword">this</span>.uploadFilterClassSource();</div><div class="line"><span class="number">10</span>:         &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> Exception e) &#123;</div><div class="line"><span class="number">11</span>:             log.error(<span class="string">"sendHeartbeatToAllBroker exception"</span>, e);</div><div class="line"><span class="number">12</span>:         &#125; <span class="keyword">finally</span> &#123;</div><div class="line"><span class="number">13</span>:             <span class="keyword">this</span>.lockHeartbeat.unlock();</div><div class="line"><span class="number">14</span>:         &#125;</div><div class="line"><span class="number">15</span>:     &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">16</span>:         log.warn(<span class="string">"lock heartBeat, but failed."</span>);</div><div class="line"><span class="number">17</span>:     &#125;</div><div class="line"><span class="number">18</span>: &#125;</div><div class="line"><span class="number">19</span>: </div><div class="line"><span class="number">20</span>: <span class="comment">/**</span></div><div class="line">21:  * 上传过滤类到Filtersrv</div><div class="line">22:  */</div><div class="line"><span class="number">23</span>: <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">uploadFilterClassSource</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="number">24</span>:     Iterator&lt;Entry&lt;String, MQConsumerInner&gt;&gt; it = <span class="keyword">this</span>.consumerTable.entrySet().iterator();</div><div class="line"><span class="number">25</span>:     <span class="keyword">while</span> (it.hasNext()) &#123;</div><div class="line"><span class="number">26</span>:         Entry&lt;String, MQConsumerInner&gt; next = it.next();</div><div class="line"><span class="number">27</span>:         MQConsumerInner consumer = next.getValue();</div><div class="line"><span class="number">28</span>:         <span class="keyword">if</span> (ConsumeType.CONSUME_PASSIVELY == consumer.consumeType()) &#123;</div><div class="line"><span class="number">29</span>:             Set&lt;SubscriptionData&gt; subscriptions = consumer.subscriptions();</div><div class="line"><span class="number">30</span>:             <span class="keyword">for</span> (SubscriptionData sub : subscriptions) &#123;</div><div class="line"><span class="number">31</span>:                 <span class="keyword">if</span> (sub.isClassFilterMode() &amp;&amp; sub.getFilterClassSource() != <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">32</span>:                     <span class="keyword">final</span> String consumerGroup = consumer.groupName();</div><div class="line"><span class="number">33</span>:                     <span class="keyword">final</span> String className = sub.getSubString();</div><div class="line"><span class="number">34</span>:                     <span class="keyword">final</span> String topic = sub.getTopic();</div><div class="line"><span class="number">35</span>:                     <span class="keyword">final</span> String filterClassSource = sub.getFilterClassSource();</div><div class="line"><span class="number">36</span>:                     <span class="keyword">try</span> &#123;</div><div class="line"><span class="number">37</span>:                         <span class="keyword">this</span>.uploadFilterClassToAllFilterServer(consumerGroup, className, topic, filterClassSource);</div><div class="line"><span class="number">38</span>:                     &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"><span class="number">39</span>:                         log.error(<span class="string">"uploadFilterClassToAllFilterServer Exception"</span>, e);</div><div class="line"><span class="number">40</span>:                     &#125;</div><div class="line"><span class="number">41</span>:                 &#125;</div><div class="line"><span class="number">42</span>:             &#125;</div><div class="line"><span class="number">43</span>:         &#125;</div><div class="line"><span class="number">44</span>:     &#125;</div><div class="line"><span class="number">45</span>: &#125;</div></pre></td></tr></table></figure></p>
<h2>3.3 Filter 编译 过滤类代码</h2>
<ul>
<li>🦅 <code>Filtersrv</code> 处理 <code>Consumer</code> 上传的 <code>过滤类代码</code>，并进行<strong>编译</strong>使用。</li>
</ul>
<p>核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="comment">// ⬇️⬇️⬇️【FilterClassManager.java】</span></div><div class="line"> <span class="number">2</span>: <span class="comment">/**</span></div><div class="line"> 3:  * 注册过滤类</div><div class="line"> 4:  *</div><div class="line"> 5:  * <span class="doctag">@param</span> consumerGroup 消费分组</div><div class="line"> 6:  * <span class="doctag">@param</span> topic Topic</div><div class="line"> 7:  * <span class="doctag">@param</span> className 过滤类名</div><div class="line"> 8:  * <span class="doctag">@param</span> classCRC 过滤类源码CRC</div><div class="line"> 9:  * <span class="doctag">@param</span> filterSourceBinary 过滤类源码</div><div class="line">10:  * <span class="doctag">@return</span> 是否注册成功</div><div class="line">11:  */</div><div class="line"><span class="number">12</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">registerFilterClass</span><span class="params">(<span class="keyword">final</span> String consumerGroup, <span class="keyword">final</span> String topic,</span></span></div><div class="line"><span class="number">13</span>:     <span class="keyword">final</span> String className, <span class="keyword">final</span> <span class="keyword">int</span> classCRC, <span class="keyword">final</span> <span class="keyword">byte</span>[] filterSourceBinary) &#123;</div><div class="line"><span class="number">14</span>:     <span class="keyword">final</span> String key = buildKey(consumerGroup, topic);</div><div class="line"><span class="number">15</span>:     <span class="comment">// 判断是否要注册新的过滤类</span></div><div class="line"><span class="number">16</span>:     <span class="keyword">boolean</span> registerNew = <span class="keyword">false</span>;</div><div class="line"><span class="number">17</span>:     FilterClassInfo filterClassInfoPrev = <span class="keyword">this</span>.filterClassTable.get(key);</div><div class="line"><span class="number">18</span>:     <span class="keyword">if</span> (<span class="keyword">null</span> == filterClassInfoPrev) &#123;</div><div class="line"><span class="number">19</span>:         registerNew = <span class="keyword">true</span>;</div><div class="line"><span class="number">20</span>:     &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">21</span>:         <span class="keyword">if</span> (<span class="keyword">this</span>.filtersrvController.getFiltersrvConfig().isClientUploadFilterClassEnable()) &#123;</div><div class="line"><span class="number">22</span>:             <span class="keyword">if</span> (filterClassInfoPrev.getClassCRC() != classCRC &amp;&amp; classCRC != <span class="number">0</span>) &#123; <span class="comment">// 类有变化</span></div><div class="line"><span class="number">23</span>:                 registerNew = <span class="keyword">true</span>;</div><div class="line"><span class="number">24</span>:             &#125;</div><div class="line"><span class="number">25</span>:         &#125;</div><div class="line"><span class="number">26</span>:     &#125;</div><div class="line"><span class="number">27</span>:     <span class="comment">// 注册新的过滤类</span></div><div class="line"><span class="number">28</span>:     <span class="keyword">if</span> (registerNew) &#123;</div><div class="line"><span class="number">29</span>:         <span class="keyword">synchronized</span> (<span class="keyword">this</span>.compileLock) &#123;</div><div class="line"><span class="number">30</span>:             filterClassInfoPrev = <span class="keyword">this</span>.filterClassTable.get(key);</div><div class="line"><span class="number">31</span>:             <span class="keyword">if</span> (<span class="keyword">null</span> != filterClassInfoPrev &amp;&amp; filterClassInfoPrev.getClassCRC() == classCRC) &#123;</div><div class="line"><span class="number">32</span>:                 <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line"><span class="number">33</span>:             &#125;</div><div class="line"><span class="number">34</span>:             <span class="keyword">try</span> &#123;</div><div class="line"><span class="number">35</span>:                 FilterClassInfo filterClassInfoNew = <span class="keyword">new</span> FilterClassInfo();</div><div class="line"><span class="number">36</span>:                 filterClassInfoNew.setClassName(className);</div><div class="line"><span class="number">37</span>:                 filterClassInfoNew.setClassCRC(<span class="number">0</span>);</div><div class="line"><span class="number">38</span>:                 filterClassInfoNew.setMessageFilter(<span class="keyword">null</span>);</div><div class="line"><span class="number">39</span>: </div><div class="line"><span class="number">40</span>:                 <span class="keyword">if</span> (<span class="keyword">this</span>.filtersrvController.getFiltersrvConfig().isClientUploadFilterClassEnable()) &#123;</div><div class="line"><span class="number">41</span>:                     String javaSource = <span class="keyword">new</span> String(filterSourceBinary, MixAll.DEFAULT_CHARSET);</div><div class="line"><span class="number">42</span>:                     <span class="comment">// 编译新的过滤类</span></div><div class="line"><span class="number">43</span>:                     Class&lt;?&gt; newClass = DynaCode.compileAndLoadClass(className, javaSource);</div><div class="line"><span class="number">44</span>:                     <span class="comment">// 创建新的过滤类对象</span></div><div class="line"><span class="number">45</span>:                     Object newInstance = newClass.newInstance();</div><div class="line"><span class="number">46</span>:                     filterClassInfoNew.setMessageFilter((MessageFilter) newInstance);</div><div class="line"><span class="number">47</span>:                     filterClassInfoNew.setClassCRC(classCRC);</div><div class="line"><span class="number">48</span>:                 &#125;</div><div class="line"><span class="number">49</span>: </div><div class="line"><span class="number">50</span>:                 <span class="keyword">this</span>.filterClassTable.put(key, filterClassInfoNew);</div><div class="line"><span class="number">51</span>:             &#125; <span class="keyword">catch</span> (Throwable e) &#123;</div><div class="line"><span class="number">52</span>:                 String info = String.format(<span class="string">"FilterServer, registerFilterClass Exception, consumerGroup: %s topic: %s className: %s"</span>,</div><div class="line"><span class="number">53</span>:                             consumerGroup, topic, className);</div><div class="line"><span class="number">54</span>:                 log.error(info, e);</div><div class="line"><span class="number">55</span>:                 <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line"><span class="number">56</span>:             &#125;</div><div class="line"><span class="number">57</span>:         &#125;</div><div class="line"><span class="number">58</span>:     &#125;</div><div class="line"><span class="number">59</span>: </div><div class="line"><span class="number">60</span>:     <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line"><span class="number">61</span>: &#125;</div></pre></td></tr></table></figure></p>
<hr>
<h1>4. 过滤消息</h1>
<p><img src="http://www.yunai.me/images/RocketMQ/2017_05_17/Filtersrv.png" alt="Filtersrv.png"></p>
<h2>4.1 Consumer 从 Filtersrv 拉取消息</h2>
<ul>
<li>🦅 <code>Consumer</code> 拉取 <strong>使用过滤类方式订阅</strong> 的消费消息时，从 <code>Broker</code> 对应的 <code>Filtersrv</code> 列表<strong>随机</strong>选择一个拉取消息。<strong>如果选择不到 <code>Filtersrv</code>，则无法拉取消息。因此，<code>Filtersrv</code> 一定要做高可用</strong>。</li>
</ul>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="comment">// ⬇️⬇️⬇️【PullAPIWrapper.java】</span></div><div class="line"> <span class="number">2</span>: <span class="comment">/**</span></div><div class="line"> 3:  * 拉取消息核心方法</div><div class="line"> 4:  *</div><div class="line"> 5:  * <span class="doctag">@param</span> mq 消息嘟列</div><div class="line"> 6:  * <span class="doctag">@param</span> subExpression 订阅表达式</div><div class="line"> 7:  * <span class="doctag">@param</span> subVersion 订阅版本号</div><div class="line"> 8:  * <span class="doctag">@param</span> offset 拉取队列开始位置</div><div class="line"> 9:  * <span class="doctag">@param</span> maxNums 批量拉 取消息数量</div><div class="line">10:  * <span class="doctag">@param</span> sysFlag 拉取系统标识</div><div class="line">11:  * <span class="doctag">@param</span> commitOffset 提交消费进度</div><div class="line">12:  * <span class="doctag">@param</span> brokerSuspendMaxTimeMillis broker挂起请求最大时间</div><div class="line">13:  * <span class="doctag">@param</span> timeoutMillis 请求broker超时时间</div><div class="line">14:  * <span class="doctag">@param</span> communicationMode 通讯模式</div><div class="line">15:  * <span class="doctag">@param</span> pullCallback 拉取回调</div><div class="line">16:  * <span class="doctag">@return</span> 拉取消息结果。只有通讯模式为同步时，才返回结果，否则返回null。</div><div class="line">17:  * <span class="doctag">@throws</span> MQClientException 当寻找不到 broker 时，或发生其他client异常</div><div class="line">18:  * <span class="doctag">@throws</span> RemotingException 当远程调用发生异常时</div><div class="line">19:  * <span class="doctag">@throws</span> MQBrokerException 当 broker 发生异常时。只有通讯模式为同步时才会发生该异常。</div><div class="line">20:  * <span class="doctag">@throws</span> InterruptedException 当发生中断异常时</div><div class="line">21:  */</div><div class="line"><span class="number">22</span>: <span class="function"><span class="keyword">protected</span> PullResult <span class="title">pullKernelImpl</span><span class="params">(</span></span></div><div class="line"><span class="number">23</span>:     <span class="keyword">final</span> MessageQueue mq,</div><div class="line"><span class="number">24</span>:     <span class="keyword">final</span> String subExpression,</div><div class="line"><span class="number">25</span>:     <span class="keyword">final</span> <span class="keyword">long</span> subVersion,</div><div class="line"><span class="number">26</span>:     <span class="keyword">final</span> <span class="keyword">long</span> offset,</div><div class="line"><span class="number">27</span>:     <span class="keyword">final</span> <span class="keyword">int</span> maxNums,</div><div class="line"><span class="number">28</span>:     <span class="keyword">final</span> <span class="keyword">int</span> sysFlag,</div><div class="line"><span class="number">29</span>:     <span class="keyword">final</span> <span class="keyword">long</span> commitOffset,</div><div class="line"><span class="number">30</span>:     <span class="keyword">final</span> <span class="keyword">long</span> brokerSuspendMaxTimeMillis,</div><div class="line"><span class="number">31</span>:     <span class="keyword">final</span> <span class="keyword">long</span> timeoutMillis,</div><div class="line"><span class="number">32</span>:     <span class="keyword">final</span> CommunicationMode communicationMode,</div><div class="line"><span class="number">33</span>:     <span class="keyword">final</span> PullCallback pullCallback</div><div class="line"><span class="number">34</span>: ) <span class="keyword">throws</span> MQClientException, RemotingException, MQBrokerException, InterruptedException &#123;</div><div class="line"><span class="number">35</span>:     <span class="comment">// // ....(省略代码)</span></div><div class="line"><span class="number">36</span>:     <span class="comment">// 请求拉取消息</span></div><div class="line"><span class="number">37</span>:     <span class="keyword">if</span> (findBrokerResult != <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">38</span>:         <span class="comment">// ....(省略代码)</span></div><div class="line"><span class="number">39</span>:         <span class="comment">// 若订阅topic使用过滤类，使用filtersrv获取消息</span></div><div class="line"><span class="number">40</span>:         String brokerAddr = findBrokerResult.getBrokerAddr();</div><div class="line"><span class="number">41</span>:         <span class="keyword">if</span> (PullSysFlag.hasClassFilterFlag(sysFlagInner)) &#123;</div><div class="line"><span class="number">42</span>:             brokerAddr = computPullFromWhichFilterServer(mq.getTopic(), brokerAddr);</div><div class="line"><span class="number">43</span>:         &#125;</div><div class="line"><span class="number">44</span>: </div><div class="line"><span class="number">45</span>:         PullResult pullResult = <span class="keyword">this</span>.mQClientFactory.getMQClientAPIImpl().pullMessage(</div><div class="line"><span class="number">46</span>:             brokerAddr,</div><div class="line"><span class="number">47</span>:             requestHeader,</div><div class="line"><span class="number">48</span>:             timeoutMillis,</div><div class="line"><span class="number">49</span>:             communicationMode,</div><div class="line"><span class="number">50</span>:             pullCallback);</div><div class="line"><span class="number">51</span>: </div><div class="line"><span class="number">52</span>:         <span class="keyword">return</span> pullResult;</div><div class="line"><span class="number">53</span>:     &#125;</div><div class="line"><span class="number">54</span>: </div><div class="line"><span class="number">55</span>:     <span class="comment">// Broker信息不存在，则抛出异常</span></div><div class="line"><span class="number">56</span>:     <span class="keyword">throw</span> <span class="keyword">new</span> MQClientException(<span class="string">"The broker["</span> + mq.getBrokerName() + <span class="string">"] not exist"</span>, <span class="keyword">null</span>);</div><div class="line"><span class="number">57</span>: &#125;</div><div class="line"><span class="number">58</span>: </div><div class="line"><span class="number">59</span>: <span class="comment">/**</span></div><div class="line">60:  * 计算filtersrv地址。如果有多个filtersrv，随机选择一个。</div><div class="line">61:  *</div><div class="line">62:  * <span class="doctag">@param</span> topic Topic</div><div class="line">63:  * <span class="doctag">@param</span> brokerAddr broker地址</div><div class="line">64:  * <span class="doctag">@return</span> filtersrv地址</div><div class="line">65:  * <span class="doctag">@throws</span> MQClientException 当filtersrv不存在时</div><div class="line">66:  */</div><div class="line"><span class="number">67</span>: <span class="function"><span class="keyword">private</span> String <span class="title">computPullFromWhichFilterServer</span><span class="params">(<span class="keyword">final</span> String topic, <span class="keyword">final</span> String brokerAddr)</span></span></div><div class="line">68:     <span class="keyword">throws</span> MQClientException &#123;</div><div class="line"><span class="number">69</span>:     ConcurrentHashMap&lt;String, TopicRouteData&gt; topicRouteTable = <span class="keyword">this</span>.mQClientFactory.getTopicRouteTable();</div><div class="line"><span class="number">70</span>:     <span class="keyword">if</span> (topicRouteTable != <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">71</span>:         TopicRouteData topicRouteData = topicRouteTable.get(topic);</div><div class="line"><span class="number">72</span>:         List&lt;String&gt; list = topicRouteData.getFilterServerTable().get(brokerAddr);</div><div class="line"><span class="number">73</span>:         <span class="keyword">if</span> (list != <span class="keyword">null</span> &amp;&amp; !list.isEmpty()) &#123;</div><div class="line"><span class="number">74</span>:             <span class="keyword">return</span> list.get(randomNum() % list.size());</div><div class="line"><span class="number">75</span>:         &#125;</div><div class="line"><span class="number">76</span>:     &#125;</div><div class="line"><span class="number">77</span>:     <span class="keyword">throw</span> <span class="keyword">new</span> MQClientException(<span class="string">"Find Filter Server Failed, Broker Addr: "</span> + brokerAddr + <span class="string">" topic: "</span></div><div class="line"><span class="number">78</span>:         + topic, <span class="keyword">null</span>);</div><div class="line"><span class="number">79</span>: &#125;</div></pre></td></tr></table></figure></p>
<h2>4.2 Filtersrv 从 Broker 拉取消息</h2>
<ul>
<li>🦅 <code>Filtersrv</code> 拉取消息后，会建议 <code>Consumer</code> 向 <code>Broker主节点</code> 拉取消息。</li>
<li>🦅 <code>Filtersrv</code> 可以理解成一个 <code>Consumer</code>，向 <code>Broker</code> 拉取消息时，实际使用的 <code>DefaultMQPullConsumer.java</code> 的方法和逻辑。</li>
</ul>
<pre><code class="language-Java">  1: // ⬇️⬇️⬇️【DefaultRequestProcessor.java】
  2: /**
  3:  * 拉取消息
  4:  *
  5:  * @param ctx 拉取消息context
  6:  * @param request 拉取消息请求
  7:  * @return 响应
  8:  * @throws Exception 当发生异常时
  9:  */
 10: private RemotingCommand pullMessageForward(final ChannelHandlerContext ctx, final RemotingCommand request) throws Exception {
 11:     final RemotingCommand response = RemotingCommand.createResponseCommand(PullMessageResponseHeader.class);
 12:     final PullMessageResponseHeader responseHeader = (PullMessageResponseHeader) response.readCustomHeader();
 13:     final PullMessageRequestHeader requestHeader =
 14:         (PullMessageRequestHeader) request.decodeCommandCustomHeader(PullMessageRequestHeader.class);
 15: 
 16:     final FilterContext filterContext = new FilterContext();
 17:     filterContext.setConsumerGroup(requestHeader.getConsumerGroup());
 18: 
 19:     response.setOpaque(request.getOpaque());
 20: 
 21:     DefaultMQPullConsumer pullConsumer = this.filtersrvController.getDefaultMQPullConsumer();
 22: 
 23:     // 校验Topic过滤类是否完整
 24:     final FilterClassInfo findFilterClass = this.filtersrvController.getFilterClassManager().findFilterClass(requestHeader.getConsumerGroup(), requestHeader.getTopic());
 25:     if (null == findFilterClass) {
 26:         response.setCode(ResponseCode.SYSTEM_ERROR);
 27:         response.setRemark(&quot;Find Filter class failed, not registered&quot;);
 28:         return response;
 29:     }
 30:     if (null == findFilterClass.getMessageFilter()) {
 31:         response.setCode(ResponseCode.SYSTEM_ERROR);
 32:         response.setRemark(&quot;Find Filter class failed, registered but no class&quot;);
 33:         return response;
 34:     }
 35: 
 36:     // 设置下次请求从 Broker主节点。
 37:     responseHeader.setSuggestWhichBrokerId(MixAll.MASTER_ID);
 38: 
 39:     MessageQueue mq = new MessageQueue();
 40:     mq.setTopic(requestHeader.getTopic());
 41:     mq.setQueueId(requestHeader.getQueueId());
 42:     mq.setBrokerName(this.filtersrvController.getBrokerName());
 43:     long offset = requestHeader.getQueueOffset();
 44:     int maxNums = requestHeader.getMaxMsgNums();
 45: 
 46:     final PullCallback pullCallback = new PullCallback() {
 47: 
 48:         @Override
 49:         public void onSuccess(PullResult pullResult) {
 50:             responseHeader.setMaxOffset(pullResult.getMaxOffset());
 51:             responseHeader.setMinOffset(pullResult.getMinOffset());
 52:             responseHeader.setNextBeginOffset(pullResult.getNextBeginOffset());
 53:             response.setRemark(null);
 54: 
 55:             switch (pullResult.getPullStatus()) {
 56:                 case FOUND:
 57:                     response.setCode(ResponseCode.SUCCESS);
 58: 
 59:                     List&lt;MessageExt&gt; msgListOK = new ArrayList&lt;MessageExt&gt;();
 60:                     try {
 61:                         for (MessageExt msg : pullResult.getMsgFoundList()) {
 62:                             // 使用过滤类过滤消息
 63:                             boolean match = findFilterClass.getMessageFilter().match(msg, filterContext);
 64:                             if (match) {
 65:                                 msgListOK.add(msg);
 66:                             }
 67:                         }
 68: 
 69:                         if (!msgListOK.isEmpty()) {
 70:                             returnResponse(requestHeader.getConsumerGroup(), requestHeader.getTopic(), ctx, response, msgListOK);
 71:                             return;
 72:                         } else {
 73:                             response.setCode(ResponseCode.PULL_RETRY_IMMEDIATELY);
 74:                         }
 75:                     } catch (Throwable e) {
 76:                         final String error =
 77:                             String.format(&quot;do Message Filter Exception, ConsumerGroup: %s Topic: %s &quot;,
 78:                                 requestHeader.getConsumerGroup(), requestHeader.getTopic());
 79:                         log.error(error, e);
 80: 
 81:                         response.setCode(ResponseCode.SYSTEM_ERROR);
 82:                         response.setRemark(error + RemotingHelper.exceptionSimpleDesc(e));
 83:                         returnResponse(requestHeader.getConsumerGroup(), requestHeader.getTopic(), ctx, response, null);
 84:                         return;
 85:                     }
 86: 
 87:                     break;
 88:                 case NO_MATCHED_MSG:
 89:                     response.setCode(ResponseCode.PULL_RETRY_IMMEDIATELY);
 90:                     break;
 91:                 case NO_NEW_MSG:
 92:                     response.setCode(ResponseCode.PULL_NOT_FOUND);
 93:                     break;
 94:                 case OFFSET_ILLEGAL:
 95:                     response.setCode(ResponseCode.PULL_OFFSET_MOVED);
 96:                     break;
 97:                 default:
 98:                     break;
 99:             }
100: 
101:             returnResponse(requestHeader.getConsumerGroup(), requestHeader.getTopic(), ctx, response, null);
102:         }
103: 
104:         @Override
105:         public void onException(Throwable e) {
106:             response.setCode(ResponseCode.SYSTEM_ERROR);
107:             response.setRemark(&quot;Pull Callback Exception, &quot; + RemotingHelper.exceptionSimpleDesc(e));
108:             returnResponse(requestHeader.getConsumerGroup(), requestHeader.getTopic(), ctx, response, null);
109:             return;
110:         }
111:     };
112: 
113:     // 拉取消息
114:     pullConsumer.pullBlockIfNotFound(mq, null, offset, maxNums, pullCallback);
115:     return null;
116: }
</code></pre>
<h1>5. Filtersrv 高可用</h1>
<p><img src="http://www.yunai.me/images/RocketMQ/2017_05_17/02.png" alt="Filtersrv过可用"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://www.yunai.me/images/common/wechat_mp.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;🙂🙂🙂关注**微信公众号：【芋艿的后端小屋】**有福利：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Rock
    
    </summary>
    
      <category term="RocketMQ" scheme="http://www.yunai.me/categories/RocketMQ/"/>
    
    
  </entry>
  
  <entry>
    <title>RocketMQ 源码分析 —— 定时消息与消息重试</title>
    <link href="http://www.yunai.me/RocketMQ/message-schedule-and-retry/"/>
    <id>http://www.yunai.me/RocketMQ/message-schedule-and-retry/</id>
    <published>2017-05-14T16:00:00.000Z</published>
    <updated>2017-07-27T16:57:09.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://www.yunai.me/images/common/wechat_mp.jpeg" alt=""></p>
<blockquote>
<p>🙂🙂🙂关注**微信公众号：【芋艿的后端小屋】**有福利：</p>
<ol>
<li>RocketMQ / MyCAT / Sharding-JDBC <strong>所有</strong>源码分析文章列表</li>
<li>RocketMQ / MyCAT / Sharding-JDBC <strong>中文注释源码 GitHub 地址</strong></li>
<li>您对于源码的疑问每条留言<strong>都</strong>将得到<strong>认真</strong>回复。<strong>甚至不知道如何读源码也可以请教噢</strong>。</li>
<li><strong>新的</strong>源码解析文章<strong>实时</strong>收到通知。<strong>每周更新一篇左右</strong>。</li>
<li><strong>认真的</strong>源码交流微信群。</li>
</ol>
</blockquote>
<hr>
<ul>
<li><a href="#">1. 概述</a></li>
<li><a href="#">2. 定时消息</a>
<ul>
<li><a href="#">2.1 延迟级别</a></li>
<li><a href="#">2.2 Producer 发送定时消息</a></li>
<li><a href="#">2.3 Broker 存储定时消息</a></li>
<li><a href="#">2.4 Broker 发送定时消息</a></li>
<li><a href="#">2.5 Broker 持久化定时发送进度</a></li>
</ul>
</li>
<li><a href="#">3. 消息重试</a></li>
</ul>
<h1>1. 概述</h1>
<p><strong>建议</strong>前置阅读内容：</p>
<ul>
<li><a href="http://www.yunai.me/RocketMQ/message-send-and-receive/">《RocketMQ 源码分析 —— Message 发送与接收》</a></li>
<li><a href="http://www.yunai.me/RocketMQ/message-pull-and-consume-second/">《RocketMQ 源码分析 —— Message 拉取与消费（下）》</a></li>
</ul>
<p>😈 为什么把<strong>定时消息</strong>与<strong>消息重试</strong>放在一起？你猜。<br>
👻 你猜我猜不猜。</p>
<h1>2. 定时消息</h1>
<blockquote>
<p><strong>定时消息</strong>是指消息发到 Broker 后，不能立刻被 Consumer 消费，要到特定的时间点或者等待特定的时间后才能被消费。</p>
</blockquote>
<p>下图是<strong>定时消息</strong>的处理逻辑图：</p>
<p><img src="http://www.yunai.me/images/RocketMQ/2017_05_15/02.png" alt="定时消息逻辑图.png"></p>
<h2>2.1 延迟级别</h2>
<p><code>RocketMQ</code> 目前只支持<strong>固定精度</strong>的定时消息。官方说法如下：</p>
<blockquote>
<p>如果要支持任意的时间精度，在 Broker 层面，必须要做消息排序，如果再涉及到持久化，那么消息排序要不可避免的产生巨大性能开销。</p>
</blockquote>
<ul>
<li>延迟级别：</li>
</ul>
<table>
<thead>
<tr>
<th>延迟级别</th>
<th>时间</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>1s</td>
</tr>
<tr>
<td>2</td>
<td>5s</td>
</tr>
<tr>
<td>3</td>
<td>10s</td>
</tr>
<tr>
<td>4</td>
<td>30s</td>
</tr>
<tr>
<td>5</td>
<td>1m</td>
</tr>
<tr>
<td>6</td>
<td>2m</td>
</tr>
<tr>
<td>7</td>
<td>3m</td>
</tr>
<tr>
<td>8</td>
<td>4m</td>
</tr>
<tr>
<td>9</td>
<td>5m</td>
</tr>
<tr>
<td>10</td>
<td>6m</td>
</tr>
<tr>
<td>11</td>
<td>7m</td>
</tr>
<tr>
<td>12</td>
<td>8m</td>
</tr>
<tr>
<td>13</td>
<td>9m</td>
</tr>
<tr>
<td>14</td>
<td>10m</td>
</tr>
<tr>
<td>15</td>
<td>20m</td>
</tr>
<tr>
<td>16</td>
<td>30m</td>
</tr>
<tr>
<td>17</td>
<td>1h</td>
</tr>
<tr>
<td>18</td>
<td>2h</td>
</tr>
</tbody>
</table>
<ul>
<li>
<p>核心源码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="comment">// ⬇️⬇️⬇️【MessageStoreConfig.java】</span></div><div class="line"> <span class="number">2</span>: <span class="comment">/**</span></div><div class="line"> 3:  * 消息延迟级别字符串配置</div><div class="line"> 4:  */</div><div class="line"> <span class="number">5</span>: <span class="keyword">private</span> String messageDelayLevel = <span class="string">"1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h"</span>;</div><div class="line"> <span class="number">6</span>: </div><div class="line"> <span class="number">7</span>: <span class="comment">// ⬇️⬇️⬇️【ScheduleMessageService.java】</span></div><div class="line"> <span class="number">8</span>: <span class="comment">/**</span></div><div class="line"> 9:  * 解析延迟级别</div><div class="line">10:  *</div><div class="line">11:  * <span class="doctag">@return</span> 是否解析成功</div><div class="line">12:  */</div><div class="line"><span class="number">13</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">parseDelayLevel</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="number">14</span>:     HashMap&lt;String, Long&gt; timeUnitTable = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line"><span class="number">15</span>:     timeUnitTable.put(<span class="string">"s"</span>, <span class="number">1000L</span>);</div><div class="line"><span class="number">16</span>:     timeUnitTable.put(<span class="string">"m"</span>, <span class="number">1000L</span> * <span class="number">60</span>);</div><div class="line"><span class="number">17</span>:     timeUnitTable.put(<span class="string">"h"</span>, <span class="number">1000L</span> * <span class="number">60</span> * <span class="number">60</span>);</div><div class="line"><span class="number">18</span>:     timeUnitTable.put(<span class="string">"d"</span>, <span class="number">1000L</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>);</div><div class="line"><span class="number">19</span>: </div><div class="line"><span class="number">20</span>:     String levelString = <span class="keyword">this</span>.defaultMessageStore.getMessageStoreConfig().getMessageDelayLevel();</div><div class="line"><span class="number">21</span>:     <span class="keyword">try</span> &#123;</div><div class="line"><span class="number">22</span>:         String[] levelArray = levelString.split(<span class="string">" "</span>);</div><div class="line"><span class="number">23</span>:         <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; levelArray.length; i++) &#123;</div><div class="line"><span class="number">24</span>:             String value = levelArray[i];</div><div class="line"><span class="number">25</span>:             String ch = value.substring(value.length() - <span class="number">1</span>);</div><div class="line"><span class="number">26</span>:             Long tu = timeUnitTable.get(ch);</div><div class="line"><span class="number">27</span>: </div><div class="line"><span class="number">28</span>:             <span class="keyword">int</span> level = i + <span class="number">1</span>;</div><div class="line"><span class="number">29</span>:             <span class="keyword">if</span> (level &gt; <span class="keyword">this</span>.maxDelayLevel) &#123;</div><div class="line"><span class="number">30</span>:                 <span class="keyword">this</span>.maxDelayLevel = level;</div><div class="line"><span class="number">31</span>:             &#125;</div><div class="line"><span class="number">32</span>:             <span class="keyword">long</span> num = Long.parseLong(value.substring(<span class="number">0</span>, value.length() - <span class="number">1</span>));</div><div class="line"><span class="number">33</span>:             <span class="keyword">long</span> delayTimeMillis = tu * num;</div><div class="line"><span class="number">34</span>:             <span class="keyword">this</span>.delayLevelTable.put(level, delayTimeMillis);</div><div class="line"><span class="number">35</span>:         &#125;</div><div class="line"><span class="number">36</span>:     &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"><span class="number">37</span>:         log.error(<span class="string">"parseDelayLevel exception"</span>, e);</div><div class="line"><span class="number">38</span>:         log.info(<span class="string">"levelString String = &#123;&#125;"</span>, levelString);</div><div class="line"><span class="number">39</span>:         <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line"><span class="number">40</span>:     &#125;</div><div class="line"><span class="number">41</span>: </div><div class="line"><span class="number">42</span>:     <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line"><span class="number">43</span>: &#125;</div></pre></td></tr></table></figure></p>
</li>
</ul>
<h2>2.2 Producer 发送定时消息</h2>
<ul>
<li>🦅发送时，设置消息的<strong>延迟级别</strong>。</li>
</ul>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">Message msg = <span class="keyword">new</span> Message(...);</div><div class="line">msg.setDelayTimeLevel(level);</div></pre></td></tr></table></figure></p>
<h2>2.3 Broker 存储定时消息</h2>
<ul>
<li>🦅 存储消息时，延迟消息进入 <code>Topic</code> 为 <code>SCHEDULE_TOPIC_XXXX</code>。</li>
<li>🦅 延迟级别 与 消息队列编号 做<strong>固定映射：QueueId = DelayLevel - 1</strong>。</li>
</ul>
<p>核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="comment">// ⬇️⬇️⬇️【CommitLog.java】</span></div><div class="line"> <span class="number">2</span>: <span class="comment">/**</span></div><div class="line"> 3:  * 添加消息，返回消息结果</div><div class="line"> 4:  *</div><div class="line"> 5:  * <span class="doctag">@param</span> msg 消息</div><div class="line"> 6:  * <span class="doctag">@return</span> 结果</div><div class="line"> 7:  */</div><div class="line"> <span class="number">8</span>: <span class="function"><span class="keyword">public</span> PutMessageResult <span class="title">putMessage</span><span class="params">(<span class="keyword">final</span> MessageExtBrokerInner msg)</span> </span>&#123;</div><div class="line"> <span class="number">9</span>:     <span class="comment">// ....(省略代码) </span></div><div class="line"><span class="number">10</span>: </div><div class="line"><span class="number">11</span>:     <span class="comment">// 定时消息处理</span></div><div class="line"><span class="number">12</span>:     <span class="keyword">final</span> <span class="keyword">int</span> tranType = MessageSysFlag.getTransactionValue(msg.getSysFlag());</div><div class="line"><span class="number">13</span>:     <span class="keyword">if</span> (tranType == MessageSysFlag.TRANSACTION_NOT_TYPE<span class="comment">//</span></div><div class="line"><span class="number">14</span>:         || tranType == MessageSysFlag.TRANSACTION_COMMIT_TYPE) &#123;</div><div class="line"><span class="number">15</span>:         <span class="comment">// Delay Delivery</span></div><div class="line"><span class="number">16</span>:         <span class="keyword">if</span> (msg.getDelayTimeLevel() &gt; <span class="number">0</span>) &#123;</div><div class="line"><span class="number">17</span>:             <span class="keyword">if</span> (msg.getDelayTimeLevel() &gt; <span class="keyword">this</span>.defaultMessageStore.getScheduleMessageService().getMaxDelayLevel()) &#123;</div><div class="line"><span class="number">18</span>:                 msg.setDelayTimeLevel(<span class="keyword">this</span>.defaultMessageStore.getScheduleMessageService().getMaxDelayLevel());</div><div class="line"><span class="number">19</span>:             &#125;</div><div class="line"><span class="number">20</span>: </div><div class="line"><span class="number">21</span>:             <span class="comment">// 存储消息时，延迟消息进入 `Topic` 为 `SCHEDULE_TOPIC_XXXX` 。</span></div><div class="line"><span class="number">22</span>:             topic = ScheduleMessageService.SCHEDULE_TOPIC;</div><div class="line"><span class="number">23</span>: </div><div class="line"><span class="number">24</span>:             <span class="comment">// 延迟级别 与 消息队列编号 做固定映射</span></div><div class="line"><span class="number">25</span>:             queueId = ScheduleMessageService.delayLevel2QueueId(msg.getDelayTimeLevel());</div><div class="line"><span class="number">26</span>: </div><div class="line"><span class="number">27</span>:             <span class="comment">// Backup real topic, queueId</span></div><div class="line"><span class="number">28</span>:             MessageAccessor.putProperty(msg, MessageConst.PROPERTY_REAL_TOPIC, msg.getTopic());</div><div class="line"><span class="number">29</span>:             MessageAccessor.putProperty(msg, MessageConst.PROPERTY_REAL_QUEUE_ID, String.valueOf(msg.getQueueId()));</div><div class="line"><span class="number">30</span>:             msg.setPropertiesString(MessageDecoder.messageProperties2String(msg.getProperties()));</div><div class="line"><span class="number">31</span>: </div><div class="line"><span class="number">32</span>:             msg.setTopic(topic);</div><div class="line"><span class="number">33</span>:             msg.setQueueId(queueId);</div><div class="line"><span class="number">34</span>:         &#125;</div><div class="line"><span class="number">35</span>:     &#125;</div><div class="line"><span class="number">36</span>: </div><div class="line"><span class="number">37</span>:     <span class="comment">// ....(省略代码) </span></div><div class="line"><span class="number">38</span>: &#125;</div><div class="line"><span class="number">39</span>: </div><div class="line"><span class="number">40</span>: <span class="comment">// ⬇️⬇️⬇️【ScheduleMessageService.java】</span></div><div class="line"><span class="number">41</span>: <span class="comment">/**</span></div><div class="line">42:  * 根据 延迟级别 计算 消息队列编号</div><div class="line">43:  * QueueId = DelayLevel - 1</div><div class="line">44:  *</div><div class="line">45:  * <span class="doctag">@param</span> delayLevel 延迟级别</div><div class="line">46:  * <span class="doctag">@return</span> 消息队列编号</div><div class="line">47:  */</div><div class="line"><span class="number">48</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">delayLevel2QueueId</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> delayLevel)</span> </span>&#123;</div><div class="line"><span class="number">49</span>:     <span class="keyword">return</span> delayLevel - <span class="number">1</span>;</div><div class="line"><span class="number">50</span>: &#125;</div></pre></td></tr></table></figure></p>
<hr>
<ul>
<li>🦅 生成 <code>ConsumeQueue</code> 时，每条消息的 <code>tagsCode</code> 使用【消息计划消费时间】。这样，<code>ScheduleMessageService</code> 在轮询 <code>ConsumeQueue</code> 时，可以使用 <code>tagsCode</code> 进行过滤。</li>
</ul>
<p>核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="comment">// ⬇️⬇️⬇️【CommitLog.java】</span></div><div class="line"> <span class="number">2</span>: <span class="comment">/**</span></div><div class="line"> 3:  * check the message and returns the message size</div><div class="line"> 4:  *</div><div class="line"> 5:  * <span class="doctag">@return</span> 0 Come the end of the file // &gt;0 Normal messages // -1 Message checksum failure</div><div class="line"> 6:  */</div><div class="line"> <span class="number">7</span>: <span class="function"><span class="keyword">public</span> DispatchRequest <span class="title">checkMessageAndReturnSize</span><span class="params">(ByteBuffer byteBuffer, <span class="keyword">final</span> <span class="keyword">boolean</span> checkCRC, <span class="keyword">final</span> <span class="keyword">boolean</span> readBody)</span> </span>&#123;</div><div class="line"> <span class="number">8</span>:     <span class="keyword">try</span> &#123;</div><div class="line"> <span class="number">9</span>:         <span class="comment">// // ....(省略代码)</span></div><div class="line"><span class="number">10</span>: </div><div class="line"><span class="number">11</span>:         <span class="comment">// 17 properties</span></div><div class="line"><span class="number">12</span>:         <span class="keyword">short</span> propertiesLength = byteBuffer.getShort();</div><div class="line"><span class="number">13</span>:         <span class="keyword">if</span> (propertiesLength &gt; <span class="number">0</span>) &#123;</div><div class="line"><span class="number">14</span>:             <span class="comment">// ....(省略代码)</span></div><div class="line"><span class="number">15</span>:             String tags = propertiesMap.get(MessageConst.PROPERTY_TAGS);</div><div class="line"><span class="number">16</span>:             <span class="keyword">if</span> (tags != <span class="keyword">null</span> &amp;&amp; tags.length() &gt; <span class="number">0</span>) &#123;</div><div class="line"><span class="number">17</span>:                 tagsCode = MessageExtBrokerInner.tagsString2tagsCode(MessageExt.parseTopicFilterType(sysFlag), tags);</div><div class="line"><span class="number">18</span>:             &#125;</div><div class="line"><span class="number">19</span>: </div><div class="line"><span class="number">20</span>:             <span class="comment">// Timing message processing</span></div><div class="line"><span class="number">21</span>:             &#123;</div><div class="line"><span class="number">22</span>:                 String t = propertiesMap.get(MessageConst.PROPERTY_DELAY_TIME_LEVEL);</div><div class="line"><span class="number">23</span>:                 <span class="keyword">if</span> (ScheduleMessageService.SCHEDULE_TOPIC.equals(topic) &amp;&amp; t != <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">24</span>:                     <span class="keyword">int</span> delayLevel = Integer.parseInt(t);</div><div class="line"><span class="number">25</span>: </div><div class="line"><span class="number">26</span>:                     <span class="keyword">if</span> (delayLevel &gt; <span class="keyword">this</span>.defaultMessageStore.getScheduleMessageService().getMaxDelayLevel()) &#123;</div><div class="line"><span class="number">27</span>:                         delayLevel = <span class="keyword">this</span>.defaultMessageStore.getScheduleMessageService().getMaxDelayLevel();</div><div class="line"><span class="number">28</span>:                     &#125;</div><div class="line"><span class="number">29</span>: </div><div class="line"><span class="number">30</span>:                     <span class="keyword">if</span> (delayLevel &gt; <span class="number">0</span>) &#123;</div><div class="line"><span class="number">31</span>:                         tagsCode = <span class="keyword">this</span>.defaultMessageStore.getScheduleMessageService().computeDeliverTimestamp(delayLevel,</div><div class="line"><span class="number">32</span>:                             storeTimestamp);</div><div class="line"><span class="number">33</span>:                     &#125;</div><div class="line"><span class="number">34</span>:                 &#125;</div><div class="line"><span class="number">35</span>:             &#125;</div><div class="line"><span class="number">36</span>:         &#125;</div><div class="line"><span class="number">37</span>: </div><div class="line"><span class="number">38</span>:         <span class="comment">// ....(省略代码)</span></div><div class="line"><span class="number">39</span>: </div><div class="line"><span class="number">40</span>:         <span class="keyword">return</span> <span class="keyword">new</span> DispatchRequest(<span class="comment">//</span></div><div class="line"><span class="number">41</span>:             topic, <span class="comment">// 1</span></div><div class="line"><span class="number">42</span>:             queueId, <span class="comment">// 2</span></div><div class="line"><span class="number">43</span>:             physicOffset, <span class="comment">// 3</span></div><div class="line"><span class="number">44</span>:             totalSize, <span class="comment">// 4</span></div><div class="line"><span class="number">45</span>:             tagsCode, <span class="comment">// 5</span></div><div class="line"><span class="number">46</span>:             storeTimestamp, <span class="comment">// 6</span></div><div class="line"><span class="number">47</span>:             queueOffset, <span class="comment">// 7</span></div><div class="line"><span class="number">48</span>:             keys, <span class="comment">// 8</span></div><div class="line"><span class="number">49</span>:             uniqKey, <span class="comment">//9</span></div><div class="line"><span class="number">50</span>:             sysFlag, <span class="comment">// 9</span></div><div class="line"><span class="number">51</span>:             preparedTransactionOffset<span class="comment">// 10</span></div><div class="line"><span class="number">52</span>:         );</div><div class="line"><span class="number">53</span>:     &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"><span class="number">54</span>:     &#125;</div><div class="line"><span class="number">55</span>: </div><div class="line"><span class="number">56</span>:     <span class="keyword">return</span> <span class="keyword">new</span> DispatchRequest(-<span class="number">1</span>, <span class="keyword">false</span> <span class="comment">/* success */</span>);</div><div class="line"><span class="number">57</span>: &#125;</div><div class="line"><span class="number">58</span>: </div><div class="line"><span class="number">59</span>: <span class="comment">// ⬇️⬇️⬇️【ScheduleMessageService.java】</span></div><div class="line"><span class="number">60</span>: <span class="comment">/**</span></div><div class="line">61:  * 计算 投递时间【计划消费时间】</div><div class="line">62:  *</div><div class="line">63:  * <span class="doctag">@param</span> delayLevel 延迟级别</div><div class="line">64:  * <span class="doctag">@param</span> storeTimestamp 存储时间</div><div class="line">65:  * <span class="doctag">@return</span> 投递时间【计划消费时间】</div><div class="line">66:  */</div><div class="line"><span class="number">67</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">computeDeliverTimestamp</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> delayLevel, <span class="keyword">final</span> <span class="keyword">long</span> storeTimestamp)</span> </span>&#123;</div><div class="line"><span class="number">68</span>:     Long time = <span class="keyword">this</span>.delayLevelTable.get(delayLevel);</div><div class="line"><span class="number">69</span>:     <span class="keyword">if</span> (time != <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">70</span>:         <span class="keyword">return</span> time + storeTimestamp;</div><div class="line"><span class="number">71</span>:     &#125;</div><div class="line"><span class="number">72</span>: </div><div class="line"><span class="number">73</span>:     <span class="keyword">return</span> storeTimestamp + <span class="number">1000</span>;</div><div class="line"><span class="number">74</span>: &#125;</div></pre></td></tr></table></figure></p>
<h2>2.4 Broker 发送定时消息</h2>
<ul>
<li>🦅 对 <code>SCHEDULE_TOPIC_XXXX</code> 每条消费队列对应<strong>单独一个</strong>定时任务进行轮询，发送 <strong>到达投递时间【计划消费时间】</strong> 的消息。</li>
</ul>
<p>下图是发送定时消息的处理逻辑图：</p>
<p><img src="http://www.yunai.me/images/RocketMQ/2017_05_15/01.png" alt="定时消息定时逻辑"></p>
<p>实现代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">  <span class="number">1</span>: <span class="comment">/**</span></div><div class="line">  2:  * ⬇️⬇️⬇️ 发送（投递）延迟消息定时任务</div><div class="line">  3:  */</div><div class="line">  <span class="number">4</span>: <span class="class"><span class="keyword">class</span> <span class="title">DeliverDelayedMessageTimerTask</span> <span class="keyword">extends</span> <span class="title">TimerTask</span> </span>&#123;</div><div class="line">  <span class="number">5</span>:     <span class="comment">/**</span></div><div class="line">  6:      * 延迟级别</div><div class="line">  7:      */</div><div class="line">  <span class="number">8</span>:     <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> delayLevel;</div><div class="line">  <span class="number">9</span>:     <span class="comment">/**</span></div><div class="line"> 10:      * 位置</div><div class="line"> 11:      */</div><div class="line"> <span class="number">12</span>:     <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> offset;</div><div class="line"> <span class="number">13</span>: </div><div class="line"> <span class="number">14</span>:     <span class="function"><span class="keyword">public</span> <span class="title">DeliverDelayedMessageTimerTask</span><span class="params">(<span class="keyword">int</span> delayLevel, <span class="keyword">long</span> offset)</span> </span>&#123;</div><div class="line"> <span class="number">15</span>:         <span class="keyword">this</span>.delayLevel = delayLevel;</div><div class="line"> <span class="number">16</span>:         <span class="keyword">this</span>.offset = offset;</div><div class="line"> <span class="number">17</span>:     &#125;</div><div class="line"> <span class="number">18</span>: </div><div class="line"> <span class="number">19</span>:     <span class="meta">@Override</span></div><div class="line"> <span class="number">20</span>:     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line"> <span class="number">21</span>:         <span class="keyword">try</span> &#123;</div><div class="line"> <span class="number">22</span>:             <span class="keyword">this</span>.executeOnTimeup();</div><div class="line"> <span class="number">23</span>:         &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"> <span class="number">24</span>:             <span class="comment">// <span class="doctag">XXX:</span> warn and notify me</span></div><div class="line"> <span class="number">25</span>:             log.error(<span class="string">"ScheduleMessageService, executeOnTimeup exception"</span>, e);</div><div class="line"> <span class="number">26</span>:             ScheduleMessageService.<span class="keyword">this</span>.timer.schedule(<span class="keyword">new</span> DeliverDelayedMessageTimerTask(</div><div class="line"> <span class="number">27</span>:                 <span class="keyword">this</span>.delayLevel, <span class="keyword">this</span>.offset), DELAY_FOR_A_PERIOD);</div><div class="line"> <span class="number">28</span>:         &#125;</div><div class="line"> <span class="number">29</span>:     &#125;</div><div class="line"> <span class="number">30</span>: </div><div class="line"> <span class="number">31</span>:     <span class="comment">/**</span></div><div class="line"> 32:      * 纠正可投递时间。</div><div class="line"> 33:      * 因为发送级别对应的发送间隔可以调整，如果超过当前间隔，则修正成当前配置，避免后面的消息无法发送。</div><div class="line"> 34:      *</div><div class="line"> 35:      * <span class="doctag">@param</span> now 当前时间</div><div class="line"> 36:      * <span class="doctag">@param</span> deliverTimestamp 投递时间</div><div class="line"> 37:      * <span class="doctag">@return</span> 纠正结果</div><div class="line"> 38:      */</div><div class="line"> <span class="number">39</span>:     <span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">correctDeliverTimestamp</span><span class="params">(<span class="keyword">final</span> <span class="keyword">long</span> now, <span class="keyword">final</span> <span class="keyword">long</span> deliverTimestamp)</span> </span>&#123;</div><div class="line"> <span class="number">40</span>:         <span class="keyword">long</span> result = deliverTimestamp;</div><div class="line"> <span class="number">41</span>: </div><div class="line"> <span class="number">42</span>:         <span class="keyword">long</span> maxTimestamp = now + ScheduleMessageService.<span class="keyword">this</span>.delayLevelTable.get(<span class="keyword">this</span>.delayLevel);</div><div class="line"> <span class="number">43</span>:         <span class="keyword">if</span> (deliverTimestamp &gt; maxTimestamp) &#123;</div><div class="line"> <span class="number">44</span>:             result = now;</div><div class="line"> <span class="number">45</span>:         &#125;</div><div class="line"> <span class="number">46</span>: </div><div class="line"> <span class="number">47</span>:         <span class="keyword">return</span> result;</div><div class="line"> <span class="number">48</span>:     &#125;</div><div class="line"> <span class="number">49</span>: </div><div class="line"> <span class="number">50</span>:     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">executeOnTimeup</span><span class="params">()</span> </span>&#123;</div><div class="line"> <span class="number">51</span>:         ConsumeQueue cq = ScheduleMessageService.<span class="keyword">this</span>.defaultMessageStore.findConsumeQueue(SCHEDULE_TOPIC,  delayLevel2QueueId(delayLevel));</div><div class="line"> <span class="number">52</span>: </div><div class="line"> <span class="number">53</span>:         <span class="keyword">long</span> failScheduleOffset = offset;</div><div class="line"> <span class="number">54</span>: </div><div class="line"> <span class="number">55</span>:         <span class="keyword">if</span> (cq != <span class="keyword">null</span>) &#123;</div><div class="line"> <span class="number">56</span>:             SelectMappedBufferResult bufferCQ = cq.getIndexBuffer(<span class="keyword">this</span>.offset);</div><div class="line"> <span class="number">57</span>:             <span class="keyword">if</span> (bufferCQ != <span class="keyword">null</span>) &#123;</div><div class="line"> <span class="number">58</span>:                 <span class="keyword">try</span> &#123;</div><div class="line"> <span class="number">59</span>:                     <span class="keyword">long</span> nextOffset = offset;</div><div class="line"> <span class="number">60</span>:                     <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line"> <span class="number">61</span>:                     <span class="keyword">for</span> (; i &lt; bufferCQ.getSize(); i += ConsumeQueue.CQ_STORE_UNIT_SIZE) &#123;</div><div class="line"> <span class="number">62</span>:                         <span class="keyword">long</span> offsetPy = bufferCQ.getByteBuffer().getLong();</div><div class="line"> <span class="number">63</span>:                         <span class="keyword">int</span> sizePy = bufferCQ.getByteBuffer().getInt();</div><div class="line"> <span class="number">64</span>:                         <span class="keyword">long</span> tagsCode = bufferCQ.getByteBuffer().getLong();</div><div class="line"> <span class="number">65</span>: </div><div class="line"> <span class="number">66</span>:                         <span class="keyword">long</span> now = System.currentTimeMillis();</div><div class="line"> <span class="number">67</span>:                         <span class="keyword">long</span> deliverTimestamp = <span class="keyword">this</span>.correctDeliverTimestamp(now, tagsCode);</div><div class="line"> <span class="number">68</span>: </div><div class="line"> <span class="number">69</span>:                         nextOffset = offset + (i / ConsumeQueue.CQ_STORE_UNIT_SIZE);</div><div class="line"> <span class="number">70</span>: </div><div class="line"> <span class="number">71</span>:                         <span class="keyword">long</span> countdown = deliverTimestamp - now;</div><div class="line"> <span class="number">72</span>: </div><div class="line"> <span class="number">73</span>:                         <span class="keyword">if</span> (countdown &lt;= <span class="number">0</span>) &#123; <span class="comment">// 消息到达可发送时间</span></div><div class="line"> <span class="number">74</span>:                             MessageExt msgExt = ScheduleMessageService.<span class="keyword">this</span>.defaultMessageStore.lookMessageByOffset(offsetPy, sizePy);</div><div class="line"> <span class="number">75</span>:                             <span class="keyword">if</span> (msgExt != <span class="keyword">null</span>) &#123;</div><div class="line"> <span class="number">76</span>:                                 <span class="keyword">try</span> &#123;</div><div class="line"> <span class="number">77</span>:                                     <span class="comment">// 发送消息</span></div><div class="line"> <span class="number">78</span>:                                     MessageExtBrokerInner msgInner = <span class="keyword">this</span>.messageTimeup(msgExt);</div><div class="line"> <span class="number">79</span>:                                     PutMessageResult putMessageResult = ScheduleMessageService.<span class="keyword">this</span>.defaultMessageStore.putMessage(msgInner);</div><div class="line"> <span class="number">80</span>:                                     <span class="keyword">if</span> (putMessageResult != <span class="keyword">null</span> &amp;&amp; putMessageResult.getPutMessageStatus() == PutMessageStatus.PUT_OK) &#123; <span class="comment">// 发送成功</span></div><div class="line"> <span class="number">81</span>:                                         <span class="keyword">continue</span>;</div><div class="line"> <span class="number">82</span>:                                     &#125; <span class="keyword">else</span> &#123; <span class="comment">// 发送失败</span></div><div class="line"> <span class="number">83</span>:                                         <span class="comment">// <span class="doctag">XXX:</span> warn and notify me</span></div><div class="line"> <span class="number">84</span>:                                         log.error(<span class="string">"ScheduleMessageService, a message time up, but reput it failed, topic: &#123;&#125; msgId &#123;&#125;"</span>, msgExt.getTopic(), msgExt.getMsgId());</div><div class="line"> <span class="number">85</span>: </div><div class="line"> <span class="number">86</span>:                                         <span class="comment">// 安排下一次任务</span></div><div class="line"> <span class="number">87</span>:                                         ScheduleMessageService.<span class="keyword">this</span>.timer.schedule(<span class="keyword">new</span> DeliverDelayedMessageTimerTask(<span class="keyword">this</span>.delayLevel, nextOffset), DELAY_FOR_A_PERIOD);</div><div class="line"> <span class="number">88</span>: </div><div class="line"> <span class="number">89</span>:                                         <span class="comment">// 更新进度</span></div><div class="line"> <span class="number">90</span>:                                         ScheduleMessageService.<span class="keyword">this</span>.updateOffset(<span class="keyword">this</span>.delayLevel, nextOffset);</div><div class="line"> <span class="number">91</span>:                                         <span class="keyword">return</span>;</div><div class="line"> <span class="number">92</span>:                                     &#125;</div><div class="line"> <span class="number">93</span>:                                 &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"> <span class="number">94</span>:                                     <span class="comment">// <span class="doctag">XXX:</span> warn and notify me</span></div><div class="line"> <span class="number">95</span>:                                     log.error(<span class="string">"ScheduleMessageService, messageTimeup execute error, drop it. msgExt="</span></div><div class="line"> <span class="number">96</span>:                                             + msgExt + <span class="string">", nextOffset="</span> + nextOffset + <span class="string">",offsetPy="</span> + offsetPy + <span class="string">",sizePy="</span> + sizePy, e);</div><div class="line"> <span class="number">97</span>:                                 &#125;</div><div class="line"> <span class="number">98</span>:                             &#125;</div><div class="line"> <span class="number">99</span>:                         &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">100</span>:                             <span class="comment">// 安排下一次任务</span></div><div class="line"><span class="number">101</span>:                             ScheduleMessageService.<span class="keyword">this</span>.timer.schedule(<span class="keyword">new</span> DeliverDelayedMessageTimerTask(<span class="keyword">this</span>.delayLevel, nextOffset), countdown);</div><div class="line"><span class="number">102</span>: </div><div class="line"><span class="number">103</span>:                             <span class="comment">// 更新进度</span></div><div class="line"><span class="number">104</span>:                             ScheduleMessageService.<span class="keyword">this</span>.updateOffset(<span class="keyword">this</span>.delayLevel, nextOffset);</div><div class="line"><span class="number">105</span>:                             <span class="keyword">return</span>;</div><div class="line"><span class="number">106</span>:                         &#125;</div><div class="line"><span class="number">107</span>:                     &#125; <span class="comment">// end of for</span></div><div class="line"><span class="number">108</span>: </div><div class="line"><span class="number">109</span>:                     nextOffset = offset + (i / ConsumeQueue.CQ_STORE_UNIT_SIZE);</div><div class="line"><span class="number">110</span>: </div><div class="line"><span class="number">111</span>:                     <span class="comment">// 安排下一次任务</span></div><div class="line"><span class="number">112</span>:                     ScheduleMessageService.<span class="keyword">this</span>.timer.schedule(<span class="keyword">new</span> DeliverDelayedMessageTimerTask(<span class="keyword">this</span>.delayLevel, nextOffset), DELAY_FOR_A_WHILE);</div><div class="line"><span class="number">113</span>: </div><div class="line"><span class="number">114</span>:                     <span class="comment">// 更新进度</span></div><div class="line"><span class="number">115</span>:                     ScheduleMessageService.<span class="keyword">this</span>.updateOffset(<span class="keyword">this</span>.delayLevel, nextOffset);</div><div class="line"><span class="number">116</span>:                     <span class="keyword">return</span>;</div><div class="line"><span class="number">117</span>:                 &#125; <span class="keyword">finally</span> &#123;</div><div class="line"><span class="number">118</span>:                     bufferCQ.release();</div><div class="line"><span class="number">119</span>:                 &#125;</div><div class="line"><span class="number">120</span>:             &#125; <span class="comment">// end of if (bufferCQ != null)</span></div><div class="line"><span class="number">121</span>:             <span class="keyword">else</span> &#123; <span class="comment">// 消费队列已经被删除部分，跳转到最小的消费进度</span></div><div class="line"><span class="number">122</span>:                 <span class="keyword">long</span> cqMinOffset = cq.getMinOffsetInQueue();</div><div class="line"><span class="number">123</span>:                 <span class="keyword">if</span> (offset &lt; cqMinOffset) &#123;</div><div class="line"><span class="number">124</span>:                     failScheduleOffset = cqMinOffset;</div><div class="line"><span class="number">125</span>:                     log.error(<span class="string">"schedule CQ offset invalid. offset="</span> + offset + <span class="string">", cqMinOffset="</span></div><div class="line"><span class="number">126</span>:                         + cqMinOffset + <span class="string">", queueId="</span> + cq.getQueueId());</div><div class="line"><span class="number">127</span>:                 &#125;</div><div class="line"><span class="number">128</span>:             &#125;</div><div class="line"><span class="number">129</span>:         &#125; <span class="comment">// end of if (cq != null)</span></div><div class="line"><span class="number">130</span>: </div><div class="line"><span class="number">131</span>:         ScheduleMessageService.<span class="keyword">this</span>.timer.schedule(<span class="keyword">new</span> DeliverDelayedMessageTimerTask(<span class="keyword">this</span>.delayLevel, failScheduleOffset), DELAY_FOR_A_WHILE);</div><div class="line"><span class="number">132</span>:     &#125;</div><div class="line"><span class="number">133</span>: </div><div class="line"><span class="number">134</span>:     <span class="comment">/**</span></div><div class="line">135:      * 设置消息内容</div><div class="line">136:      *</div><div class="line">137:      * <span class="doctag">@param</span> msgExt 消息</div><div class="line">138:      * <span class="doctag">@return</span> 消息</div><div class="line">139:      */</div><div class="line"><span class="number">140</span>:     <span class="function"><span class="keyword">private</span> MessageExtBrokerInner <span class="title">messageTimeup</span><span class="params">(MessageExt msgExt)</span> </span>&#123;</div><div class="line"><span class="number">141</span>:         MessageExtBrokerInner msgInner = <span class="keyword">new</span> MessageExtBrokerInner();</div><div class="line"><span class="number">142</span>:         msgInner.setBody(msgExt.getBody());</div><div class="line"><span class="number">143</span>:         msgInner.setFlag(msgExt.getFlag());</div><div class="line"><span class="number">144</span>:         MessageAccessor.setProperties(msgInner, msgExt.getProperties());</div><div class="line"><span class="number">145</span>: </div><div class="line"><span class="number">146</span>:         TopicFilterType topicFilterType = MessageExt.parseTopicFilterType(msgInner.getSysFlag());</div><div class="line"><span class="number">147</span>:         <span class="keyword">long</span> tagsCodeValue =</div><div class="line"><span class="number">148</span>:             MessageExtBrokerInner.tagsString2tagsCode(topicFilterType, msgInner.getTags());</div><div class="line"><span class="number">149</span>:         msgInner.setTagsCode(tagsCodeValue);</div><div class="line"><span class="number">150</span>:         msgInner.setPropertiesString(MessageDecoder.messageProperties2String(msgExt.getProperties()));</div><div class="line"><span class="number">151</span>: </div><div class="line"><span class="number">152</span>:         msgInner.setSysFlag(msgExt.getSysFlag());</div><div class="line"><span class="number">153</span>:         msgInner.setBornTimestamp(msgExt.getBornTimestamp());</div><div class="line"><span class="number">154</span>:         msgInner.setBornHost(msgExt.getBornHost());</div><div class="line"><span class="number">155</span>:         msgInner.setStoreHost(msgExt.getStoreHost());</div><div class="line"><span class="number">156</span>:         msgInner.setReconsumeTimes(msgExt.getReconsumeTimes());</div><div class="line"><span class="number">157</span>: </div><div class="line"><span class="number">158</span>:         msgInner.setWaitStoreMsgOK(<span class="keyword">false</span>);</div><div class="line"><span class="number">159</span>:         MessageAccessor.clearProperty(msgInner, MessageConst.PROPERTY_DELAY_TIME_LEVEL);</div><div class="line"><span class="number">160</span>: </div><div class="line"><span class="number">161</span>:         msgInner.setTopic(msgInner.getProperty(MessageConst.PROPERTY_REAL_TOPIC));</div><div class="line"><span class="number">162</span>: </div><div class="line"><span class="number">163</span>:         String queueIdStr = msgInner.getProperty(MessageConst.PROPERTY_REAL_QUEUE_ID);</div><div class="line"><span class="number">164</span>:         <span class="keyword">int</span> queueId = Integer.parseInt(queueIdStr);</div><div class="line"><span class="number">165</span>:         msgInner.setQueueId(queueId);</div><div class="line"><span class="number">166</span>: </div><div class="line"><span class="number">167</span>:         <span class="keyword">return</span> msgInner;</div><div class="line"><span class="number">168</span>:     &#125;</div><div class="line"><span class="number">169</span>: &#125;</div></pre></td></tr></table></figure></p>
<h2>2.5 Broker 持久化定时发送进度</h2>
<ul>
<li>🦅 定时消息发送进度存储在文件(<code>../config/delayOffset.json</code>)里</li>
<li>🦅 每 10s 定时持久化发送进度。</li>
</ul>
<p>核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="comment">// ⬇️⬇️⬇️【ScheduleMessageService.java】</span></div><div class="line"> <span class="number">2</span>: <span class="comment">/**</span></div><div class="line"> 3: public void start() &#123;</div><div class="line"> 4:     // 定时发送消息</div><div class="line"> 5:     for (Map.Entry&lt;Integer, Long&gt; entry : this.delayLevelTable.entrySet()) &#123;</div><div class="line"> 6:         Integer level = entry.getKey();</div><div class="line"> 7:         Long timeDelay = entry.getValue();</div><div class="line"> 8:         Long offset = this.offsetTable.get(level);</div><div class="line"> 9:         if (null == offset) &#123;</div><div class="line">10:             offset = 0L;</div><div class="line">11:         &#125;</div><div class="line">12: </div><div class="line">13:         if (timeDelay != null) &#123;</div><div class="line">14:             this.timer.schedule(new DeliverDelayedMessageTimerTask(level, offset), FIRST_DELAY_TIME);</div><div class="line">15:         &#125;</div><div class="line">16:     &#125;</div><div class="line">17: </div><div class="line">18:     // 定时持久化发送进度</div><div class="line">19:     this.timer.scheduleAtFixedRate(new TimerTask() &#123;</div><div class="line">20: </div><div class="line">21:         <span class="doctag">@Override</span></div><div class="line">22:         public void run() &#123;</div><div class="line">23:             try &#123;</div><div class="line">24:                 ScheduleMessageService.this.persist();</div><div class="line">25:             &#125; catch (Exception e) &#123;</div><div class="line">26:                 log.error("scheduleAtFixedRate flush exception", e);</div><div class="line">27:             &#125;</div><div class="line">28:         &#125;</div><div class="line">29:     &#125;, 10000, this.defaultMessageStore.getMessageStoreConfig().getFlushDelayOffsetInterval());</div><div class="line">30: &#125;</div></pre></td></tr></table></figure></p>
<h1>3. 消息重试</h1>
<blockquote>
<p>Consumer 消费消息失败后，要提供一种重试机制，令消息再消费一次。</p>
</blockquote>
<ul>
<li>🦅 <code>Consumer</code> 将消费失败的消息发回 <code>Broker</code>，进入<strong>延迟消息队列</strong>。即，消费失败的消息，不会立即消费。</li>
</ul>
<p>核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="comment">// ⬇️⬇️⬇️【SendMessageProcessor.java】</span></div><div class="line"> <span class="number">2</span>: <span class="comment">/**</span></div><div class="line"> 3:  * 消费者发回消息</div><div class="line"> 4:  *</div><div class="line"> 5:  * <span class="doctag">@param</span> ctx ctx</div><div class="line"> 6:  * <span class="doctag">@param</span> request 请求</div><div class="line"> 7:  * <span class="doctag">@return</span> 响应</div><div class="line"> 8:  * <span class="doctag">@throws</span> RemotingCommandException 当远程调用异常</div><div class="line"> 9:  */</div><div class="line"><span class="number">10</span>: <span class="function"><span class="keyword">private</span> RemotingCommand <span class="title">consumerSendMsgBack</span><span class="params">(<span class="keyword">final</span> ChannelHandlerContext ctx, <span class="keyword">final</span> RemotingCommand request)</span></span></div><div class="line">11:     <span class="keyword">throws</span> RemotingCommandException &#123;</div><div class="line"><span class="number">12</span>:     <span class="comment">// ....(省略代码)</span></div><div class="line"><span class="number">13</span>:     <span class="comment">// 处理 delayLevel（独有）。</span></div><div class="line"><span class="number">14</span>:     <span class="keyword">int</span> delayLevel = requestHeader.getDelayLevel();</div><div class="line"><span class="number">15</span>:     <span class="keyword">int</span> maxReconsumeTimes = subscriptionGroupConfig.getRetryMaxTimes();</div><div class="line"><span class="number">16</span>:     <span class="keyword">if</span> (request.getVersion() &gt;= MQVersion.Version.V3_4_9.ordinal()) &#123;</div><div class="line"><span class="number">17</span>:         maxReconsumeTimes = requestHeader.getMaxReconsumeTimes();</div><div class="line"><span class="number">18</span>:     &#125;</div><div class="line"><span class="number">19</span>:     <span class="keyword">if</span> (msgExt.getReconsumeTimes() &gt;= maxReconsumeTimes<span class="comment">//</span></div><div class="line"><span class="number">20</span>:     <span class="comment">// ....(省略代码)</span></div><div class="line"><span class="number">21</span>:     &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">22</span>:         <span class="keyword">if</span> (<span class="number">0</span> == delayLevel) &#123;</div><div class="line"><span class="number">23</span>:             delayLevel = <span class="number">3</span> + msgExt.getReconsumeTimes();</div><div class="line"><span class="number">24</span>:         &#125;</div><div class="line"><span class="number">25</span>:         msgExt.setDelayTimeLevel(delayLevel);</div><div class="line"><span class="number">26</span>:     &#125;</div><div class="line"><span class="number">27</span>: </div><div class="line"><span class="number">28</span>:     <span class="comment">// ....(省略代码)</span></div><div class="line"><span class="number">29</span>:     <span class="keyword">return</span> response;</div><div class="line"><span class="number">30</span>: &#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://www.yunai.me/images/common/wechat_mp.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;🙂🙂🙂关注**微信公众号：【芋艿的后端小屋】**有福利：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Rock
    
    </summary>
    
      <category term="RocketMQ" scheme="http://www.yunai.me/categories/RocketMQ/"/>
    
    
  </entry>
  
  <entry>
    <title>RocketMQ 源码分析 —— 高可用</title>
    <link href="http://www.yunai.me/RocketMQ/high-availability/"/>
    <id>http://www.yunai.me/RocketMQ/high-availability/</id>
    <published>2017-05-13T16:00:00.000Z</published>
    <updated>2017-07-27T16:57:05.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://www.yunai.me/images/common/wechat_mp.jpeg" alt=""></p>
<blockquote>
<p>🙂🙂🙂关注**微信公众号：【芋艿的后端小屋】**有福利：</p>
<ol>
<li>RocketMQ / MyCAT / Sharding-JDBC <strong>所有</strong>源码分析文章列表</li>
<li>RocketMQ / MyCAT / Sharding-JDBC <strong>中文注释源码 GitHub 地址</strong></li>
<li>您对于源码的疑问每条留言<strong>都</strong>将得到<strong>认真</strong>回复。<strong>甚至不知道如何读源码也可以请教噢</strong>。</li>
<li><strong>新的</strong>源码解析文章<strong>实时</strong>收到通知。<strong>每周更新一篇左右</strong>。</li>
<li><strong>认真的</strong>源码交流微信群。</li>
</ol>
</blockquote>
<hr>
<ul>
<li><a href="#">1. 概述</a></li>
<li><a href="#">2. Namesrv 高可用</a>
<ul>
<li><a href="#">2.1 Broker 注册到 Namesrv</a></li>
<li><a href="#">2.2 Producer、Consumer 访问 Namesrv</a></li>
</ul>
</li>
<li><a href="#">3. Broker 高可用</a>
<ul>
<li><a href="#">3.2 Broker 主从</a>
<ul>
<li><a href="#">3.1.1 配置</a></li>
<li><a href="#">3.1.2 组件</a></li>
<li><a href="#">3.1.3 通信协议</a></li>
<li><a href="#">3.1.4 Slave</a></li>
<li><a href="#">3.1.5 Master</a></li>
<li><a href="#">3.1.6 Master_SYNC</a></li>
</ul>
</li>
<li><a href="#">3.2 Producer 发送消息</a></li>
<li><a href="#">3.3 Consumer 消费消息</a></li>
</ul>
</li>
<li><a href="#">4. 总结</a></li>
</ul>
<h1>1. 概述</h1>
<p>本文主要解析 <code>Namesrv</code>、<code>Broker</code> 如何实现高可用，<code>Producer</code>、<code>Consumer</code> 怎么与它们通信保证高可用。</p>
<h1>2. Namesrv 高可用</h1>
<p><strong>启动多个 <code>Namesrv</code> 实现高可用。</strong><br>
相较于 <code>Zookeeper</code>、<code>Consul</code>、<code>Etcd</code> 等，<code>Namesrv</code> 是一个<strong>超轻量级</strong>的注册中心，提供<strong>命名服务</strong>。</p>
<h2>2.1 Broker 注册到 Namesrv</h2>
<ul>
<li>📌 <strong>多个 <code>Namesrv</code> 之间，没有任何关系（不存在类似 <code>Zookeeper</code> 的 <code>Leader</code>/<code>Follower</code> 等角色），不进行通信与数据同步。通过 <code>Broker</code> 循环注册多个 <code>Namesrv</code>。</strong></li>
</ul>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="comment">// ⬇️⬇️⬇️【BrokerOuterAPI.java】</span></div><div class="line"> <span class="number">2</span>: <span class="function"><span class="keyword">public</span> RegisterBrokerResult <span class="title">registerBrokerAll</span><span class="params">(</span></span></div><div class="line"> <span class="number">3</span>:     <span class="keyword">final</span> String clusterName,</div><div class="line"> <span class="number">4</span>:     <span class="keyword">final</span> String brokerAddr,</div><div class="line"> <span class="number">5</span>:     <span class="keyword">final</span> String brokerName,</div><div class="line"> <span class="number">6</span>:     <span class="keyword">final</span> <span class="keyword">long</span> brokerId,</div><div class="line"> <span class="number">7</span>:     <span class="keyword">final</span> String haServerAddr,</div><div class="line"> <span class="number">8</span>:     <span class="keyword">final</span> TopicConfigSerializeWrapper topicConfigWrapper,</div><div class="line"> <span class="number">9</span>:     <span class="keyword">final</span> List&lt;String&gt; filterServerList,</div><div class="line"><span class="number">10</span>:     <span class="keyword">final</span> <span class="keyword">boolean</span> oneway,</div><div class="line"><span class="number">11</span>:     <span class="keyword">final</span> <span class="keyword">int</span> timeoutMills) &#123;</div><div class="line"><span class="number">12</span>:     RegisterBrokerResult registerBrokerResult = <span class="keyword">null</span>;</div><div class="line"><span class="number">13</span>: </div><div class="line"><span class="number">14</span>:     List&lt;String&gt; nameServerAddressList = <span class="keyword">this</span>.remotingClient.getNameServerAddressList();</div><div class="line"><span class="number">15</span>:     <span class="keyword">if</span> (nameServerAddressList != <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">16</span>:         <span class="keyword">for</span> (String namesrvAddr : nameServerAddressList) &#123; <span class="comment">// 循环多个 Namesrv</span></div><div class="line"><span class="number">17</span>:             <span class="keyword">try</span> &#123;</div><div class="line"><span class="number">18</span>:                 RegisterBrokerResult result = <span class="keyword">this</span>.registerBroker(namesrvAddr, clusterName, brokerAddr, brokerName, brokerId,</div><div class="line"><span class="number">19</span>:                     haServerAddr, topicConfigWrapper, filterServerList, oneway, timeoutMills);</div><div class="line"><span class="number">20</span>:                 <span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">21</span>:                     registerBrokerResult = result;</div><div class="line"><span class="number">22</span>:                 &#125;</div><div class="line"><span class="number">23</span>: </div><div class="line"><span class="number">24</span>:                 log.info(<span class="string">"register broker to name server &#123;&#125; OK"</span>, namesrvAddr);</div><div class="line"><span class="number">25</span>:             &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"><span class="number">26</span>:                 log.warn(<span class="string">"registerBroker Exception, &#123;&#125;"</span>, namesrvAddr, e);</div><div class="line"><span class="number">27</span>:             &#125;</div><div class="line"><span class="number">28</span>:         &#125;</div><div class="line"><span class="number">29</span>:     &#125;</div><div class="line"><span class="number">30</span>: </div><div class="line"><span class="number">31</span>:     <span class="keyword">return</span> registerBrokerResult;</div><div class="line"><span class="number">32</span>: &#125;</div></pre></td></tr></table></figure></p>
<h2>2.2 Producer、Consumer 访问 Namesrv</h2>
<ul>
<li>📌 <strong><code>Producer</code>、<code>Consumer</code> 从 <code>Namesrv</code>列表选择一个可连接的进行通信。</strong></li>
</ul>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="comment">// ⬇️⬇️⬇️【NettyRemotingClient.java】</span></div><div class="line"> <span class="number">2</span>: <span class="function"><span class="keyword">private</span> Channel <span class="title">getAndCreateNameserverChannel</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line"> <span class="number">3</span>:     <span class="comment">// 返回已选择、可连接Namesrv</span></div><div class="line"> <span class="number">4</span>:     String addr = <span class="keyword">this</span>.namesrvAddrChoosed.get();</div><div class="line"> <span class="number">5</span>:     <span class="keyword">if</span> (addr != <span class="keyword">null</span>) &#123;</div><div class="line"> <span class="number">6</span>:         ChannelWrapper cw = <span class="keyword">this</span>.channelTables.get(addr);</div><div class="line"> <span class="number">7</span>:         <span class="keyword">if</span> (cw != <span class="keyword">null</span> &amp;&amp; cw.isOK()) &#123;</div><div class="line"> <span class="number">8</span>:             <span class="keyword">return</span> cw.getChannel();</div><div class="line"> <span class="number">9</span>:         &#125;</div><div class="line"><span class="number">10</span>:     &#125;</div><div class="line"><span class="number">11</span>:     <span class="comment">//</span></div><div class="line"><span class="number">12</span>:     <span class="keyword">final</span> List&lt;String&gt; addrList = <span class="keyword">this</span>.namesrvAddrList.get();</div><div class="line"><span class="number">13</span>:     <span class="keyword">if</span> (<span class="keyword">this</span>.lockNamesrvChannel.tryLock(LOCK_TIMEOUT_MILLIS, TimeUnit.MILLISECONDS)) &#123;</div><div class="line"><span class="number">14</span>:         <span class="keyword">try</span> &#123;</div><div class="line"><span class="number">15</span>:             <span class="comment">// 返回已选择、可连接的Namesrv</span></div><div class="line"><span class="number">16</span>:             addr = <span class="keyword">this</span>.namesrvAddrChoosed.get();</div><div class="line"><span class="number">17</span>:             <span class="keyword">if</span> (addr != <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">18</span>:                 ChannelWrapper cw = <span class="keyword">this</span>.channelTables.get(addr);</div><div class="line"><span class="number">19</span>:                 <span class="keyword">if</span> (cw != <span class="keyword">null</span> &amp;&amp; cw.isOK()) &#123;</div><div class="line"><span class="number">20</span>:                     <span class="keyword">return</span> cw.getChannel();</div><div class="line"><span class="number">21</span>:                 &#125;</div><div class="line"><span class="number">22</span>:             &#125;</div><div class="line"><span class="number">23</span>:             <span class="comment">// 从【Namesrv列表】中选择一个连接的返回</span></div><div class="line"><span class="number">24</span>:             <span class="keyword">if</span> (addrList != <span class="keyword">null</span> &amp;&amp; !addrList.isEmpty()) &#123;</div><div class="line"><span class="number">25</span>:                 <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; addrList.size(); i++) &#123;</div><div class="line"><span class="number">26</span>:                     <span class="keyword">int</span> index = <span class="keyword">this</span>.namesrvIndex.incrementAndGet();</div><div class="line"><span class="number">27</span>:                     index = Math.abs(index);</div><div class="line"><span class="number">28</span>:                     index = index % addrList.size();</div><div class="line"><span class="number">29</span>:                     String newAddr = addrList.get(index);</div><div class="line"><span class="number">30</span>: </div><div class="line"><span class="number">31</span>:                     <span class="keyword">this</span>.namesrvAddrChoosed.set(newAddr);</div><div class="line"><span class="number">32</span>:                     Channel channelNew = <span class="keyword">this</span>.createChannel(newAddr);</div><div class="line"><span class="number">33</span>:                     <span class="keyword">if</span> (channelNew != <span class="keyword">null</span>)</div><div class="line"><span class="number">34</span>:                         <span class="keyword">return</span> channelNew;</div><div class="line"><span class="number">35</span>:                 &#125;</div><div class="line"><span class="number">36</span>:             &#125;</div><div class="line"><span class="number">37</span>:         &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"><span class="number">38</span>:             log.error(<span class="string">"getAndCreateNameserverChannel: create name server channel exception"</span>, e);</div><div class="line"><span class="number">39</span>:         &#125; <span class="keyword">finally</span> &#123;</div><div class="line"><span class="number">40</span>:             <span class="keyword">this</span>.lockNamesrvChannel.unlock();</div><div class="line"><span class="number">41</span>:         &#125;</div><div class="line"><span class="number">42</span>:     &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">43</span>:         log.warn(<span class="string">"getAndCreateNameserverChannel: try to lock name server, but timeout, &#123;&#125;ms"</span>, LOCK_TIMEOUT_MILLIS);</div><div class="line"><span class="number">44</span>:     &#125;</div><div class="line"><span class="number">45</span>: </div><div class="line"><span class="number">46</span>:     <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line"><span class="number">47</span>: &#125;</div></pre></td></tr></table></figure></p>
<h1>3. Broker 高可用</h1>
<p><strong>启动多个 <code>Broker分组</code> 形成 <code>集群</code> 实现高可用。</strong><br>
<strong><code>Broker分组</code> = <code>Master节点</code>x1 + <code>Slave节点</code>xN。</strong><br>
类似 <code>MySQL</code>，<code>Master节点</code> 提供<strong>读写</strong>服务，<code>Slave节点</code> 只提供<strong>读</strong>服务。</p>
<h2>3.2 Broker 主从</h2>
<ul>
<li><strong>每个分组，<code>Master</code>节点 不断发送新的 <code>CommitLog</code> 给 <code>Slave</code>节点。 <code>Slave</code>节点 不断上报本地的 <code>CommitLog</code> 已经同步到的位置给 <code>Master</code>节点。</strong></li>
<li><strong><code>Broker分组</code> 与 <code>Broker分组</code> 之间没有任何关系，不进行通信与数据同步。</strong></li>
<li><strong>消费进度 目前不支持 <code>Master</code>/<code>Slave</code> 同步。</strong></li>
</ul>
<p>集群内，<code>Master</code>节点 有<strong>两种</strong>类型：<code>Master_SYNC</code>、<code>Master_ASYNC</code>：前者在 <code>Producer</code> 发送消息时，等待 <code>Slave</code>节点 存储完毕后再返回发送结果，而后者不需要等待。</p>
<h3>3.1.1 配置</h3>
<p>目前官方提供三套配置：</p>
<ul>
<li><strong>2m-2s-async</strong></li>
</ul>
<table>
<thead>
<tr>
<th>brokerClusterName</th>
<th>brokerName</th>
<th>brokerRole</th>
<th>brokerId</th>
</tr>
</thead>
<tbody>
<tr>
<td>DefaultCluster</td>
<td>broker-a</td>
<td>ASYNC_MASTER</td>
<td>0</td>
</tr>
<tr>
<td>DefaultCluster</td>
<td>broker-a</td>
<td>SLAVE</td>
<td>1</td>
</tr>
<tr>
<td>DefaultCluster</td>
<td>broker-b</td>
<td>ASYNC_MASTER</td>
<td>0</td>
</tr>
<tr>
<td>DefaultCluster</td>
<td>broker-b</td>
<td>SLAVE</td>
<td>1</td>
</tr>
</tbody>
</table>
<ul>
<li><strong>2m-2s-sync</strong></li>
</ul>
<table>
<thead>
<tr>
<th>brokerClusterName</th>
<th>brokerName</th>
<th>brokerRole</th>
<th>brokerId</th>
</tr>
</thead>
<tbody>
<tr>
<td>DefaultCluster</td>
<td>broker-a</td>
<td>SYNC_MASTER</td>
<td>0</td>
</tr>
<tr>
<td>DefaultCluster</td>
<td>broker-a</td>
<td>SLAVE</td>
<td>1</td>
</tr>
<tr>
<td>DefaultCluster</td>
<td>broker-b</td>
<td>SYNC_MASTER</td>
<td>0</td>
</tr>
<tr>
<td>DefaultCluster</td>
<td>broker-b</td>
<td>SLAVE</td>
<td>1</td>
</tr>
</tbody>
</table>
<ul>
<li><strong>2m-noslave</strong></li>
</ul>
<table>
<thead>
<tr>
<th>brokerClusterName</th>
<th>brokerName</th>
<th>brokerRole</th>
<th>brokerId</th>
</tr>
</thead>
<tbody>
<tr>
<td>DefaultCluster</td>
<td>broker-a</td>
<td>ASYNC_MASTER</td>
<td>0</td>
</tr>
<tr>
<td>DefaultCluster</td>
<td>broker-b</td>
<td>ASYNC_MASTER</td>
<td>0</td>
</tr>
</tbody>
</table>
<h3>3.1.2 组件</h3>
<p>再看具体实现代码之前，我们来看看 <code>Master</code>/<code>Slave</code>节点 包含的组件：<br>
<img src="http://www.yunai.me/images/RocketMQ/2017_05_14/04.png" alt="HA组件图.png"></p>
<ul>
<li><code>Master</code>节点
<ul>
<li><code>AcceptSocketService</code> ：接收 <code>Slave</code>节点 连接。</li>
<li><code>HAConnection</code>
<ul>
<li><code>ReadSocketService</code> ：<strong>读</strong>来自 <code>Slave</code>节点 的数据。</li>
<li><code>WriteSocketService</code> ：<strong>写</strong>到往 <code>Slave</code>节点 的数据。</li>
</ul>
</li>
</ul>
</li>
<li><code>Slave</code>节点
<ul>
<li><code>HAClient</code> ：对 <code>Master</code>节点 连接、读写数据。</li>
</ul>
</li>
</ul>
<h3>3.1.3 通信协议</h3>
<p><code>Master</code>节点 与 <code>Slave</code>节点 <strong>通信协议</strong>很简单，只有如下两条。</p>
<table>
<thead>
<tr>
<th style="text-align:left">对象</th>
<th style="text-align:left">用途</th>
<th style="text-align:left">第几位</th>
<th style="text-align:left">字段</th>
<th style="text-align:left">数据类型</th>
<th style="text-align:left">字节数</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Slave=&gt;Master</td>
<td style="text-align:left">上报CommitLog<strong>已经</strong>同步到的<strong>物理</strong>位置</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left">0</td>
<td style="text-align:left">maxPhyOffset</td>
<td style="text-align:left">Long</td>
<td style="text-align:left">8</td>
<td style="text-align:left">CommitLog最大物理位置</td>
</tr>
<tr>
<td style="text-align:left">Master=&gt;Slave</td>
<td style="text-align:left">传输新的 <code>CommitLog</code> 数据</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left">0</td>
<td style="text-align:left">fromPhyOffset</td>
<td style="text-align:left">Long</td>
<td style="text-align:left">8</td>
<td style="text-align:left">CommitLog开始物理位置</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left">1</td>
<td style="text-align:left">size</td>
<td style="text-align:left">Int</td>
<td style="text-align:left">4</td>
<td style="text-align:left">传输CommitLog数据长度</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left">2</td>
<td style="text-align:left">body</td>
<td style="text-align:left">Bytes</td>
<td style="text-align:left">size</td>
<td style="text-align:left">传输CommitLog数据</td>
</tr>
</tbody>
</table>
<h3>3.1.4 Slave</h3>
<p><img src="http://www.yunai.me/images/RocketMQ/2017_05_14/02.png" alt="HAClient顺序图"></p>
<hr>
<ul>
<li><strong><code>Slave</code> 主循环，实现了</strong>不断不断不断<strong>从 <code>Master</code> 传输 <code>CommitLog</code> 数据，上传 <code>Master</code> 自己本地的 <code>CommitLog</code> 已经同步物理位置。</strong></li>
</ul>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="comment">// ⬇️⬇️⬇️【HAClient.java】</span></div><div class="line"> <span class="number">2</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line"> <span class="number">3</span>:     log.info(<span class="keyword">this</span>.getServiceName() + <span class="string">" service started"</span>);</div><div class="line"> <span class="number">4</span>: </div><div class="line"> <span class="number">5</span>:     <span class="keyword">while</span> (!<span class="keyword">this</span>.isStopped()) &#123;</div><div class="line"> <span class="number">6</span>:         <span class="keyword">try</span> &#123;</div><div class="line"> <span class="number">7</span>:             <span class="keyword">if</span> (<span class="keyword">this</span>.connectMaster()) &#123;</div><div class="line"> <span class="number">8</span>:                 <span class="comment">// 若到满足上报间隔，上报到Master进度</span></div><div class="line"> <span class="number">9</span>:                 <span class="keyword">if</span> (<span class="keyword">this</span>.isTimeToReportOffset()) &#123;</div><div class="line"><span class="number">10</span>:                     <span class="keyword">boolean</span> result = <span class="keyword">this</span>.reportSlaveMaxOffset(<span class="keyword">this</span>.currentReportedOffset);</div><div class="line"><span class="number">11</span>:                     <span class="keyword">if</span> (!result) &#123;</div><div class="line"><span class="number">12</span>:                         <span class="keyword">this</span>.closeMaster();</div><div class="line"><span class="number">13</span>:                     &#125;</div><div class="line"><span class="number">14</span>:                 &#125;</div><div class="line"><span class="number">15</span>: </div><div class="line"><span class="number">16</span>:                 <span class="keyword">this</span>.selector.select(<span class="number">1000</span>);</div><div class="line"><span class="number">17</span>: </div><div class="line"><span class="number">18</span>:                 <span class="comment">// 处理读取事件</span></div><div class="line"><span class="number">19</span>:                 <span class="keyword">boolean</span> ok = <span class="keyword">this</span>.processReadEvent();</div><div class="line"><span class="number">20</span>:                 <span class="keyword">if</span> (!ok) &#123;</div><div class="line"><span class="number">21</span>:                     <span class="keyword">this</span>.closeMaster();</div><div class="line"><span class="number">22</span>:                 &#125;</div><div class="line"><span class="number">23</span>: </div><div class="line"><span class="number">24</span>:                 <span class="comment">// 若进度有变化，上报到Master进度</span></div><div class="line"><span class="number">25</span>:                 <span class="keyword">if</span> (!reportSlaveMaxOffsetPlus()) &#123;</div><div class="line"><span class="number">26</span>:                     <span class="keyword">continue</span>;</div><div class="line"><span class="number">27</span>:                 &#125;</div><div class="line"><span class="number">28</span>: </div><div class="line"><span class="number">29</span>:                 <span class="comment">// Master过久未返回数据，关闭连接</span></div><div class="line"><span class="number">30</span>:                 <span class="keyword">long</span> interval = HAService.<span class="keyword">this</span>.getDefaultMessageStore().getSystemClock().now() - <span class="keyword">this</span>.lastWriteTimestamp;</div><div class="line"><span class="number">31</span>:                 <span class="keyword">if</span> (interval &gt; HAService.<span class="keyword">this</span>.getDefaultMessageStore().getMessageStoreConfig()</div><div class="line"><span class="number">32</span>:                     .getHaHousekeepingInterval()) &#123;</div><div class="line"><span class="number">33</span>:                     log.warn(<span class="string">"HAClient, housekeeping, found this connection["</span> + <span class="keyword">this</span>.masterAddress</div><div class="line"><span class="number">34</span>:                         + <span class="string">"] expired, "</span> + interval);</div><div class="line"><span class="number">35</span>:                     <span class="keyword">this</span>.closeMaster();</div><div class="line"><span class="number">36</span>:                     log.warn(<span class="string">"HAClient, master not response some time, so close connection"</span>);</div><div class="line"><span class="number">37</span>:                 &#125;</div><div class="line"><span class="number">38</span>:             &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">39</span>:                 <span class="keyword">this</span>.waitForRunning(<span class="number">1000</span> * <span class="number">5</span>);</div><div class="line"><span class="number">40</span>:             &#125;</div><div class="line"><span class="number">41</span>:         &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"><span class="number">42</span>:             log.warn(<span class="keyword">this</span>.getServiceName() + <span class="string">" service has exception. "</span>, e);</div><div class="line"><span class="number">43</span>:             <span class="keyword">this</span>.waitForRunning(<span class="number">1000</span> * <span class="number">5</span>);</div><div class="line"><span class="number">44</span>:         &#125;</div><div class="line"><span class="number">45</span>:     &#125;</div><div class="line"><span class="number">46</span>: </div><div class="line"><span class="number">47</span>:     log.info(<span class="keyword">this</span>.getServiceName() + <span class="string">" service end"</span>);</div><div class="line"><span class="number">48</span>: &#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>第 8 至 14 行 ：<strong>固定间隔（默认5s）<strong>向 <code>Master</code> 上报 <code>Slave</code> 本地 <code>CommitLog</code> 已经同步到的物理位置。该操作还有</strong>心跳</strong>的作用。</li>
<li>第 16 至 22 行 ：处理 <code>Master</code> 传输 <code>Slave</code> 的 <code>CommitLog</code> 数据。</li>
</ul>
<hr>
<ul>
<li><strong>我们来看看 <code>#dispatchReadRequest(...)</code> 与 <code>#reportSlaveMaxOffset(...)</code> 是怎么实现的。</strong></li>
</ul>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="comment">// 【HAClient.java】</span></div><div class="line"> <span class="number">2</span>: <span class="comment">/**</span></div><div class="line"> 3:  * 读取Master传输的CommitLog数据，并返回是异常</div><div class="line"> 4:  * 如果读取到数据，写入CommitLog</div><div class="line"> 5:  * 异常原因：</div><div class="line"> 6:  *   1. Master传输来的数据offset 不等于 Slave的CommitLog数据最大offset</div><div class="line"> 7:  *   2. 上报到Master进度失败</div><div class="line"> 8:  *</div><div class="line"> 9:  * <span class="doctag">@return</span> 是否异常</div><div class="line">10:  */</div><div class="line"><span class="number">11</span>: <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">dispatchReadRequest</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="number">12</span>:     <span class="keyword">final</span> <span class="keyword">int</span> msgHeaderSize = <span class="number">8</span> + <span class="number">4</span>; <span class="comment">// phyoffset + size</span></div><div class="line"><span class="number">13</span>:     <span class="keyword">int</span> readSocketPos = <span class="keyword">this</span>.byteBufferRead.position();</div><div class="line"><span class="number">14</span>: </div><div class="line"><span class="number">15</span>:     <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line"><span class="number">16</span>:         <span class="comment">// 读取到请求</span></div><div class="line"><span class="number">17</span>:         <span class="keyword">int</span> diff = <span class="keyword">this</span>.byteBufferRead.position() - <span class="keyword">this</span>.dispatchPostion;</div><div class="line"><span class="number">18</span>:         <span class="keyword">if</span> (diff &gt;= msgHeaderSize) &#123;</div><div class="line"><span class="number">19</span>:             <span class="comment">// 读取masterPhyOffset、bodySize。使用dispatchPostion的原因是：处理数据“粘包”导致数据读取不完整。</span></div><div class="line"><span class="number">20</span>:             <span class="keyword">long</span> masterPhyOffset = <span class="keyword">this</span>.byteBufferRead.getLong(<span class="keyword">this</span>.dispatchPostion);</div><div class="line"><span class="number">21</span>:             <span class="keyword">int</span> bodySize = <span class="keyword">this</span>.byteBufferRead.getInt(<span class="keyword">this</span>.dispatchPostion + <span class="number">8</span>);</div><div class="line"><span class="number">22</span>:             <span class="comment">// 校验 Master传输来的数据offset 是否和 Slave的CommitLog数据最大offset 是否相同。</span></div><div class="line"><span class="number">23</span>:             <span class="keyword">long</span> slavePhyOffset = HAService.<span class="keyword">this</span>.defaultMessageStore.getMaxPhyOffset();</div><div class="line"><span class="number">24</span>:             <span class="keyword">if</span> (slavePhyOffset != <span class="number">0</span>) &#123;</div><div class="line"><span class="number">25</span>:                 <span class="keyword">if</span> (slavePhyOffset != masterPhyOffset) &#123;</div><div class="line"><span class="number">26</span>:                     log.error(<span class="string">"master pushed offset not equal the max phy offset in slave, SLAVE: "</span></div><div class="line"><span class="number">27</span>:                         + slavePhyOffset + <span class="string">" MASTER: "</span> + masterPhyOffset);</div><div class="line"><span class="number">28</span>:                     <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line"><span class="number">29</span>:                 &#125;</div><div class="line"><span class="number">30</span>:             &#125;</div><div class="line"><span class="number">31</span>:             <span class="comment">// 读取到消息</span></div><div class="line"><span class="number">32</span>:             <span class="keyword">if</span> (diff &gt;= (msgHeaderSize + bodySize)) &#123;</div><div class="line"><span class="number">33</span>:                 <span class="comment">// 写入CommitLog</span></div><div class="line"><span class="number">34</span>:                 <span class="keyword">byte</span>[] bodyData = <span class="keyword">new</span> <span class="keyword">byte</span>[bodySize];</div><div class="line"><span class="number">35</span>:                 <span class="keyword">this</span>.byteBufferRead.position(<span class="keyword">this</span>.dispatchPostion + msgHeaderSize);</div><div class="line"><span class="number">36</span>:                 <span class="keyword">this</span>.byteBufferRead.get(bodyData);</div><div class="line"><span class="number">37</span>:                 HAService.<span class="keyword">this</span>.defaultMessageStore.appendToCommitLog(masterPhyOffset, bodyData);</div><div class="line"><span class="number">38</span>:                 <span class="comment">// 设置处理到的位置</span></div><div class="line"><span class="number">39</span>:                 <span class="keyword">this</span>.byteBufferRead.position(readSocketPos);</div><div class="line"><span class="number">40</span>:                 <span class="keyword">this</span>.dispatchPostion += msgHeaderSize + bodySize;</div><div class="line"><span class="number">41</span>:                 <span class="comment">// 上报到Master进度</span></div><div class="line"><span class="number">42</span>:                 <span class="keyword">if</span> (!reportSlaveMaxOffsetPlus()) &#123;</div><div class="line"><span class="number">43</span>:                     <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line"><span class="number">44</span>:                 &#125;</div><div class="line"><span class="number">45</span>:                 <span class="comment">// 继续循环</span></div><div class="line"><span class="number">46</span>:                 <span class="keyword">continue</span>;</div><div class="line"><span class="number">47</span>:             &#125;</div><div class="line"><span class="number">48</span>:         &#125;</div><div class="line"><span class="number">49</span>: </div><div class="line"><span class="number">50</span>:         <span class="comment">// 空间写满，重新分配空间</span></div><div class="line"><span class="number">51</span>:         <span class="keyword">if</span> (!<span class="keyword">this</span>.byteBufferRead.hasRemaining()) &#123;</div><div class="line"><span class="number">52</span>:             <span class="keyword">this</span>.reallocateByteBuffer();</div><div class="line"><span class="number">53</span>:         &#125;</div><div class="line"><span class="number">54</span>: </div><div class="line"><span class="number">55</span>:         <span class="keyword">break</span>;</div><div class="line"><span class="number">56</span>:     &#125;</div><div class="line"><span class="number">57</span>: </div><div class="line"><span class="number">58</span>:     <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line"><span class="number">59</span>: &#125;</div><div class="line"><span class="number">60</span>: </div><div class="line"><span class="number">61</span>: <span class="comment">/**</span></div><div class="line">62:  * 上报进度</div><div class="line">63:  *</div><div class="line">64:  * <span class="doctag">@param</span> maxOffset 进度</div><div class="line">65:  * <span class="doctag">@return</span> 是否上报成功</div><div class="line">66:  */</div><div class="line"><span class="number">67</span>: <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">reportSlaveMaxOffset</span><span class="params">(<span class="keyword">final</span> <span class="keyword">long</span> maxOffset)</span> </span>&#123;</div><div class="line"><span class="number">68</span>:     <span class="keyword">this</span>.reportOffset.position(<span class="number">0</span>);</div><div class="line"><span class="number">69</span>:     <span class="keyword">this</span>.reportOffset.limit(<span class="number">8</span>);</div><div class="line"><span class="number">70</span>:     <span class="keyword">this</span>.reportOffset.putLong(maxOffset);</div><div class="line"><span class="number">71</span>:     <span class="keyword">this</span>.reportOffset.position(<span class="number">0</span>);</div><div class="line"><span class="number">72</span>:     <span class="keyword">this</span>.reportOffset.limit(<span class="number">8</span>);</div><div class="line"><span class="number">73</span>: </div><div class="line"><span class="number">74</span>:     <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span> &amp;&amp; <span class="keyword">this</span>.reportOffset.hasRemaining(); i++) &#123;</div><div class="line"><span class="number">75</span>:         <span class="keyword">try</span> &#123;</div><div class="line"><span class="number">76</span>:             <span class="keyword">this</span>.socketChannel.write(<span class="keyword">this</span>.reportOffset);</div><div class="line"><span class="number">77</span>:         &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line"><span class="number">78</span>:             log.error(<span class="keyword">this</span>.getServiceName()</div><div class="line"><span class="number">79</span>:                 + <span class="string">"reportSlaveMaxOffset this.socketChannel.write exception"</span>, e);</div><div class="line"><span class="number">80</span>:             <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line"><span class="number">81</span>:         &#125;</div><div class="line"><span class="number">82</span>:     &#125;</div><div class="line"><span class="number">83</span>: </div><div class="line"><span class="number">84</span>:     <span class="keyword">return</span> !<span class="keyword">this</span>.reportOffset.hasRemaining();</div><div class="line"><span class="number">85</span>: &#125;</div></pre></td></tr></table></figure></p>
<h3>3.1.5 Master</h3>
<ul>
<li><strong><code>ReadSocketService</code> 逻辑同 <code>HAClient#processReadEvent(...)</code> 基本相同，我们直接看代码。</strong></li>
</ul>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="comment">// ⬇️⬇️⬇️【ReadSocketService.java】</span></div><div class="line"> <span class="number">2</span>: <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">processReadEvent</span><span class="params">()</span> </span>&#123;</div><div class="line"> <span class="number">3</span>:     <span class="keyword">int</span> readSizeZeroTimes = <span class="number">0</span>;</div><div class="line"> <span class="number">4</span>: </div><div class="line"> <span class="number">5</span>:     <span class="comment">// 清空byteBufferRead</span></div><div class="line"> <span class="number">6</span>:     <span class="keyword">if</span> (!<span class="keyword">this</span>.byteBufferRead.hasRemaining()) &#123;</div><div class="line"> <span class="number">7</span>:         <span class="keyword">this</span>.byteBufferRead.flip();</div><div class="line"> <span class="number">8</span>:         <span class="keyword">this</span>.processPostion = <span class="number">0</span>;</div><div class="line"> <span class="number">9</span>:     &#125;</div><div class="line"><span class="number">10</span>: </div><div class="line"><span class="number">11</span>:     <span class="keyword">while</span> (<span class="keyword">this</span>.byteBufferRead.hasRemaining()) &#123;</div><div class="line"><span class="number">12</span>:         <span class="keyword">try</span> &#123;</div><div class="line"><span class="number">13</span>:             <span class="keyword">int</span> readSize = <span class="keyword">this</span>.socketChannel.read(<span class="keyword">this</span>.byteBufferRead);</div><div class="line"><span class="number">14</span>:             <span class="keyword">if</span> (readSize &gt; <span class="number">0</span>) &#123;</div><div class="line"><span class="number">15</span>:                 readSizeZeroTimes = <span class="number">0</span>;</div><div class="line"><span class="number">16</span>: </div><div class="line"><span class="number">17</span>:                 <span class="comment">// 设置最后读取时间</span></div><div class="line"><span class="number">18</span>:                 <span class="keyword">this</span>.lastReadTimestamp = HAConnection.<span class="keyword">this</span>.haService.getDefaultMessageStore().getSystemClock().now();</div><div class="line"><span class="number">19</span>: </div><div class="line"><span class="number">20</span>:                 <span class="keyword">if</span> ((<span class="keyword">this</span>.byteBufferRead.position() - <span class="keyword">this</span>.processPostion) &gt;= <span class="number">8</span>) &#123;</div><div class="line"><span class="number">21</span>:                     <span class="comment">// 读取Slave 请求来的CommitLog的最大位置</span></div><div class="line"><span class="number">22</span>:                     <span class="keyword">int</span> pos = <span class="keyword">this</span>.byteBufferRead.position() - (<span class="keyword">this</span>.byteBufferRead.position() % <span class="number">8</span>);</div><div class="line"><span class="number">23</span>:                     <span class="keyword">long</span> readOffset = <span class="keyword">this</span>.byteBufferRead.getLong(pos - <span class="number">8</span>);</div><div class="line"><span class="number">24</span>:                     <span class="keyword">this</span>.processPostion = pos;</div><div class="line"><span class="number">25</span>: </div><div class="line"><span class="number">26</span>:                     <span class="comment">// 设置Slave CommitLog的最大位置</span></div><div class="line"><span class="number">27</span>:                     HAConnection.<span class="keyword">this</span>.slaveAckOffset = readOffset;</div><div class="line"><span class="number">28</span>: </div><div class="line"><span class="number">29</span>:                     <span class="comment">// 设置Slave 第一次请求的位置</span></div><div class="line"><span class="number">30</span>:                     <span class="keyword">if</span> (HAConnection.<span class="keyword">this</span>.slaveRequestOffset &lt; <span class="number">0</span>) &#123;</div><div class="line"><span class="number">31</span>:                         HAConnection.<span class="keyword">this</span>.slaveRequestOffset = readOffset;</div><div class="line"><span class="number">32</span>:                         log.info(<span class="string">"slave["</span> + HAConnection.<span class="keyword">this</span>.clientAddr + <span class="string">"] request offset "</span> + readOffset);</div><div class="line"><span class="number">33</span>:                     &#125;</div><div class="line"><span class="number">34</span>: </div><div class="line"><span class="number">35</span>:                     <span class="comment">// 通知目前Slave进度。主要用于Master节点为同步类型的。</span></div><div class="line"><span class="number">36</span>:                     HAConnection.<span class="keyword">this</span>.haService.notifyTransferSome(HAConnection.<span class="keyword">this</span>.slaveAckOffset);</div><div class="line"><span class="number">37</span>:                 &#125;</div><div class="line"><span class="number">38</span>:             &#125; <span class="keyword">else</span> <span class="keyword">if</span> (readSize == <span class="number">0</span>) &#123;</div><div class="line"><span class="number">39</span>:                 <span class="keyword">if</span> (++readSizeZeroTimes &gt;= <span class="number">3</span>) &#123;</div><div class="line"><span class="number">40</span>:                     <span class="keyword">break</span>;</div><div class="line"><span class="number">41</span>:                 &#125;</div><div class="line"><span class="number">42</span>:             &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">43</span>:                 log.error(<span class="string">"read socket["</span> + HAConnection.<span class="keyword">this</span>.clientAddr + <span class="string">"] &lt; 0"</span>);</div><div class="line"><span class="number">44</span>:                 <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line"><span class="number">45</span>:             &#125;</div><div class="line"><span class="number">46</span>:         &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line"><span class="number">47</span>:             log.error(<span class="string">"processReadEvent exception"</span>, e);</div><div class="line"><span class="number">48</span>:             <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line"><span class="number">49</span>:         &#125;</div><div class="line"><span class="number">50</span>:     &#125;</div><div class="line"><span class="number">51</span>: </div><div class="line"><span class="number">52</span>:     <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line"><span class="number">53</span>: &#125;</div></pre></td></tr></table></figure></p>
<hr>
<ul>
<li><strong><code>WriteSocketService</code> 计算 <code>Slave</code>开始同步的位置后，不断向 <code>Slave</code> 传输新的 <code>CommitLog</code>数据。</strong></li>
</ul>
<p><img src="http://www.yunai.me/images/RocketMQ/2017_05_14/01.png" alt="HA.WriteSocketService流程图"></p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">  <span class="number">1</span>: <span class="comment">// ⬇️⬇️⬇️【WriteSocketService.java】</span></div><div class="line">  <span class="number">2</span>: <span class="meta">@Override</span></div><div class="line">  <span class="number">3</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="number">4</span>:     HAConnection.log.info(<span class="keyword">this</span>.getServiceName() + <span class="string">" service started"</span>);</div><div class="line">  <span class="number">5</span>: </div><div class="line">  <span class="number">6</span>:     <span class="keyword">while</span> (!<span class="keyword">this</span>.isStopped()) &#123;</div><div class="line">  <span class="number">7</span>:         <span class="keyword">try</span> &#123;</div><div class="line">  <span class="number">8</span>:             <span class="keyword">this</span>.selector.select(<span class="number">1000</span>);</div><div class="line">  <span class="number">9</span>: </div><div class="line"> <span class="number">10</span>:             <span class="comment">// 未获得Slave读取进度请求，sleep等待。</span></div><div class="line"> <span class="number">11</span>:             <span class="keyword">if</span> (-<span class="number">1</span> == HAConnection.<span class="keyword">this</span>.slaveRequestOffset) &#123;</div><div class="line"> <span class="number">12</span>:                 Thread.sleep(<span class="number">10</span>);</div><div class="line"> <span class="number">13</span>:                 <span class="keyword">continue</span>;</div><div class="line"> <span class="number">14</span>:             &#125;</div><div class="line"> <span class="number">15</span>: </div><div class="line"> <span class="number">16</span>:             <span class="comment">// 计算初始化nextTransferFromWhere</span></div><div class="line"> <span class="number">17</span>:             <span class="keyword">if</span> (-<span class="number">1</span> == <span class="keyword">this</span>.nextTransferFromWhere) &#123;</div><div class="line"> <span class="number">18</span>:                 <span class="keyword">if</span> (<span class="number">0</span> == HAConnection.<span class="keyword">this</span>.slaveRequestOffset) &#123;</div><div class="line"> <span class="number">19</span>:                     <span class="keyword">long</span> masterOffset = HAConnection.<span class="keyword">this</span>.haService.getDefaultMessageStore().getCommitLog().getMaxOffset();</div><div class="line"> <span class="number">20</span>:                     masterOffset = masterOffset - (masterOffset % HAConnection.<span class="keyword">this</span>.haService.getDefaultMessageStore().getMessageStoreConfig().getMapedFileSizeCommitLog());</div><div class="line"> <span class="number">21</span>:                     <span class="keyword">if</span> (masterOffset &lt; <span class="number">0</span>) &#123;</div><div class="line"> <span class="number">22</span>:                         masterOffset = <span class="number">0</span>;</div><div class="line"> <span class="number">23</span>:                     &#125;</div><div class="line"> <span class="number">24</span>: </div><div class="line"> <span class="number">25</span>:                     <span class="keyword">this</span>.nextTransferFromWhere = masterOffset;</div><div class="line"> <span class="number">26</span>:                 &#125; <span class="keyword">else</span> &#123;</div><div class="line"> <span class="number">27</span>:                     <span class="keyword">this</span>.nextTransferFromWhere = HAConnection.<span class="keyword">this</span>.slaveRequestOffset;</div><div class="line"> <span class="number">28</span>:                 &#125;</div><div class="line"> <span class="number">29</span>: </div><div class="line"> <span class="number">30</span>:                 log.info(<span class="string">"master transfer data from "</span> + <span class="keyword">this</span>.nextTransferFromWhere + <span class="string">" to slave["</span> + HAConnection.<span class="keyword">this</span>.clientAddr</div><div class="line"> <span class="number">31</span>:                     + <span class="string">"], and slave request "</span> + HAConnection.<span class="keyword">this</span>.slaveRequestOffset);</div><div class="line"> <span class="number">32</span>:             &#125;</div><div class="line"> <span class="number">33</span>: </div><div class="line"> <span class="number">34</span>:             <span class="keyword">if</span> (<span class="keyword">this</span>.lastWriteOver) &#123;</div><div class="line"> <span class="number">35</span>:                 <span class="keyword">long</span> interval = HAConnection.<span class="keyword">this</span>.haService.getDefaultMessageStore().getSystemClock().now() - <span class="keyword">this</span>.lastWriteTimestamp;</div><div class="line"> <span class="number">36</span>:                 <span class="keyword">if</span> (interval &gt; HAConnection.<span class="keyword">this</span>.haService.getDefaultMessageStore().getMessageStoreConfig().getHaSendHeartbeatInterval()) &#123; <span class="comment">// 心跳</span></div><div class="line"> <span class="number">37</span>: </div><div class="line"> <span class="number">38</span>:                     <span class="comment">// Build Header</span></div><div class="line"> <span class="number">39</span>:                     <span class="keyword">this</span>.byteBufferHeader.position(<span class="number">0</span>);</div><div class="line"> <span class="number">40</span>:                     <span class="keyword">this</span>.byteBufferHeader.limit(headerSize);</div><div class="line"> <span class="number">41</span>:                     <span class="keyword">this</span>.byteBufferHeader.putLong(<span class="keyword">this</span>.nextTransferFromWhere);</div><div class="line"> <span class="number">42</span>:                     <span class="keyword">this</span>.byteBufferHeader.putInt(<span class="number">0</span>);</div><div class="line"> <span class="number">43</span>:                     <span class="keyword">this</span>.byteBufferHeader.flip();</div><div class="line"> <span class="number">44</span>: </div><div class="line"> <span class="number">45</span>:                     <span class="keyword">this</span>.lastWriteOver = <span class="keyword">this</span>.transferData();</div><div class="line"> <span class="number">46</span>:                     <span class="keyword">if</span> (!<span class="keyword">this</span>.lastWriteOver)</div><div class="line"> <span class="number">47</span>:                         <span class="keyword">continue</span>;</div><div class="line"> <span class="number">48</span>:                 &#125;</div><div class="line"> <span class="number">49</span>:             &#125; <span class="keyword">else</span> &#123; <span class="comment">// 未传输完成，继续传输</span></div><div class="line"> <span class="number">50</span>:                 <span class="keyword">this</span>.lastWriteOver = <span class="keyword">this</span>.transferData();</div><div class="line"> <span class="number">51</span>:                 <span class="keyword">if</span> (!<span class="keyword">this</span>.lastWriteOver)</div><div class="line"> <span class="number">52</span>:                     <span class="keyword">continue</span>;</div><div class="line"> <span class="number">53</span>:             &#125;</div><div class="line"> <span class="number">54</span>: </div><div class="line"> <span class="number">55</span>:             <span class="comment">// 选择新的CommitLog数据进行传输</span></div><div class="line"> <span class="number">56</span>:             SelectMappedBufferResult selectResult =</div><div class="line"> <span class="number">57</span>:                 HAConnection.<span class="keyword">this</span>.haService.getDefaultMessageStore().getCommitLogData(<span class="keyword">this</span>.nextTransferFromWhere);</div><div class="line"> <span class="number">58</span>:             <span class="keyword">if</span> (selectResult != <span class="keyword">null</span>) &#123;</div><div class="line"> <span class="number">59</span>:                 <span class="keyword">int</span> size = selectResult.getSize();</div><div class="line"> <span class="number">60</span>:                 <span class="keyword">if</span> (size &gt; HAConnection.<span class="keyword">this</span>.haService.getDefaultMessageStore().getMessageStoreConfig().getHaTransferBatchSize()) &#123;</div><div class="line"> <span class="number">61</span>:                     size = HAConnection.<span class="keyword">this</span>.haService.getDefaultMessageStore().getMessageStoreConfig().getHaTransferBatchSize();</div><div class="line"> <span class="number">62</span>:                 &#125;</div><div class="line"> <span class="number">63</span>: </div><div class="line"> <span class="number">64</span>:                 <span class="keyword">long</span> thisOffset = <span class="keyword">this</span>.nextTransferFromWhere;</div><div class="line"> <span class="number">65</span>:                 <span class="keyword">this</span>.nextTransferFromWhere += size;</div><div class="line"> <span class="number">66</span>: </div><div class="line"> <span class="number">67</span>:                 selectResult.getByteBuffer().limit(size);</div><div class="line"> <span class="number">68</span>:                 <span class="keyword">this</span>.selectMappedBufferResult = selectResult;</div><div class="line"> <span class="number">69</span>: </div><div class="line"> <span class="number">70</span>:                 <span class="comment">// Build Header</span></div><div class="line"> <span class="number">71</span>:                 <span class="keyword">this</span>.byteBufferHeader.position(<span class="number">0</span>);</div><div class="line"> <span class="number">72</span>:                 <span class="keyword">this</span>.byteBufferHeader.limit(headerSize);</div><div class="line"> <span class="number">73</span>:                 <span class="keyword">this</span>.byteBufferHeader.putLong(thisOffset);</div><div class="line"> <span class="number">74</span>:                 <span class="keyword">this</span>.byteBufferHeader.putInt(size);</div><div class="line"> <span class="number">75</span>:                 <span class="keyword">this</span>.byteBufferHeader.flip();</div><div class="line"> <span class="number">76</span>: </div><div class="line"> <span class="number">77</span>:                 <span class="keyword">this</span>.lastWriteOver = <span class="keyword">this</span>.transferData();</div><div class="line"> <span class="number">78</span>:             &#125; <span class="keyword">else</span> &#123; <span class="comment">// 没新的消息，挂起等待</span></div><div class="line"> <span class="number">79</span>:                 HAConnection.<span class="keyword">this</span>.haService.getWaitNotifyObject().allWaitForRunning(<span class="number">100</span>);</div><div class="line"> <span class="number">80</span>:             &#125;</div><div class="line"> <span class="number">81</span>:         &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"> <span class="number">82</span>: </div><div class="line"> <span class="number">83</span>:             HAConnection.log.error(<span class="keyword">this</span>.getServiceName() + <span class="string">" service has exception."</span>, e);</div><div class="line"> <span class="number">84</span>:             <span class="keyword">break</span>;</div><div class="line"> <span class="number">85</span>:         &#125;</div><div class="line"> <span class="number">86</span>:     &#125;</div><div class="line"> <span class="number">87</span>: </div><div class="line"> <span class="number">88</span>:     <span class="comment">// 断开连接 &amp; 暂停写线程 &amp; 暂停读线程 &amp; 释放CommitLog</span></div><div class="line"> <span class="number">89</span>:     <span class="keyword">if</span> (<span class="keyword">this</span>.selectMappedBufferResult != <span class="keyword">null</span>) &#123;</div><div class="line"> <span class="number">90</span>:         <span class="keyword">this</span>.selectMappedBufferResult.release();</div><div class="line"> <span class="number">91</span>:     &#125;</div><div class="line"> <span class="number">92</span>: </div><div class="line"> <span class="number">93</span>:     <span class="keyword">this</span>.makeStop();</div><div class="line"> <span class="number">94</span>: </div><div class="line"> <span class="number">95</span>:     readSocketService.makeStop();</div><div class="line"> <span class="number">96</span>: </div><div class="line"> <span class="number">97</span>:     haService.removeConnection(HAConnection.<span class="keyword">this</span>);</div><div class="line"> <span class="number">98</span>: </div><div class="line"> <span class="number">99</span>:     SelectionKey sk = <span class="keyword">this</span>.socketChannel.keyFor(<span class="keyword">this</span>.selector);</div><div class="line"><span class="number">100</span>:     <span class="keyword">if</span> (sk != <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">101</span>:         sk.cancel();</div><div class="line"><span class="number">102</span>:     &#125;</div><div class="line"><span class="number">103</span>: </div><div class="line"><span class="number">104</span>:     <span class="keyword">try</span> &#123;</div><div class="line"><span class="number">105</span>:         <span class="keyword">this</span>.selector.close();</div><div class="line"><span class="number">106</span>:         <span class="keyword">this</span>.socketChannel.close();</div><div class="line"><span class="number">107</span>:     &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line"><span class="number">108</span>:         HAConnection.log.error(<span class="string">""</span>, e);</div><div class="line"><span class="number">109</span>:     &#125;</div><div class="line"><span class="number">110</span>: </div><div class="line"><span class="number">111</span>:     HAConnection.log.info(<span class="keyword">this</span>.getServiceName() + <span class="string">" service end"</span>);</div><div class="line"><span class="number">112</span>: &#125;</div><div class="line"><span class="number">113</span>: </div><div class="line"><span class="number">114</span>: <span class="comment">/**</span></div><div class="line">115:  * 传输数据</div><div class="line">116:  */</div><div class="line"><span class="number">117</span>: <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">transferData</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"><span class="number">118</span>:     <span class="keyword">int</span> writeSizeZeroTimes = <span class="number">0</span>;</div><div class="line"><span class="number">119</span>:     <span class="comment">// Write Header</span></div><div class="line"><span class="number">120</span>:     <span class="keyword">while</span> (<span class="keyword">this</span>.byteBufferHeader.hasRemaining()) &#123;</div><div class="line"><span class="number">121</span>:         <span class="keyword">int</span> writeSize = <span class="keyword">this</span>.socketChannel.write(<span class="keyword">this</span>.byteBufferHeader);</div><div class="line"><span class="number">122</span>:         <span class="keyword">if</span> (writeSize &gt; <span class="number">0</span>) &#123;</div><div class="line"><span class="number">123</span>:             writeSizeZeroTimes = <span class="number">0</span>;</div><div class="line"><span class="number">124</span>:             <span class="keyword">this</span>.lastWriteTimestamp = HAConnection.<span class="keyword">this</span>.haService.getDefaultMessageStore().getSystemClock().now();</div><div class="line"><span class="number">125</span>:         &#125; <span class="keyword">else</span> <span class="keyword">if</span> (writeSize == <span class="number">0</span>) &#123;</div><div class="line"><span class="number">126</span>:             <span class="keyword">if</span> (++writeSizeZeroTimes &gt;= <span class="number">3</span>) &#123;</div><div class="line"><span class="number">127</span>:                 <span class="keyword">break</span>;</div><div class="line"><span class="number">128</span>:             &#125;</div><div class="line"><span class="number">129</span>:         &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">130</span>:             <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"ha master write header error &lt; 0"</span>);</div><div class="line"><span class="number">131</span>:         &#125;</div><div class="line"><span class="number">132</span>:     &#125;</div><div class="line"><span class="number">133</span>: </div><div class="line"><span class="number">134</span>:     <span class="keyword">if</span> (<span class="keyword">null</span> == <span class="keyword">this</span>.selectMappedBufferResult) &#123;</div><div class="line"><span class="number">135</span>:         <span class="keyword">return</span> !<span class="keyword">this</span>.byteBufferHeader.hasRemaining();</div><div class="line"><span class="number">136</span>:     &#125;</div><div class="line"><span class="number">137</span>: </div><div class="line"><span class="number">138</span>:     writeSizeZeroTimes = <span class="number">0</span>;</div><div class="line"><span class="number">139</span>: </div><div class="line"><span class="number">140</span>:     <span class="comment">// Write Body</span></div><div class="line"><span class="number">141</span>:     <span class="keyword">if</span> (!<span class="keyword">this</span>.byteBufferHeader.hasRemaining()) &#123;</div><div class="line"><span class="number">142</span>:         <span class="keyword">while</span> (<span class="keyword">this</span>.selectMappedBufferResult.getByteBuffer().hasRemaining()) &#123;</div><div class="line"><span class="number">143</span>:             <span class="keyword">int</span> writeSize = <span class="keyword">this</span>.socketChannel.write(<span class="keyword">this</span>.selectMappedBufferResult.getByteBuffer());</div><div class="line"><span class="number">144</span>:             <span class="keyword">if</span> (writeSize &gt; <span class="number">0</span>) &#123;</div><div class="line"><span class="number">145</span>:                 writeSizeZeroTimes = <span class="number">0</span>;</div><div class="line"><span class="number">146</span>:                 <span class="keyword">this</span>.lastWriteTimestamp = HAConnection.<span class="keyword">this</span>.haService.getDefaultMessageStore().getSystemClock().now();</div><div class="line"><span class="number">147</span>:             &#125; <span class="keyword">else</span> <span class="keyword">if</span> (writeSize == <span class="number">0</span>) &#123;</div><div class="line"><span class="number">148</span>:                 <span class="keyword">if</span> (++writeSizeZeroTimes &gt;= <span class="number">3</span>) &#123;</div><div class="line"><span class="number">149</span>:                     <span class="keyword">break</span>;</div><div class="line"><span class="number">150</span>:                 &#125;</div><div class="line"><span class="number">151</span>:             &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">152</span>:                 <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"ha master write body error &lt; 0"</span>);</div><div class="line"><span class="number">153</span>:             &#125;</div><div class="line"><span class="number">154</span>:         &#125;</div><div class="line"><span class="number">155</span>:     &#125;</div><div class="line"><span class="number">156</span>: </div><div class="line"><span class="number">157</span>:     <span class="keyword">boolean</span> result = !<span class="keyword">this</span>.byteBufferHeader.hasRemaining() &amp;&amp; !<span class="keyword">this</span>.selectMappedBufferResult.getByteBuffer().hasRemaining();</div><div class="line"><span class="number">158</span>: </div><div class="line"><span class="number">159</span>:     <span class="keyword">if</span> (!<span class="keyword">this</span>.selectMappedBufferResult.getByteBuffer().hasRemaining()) &#123;</div><div class="line"><span class="number">160</span>:         <span class="keyword">this</span>.selectMappedBufferResult.release();</div><div class="line"><span class="number">161</span>:         <span class="keyword">this</span>.selectMappedBufferResult = <span class="keyword">null</span>;</div><div class="line"><span class="number">162</span>:     &#125;</div><div class="line"><span class="number">163</span>: </div><div class="line"><span class="number">164</span>:     <span class="keyword">return</span> result;</div><div class="line"><span class="number">165</span>: &#125;</div></pre></td></tr></table></figure></p>
<h3>3.1.6 Master_SYNC</h3>
<ul>
<li><strong><code>Producer</code> 发送消息时，<code>Master_SYNC</code>节点 会等待 <code>Slave</code>节点 存储完毕后再返回发送结果。</strong></li>
</ul>
<p>核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="comment">// ⬇️⬇️⬇️【CommitLog.java】</span></div><div class="line"> <span class="number">2</span>: <span class="function"><span class="keyword">public</span> PutMessageResult <span class="title">putMessage</span><span class="params">(<span class="keyword">final</span> MessageExtBrokerInner msg)</span> </span>&#123;</div><div class="line"> <span class="number">3</span>:     <span class="comment">// ....省略处理发送代码 </span></div><div class="line"> <span class="number">4</span>:     <span class="comment">// Synchronous write double 如果是同步Master，同步到从节点</span></div><div class="line"> <span class="number">5</span>:     <span class="keyword">if</span> (BrokerRole.SYNC_MASTER == <span class="keyword">this</span>.defaultMessageStore.getMessageStoreConfig().getBrokerRole()) &#123;</div><div class="line"> <span class="number">6</span>:         HAService service = <span class="keyword">this</span>.defaultMessageStore.getHaService();</div><div class="line"> <span class="number">7</span>:         <span class="keyword">if</span> (msg.isWaitStoreMsgOK()) &#123;</div><div class="line"> <span class="number">8</span>:             <span class="comment">// Determine whether to wait</span></div><div class="line"> <span class="number">9</span>:             <span class="keyword">if</span> (service.isSlaveOK(result.getWroteOffset() + result.getWroteBytes())) &#123;</div><div class="line"><span class="number">10</span>:                 <span class="keyword">if</span> (<span class="keyword">null</span> == request) &#123;</div><div class="line"><span class="number">11</span>:                     request = <span class="keyword">new</span> GroupCommitRequest(result.getWroteOffset() + result.getWroteBytes());</div><div class="line"><span class="number">12</span>:                 &#125;</div><div class="line"><span class="number">13</span>:                 service.putRequest(request);</div><div class="line"><span class="number">14</span>: </div><div class="line"><span class="number">15</span>:                 <span class="comment">// 唤醒WriteSocketService</span></div><div class="line"><span class="number">16</span>:                 service.getWaitNotifyObject().wakeupAll();</div><div class="line"><span class="number">17</span>: </div><div class="line"><span class="number">18</span>:                 <span class="keyword">boolean</span> flushOK = request.waitForFlush(<span class="keyword">this</span>.defaultMessageStore.getMessageStoreConfig().getSyncFlushTimeout());</div><div class="line"><span class="number">19</span>:                 <span class="keyword">if</span> (!flushOK) &#123;</div><div class="line"><span class="number">20</span>:                     log.error(<span class="string">"do sync transfer other node, wait return, but failed, topic: "</span> + msg.getTopic() + <span class="string">" tags: "</span></div><div class="line"><span class="number">21</span>:                         + msg.getTags() + <span class="string">" client address: "</span> + msg.getBornHostString());</div><div class="line"><span class="number">22</span>:                     putMessageResult.setPutMessageStatus(PutMessageStatus.FLUSH_SLAVE_TIMEOUT);</div><div class="line"><span class="number">23</span>:                 &#125;</div><div class="line"><span class="number">24</span>:             &#125;</div><div class="line"><span class="number">25</span>:             <span class="comment">// Slave problem</span></div><div class="line"><span class="number">26</span>:             <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">27</span>:                 <span class="comment">// Tell the producer, slave not available</span></div><div class="line"><span class="number">28</span>:                 putMessageResult.setPutMessageStatus(PutMessageStatus.SLAVE_NOT_AVAILABLE);</div><div class="line"><span class="number">29</span>:             &#125;</div><div class="line"><span class="number">30</span>:         &#125;</div><div class="line"><span class="number">31</span>:     &#125;</div><div class="line"><span class="number">32</span>: </div><div class="line"><span class="number">33</span>:     <span class="keyword">return</span> putMessageResult;</div><div class="line"><span class="number">34</span>: &#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>第 16 行 ：唤醒 <code>WriteSocketService</code>。
<ul>
<li>唤醒后，<code>WriteSocketService</code> 挂起等待新消息结束，<code>Master</code> 传输 <code>Slave</code> 新的 <code>CommitLog</code> 数据。</li>
<li><code>Slave</code> 收到数据后，<strong>立即</strong>上报最新的 <code>CommitLog</code> 同步进度到 <code>Master</code>。<code>ReadSocketService</code> 唤醒<strong>第 18 行</strong>：<code>request#waitForFlush(...)</code>。</li>
</ul>
</li>
</ul>
<p>我们来看下 <code>GroupTransferService</code> 的核心逻辑代码：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="comment">// ⬇️⬇️⬇️【GroupTransferService.java】</span></div><div class="line"> <span class="number">2</span>: <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doWaitTransfer</span><span class="params">()</span> </span>&#123;</div><div class="line"> <span class="number">3</span>:     <span class="keyword">synchronized</span> (<span class="keyword">this</span>.requestsRead) &#123;</div><div class="line"> <span class="number">4</span>:         <span class="keyword">if</span> (!<span class="keyword">this</span>.requestsRead.isEmpty()) &#123;</div><div class="line"> <span class="number">5</span>:             <span class="keyword">for</span> (CommitLog.GroupCommitRequest req : <span class="keyword">this</span>.requestsRead) &#123;</div><div class="line"> <span class="number">6</span>:                 <span class="comment">// 等待Slave上传进度</span></div><div class="line"> <span class="number">7</span>:                 <span class="keyword">boolean</span> transferOK = HAService.<span class="keyword">this</span>.push2SlaveMaxOffset.get() &gt;= req.getNextOffset();</div><div class="line"> <span class="number">8</span>:                 <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; !transferOK &amp;&amp; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line"> <span class="number">9</span>:                     <span class="keyword">this</span>.notifyTransferObject.waitForRunning(<span class="number">1000</span>); <span class="comment">// 唤醒</span></div><div class="line"><span class="number">10</span>:                     transferOK = HAService.<span class="keyword">this</span>.push2SlaveMaxOffset.get() &gt;= req.getNextOffset();</div><div class="line"><span class="number">11</span>:                 &#125;</div><div class="line"><span class="number">12</span>: </div><div class="line"><span class="number">13</span>:                 <span class="keyword">if</span> (!transferOK) &#123;</div><div class="line"><span class="number">14</span>:                     log.warn(<span class="string">"transfer messsage to slave timeout, "</span> + req.getNextOffset());</div><div class="line"><span class="number">15</span>:                 &#125;</div><div class="line"><span class="number">16</span>: </div><div class="line"><span class="number">17</span>:                 <span class="comment">// 唤醒请求，并设置是否Slave同步成功</span></div><div class="line"><span class="number">18</span>:                 req.wakeupCustomer(transferOK);</div><div class="line"><span class="number">19</span>:             &#125;</div><div class="line"><span class="number">20</span>: </div><div class="line"><span class="number">21</span>:             <span class="keyword">this</span>.requestsRead.clear();</div><div class="line"><span class="number">22</span>:         &#125;</div><div class="line"><span class="number">23</span>:     &#125;</div><div class="line"><span class="number">24</span>: &#125;</div></pre></td></tr></table></figure></p>
<h2>3.2 Producer 发送消息</h2>
<ul>
<li><strong><code>Producer</code> 发送消息时，会对 <code>Broker</code>集群 的所有队列进行选择。</strong></li>
</ul>
<p>核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="comment">// ⬇️⬇️⬇️【DefaultMQProducerImpl.java】</span></div><div class="line"> <span class="number">2</span>: <span class="function"><span class="keyword">private</span> SendResult <span class="title">sendDefaultImpl</span><span class="params">(//</span></span></div><div class="line"> <span class="number">3</span>:     Message msg, //</div><div class="line"> <span class="number">4</span>:     <span class="keyword">final</span> CommunicationMode communicationMode, //</div><div class="line"> <span class="number">5</span>:     <span class="keyword">final</span> SendCallback sendCallback, //</div><div class="line"> <span class="number">6</span>:     <span class="keyword">final</span> <span class="keyword">long</span> timeout//</div><div class="line"> <span class="number">7</span>: ) <span class="keyword">throws</span> MQClientException, RemotingException, MQBrokerException, InterruptedException &#123;</div><div class="line"> <span class="number">8</span>:     <span class="comment">// .... 省略：处理【校验逻辑】</span></div><div class="line"> <span class="number">9</span>:     <span class="comment">// 获取 Topic路由信息</span></div><div class="line"><span class="number">10</span>:     TopicPublishInfo topicPublishInfo = <span class="keyword">this</span>.tryToFindTopicPublishInfo(msg.getTopic());</div><div class="line"><span class="number">11</span>:     <span class="keyword">if</span> (topicPublishInfo != <span class="keyword">null</span> &amp;&amp; topicPublishInfo.ok()) &#123;</div><div class="line"><span class="number">12</span>:         MessageQueue mq = <span class="keyword">null</span>; <span class="comment">// 最后选择消息要发送到的队列</span></div><div class="line"><span class="number">13</span>:         Exception exception = <span class="keyword">null</span>;</div><div class="line"><span class="number">14</span>:         SendResult sendResult = <span class="keyword">null</span>; <span class="comment">// 最后一次发送结果</span></div><div class="line"><span class="number">15</span>:         <span class="keyword">int</span> timesTotal = communicationMode == CommunicationMode.SYNC ? <span class="number">1</span> + <span class="keyword">this</span>.defaultMQProducer.getRetryTimesWhenSendFailed() : <span class="number">1</span>; <span class="comment">// 同步多次调用</span></div><div class="line"><span class="number">16</span>:         <span class="keyword">int</span> times = <span class="number">0</span>; <span class="comment">// 第几次发送</span></div><div class="line"><span class="number">17</span>:         String[] brokersSent = <span class="keyword">new</span> String[timesTotal]; <span class="comment">// 存储每次发送消息选择的broker名</span></div><div class="line"><span class="number">18</span>:         <span class="comment">// 循环调用发送消息，直到成功</span></div><div class="line"><span class="number">19</span>:         <span class="keyword">for</span> (; times &lt; timesTotal; times++) &#123;</div><div class="line"><span class="number">20</span>:             String lastBrokerName = <span class="keyword">null</span> == mq ? <span class="keyword">null</span> : mq.getBrokerName();</div><div class="line"><span class="number">21</span>:             MessageQueue tmpmq = <span class="keyword">this</span>.selectOneMessageQueue(topicPublishInfo, lastBrokerName); <span class="comment">// 选择消息要发送到的队列</span></div><div class="line"><span class="number">22</span>:             <span class="keyword">if</span> (tmpmq != <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">23</span>:                 mq = tmpmq;</div><div class="line"><span class="number">24</span>:                 brokersSent[times] = mq.getBrokerName();</div><div class="line"><span class="number">25</span>:                 <span class="keyword">try</span> &#123;</div><div class="line"><span class="number">26</span>:                     beginTimestampPrev = System.currentTimeMillis();</div><div class="line"><span class="number">27</span>:                     <span class="comment">// 调用发送消息核心方法</span></div><div class="line"><span class="number">28</span>:                     sendResult = <span class="keyword">this</span>.sendKernelImpl(msg, mq, communicationMode, sendCallback, topicPublishInfo, timeout);</div><div class="line"><span class="number">29</span>:                     endTimestamp = System.currentTimeMillis();</div><div class="line"><span class="number">30</span>:                     <span class="comment">// 更新Broker可用性信息</span></div><div class="line"><span class="number">31</span>:                     <span class="keyword">this</span>.updateFaultItem(mq.getBrokerName(), endTimestamp - beginTimestampPrev, <span class="keyword">false</span>);</div><div class="line"><span class="number">32</span>:                     <span class="comment">// .... 省略：处理【发送返回结果】</span></div><div class="line"><span class="number">33</span>:                     &#125;</div><div class="line"><span class="number">34</span>:                 &#125; <span class="keyword">catch</span> (e) &#123; <span class="comment">// .... 省略：处理【异常】</span></div><div class="line"><span class="number">35</span>:                     </div><div class="line"><span class="number">36</span>:                 &#125;</div><div class="line"><span class="number">37</span>:             &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">38</span>:                 <span class="keyword">break</span>;</div><div class="line"><span class="number">39</span>:             &#125;</div><div class="line"><span class="number">40</span>:         &#125;</div><div class="line"><span class="number">41</span>:         <span class="comment">// .... 省略：处理【发送返回结果】</span></div><div class="line"><span class="number">42</span>:     &#125;</div><div class="line"><span class="number">43</span>:     <span class="comment">// .... 省略：处理【找不到消息路由】</span></div><div class="line"><span class="number">44</span>: &#125;</div></pre></td></tr></table></figure></p>
<p>如下是调试 <code>#sendDefaultImpl(...)</code> 时 <code>TopicPublishInfo</code> 的结果，<code>Producer</code> 获得到了 <code>broker-a</code>,<code>broker-b</code> 两个 <code>Broker</code>分组 的消息队列：
<img src="http://www.yunai.me/images/RocketMQ/2017_05_14/05.png" alt="Producer.TopicPublishInfo.调试.png"></p>
<h2>3.3 Consumer 消费消息</h2>
<ul>
<li><strong><code>Consumer</code> 消费消息时，会对 <code>Broker</code>集群 的所有队列进行选择。</strong></li>
</ul>
<h1>4. 总结</h1>
<p><img src="http://www.yunai.me/images/RocketMQ/2017_05_14/03.jpeg" alt="HA总结.jpeg"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://www.yunai.me/images/common/wechat_mp.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;🙂🙂🙂关注**微信公众号：【芋艿的后端小屋】**有福利：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Rock
    
    </summary>
    
      <category term="RocketMQ" scheme="http://www.yunai.me/categories/RocketMQ/"/>
    
    
  </entry>
  
  <entry>
    <title>RocketMQ 源码分析 —— Message 顺序发送与消费</title>
    <link href="http://www.yunai.me/RocketMQ/message-send-and-consume-orderly/"/>
    <id>http://www.yunai.me/RocketMQ/message-send-and-consume-orderly/</id>
    <published>2017-05-12T16:00:00.000Z</published>
    <updated>2017-07-27T16:56:48.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://www.yunai.me/images/common/wechat_mp.jpeg" alt=""></p>
<blockquote>
<p>🙂🙂🙂关注**微信公众号：【芋艿的后端小屋】**有福利：</p>
<ol>
<li>RocketMQ / MyCAT / Sharding-JDBC <strong>所有</strong>源码分析文章列表</li>
<li>RocketMQ / MyCAT / Sharding-JDBC <strong>中文注释源码 GitHub 地址</strong></li>
<li>您对于源码的疑问每条留言<strong>都</strong>将得到<strong>认真</strong>回复。<strong>甚至不知道如何读源码也可以请教噢</strong>。</li>
<li><strong>新的</strong>源码解析文章<strong>实时</strong>收到通知。<strong>每周更新一篇左右</strong>。</li>
<li><strong>认真的</strong>源码交流微信群。</li>
</ol>
</blockquote>
<hr>
<ul>
<li><a href="#">1. 概述</a></li>
<li><a href="#">2. Producer 顺序发送</a></li>
<li><a href="#">3. Consumer 顺序消费</a>
<ul>
<li><a href="#">3.1 获得(锁定)消息队列</a></li>
<li><a href="#">3.2 移除消息队列</a></li>
<li><a href="#">3.3 消费消息队列</a>
<ul>
<li><a href="#">3.1.1 消费消息</a></li>
<li><a href="#">3.1.2 处理消费结果</a></li>
<li><a href="#">3.13 消息处理队列核心方法</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h1>1. 概述</h1>
<p><strong>建议</strong>前置阅读内容：</p>
<ul>
<li><a href="http://www.yunai.me/RocketMQ/message-send-and-receive/">《RocketMQ 源码分析 —— Message 发送与接收》</a></li>
<li><a href="http://www.yunai.me/RocketMQ/message-pull-and-consume-second/">《RocketMQ 源码分析 —— Message 拉取与消费（下）》</a></li>
</ul>
<p>当然对 <code>Message</code> 发送与消费已经有一定了解的同学，可以选择跳过。</p>
<hr>
<p><code>RocketMQ</code> 提供了两种顺序级别：</p>
<ul>
<li>普通顺序消息 ：<code>Producer</code> 将相关联的消息发送到相同的消息队列。</li>
<li>完全严格顺序 ：在 <code>普通顺序消息</code> 的基础上，<code>Consumer</code> 严格顺序消费。</li>
</ul>
<p>绝大部分场景下只需要用到<strong>普通顺序消息</strong>。<br>
例如说：给用户发送短信消息 + 发送推送消息，将两条消息发送到不同的消息队列，若其中一条消息队列消费较慢造成堵塞，用户可能会收到两条消息会存在一定的时间差，带来的体验会相对较差。当然类似这种场景，即使有一定的时间差，<strong>不会产生系统逻辑上BUG</strong>。另外，<code>普通顺序消息</code>性能能更加好。<br>
那么什么时候使用使用<strong>完全严格顺序</strong>？如下是来自官方文档的说明：</p>
<blockquote>
<p>目前已知的应用只有数据库 <code>binlog</code> 同步强依赖严格顺序消息，其他应用绝大部分都可以容忍短暂乱序，推荐使用普通的顺序消息</p>
</blockquote>
<hr>
<p>😈上代码！！！</p>
<h1>2. <code>Producer</code> 顺序发送</h1>
<p>官方发送顺序消息的<strong>例子</strong>：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="keyword">package</span> org.apache.rocketmq.example.ordermessage;</div><div class="line"> <span class="number">2</span>: </div><div class="line"> <span class="number">3</span>: <span class="keyword">import</span> java.io.UnsupportedEncodingException;</div><div class="line"> <span class="number">4</span>: <span class="keyword">import</span> java.util.List;</div><div class="line"> <span class="number">5</span>: <span class="keyword">import</span> org.apache.rocketmq.client.exception.MQBrokerException;</div><div class="line"> <span class="number">6</span>: <span class="keyword">import</span> org.apache.rocketmq.client.exception.MQClientException;</div><div class="line"> <span class="number">7</span>: <span class="keyword">import</span> org.apache.rocketmq.client.producer.DefaultMQProducer;</div><div class="line"> <span class="number">8</span>: <span class="keyword">import</span> org.apache.rocketmq.client.producer.MQProducer;</div><div class="line"> <span class="number">9</span>: <span class="keyword">import</span> org.apache.rocketmq.client.producer.MessageQueueSelector;</div><div class="line"><span class="number">10</span>: <span class="keyword">import</span> org.apache.rocketmq.client.producer.SendResult;</div><div class="line"><span class="number">11</span>: <span class="keyword">import</span> org.apache.rocketmq.common.message.Message;</div><div class="line"><span class="number">12</span>: <span class="keyword">import</span> org.apache.rocketmq.common.message.MessageQueue;</div><div class="line"><span class="number">13</span>: <span class="keyword">import</span> org.apache.rocketmq.remoting.common.RemotingHelper;</div><div class="line"><span class="number">14</span>: <span class="keyword">import</span> org.apache.rocketmq.remoting.exception.RemotingException;</div><div class="line"><span class="number">15</span>: </div><div class="line"><span class="number">16</span>: <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>&#123;</div><div class="line"><span class="number">17</span>:     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</div><div class="line"><span class="number">18</span>:         <span class="keyword">try</span> &#123;</div><div class="line"><span class="number">19</span>:             MQProducer producer = <span class="keyword">new</span> DefaultMQProducer(<span class="string">"please_rename_unique_group_name"</span>);</div><div class="line"><span class="number">20</span>:             producer.start();</div><div class="line"><span class="number">21</span>: </div><div class="line"><span class="number">22</span>:             String[] tags = <span class="keyword">new</span> String[] &#123;<span class="string">"TagA"</span>, <span class="string">"TagB"</span>, <span class="string">"TagC"</span>, <span class="string">"TagD"</span>, <span class="string">"TagE"</span>&#125;;</div><div class="line"><span class="number">23</span>:             <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</div><div class="line"><span class="number">24</span>:                 <span class="keyword">int</span> orderId = i % <span class="number">10</span>;</div><div class="line"><span class="number">25</span>:                 Message msg =</div><div class="line"><span class="number">26</span>:                     <span class="keyword">new</span> Message(<span class="string">"TopicTestjjj"</span>, tags[i % tags.length], <span class="string">"KEY"</span> + i,</div><div class="line"><span class="number">27</span>:                         (<span class="string">"Hello RocketMQ "</span> + i).getBytes(RemotingHelper.DEFAULT_CHARSET));</div><div class="line"><span class="number">28</span>:                 SendResult sendResult = producer.send(msg, <span class="keyword">new</span> MessageQueueSelector() &#123;</div><div class="line"><span class="number">29</span>:                     <span class="meta">@Override</span></div><div class="line"><span class="number">30</span>:                     <span class="function"><span class="keyword">public</span> MessageQueue <span class="title">select</span><span class="params">(List&lt;MessageQueue&gt; mqs, Message msg, Object arg)</span> </span>&#123;</div><div class="line"><span class="number">31</span>:                         Integer id = (Integer) arg;</div><div class="line"><span class="number">32</span>:                         <span class="keyword">int</span> index = id % mqs.size();</div><div class="line"><span class="number">33</span>:                         <span class="keyword">return</span> mqs.get(index);</div><div class="line"><span class="number">34</span>:                     &#125;</div><div class="line"><span class="number">35</span>:                 &#125;, orderId);</div><div class="line"><span class="number">36</span>: </div><div class="line"><span class="number">37</span>:                 System.out.printf(<span class="string">"%s%n"</span>, sendResult);</div><div class="line"><span class="number">38</span>:             &#125;</div><div class="line"><span class="number">39</span>: </div><div class="line"><span class="number">40</span>:             producer.shutdown();</div><div class="line"><span class="number">41</span>:         &#125; <span class="keyword">catch</span> (MQClientException | RemotingException | MQBrokerException | InterruptedException e) &#123;</div><div class="line"><span class="number">42</span>:             e.printStackTrace();</div><div class="line"><span class="number">43</span>:         &#125;</div><div class="line"><span class="number">44</span>:     &#125;</div><div class="line"><span class="number">45</span>: &#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>第 28 至 35 行 ：实现了根据 <code>id % mqs.size()</code> 来进行消息队列的选择。当前例子，<strong>我们传递 <code>orderId</code> 作为参数，那么相同的 <code>orderId</code> 能够进入相同的消息队列</strong>。</li>
</ul>
<hr>
<p><code>MessageQueueSelector</code> 接口的<strong>源码</strong>：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MessageQueueSelector</span> </span>&#123;</div><div class="line"> <span class="number">2</span>: </div><div class="line"> <span class="number">3</span>:     <span class="comment">/**</span></div><div class="line"> 4:      * 选择消息队列</div><div class="line"> 5:      *</div><div class="line"> 6:      * <span class="doctag">@param</span> mqs 消息队列</div><div class="line"> 7:      * <span class="doctag">@param</span> msg 消息</div><div class="line"> 8:      * <span class="doctag">@param</span> arg 参数</div><div class="line"> 9:      * <span class="doctag">@return</span> 消息队列</div><div class="line">10:      */</div><div class="line"><span class="number">11</span>:     <span class="function">MessageQueue <span class="title">select</span><span class="params">(<span class="keyword">final</span> List&lt;MessageQueue&gt; mqs, <span class="keyword">final</span> Message msg, <span class="keyword">final</span> Object arg)</span></span>;</div><div class="line"><span class="number">12</span>: &#125;</div></pre></td></tr></table></figure></p>
<hr>
<p><code>Producer</code> 选择队列发送消息方法的<strong>源码</strong>：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="number">16</span>: <span class="function"><span class="keyword">private</span> SendResult <span class="title">sendSelectImpl</span><span class="params">(//</span></span></div><div class="line"><span class="number">17</span>:     Message msg, //</div><div class="line"><span class="number">18</span>:     MessageQueueSelector selector, //</div><div class="line"><span class="number">19</span>:     Object arg, //</div><div class="line"><span class="number">20</span>:     <span class="keyword">final</span> CommunicationMode communicationMode, //</div><div class="line"><span class="number">21</span>:     <span class="keyword">final</span> SendCallback sendCallback, <span class="keyword">final</span> <span class="keyword">long</span> timeout//</div><div class="line"><span class="number">22</span>: ) <span class="keyword">throws</span> MQClientException, RemotingException, MQBrokerException, InterruptedException &#123;</div><div class="line"><span class="number">23</span>:     <span class="keyword">this</span>.makeSureStateOK();</div><div class="line"><span class="number">24</span>:     Validators.checkMessage(msg, <span class="keyword">this</span>.defaultMQProducer);</div><div class="line"><span class="number">25</span>: </div><div class="line"><span class="number">26</span>:     TopicPublishInfo topicPublishInfo = <span class="keyword">this</span>.tryToFindTopicPublishInfo(msg.getTopic());</div><div class="line"><span class="number">27</span>:     <span class="keyword">if</span> (topicPublishInfo != <span class="keyword">null</span> &amp;&amp; topicPublishInfo.ok()) &#123;</div><div class="line"><span class="number">28</span>:         MessageQueue mq = <span class="keyword">null</span>;</div><div class="line"><span class="number">29</span>:         <span class="keyword">try</span> &#123;</div><div class="line"><span class="number">30</span>:             mq = selector.select(topicPublishInfo.getMessageQueueList(), msg, arg);</div><div class="line"><span class="number">31</span>:         &#125; <span class="keyword">catch</span> (Throwable e) &#123;</div><div class="line"><span class="number">32</span>:             <span class="keyword">throw</span> <span class="keyword">new</span> MQClientException(<span class="string">"select message queue throwed exception."</span>, e);</div><div class="line"><span class="number">33</span>:         &#125;</div><div class="line"><span class="number">34</span>: </div><div class="line"><span class="number">35</span>:         <span class="keyword">if</span> (mq != <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">36</span>:             <span class="keyword">return</span> <span class="keyword">this</span>.sendKernelImpl(msg, mq, communicationMode, sendCallback, <span class="keyword">null</span>, timeout);</div><div class="line"><span class="number">37</span>:         &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">38</span>:             <span class="keyword">throw</span> <span class="keyword">new</span> MQClientException(<span class="string">"select message queue return null."</span>, <span class="keyword">null</span>);</div><div class="line"><span class="number">39</span>:         &#125;</div><div class="line"><span class="number">40</span>:     &#125;</div><div class="line"><span class="number">41</span>: </div><div class="line"><span class="number">42</span>:     <span class="keyword">throw</span> <span class="keyword">new</span> MQClientException(<span class="string">"No route info for this topic, "</span> + msg.getTopic(), <span class="keyword">null</span>);</div><div class="line"><span class="number">43</span>: &#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>第 30 行 ：选择消息队列。</li>
<li>第 36 行 ：发送消息。</li>
</ul>
<h1>3. <code>Consumer</code> 严格顺序消费</h1>
<p><code>Consumer</code> 在严格顺序消费时，通过 <strong>三</strong> 把锁保证严格顺序消费。</p>
<ul>
<li><code>Broker</code> 消息队列锁（<strong>分布式锁</strong>） ：
<ul>
<li>集群模式下，<code>Consumer</code> 从 <code>Broker</code> 获得该锁后，才能进行消息拉取、消费。</li>
<li>广播模式下，<code>Consumer</code> 无需该锁。</li>
</ul>
</li>
<li><code>Consumer</code> 消息队列锁（<strong>本地锁</strong>） ：<code>Consumer</code> 获得该锁才能操作消息队列。</li>
<li><code>Consumer</code> 消息处理队列消费锁（<strong>本地锁</strong>） ：<code>Consumer</code> 获得该锁才能消费消息队列。</li>
</ul>
<p><strong>可能同学有疑问，为什么有 <code>Consumer</code> 消息队列锁还需要有 <code>Consumer</code> 消息队列消费锁呢</strong>？😈让我们带着疑问继续往下看。</p>
<hr>
<h2>3.1 获得(锁定)消息队列</h2>
<p><strong>集群模式</strong>下，<code>Consumer</code> 更新属于自己的消息队列时，会向 <code>Broker</code> 锁定该消息队列（<em>广播模式下不需要</em>）。如果锁定失败，则更新失败，即该消息队列不属于自己，不能进行消费。核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="comment">// ⬇️⬇️⬇️【RebalanceImpl.java】</span></div><div class="line"> <span class="number">2</span>: <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">updateProcessQueueTableInRebalance</span><span class="params">(<span class="keyword">final</span> String topic, <span class="keyword">final</span> Set&lt;MessageQueue&gt; mqSet, <span class="keyword">final</span> <span class="keyword">boolean</span> isOrder)</span> </span>&#123;</div><div class="line"> <span class="number">3</span>: <span class="comment">// ..... 此处省略部分代码 </span></div><div class="line"> <span class="number">4</span>:     <span class="comment">// 增加 不在processQueueTable &amp;&amp; 存在于mqSet 里的消息队列。</span></div><div class="line"> <span class="number">5</span>:     List&lt;PullRequest&gt; pullRequestList = <span class="keyword">new</span> ArrayList&lt;&gt;(); <span class="comment">// 拉消息请求数组</span></div><div class="line"> <span class="number">6</span>:     <span class="keyword">for</span> (MessageQueue mq : mqSet) &#123;</div><div class="line"> <span class="number">7</span>:         <span class="keyword">if</span> (!<span class="keyword">this</span>.processQueueTable.containsKey(mq)) &#123;</div><div class="line"> <span class="number">8</span>:             <span class="keyword">if</span> (isOrder &amp;&amp; !<span class="keyword">this</span>.lock(mq)) &#123; <span class="comment">// 顺序消息锁定消息队列</span></div><div class="line"> <span class="number">9</span>:                 log.warn(<span class="string">"doRebalance, &#123;&#125;, add a new mq failed, &#123;&#125;, because lock failed"</span>, consumerGroup, mq);</div><div class="line"><span class="number">10</span>:                 <span class="keyword">continue</span>;</div><div class="line"><span class="number">11</span>:             &#125;</div><div class="line"><span class="number">12</span>: </div><div class="line"><span class="number">13</span>:             <span class="keyword">this</span>.removeDirtyOffset(mq);</div><div class="line"><span class="number">14</span>:             ProcessQueue pq = <span class="keyword">new</span> ProcessQueue();</div><div class="line"><span class="number">15</span>:             <span class="keyword">long</span> nextOffset = <span class="keyword">this</span>.computePullFromWhere(mq);</div><div class="line"><span class="number">16</span>:             <span class="keyword">if</span> (nextOffset &gt;= <span class="number">0</span>) &#123;</div><div class="line"><span class="number">17</span>:                 ProcessQueue pre = <span class="keyword">this</span>.processQueueTable.putIfAbsent(mq, pq);</div><div class="line"><span class="number">18</span>:                 <span class="keyword">if</span> (pre != <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">19</span>:                     log.info(<span class="string">"doRebalance, &#123;&#125;, mq already exists, &#123;&#125;"</span>, consumerGroup, mq);</div><div class="line"><span class="number">20</span>:                 &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">21</span>:                     log.info(<span class="string">"doRebalance, &#123;&#125;, add a new mq, &#123;&#125;"</span>, consumerGroup, mq);</div><div class="line"><span class="number">22</span>:                     PullRequest pullRequest = <span class="keyword">new</span> PullRequest();</div><div class="line"><span class="number">23</span>:                     pullRequest.setConsumerGroup(consumerGroup);</div><div class="line"><span class="number">24</span>:                     pullRequest.setNextOffset(nextOffset);</div><div class="line"><span class="number">25</span>:                     pullRequest.setMessageQueue(mq);</div><div class="line"><span class="number">26</span>:                     pullRequest.setProcessQueue(pq);</div><div class="line"><span class="number">27</span>:                     pullRequestList.add(pullRequest);</div><div class="line"><span class="number">28</span>:                     changed = <span class="keyword">true</span>;</div><div class="line"><span class="number">29</span>:                 &#125;</div><div class="line"><span class="number">30</span>:             &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">31</span>:                 log.warn(<span class="string">"doRebalance, &#123;&#125;, add new mq failed, &#123;&#125;"</span>, consumerGroup, mq);</div><div class="line"><span class="number">32</span>:             &#125;</div><div class="line"><span class="number">33</span>:         &#125;</div><div class="line"><span class="number">34</span>:     &#125;</div><div class="line"><span class="number">35</span>: </div><div class="line"><span class="number">36</span>: <span class="comment">// ..... 此处省略部分代码 </span></div><div class="line"><span class="number">37</span>: &#125;</div><div class="line"><span class="number">38</span>: </div><div class="line"><span class="number">39</span>: <span class="comment">// ⬇️⬇️⬇️【RebalanceImpl.java】</span></div><div class="line"><span class="number">40</span>: <span class="comment">/**</span></div><div class="line">41:  * 请求Broker获得指定消息队列的分布式锁</div><div class="line">42:  *</div><div class="line">43:  * <span class="doctag">@param</span> mq 队列</div><div class="line">44:  * <span class="doctag">@return</span> 是否成功</div><div class="line">45:  */</div><div class="line"><span class="number">46</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lock</span><span class="params">(<span class="keyword">final</span> MessageQueue mq)</span> </span>&#123;</div><div class="line"><span class="number">47</span>:     FindBrokerResult findBrokerResult = <span class="keyword">this</span>.mQClientFactory.findBrokerAddressInSubscribe(mq.getBrokerName(), MixAll.MASTER_ID, <span class="keyword">true</span>);</div><div class="line"><span class="number">48</span>:     <span class="keyword">if</span> (findBrokerResult != <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">49</span>:         LockBatchRequestBody requestBody = <span class="keyword">new</span> LockBatchRequestBody();</div><div class="line"><span class="number">50</span>:         requestBody.setConsumerGroup(<span class="keyword">this</span>.consumerGroup);</div><div class="line"><span class="number">51</span>:         requestBody.setClientId(<span class="keyword">this</span>.mQClientFactory.getClientId());</div><div class="line"><span class="number">52</span>:         requestBody.getMqSet().add(mq);</div><div class="line"><span class="number">53</span>: </div><div class="line"><span class="number">54</span>:         <span class="keyword">try</span> &#123;</div><div class="line"><span class="number">55</span>:             <span class="comment">// 请求Broker获得指定消息队列的分布式锁</span></div><div class="line"><span class="number">56</span>:             Set&lt;MessageQueue&gt; lockedMq =</div><div class="line"><span class="number">57</span>:                 <span class="keyword">this</span>.mQClientFactory.getMQClientAPIImpl().lockBatchMQ(findBrokerResult.getBrokerAddr(), requestBody, <span class="number">1000</span>);</div><div class="line"><span class="number">58</span>: </div><div class="line"><span class="number">59</span>:             <span class="comment">// 设置消息处理队列锁定成功。锁定消息队列成功，可能本地没有消息处理队列，设置锁定成功会在lockAll()方法。</span></div><div class="line"><span class="number">60</span>:             <span class="keyword">for</span> (MessageQueue mmqq : lockedMq) &#123;</div><div class="line"><span class="number">61</span>:                 ProcessQueue processQueue = <span class="keyword">this</span>.processQueueTable.get(mmqq);</div><div class="line"><span class="number">62</span>:                 <span class="keyword">if</span> (processQueue != <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">63</span>:                     processQueue.setLocked(<span class="keyword">true</span>);</div><div class="line"><span class="number">64</span>:                     processQueue.setLastLockTimestamp(System.currentTimeMillis());</div><div class="line"><span class="number">65</span>:                 &#125;</div><div class="line"><span class="number">66</span>:             &#125;</div><div class="line"><span class="number">67</span>: </div><div class="line"><span class="number">68</span>:             <span class="keyword">boolean</span> lockOK = lockedMq.contains(mq);</div><div class="line"><span class="number">69</span>:             log.info(<span class="string">"the message queue lock &#123;&#125;, &#123;&#125; &#123;&#125;"</span>,</div><div class="line"><span class="number">70</span>:                 lockOK ? <span class="string">"OK"</span> : <span class="string">"Failed"</span>,</div><div class="line"><span class="number">71</span>:                 <span class="keyword">this</span>.consumerGroup,</div><div class="line"><span class="number">72</span>:                 mq);</div><div class="line"><span class="number">73</span>:             <span class="keyword">return</span> lockOK;</div><div class="line"><span class="number">74</span>:         &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"><span class="number">75</span>:             log.error(<span class="string">"lockBatchMQ exception, "</span> + mq, e);</div><div class="line"><span class="number">76</span>:         &#125;</div><div class="line"><span class="number">77</span>:     &#125;</div><div class="line"><span class="number">78</span>: </div><div class="line"><span class="number">79</span>:     <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line"><span class="number">80</span>: &#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>⬆️⬆️⬆️</li>
<li>第 8 至 11 行 ：顺序消费时，锁定消息队列。如果锁定失败，新增消息处理队列失败。</li>
</ul>
<hr>
<p><code>Broker</code> 消息队列锁会过期，默认配置 30s。因此，<code>Consumer</code> 需要不断向 <code>Broker</code> 刷新该锁过期时间，默认配置 20s 刷新一次。核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="comment">// ⬇️⬇️⬇️【ConsumeMessageOrderlyService.java】</span></div><div class="line"> <span class="number">2</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</div><div class="line"> <span class="number">3</span>:     <span class="keyword">if</span> (MessageModel.CLUSTERING.equals(ConsumeMessageOrderlyService.<span class="keyword">this</span>.defaultMQPushConsumerImpl.messageModel())) &#123;</div><div class="line"> <span class="number">4</span>:         <span class="keyword">this</span>.scheduledExecutorService.scheduleAtFixedRate(<span class="keyword">new</span> Runnable() &#123;</div><div class="line"> <span class="number">5</span>:             <span class="meta">@Override</span></div><div class="line"> <span class="number">6</span>:             <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line"> <span class="number">7</span>:                 ConsumeMessageOrderlyService.<span class="keyword">this</span>.lockMQPeriodically();</div><div class="line"> <span class="number">8</span>:             &#125;</div><div class="line"> <span class="number">9</span>:         &#125;, <span class="number">1000</span> * <span class="number">1</span>, ProcessQueue.REBALANCE_LOCK_INTERVAL, TimeUnit.MILLISECONDS);</div><div class="line"><span class="number">10</span>:     &#125;</div><div class="line"><span class="number">11</span>: &#125;</div></pre></td></tr></table></figure></p>
<h2>3.2 移除消息队列</h2>
<p>集群模式下，<code>Consumer</code> 移除自己的消息队列时，会向 <code>Broker</code> 解锁该消息队列（广播模式下不需要）。核心代码如下：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="comment">// ⬇️⬇️⬇️【RebalancePushImpl.java】</span></div><div class="line"> <span class="number">2</span>: <span class="comment">/**</span></div><div class="line"> 3:  * 移除不需要的队列相关的信息</div><div class="line"> 4:  * 1. 持久化消费进度，并移除之</div><div class="line"> 5:  * 2. 顺序消费&amp;集群模式，解锁对该队列的锁定</div><div class="line"> 6:  *</div><div class="line"> 7:  * <span class="doctag">@param</span> mq 消息队列</div><div class="line"> 8:  * <span class="doctag">@param</span> pq 消息处理队列</div><div class="line"> 9:  * <span class="doctag">@return</span> 是否移除成功</div><div class="line">10:  */</div><div class="line"><span class="number">11</span>: <span class="meta">@Override</span></div><div class="line"><span class="number">12</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">removeUnnecessaryMessageQueue</span><span class="params">(MessageQueue mq, ProcessQueue pq)</span> </span>&#123;</div><div class="line"><span class="number">13</span>:     <span class="comment">// 同步队列的消费进度，并移除之。</span></div><div class="line"><span class="number">14</span>:     <span class="keyword">this</span>.defaultMQPushConsumerImpl.getOffsetStore().persist(mq);</div><div class="line"><span class="number">15</span>:     <span class="keyword">this</span>.defaultMQPushConsumerImpl.getOffsetStore().removeOffset(mq);</div><div class="line"><span class="number">16</span>:     <span class="comment">// 集群模式下，顺序消费移除时，解锁对队列的锁定</span></div><div class="line"><span class="number">17</span>:     <span class="keyword">if</span> (<span class="keyword">this</span>.defaultMQPushConsumerImpl.isConsumeOrderly()</div><div class="line"><span class="number">18</span>:         &amp;&amp; MessageModel.CLUSTERING.equals(<span class="keyword">this</span>.defaultMQPushConsumerImpl.messageModel())) &#123;</div><div class="line"><span class="number">19</span>:         <span class="keyword">try</span> &#123;</div><div class="line"><span class="number">20</span>:             <span class="keyword">if</span> (pq.getLockConsume().tryLock(<span class="number">1000</span>, TimeUnit.MILLISECONDS)) &#123;</div><div class="line"><span class="number">21</span>:                 <span class="keyword">try</span> &#123;</div><div class="line"><span class="number">22</span>:                     <span class="keyword">return</span> <span class="keyword">this</span>.unlockDelay(mq, pq);</div><div class="line"><span class="number">23</span>:                 &#125; <span class="keyword">finally</span> &#123;</div><div class="line"><span class="number">24</span>:                     pq.getLockConsume().unlock();</div><div class="line"><span class="number">25</span>:                 &#125;</div><div class="line"><span class="number">26</span>:             &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">27</span>:                 log.warn(<span class="string">"[WRONG]mq is consuming, so can not unlock it, &#123;&#125;. maybe hanged for a while, &#123;&#125;"</span>, <span class="comment">//</span></div><div class="line"><span class="number">28</span>:                     mq, <span class="comment">//</span></div><div class="line"><span class="number">29</span>:                     pq.getTryUnlockTimes());</div><div class="line"><span class="number">30</span>: </div><div class="line"><span class="number">31</span>:                 pq.incTryUnlockTimes();</div><div class="line"><span class="number">32</span>:             &#125;</div><div class="line"><span class="number">33</span>:         &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"><span class="number">34</span>:             log.error(<span class="string">"removeUnnecessaryMessageQueue Exception"</span>, e);</div><div class="line"><span class="number">35</span>:         &#125;</div><div class="line"><span class="number">36</span>: </div><div class="line"><span class="number">37</span>:         <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line"><span class="number">38</span>:     &#125;</div><div class="line"><span class="number">39</span>:     <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line"><span class="number">40</span>: &#125;</div><div class="line"><span class="number">41</span>: </div><div class="line"><span class="number">42</span>: <span class="comment">// ⬇️⬇️⬇️【RebalancePushImpl.java】</span></div><div class="line"><span class="number">43</span>: <span class="comment">/**</span></div><div class="line">44:  * 延迟解锁 Broker 消息队列锁</div><div class="line">45:  * 当消息处理队列不存在消息，则直接解锁</div><div class="line">46:  *</div><div class="line">47:  * <span class="doctag">@param</span> mq 消息队列</div><div class="line">48:  * <span class="doctag">@param</span> pq 消息处理队列</div><div class="line">49:  * <span class="doctag">@return</span> 是否解锁成功</div><div class="line">50:  */</div><div class="line"><span class="number">51</span>: <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">unlockDelay</span><span class="params">(<span class="keyword">final</span> MessageQueue mq, <span class="keyword">final</span> ProcessQueue pq)</span> </span>&#123;</div><div class="line"><span class="number">52</span>:     <span class="keyword">if</span> (pq.hasTempMessage()) &#123; <span class="comment">// TODO 疑问：为什么要延迟移除</span></div><div class="line"><span class="number">53</span>:         log.info(<span class="string">"[&#123;&#125;]unlockDelay, begin &#123;&#125; "</span>, mq.hashCode(), mq);</div><div class="line"><span class="number">54</span>:         <span class="keyword">this</span>.defaultMQPushConsumerImpl.getmQClientFactory().getScheduledExecutorService().schedule(<span class="keyword">new</span> Runnable() &#123;</div><div class="line"><span class="number">55</span>:             <span class="meta">@Override</span></div><div class="line"><span class="number">56</span>:             <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="number">57</span>:                 log.info(<span class="string">"[&#123;&#125;]unlockDelay, execute at once &#123;&#125;"</span>, mq.hashCode(), mq);</div><div class="line"><span class="number">58</span>:                 RebalancePushImpl.<span class="keyword">this</span>.unlock(mq, <span class="keyword">true</span>);</div><div class="line"><span class="number">59</span>:             &#125;</div><div class="line"><span class="number">60</span>:         &#125;, UNLOCK_DELAY_TIME_MILLS, TimeUnit.MILLISECONDS);</div><div class="line"><span class="number">61</span>:     &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">62</span>:         <span class="keyword">this</span>.unlock(mq, <span class="keyword">true</span>);</div><div class="line"><span class="number">63</span>:     &#125;</div><div class="line"><span class="number">64</span>:     <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line"><span class="number">65</span>: &#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>⬆️⬆️⬆️</li>
<li>第 20 至 32 行 ：获取<strong>消息队列消费锁</strong>，避免和消息队列消费冲突。如果获取锁失败，则移除消息队列失败，等待下次重新分配消费队列时，再进行移除。如果未获得锁而进行移除，则可能出现另外的  <code>Consumer</code> 和当前 <code>Consumer</code> 同时消费该消息队列，导致消息无法严格顺序消费。</li>
<li>第 51 至 64 行 ：解锁 <code>Broker</code> 消息队列锁。如果消息处理队列存在剩余消息，则延迟解锁 <code>Broker</code> 消息队列锁。❓为什么消息处理队列存在剩余消息不能直接解锁呢？😈我也不知道，百思不得其解。如果有知道的同学麻烦教育下俺。</li>
</ul>
<h2>3.3 消费消息队列</h2>
<p>😏本节会类比<strong>并发消费消费队列</strong>，建议对照 <a href="http://www.yunai.me/RocketMQ/message-pull-and-consume-second/#6%E3%80%81PushConsumer-%E6%B6%88%E8%B4%B9%E6%B6%88%E6%81%AF">PushConsumer并发消费消息</a> 一起理解。</p>
<h3>3.1.1 消费消息</h3>
<p><img src="http://www.yunai.me/images/RocketMQ/2017_05_13/01.png" alt="顺序消费活动图-消费消息"></p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">  <span class="number">1</span>: <span class="comment">// ⬇️⬇️⬇️【ConsumeMessageOrderlyService.java】</span></div><div class="line">  <span class="number">2</span>: <span class="class"><span class="keyword">class</span> <span class="title">ConsumeRequest</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">  <span class="number">3</span>: </div><div class="line">  <span class="number">4</span>:     <span class="comment">/**</span></div><div class="line">  5:      * 消息处理队列</div><div class="line">  6:      */</div><div class="line">  <span class="number">7</span>:     <span class="keyword">private</span> <span class="keyword">final</span> ProcessQueue processQueue;</div><div class="line">  <span class="number">8</span>:     <span class="comment">/**</span></div><div class="line">  9:      * 消息队列</div><div class="line"> 10:      */</div><div class="line"> <span class="number">11</span>:     <span class="keyword">private</span> <span class="keyword">final</span> MessageQueue messageQueue;</div><div class="line"> <span class="number">12</span>: </div><div class="line"> <span class="number">13</span>:     <span class="meta">@Override</span></div><div class="line"> <span class="number">14</span>:     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line"> <span class="number">15</span>:         <span class="keyword">if</span> (<span class="keyword">this</span>.processQueue.isDropped()) &#123;</div><div class="line"> <span class="number">16</span>:             log.warn(<span class="string">"run, the message queue not be able to consume, because it's dropped. &#123;&#125;"</span>, <span class="keyword">this</span>.messageQueue);</div><div class="line"> <span class="number">17</span>:             <span class="keyword">return</span>;</div><div class="line"> <span class="number">18</span>:         &#125;</div><div class="line"> <span class="number">19</span>: </div><div class="line"> <span class="number">20</span>:         <span class="comment">// 获得 Consumer 消息队列锁</span></div><div class="line"> <span class="number">21</span>:         <span class="keyword">final</span> Object objLock = messageQueueLock.fetchLockObject(<span class="keyword">this</span>.messageQueue);</div><div class="line"> <span class="number">22</span>:         <span class="keyword">synchronized</span> (objLock) &#123;</div><div class="line"> <span class="number">23</span>:             <span class="comment">// (广播模式) 或者 (集群模式 &amp;&amp; Broker消息队列锁有效)</span></div><div class="line"> <span class="number">24</span>:             <span class="keyword">if</span> (MessageModel.BROADCASTING.equals(ConsumeMessageOrderlyService.<span class="keyword">this</span>.defaultMQPushConsumerImpl.messageModel())</div><div class="line"> <span class="number">25</span>:                 || (<span class="keyword">this</span>.processQueue.isLocked() &amp;&amp; !<span class="keyword">this</span>.processQueue.isLockExpired())) &#123;</div><div class="line"> <span class="number">26</span>:                 <span class="keyword">final</span> <span class="keyword">long</span> beginTime = System.currentTimeMillis();</div><div class="line"> <span class="number">27</span>:                 <span class="comment">// 循环</span></div><div class="line"> <span class="number">28</span>:                 <span class="keyword">for</span> (<span class="keyword">boolean</span> continueConsume = <span class="keyword">true</span>; continueConsume; ) &#123;</div><div class="line"> <span class="number">29</span>:                     <span class="keyword">if</span> (<span class="keyword">this</span>.processQueue.isDropped()) &#123;</div><div class="line"> <span class="number">30</span>:                         log.warn(<span class="string">"the message queue not be able to consume, because it's dropped. &#123;&#125;"</span>, <span class="keyword">this</span>.messageQueue);</div><div class="line"> <span class="number">31</span>:                         <span class="keyword">break</span>;</div><div class="line"> <span class="number">32</span>:                     &#125;</div><div class="line"> <span class="number">33</span>: </div><div class="line"> <span class="number">34</span>:                     <span class="comment">// 消息队列分布式锁未锁定，提交延迟获得锁并消费请求</span></div><div class="line"> <span class="number">35</span>:                     <span class="keyword">if</span> (MessageModel.CLUSTERING.equals(ConsumeMessageOrderlyService.<span class="keyword">this</span>.defaultMQPushConsumerImpl.messageModel())</div><div class="line"> <span class="number">36</span>:                         &amp;&amp; !<span class="keyword">this</span>.processQueue.isLocked()) &#123;</div><div class="line"> <span class="number">37</span>:                         log.warn(<span class="string">"the message queue not locked, so consume later, &#123;&#125;"</span>, <span class="keyword">this</span>.messageQueue);</div><div class="line"> <span class="number">38</span>:                         ConsumeMessageOrderlyService.<span class="keyword">this</span>.tryLockLaterAndReconsume(<span class="keyword">this</span>.messageQueue, <span class="keyword">this</span>.processQueue, <span class="number">10</span>);</div><div class="line"> <span class="number">39</span>:                         <span class="keyword">break</span>;</div><div class="line"> <span class="number">40</span>:                     &#125;</div><div class="line"> <span class="number">41</span>:                     <span class="comment">// 消息队列分布式锁已经过期，提交延迟获得锁并消费请求</span></div><div class="line"> <span class="number">42</span>:                     <span class="keyword">if</span> (MessageModel.CLUSTERING.equals(ConsumeMessageOrderlyService.<span class="keyword">this</span>.defaultMQPushConsumerImpl.messageModel())</div><div class="line"> <span class="number">43</span>:                         &amp;&amp; <span class="keyword">this</span>.processQueue.isLockExpired()) &#123;</div><div class="line"> <span class="number">44</span>:                         log.warn(<span class="string">"the message queue lock expired, so consume later, &#123;&#125;"</span>, <span class="keyword">this</span>.messageQueue);</div><div class="line"> <span class="number">45</span>:                         ConsumeMessageOrderlyService.<span class="keyword">this</span>.tryLockLaterAndReconsume(<span class="keyword">this</span>.messageQueue, <span class="keyword">this</span>.processQueue, <span class="number">10</span>);</div><div class="line"> <span class="number">46</span>:                         <span class="keyword">break</span>;</div><div class="line"> <span class="number">47</span>:                     &#125;</div><div class="line"> <span class="number">48</span>: </div><div class="line"> <span class="number">49</span>:                     <span class="comment">// 当前周期消费时间超过连续时长，默认：60s，提交延迟消费请求。默认情况下，每消费1分钟休息10ms。</span></div><div class="line"> <span class="number">50</span>:                     <span class="keyword">long</span> interval = System.currentTimeMillis() - beginTime;</div><div class="line"> <span class="number">51</span>:                     <span class="keyword">if</span> (interval &gt; MAX_TIME_CONSUME_CONTINUOUSLY) &#123;</div><div class="line"> <span class="number">52</span>:                         ConsumeMessageOrderlyService.<span class="keyword">this</span>.submitConsumeRequestLater(processQueue, messageQueue, <span class="number">10</span>);</div><div class="line"> <span class="number">53</span>:                         <span class="keyword">break</span>;</div><div class="line"> <span class="number">54</span>:                     &#125;</div><div class="line"> <span class="number">55</span>: </div><div class="line"> <span class="number">56</span>:                     <span class="comment">// 获取消费消息。此处和并发消息请求不同，并发消息请求已经带了消费哪些消息。</span></div><div class="line"> <span class="number">57</span>:                     <span class="keyword">final</span> <span class="keyword">int</span> consumeBatchSize = ConsumeMessageOrderlyService.<span class="keyword">this</span>.defaultMQPushConsumer.getConsumeMessageBatchMaxSize();</div><div class="line"> <span class="number">58</span>:                     List&lt;MessageExt&gt; msgs = <span class="keyword">this</span>.processQueue.takeMessags(consumeBatchSize);</div><div class="line"> <span class="number">59</span>:                     <span class="keyword">if</span> (!msgs.isEmpty()) &#123;</div><div class="line"> <span class="number">60</span>:                         <span class="keyword">final</span> ConsumeOrderlyContext context = <span class="keyword">new</span> ConsumeOrderlyContext(<span class="keyword">this</span>.messageQueue);</div><div class="line"> <span class="number">61</span>: </div><div class="line"> <span class="number">62</span>:                         ConsumeOrderlyStatus status = <span class="keyword">null</span>;</div><div class="line"> <span class="number">63</span>: </div><div class="line"> <span class="number">64</span>:                         <span class="comment">// ....省略代码：Hook：before</span></div><div class="line"> <span class="number">65</span>: </div><div class="line"> <span class="number">66</span>:                         <span class="comment">// 执行消费</span></div><div class="line"> <span class="number">67</span>:                         <span class="keyword">long</span> beginTimestamp = System.currentTimeMillis();</div><div class="line"> <span class="number">68</span>:                         ConsumeReturnType returnType = ConsumeReturnType.SUCCESS;</div><div class="line"> <span class="number">69</span>:                         <span class="keyword">boolean</span> hasException = <span class="keyword">false</span>;</div><div class="line"> <span class="number">70</span>:                         <span class="keyword">try</span> &#123;</div><div class="line"> <span class="number">71</span>:                             <span class="keyword">this</span>.processQueue.getLockConsume().lock(); <span class="comment">// 锁定队列消费锁</span></div><div class="line"> <span class="number">72</span>: </div><div class="line"> <span class="number">73</span>:                             <span class="keyword">if</span> (<span class="keyword">this</span>.processQueue.isDropped()) &#123;</div><div class="line"> <span class="number">74</span>:                                 log.warn(<span class="string">"consumeMessage, the message queue not be able to consume, because it's dropped. &#123;&#125;"</span>,</div><div class="line"> <span class="number">75</span>:                                     <span class="keyword">this</span>.messageQueue);</div><div class="line"> <span class="number">76</span>:                                 <span class="keyword">break</span>;</div><div class="line"> <span class="number">77</span>:                             &#125;</div><div class="line"> <span class="number">78</span>: </div><div class="line"> <span class="number">79</span>:                             status = messageListener.consumeMessage(Collections.unmodifiableList(msgs), context);</div><div class="line"> <span class="number">80</span>:                         &#125; <span class="keyword">catch</span> (Throwable e) &#123;</div><div class="line"> <span class="number">81</span>:                             log.warn(<span class="string">"consumeMessage exception: &#123;&#125; Group: &#123;&#125; Msgs: &#123;&#125; MQ: &#123;&#125;"</span>, <span class="comment">//</span></div><div class="line"> <span class="number">82</span>:                                 RemotingHelper.exceptionSimpleDesc(e), <span class="comment">//</span></div><div class="line"> <span class="number">83</span>:                                 ConsumeMessageOrderlyService.<span class="keyword">this</span>.consumerGroup, <span class="comment">//</span></div><div class="line"> <span class="number">84</span>:                                 msgs, <span class="comment">//</span></div><div class="line"> <span class="number">85</span>:                                 messageQueue);</div><div class="line"> <span class="number">86</span>:                             hasException = <span class="keyword">true</span>;</div><div class="line"> <span class="number">87</span>:                         &#125; <span class="keyword">finally</span> &#123;</div><div class="line"> <span class="number">88</span>:                             <span class="keyword">this</span>.processQueue.getLockConsume().unlock(); <span class="comment">// 锁定队列消费锁</span></div><div class="line"> <span class="number">89</span>:                         &#125;</div><div class="line"> <span class="number">90</span>: </div><div class="line"> <span class="number">91</span>:                         <span class="comment">// ....省略代码：解析消费结果状态</span></div><div class="line"> <span class="number">92</span>: </div><div class="line"> <span class="number">93</span>:                         <span class="comment">// ....省略代码：Hook：after</span></div><div class="line"> <span class="number">94</span>: </div><div class="line"> <span class="number">95</span>:                         ConsumeMessageOrderlyService.<span class="keyword">this</span>.getConsumerStatsManager()</div><div class="line"> <span class="number">96</span>:                             .incConsumeRT(ConsumeMessageOrderlyService.<span class="keyword">this</span>.consumerGroup, messageQueue.getTopic(), consumeRT);</div><div class="line"> <span class="number">97</span>: </div><div class="line"> <span class="number">98</span>:                         <span class="comment">// 处理消费结果</span></div><div class="line"> <span class="number">99</span>:                         continueConsume = ConsumeMessageOrderlyService.<span class="keyword">this</span>.processConsumeResult(msgs, status, context, <span class="keyword">this</span>);</div><div class="line"><span class="number">100</span>:                     &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">101</span>:                         continueConsume = <span class="keyword">false</span>;</div><div class="line"><span class="number">102</span>:                     &#125;</div><div class="line"><span class="number">103</span>:                 &#125;</div><div class="line"><span class="number">104</span>:             &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">105</span>:                 <span class="keyword">if</span> (<span class="keyword">this</span>.processQueue.isDropped()) &#123;</div><div class="line"><span class="number">106</span>:                     log.warn(<span class="string">"the message queue not be able to consume, because it's dropped. &#123;&#125;"</span>, <span class="keyword">this</span>.messageQueue);</div><div class="line"><span class="number">107</span>:                     <span class="keyword">return</span>;</div><div class="line"><span class="number">108</span>:                 &#125;</div><div class="line"><span class="number">109</span>: </div><div class="line"><span class="number">110</span>:                 ConsumeMessageOrderlyService.<span class="keyword">this</span>.tryLockLaterAndReconsume(<span class="keyword">this</span>.messageQueue, <span class="keyword">this</span>.processQueue, <span class="number">100</span>);</div><div class="line"><span class="number">111</span>:             &#125;</div><div class="line"><span class="number">112</span>:         &#125;</div><div class="line"><span class="number">113</span>:     &#125;</div><div class="line"><span class="number">114</span>: </div><div class="line"><span class="number">115</span>: &#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>⬆️⬆️⬆️</li>
<li>第 20 行 ：获得 <code>Consumer</code> 消息队列锁。</li>
<li>第 58 行 ：从消息处理队列顺序获得消息。<strong>和并发消费获得消息不同。并发消费请求在请求创建时，已经设置好消费哪些消息。</strong></li>
<li>第 71 行 ：获得 <code>Consumer</code> 消息处理队列消费锁。相比【<code>Consumer</code>消息队列锁】，其粒度较小。这就是上文提到的❓<strong>为什么有<code>Consumer</code>消息队列锁还需要有 Consumer 消息队列消费锁呢</strong>的原因。</li>
<li>第 79 行 ：<strong>执行消费</strong>。</li>
<li>第 99 行 ：处理消费结果。</li>
</ul>
<h3>3.1.2 处理消费结果</h3>
<p>顺序消费消息结果 (<code>ConsumeOrderlyStatus</code>) 有四种情况：</p>
<ul>
<li><code>SUCCESS</code> ：消费成功<strong>但不提交</strong>。</li>
<li><code>ROLLBACK</code> ：消费失败，消费回滚。</li>
<li><code>COMMIT</code> ：消费成功提交并且提交。</li>
<li><code>SUSPEND_CURRENT_QUEUE_A_MOMENT</code> ：消费失败，挂起消费队列一会会，稍后继续消费。</li>
</ul>
<p>考虑到 <code>ROLLBACK</code> 、<code>COMMIT</code> 暂时只使用在 <code>MySQL binlog</code> 场景，官方将这两状态标记为 <code>@Deprecated</code>。当然，相应的实现逻辑依然保留。</p>
<p>在<strong>并发消费</strong>场景时，如果消费失败，<code>Consumer</code> 会将消费失败消息发回到 <code>Broker</code> 重试队列，跳过当前消息，等待下次拉取该消息再进行消费。</p>
<p>但是在<strong>完全严格顺序消费</strong>消费时，这样做显然不行。也因此，消费失败的消息，会挂起队列一会会，稍后继续消费。</p>
<p>不过消费失败的消息一直失败，也不可能一直消费。当超过消费重试上限时，<code>Consumer</code> 会将消费失败超过上限的消息发回到 <code>Broker</code> 死信队列。</p>
<p>让我们来看看代码：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">  <span class="number">1</span>: <span class="comment">// ⬇️⬇️⬇️【ConsumeMessageOrderlyService.java】</span></div><div class="line">  <span class="number">2</span>: <span class="comment">/**</span></div><div class="line">  3:  * 处理消费结果，并返回是否继续消费</div><div class="line">  4:  *</div><div class="line">  5:  * <span class="doctag">@param</span> msgs 消息</div><div class="line">  6:  * <span class="doctag">@param</span> status 消费结果状态</div><div class="line">  7:  * <span class="doctag">@param</span> context 消费Context</div><div class="line">  8:  * <span class="doctag">@param</span> consumeRequest 消费请求</div><div class="line">  9:  * <span class="doctag">@return</span> 是否继续消费</div><div class="line"> 10:  */</div><div class="line"> <span class="number">11</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">processConsumeResult</span><span class="params">(//</span></span></div><div class="line"> <span class="number">12</span>:     <span class="keyword">final</span> List&lt;MessageExt&gt; msgs, //</div><div class="line"> <span class="number">13</span>:     <span class="keyword">final</span> ConsumeOrderlyStatus status, //</div><div class="line"> <span class="number">14</span>:     <span class="keyword">final</span> ConsumeOrderlyContext context, //</div><div class="line"> <span class="number">15</span>:     <span class="keyword">final</span> ConsumeRequest consumeRequest//</div><div class="line"> <span class="number">16</span>: ) &#123;</div><div class="line"> <span class="number">17</span>:     <span class="keyword">boolean</span> continueConsume = <span class="keyword">true</span>;</div><div class="line"> <span class="number">18</span>:     <span class="keyword">long</span> commitOffset = -<span class="number">1L</span>;</div><div class="line"> <span class="number">19</span>:     <span class="keyword">if</span> (context.isAutoCommit()) &#123;</div><div class="line"> <span class="number">20</span>:         <span class="keyword">switch</span> (status) &#123;</div><div class="line"> <span class="number">21</span>:             <span class="keyword">case</span> COMMIT:</div><div class="line"> <span class="number">22</span>:             <span class="keyword">case</span> ROLLBACK:</div><div class="line"> <span class="number">23</span>:                 log.warn(<span class="string">"the message queue consume result is illegal, we think you want to ack these message &#123;&#125;"</span>, consumeRequest.getMessageQueue());</div><div class="line"> <span class="number">24</span>:             <span class="keyword">case</span> SUCCESS:</div><div class="line"> <span class="number">25</span>:                 <span class="comment">// 提交消息已消费成功到消息处理队列</span></div><div class="line"> <span class="number">26</span>:                 commitOffset = consumeRequest.getProcessQueue().commit();</div><div class="line"> <span class="number">27</span>:                 <span class="comment">// 统计</span></div><div class="line"> <span class="number">28</span>:                 <span class="keyword">this</span>.getConsumerStatsManager().incConsumeOKTPS(consumerGroup, consumeRequest.getMessageQueue().getTopic(), msgs.size());</div><div class="line"> <span class="number">29</span>:                 <span class="keyword">break</span>;</div><div class="line"> <span class="number">30</span>:             <span class="keyword">case</span> SUSPEND_CURRENT_QUEUE_A_MOMENT:</div><div class="line"> <span class="number">31</span>:                 <span class="comment">// 统计</span></div><div class="line"> <span class="number">32</span>:                 <span class="keyword">this</span>.getConsumerStatsManager().incConsumeFailedTPS(consumerGroup, consumeRequest.getMessageQueue().getTopic(), msgs.size());</div><div class="line"> <span class="number">33</span>:                 <span class="keyword">if</span> (checkReconsumeTimes(msgs)) &#123; <span class="comment">// 计算是否暂时挂起（暂停）消费N毫秒，默认：10ms</span></div><div class="line"> <span class="number">34</span>:                     <span class="comment">// 设置消息重新消费</span></div><div class="line"> <span class="number">35</span>:                     consumeRequest.getProcessQueue().makeMessageToCosumeAgain(msgs);</div><div class="line"> <span class="number">36</span>:                     <span class="comment">// 提交延迟消费请求</span></div><div class="line"> <span class="number">37</span>:                     <span class="keyword">this</span>.submitConsumeRequestLater(<span class="comment">//</span></div><div class="line"> <span class="number">38</span>:                         consumeRequest.getProcessQueue(), <span class="comment">//</span></div><div class="line"> <span class="number">39</span>:                         consumeRequest.getMessageQueue(), <span class="comment">//</span></div><div class="line"> <span class="number">40</span>:                         context.getSuspendCurrentQueueTimeMillis());</div><div class="line"> <span class="number">41</span>:                     continueConsume = <span class="keyword">false</span>;</div><div class="line"> <span class="number">42</span>:                 &#125; <span class="keyword">else</span> &#123;</div><div class="line"> <span class="number">43</span>:                     commitOffset = consumeRequest.getProcessQueue().commit();</div><div class="line"> <span class="number">44</span>:                 &#125;</div><div class="line"> <span class="number">45</span>:                 <span class="keyword">break</span>;</div><div class="line"> <span class="number">46</span>:             <span class="keyword">default</span>:</div><div class="line"> <span class="number">47</span>:                 <span class="keyword">break</span>;</div><div class="line"> <span class="number">48</span>:         &#125;</div><div class="line"> <span class="number">49</span>:     &#125; <span class="keyword">else</span> &#123;</div><div class="line"> <span class="number">50</span>:         <span class="keyword">switch</span> (status) &#123;</div><div class="line"> <span class="number">51</span>:             <span class="keyword">case</span> SUCCESS:</div><div class="line"> <span class="number">52</span>:                 <span class="keyword">this</span>.getConsumerStatsManager().incConsumeOKTPS(consumerGroup, consumeRequest.getMessageQueue().getTopic(), msgs.size());</div><div class="line"> <span class="number">53</span>:                 <span class="keyword">break</span>;</div><div class="line"> <span class="number">54</span>:             <span class="keyword">case</span> COMMIT:</div><div class="line"> <span class="number">55</span>:                 <span class="comment">// 提交消息已消费成功到消息处理队列</span></div><div class="line"> <span class="number">56</span>:                 commitOffset = consumeRequest.getProcessQueue().commit();</div><div class="line"> <span class="number">57</span>:                 <span class="keyword">break</span>;</div><div class="line"> <span class="number">58</span>:             <span class="keyword">case</span> ROLLBACK:</div><div class="line"> <span class="number">59</span>:                 <span class="comment">// 设置消息重新消费</span></div><div class="line"> <span class="number">60</span>:                 consumeRequest.getProcessQueue().rollback();</div><div class="line"> <span class="number">61</span>:                 <span class="keyword">this</span>.submitConsumeRequestLater(<span class="comment">//</span></div><div class="line"> <span class="number">62</span>:                     consumeRequest.getProcessQueue(), <span class="comment">//</span></div><div class="line"> <span class="number">63</span>:                     consumeRequest.getMessageQueue(), <span class="comment">//</span></div><div class="line"> <span class="number">64</span>:                     context.getSuspendCurrentQueueTimeMillis());</div><div class="line"> <span class="number">65</span>:                 continueConsume = <span class="keyword">false</span>;</div><div class="line"> <span class="number">66</span>:                 <span class="keyword">break</span>;</div><div class="line"> <span class="number">67</span>:             <span class="keyword">case</span> SUSPEND_CURRENT_QUEUE_A_MOMENT: <span class="comment">// 计算是否暂时挂起（暂停）消费N毫秒，默认：10ms</span></div><div class="line"> <span class="number">68</span>:                 <span class="keyword">this</span>.getConsumerStatsManager().incConsumeFailedTPS(consumerGroup, consumeRequest.getMessageQueue().getTopic(), msgs.size());</div><div class="line"> <span class="number">69</span>:                 <span class="keyword">if</span> (checkReconsumeTimes(msgs)) &#123;</div><div class="line"> <span class="number">70</span>:                     <span class="comment">// 设置消息重新消费</span></div><div class="line"> <span class="number">71</span>:                     consumeRequest.getProcessQueue().makeMessageToCosumeAgain(msgs);</div><div class="line"> <span class="number">72</span>:                     <span class="comment">// 提交延迟消费请求</span></div><div class="line"> <span class="number">73</span>:                     <span class="keyword">this</span>.submitConsumeRequestLater(<span class="comment">//</span></div><div class="line"> <span class="number">74</span>:                         consumeRequest.getProcessQueue(), <span class="comment">//</span></div><div class="line"> <span class="number">75</span>:                         consumeRequest.getMessageQueue(), <span class="comment">//</span></div><div class="line"> <span class="number">76</span>:                         context.getSuspendCurrentQueueTimeMillis());</div><div class="line"> <span class="number">77</span>:                     continueConsume = <span class="keyword">false</span>;</div><div class="line"> <span class="number">78</span>:                 &#125;</div><div class="line"> <span class="number">79</span>:                 <span class="keyword">break</span>;</div><div class="line"> <span class="number">80</span>:             <span class="keyword">default</span>:</div><div class="line"> <span class="number">81</span>:                 <span class="keyword">break</span>;</div><div class="line"> <span class="number">82</span>:         &#125;</div><div class="line"> <span class="number">83</span>:     &#125;</div><div class="line"> <span class="number">84</span>: </div><div class="line"> <span class="number">85</span>:     <span class="comment">// 消息处理队列未dropped，提交有效消费进度</span></div><div class="line"> <span class="number">86</span>:     <span class="keyword">if</span> (commitOffset &gt;= <span class="number">0</span> &amp;&amp; !consumeRequest.getProcessQueue().isDropped()) &#123;</div><div class="line"> <span class="number">87</span>:         <span class="keyword">this</span>.defaultMQPushConsumerImpl.getOffsetStore().updateOffset(consumeRequest.getMessageQueue(), commitOffset, <span class="keyword">false</span>);</div><div class="line"> <span class="number">88</span>:     &#125;</div><div class="line"> <span class="number">89</span>: </div><div class="line"> <span class="number">90</span>:     <span class="keyword">return</span> continueConsume;</div><div class="line"> <span class="number">91</span>: &#125;</div><div class="line"> <span class="number">92</span>: </div><div class="line"> <span class="number">93</span>: <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getMaxReconsumeTimes</span><span class="params">()</span> </span>&#123;</div><div class="line"> <span class="number">94</span>:     <span class="comment">// default reconsume times: Integer.MAX_VALUE</span></div><div class="line"> <span class="number">95</span>:     <span class="keyword">if</span> (<span class="keyword">this</span>.defaultMQPushConsumer.getMaxReconsumeTimes() == -<span class="number">1</span>) &#123;</div><div class="line"> <span class="number">96</span>:         <span class="keyword">return</span> Integer.MAX_VALUE;</div><div class="line"> <span class="number">97</span>:     &#125; <span class="keyword">else</span> &#123;</div><div class="line"> <span class="number">98</span>:         <span class="keyword">return</span> <span class="keyword">this</span>.defaultMQPushConsumer.getMaxReconsumeTimes();</div><div class="line"> <span class="number">99</span>:     &#125;</div><div class="line"><span class="number">100</span>: &#125;</div><div class="line"><span class="number">101</span>: </div><div class="line"><span class="number">102</span>: <span class="comment">/**</span></div><div class="line">103:  * 计算是否要暂停消费</div><div class="line">104:  * 不暂停条件：存在消息都超过最大消费次数并且都发回broker成功</div><div class="line">105:  *</div><div class="line">106:  * <span class="doctag">@param</span> msgs 消息</div><div class="line">107:  * <span class="doctag">@return</span> 是否要暂停</div><div class="line">108:  */</div><div class="line"><span class="number">109</span>: <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">checkReconsumeTimes</span><span class="params">(List&lt;MessageExt&gt; msgs)</span> </span>&#123;</div><div class="line"><span class="number">110</span>:     <span class="keyword">boolean</span> suspend = <span class="keyword">false</span>;</div><div class="line"><span class="number">111</span>:     <span class="keyword">if</span> (msgs != <span class="keyword">null</span> &amp;&amp; !msgs.isEmpty()) &#123;</div><div class="line"><span class="number">112</span>:         <span class="keyword">for</span> (MessageExt msg : msgs) &#123;</div><div class="line"><span class="number">113</span>:             <span class="keyword">if</span> (msg.getReconsumeTimes() &gt;= getMaxReconsumeTimes()) &#123;</div><div class="line"><span class="number">114</span>:                 MessageAccessor.setReconsumeTime(msg, String.valueOf(msg.getReconsumeTimes()));</div><div class="line"><span class="number">115</span>:                 <span class="keyword">if</span> (!sendMessageBack(msg)) &#123; <span class="comment">// 发回失败，中断</span></div><div class="line"><span class="number">116</span>:                     suspend = <span class="keyword">true</span>;</div><div class="line"><span class="number">117</span>:                     msg.setReconsumeTimes(msg.getReconsumeTimes() + <span class="number">1</span>);</div><div class="line"><span class="number">118</span>:                 &#125;</div><div class="line"><span class="number">119</span>:             &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">120</span>:                 suspend = <span class="keyword">true</span>;</div><div class="line"><span class="number">121</span>:                 msg.setReconsumeTimes(msg.getReconsumeTimes() + <span class="number">1</span>);</div><div class="line"><span class="number">122</span>:             &#125;</div><div class="line"><span class="number">123</span>:         &#125;</div><div class="line"><span class="number">124</span>:     &#125;</div><div class="line"><span class="number">125</span>:     <span class="keyword">return</span> suspend;</div><div class="line"><span class="number">126</span>: &#125;</div><div class="line"><span class="number">127</span>: </div><div class="line"><span class="number">128</span>: <span class="comment">/**</span></div><div class="line">129:  * 发回消息。</div><div class="line">130:  * 消息发回broker后，对应的消息队列是死信队列。</div><div class="line">131:  *</div><div class="line">132:  * <span class="doctag">@param</span> msg 消息</div><div class="line">133:  * <span class="doctag">@return</span> 是否发送成功</div><div class="line">134:  */</div><div class="line"><span class="number">135</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sendMessageBack</span><span class="params">(<span class="keyword">final</span> MessageExt msg)</span> </span>&#123;</div><div class="line"><span class="number">136</span>:     <span class="keyword">try</span> &#123;</div><div class="line"><span class="number">137</span>:         <span class="comment">// max reconsume times exceeded then send to dead letter queue.</span></div><div class="line"><span class="number">138</span>:         Message newMsg = <span class="keyword">new</span> Message(MixAll.getRetryTopic(<span class="keyword">this</span>.defaultMQPushConsumer.getConsumerGroup()), msg.getBody());</div><div class="line"><span class="number">139</span>:         String originMsgId = MessageAccessor.getOriginMessageId(msg);</div><div class="line"><span class="number">140</span>:         MessageAccessor.setOriginMessageId(newMsg, UtilAll.isBlank(originMsgId) ? msg.getMsgId() : originMsgId);</div><div class="line"><span class="number">141</span>:         newMsg.setFlag(msg.getFlag());</div><div class="line"><span class="number">142</span>:         MessageAccessor.setProperties(newMsg, msg.getProperties());</div><div class="line"><span class="number">143</span>:         MessageAccessor.putProperty(newMsg, MessageConst.PROPERTY_RETRY_TOPIC, msg.getTopic());</div><div class="line"><span class="number">144</span>:         MessageAccessor.setReconsumeTime(newMsg, String.valueOf(msg.getReconsumeTimes()));</div><div class="line"><span class="number">145</span>:         MessageAccessor.setMaxReconsumeTimes(newMsg, String.valueOf(getMaxReconsumeTimes()));</div><div class="line"><span class="number">146</span>:         newMsg.setDelayTimeLevel(<span class="number">3</span> + msg.getReconsumeTimes());</div><div class="line"><span class="number">147</span>: </div><div class="line"><span class="number">148</span>:         <span class="keyword">this</span>.defaultMQPushConsumer.getDefaultMQPushConsumerImpl().getmQClientFactory().getDefaultMQProducer().send(newMsg);</div><div class="line"><span class="number">149</span>:         <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line"><span class="number">150</span>:     &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"><span class="number">151</span>:         log.error(<span class="string">"sendMessageBack exception, group: "</span> + <span class="keyword">this</span>.consumerGroup + <span class="string">" msg: "</span> + msg.toString(), e);</div><div class="line"><span class="number">152</span>:     &#125;</div><div class="line"><span class="number">153</span>: </div><div class="line"><span class="number">154</span>:     <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line"><span class="number">155</span>: &#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>⬆️⬆️⬆️</li>
<li>第 21 至 29 行 ：消费成功。在自动提交进度( <code>AutoCommit</code> )的情况下，<code>COMMIT</code>、<code>ROLLBACK</code>、<code>SUCCESS</code> 逻辑<strong>已经统一</strong>。</li>
<li>第 30 至 45 行 ：消费失败。当消息重试次数超过上限（默认 ：16次）时，将消息发送到 <code>Broker</code> 死信队列，跳过这些消息。此时，消息队列无需挂起，继续消费后面的消息。</li>
<li>第 85 至 88 行 ：提交消费进度。</li>
</ul>
<h3>3.13 消息处理队列核心方法</h3>
<p>😈涉及到的四个核心方法的源码：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">  <span class="number">1</span>: <span class="comment">// ⬇️⬇️⬇️【ProcessQueue.java】</span></div><div class="line">  <span class="number">2</span>: <span class="comment">/**</span></div><div class="line">  3:  * 消息映射</div><div class="line">  4:  * key：消息队列位置</div><div class="line">  5:  */</div><div class="line">  <span class="number">6</span>: <span class="keyword">private</span> <span class="keyword">final</span> TreeMap&lt;Long, MessageExt&gt; msgTreeMap = <span class="keyword">new</span> TreeMap&lt;&gt;();    <span class="comment">/**</span></div><div class="line">  7:  * 消息映射临时存储（消费中的消息）</div><div class="line">  8:  */</div><div class="line">  <span class="number">9</span>: <span class="keyword">private</span> <span class="keyword">final</span> TreeMap&lt;Long, MessageExt&gt; msgTreeMapTemp = <span class="keyword">new</span> TreeMap&lt;&gt;();</div><div class="line"> <span class="number">10</span>: </div><div class="line"> <span class="number">11</span>: <span class="comment">/**</span></div><div class="line"> 12:  * 回滚消费中的消息</div><div class="line"> 13:  * 逻辑类似于&#123;<span class="doctag">@link</span> #makeMessageToCosumeAgain(List)&#125;</div><div class="line"> 14:  */</div><div class="line"> <span class="number">15</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rollback</span><span class="params">()</span> </span>&#123;</div><div class="line"> <span class="number">16</span>:     <span class="keyword">try</span> &#123;</div><div class="line"> <span class="number">17</span>:         <span class="keyword">this</span>.lockTreeMap.writeLock().lockInterruptibly();</div><div class="line"> <span class="number">18</span>:         <span class="keyword">try</span> &#123;</div><div class="line"> <span class="number">19</span>:             <span class="keyword">this</span>.msgTreeMap.putAll(<span class="keyword">this</span>.msgTreeMapTemp);</div><div class="line"> <span class="number">20</span>:             <span class="keyword">this</span>.msgTreeMapTemp.clear();</div><div class="line"> <span class="number">21</span>:         &#125; <span class="keyword">finally</span> &#123;</div><div class="line"> <span class="number">22</span>:             <span class="keyword">this</span>.lockTreeMap.writeLock().unlock();</div><div class="line"> <span class="number">23</span>:         &#125;</div><div class="line"> <span class="number">24</span>:     &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line"> <span class="number">25</span>:         log.error(<span class="string">"rollback exception"</span>, e);</div><div class="line"> <span class="number">26</span>:     &#125;</div><div class="line"> <span class="number">27</span>: &#125;</div><div class="line"> <span class="number">28</span>: </div><div class="line"> <span class="number">29</span>: <span class="comment">/**</span></div><div class="line"> 30:  * 提交消费中的消息已消费成功，返回消费进度</div><div class="line"> 31:  *</div><div class="line"> 32:  * <span class="doctag">@return</span> 消费进度</div><div class="line"> 33:  */</div><div class="line"> <span class="number">34</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">commit</span><span class="params">()</span> </span>&#123;</div><div class="line"> <span class="number">35</span>:     <span class="keyword">try</span> &#123;</div><div class="line"> <span class="number">36</span>:         <span class="keyword">this</span>.lockTreeMap.writeLock().lockInterruptibly();</div><div class="line"> <span class="number">37</span>:         <span class="keyword">try</span> &#123;</div><div class="line"> <span class="number">38</span>:             <span class="comment">// 消费进度</span></div><div class="line"> <span class="number">39</span>:             Long offset = <span class="keyword">this</span>.msgTreeMapTemp.lastKey();</div><div class="line"> <span class="number">40</span>: </div><div class="line"> <span class="number">41</span>:             <span class="comment">//</span></div><div class="line"> <span class="number">42</span>:             msgCount.addAndGet(<span class="keyword">this</span>.msgTreeMapTemp.size() * (-<span class="number">1</span>));</div><div class="line"> <span class="number">43</span>: </div><div class="line"> <span class="number">44</span>:             <span class="comment">//</span></div><div class="line"> <span class="number">45</span>:             <span class="keyword">this</span>.msgTreeMapTemp.clear();</div><div class="line"> <span class="number">46</span>: </div><div class="line"> <span class="number">47</span>:             <span class="comment">// 返回消费进度</span></div><div class="line"> <span class="number">48</span>:             <span class="keyword">if</span> (offset != <span class="keyword">null</span>) &#123;</div><div class="line"> <span class="number">49</span>:                 <span class="keyword">return</span> offset + <span class="number">1</span>;</div><div class="line"> <span class="number">50</span>:             &#125;</div><div class="line"> <span class="number">51</span>:         &#125; <span class="keyword">finally</span> &#123;</div><div class="line"> <span class="number">52</span>:             <span class="keyword">this</span>.lockTreeMap.writeLock().unlock();</div><div class="line"> <span class="number">53</span>:         &#125;</div><div class="line"> <span class="number">54</span>:     &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line"> <span class="number">55</span>:         log.error(<span class="string">"commit exception"</span>, e);</div><div class="line"> <span class="number">56</span>:     &#125;</div><div class="line"> <span class="number">57</span>: </div><div class="line"> <span class="number">58</span>:     <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line"> <span class="number">59</span>: &#125;</div><div class="line"> <span class="number">60</span>: </div><div class="line"> <span class="number">61</span>: <span class="comment">/**</span></div><div class="line"> 62:  * 指定消息重新消费</div><div class="line"> 63:  * 逻辑类似于&#123;<span class="doctag">@link</span> #rollback()&#125;</div><div class="line"> 64:  *</div><div class="line"> 65:  * <span class="doctag">@param</span> msgs 消息</div><div class="line"> 66:  */</div><div class="line"> <span class="number">67</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeMessageToCosumeAgain</span><span class="params">(List&lt;MessageExt&gt; msgs)</span> </span>&#123;</div><div class="line"> <span class="number">68</span>:     <span class="keyword">try</span> &#123;</div><div class="line"> <span class="number">69</span>:         <span class="keyword">this</span>.lockTreeMap.writeLock().lockInterruptibly();</div><div class="line"> <span class="number">70</span>:         <span class="keyword">try</span> &#123;</div><div class="line"> <span class="number">71</span>:             <span class="keyword">for</span> (MessageExt msg : msgs) &#123;</div><div class="line"> <span class="number">72</span>:                 <span class="keyword">this</span>.msgTreeMapTemp.remove(msg.getQueueOffset());</div><div class="line"> <span class="number">73</span>:                 <span class="keyword">this</span>.msgTreeMap.put(msg.getQueueOffset(), msg);</div><div class="line"> <span class="number">74</span>:             &#125;</div><div class="line"> <span class="number">75</span>:         &#125; <span class="keyword">finally</span> &#123;</div><div class="line"> <span class="number">76</span>:             <span class="keyword">this</span>.lockTreeMap.writeLock().unlock();</div><div class="line"> <span class="number">77</span>:         &#125;</div><div class="line"> <span class="number">78</span>:     &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line"> <span class="number">79</span>:         log.error(<span class="string">"makeMessageToCosumeAgain exception"</span>, e);</div><div class="line"> <span class="number">80</span>:     &#125;</div><div class="line"> <span class="number">81</span>: &#125;</div><div class="line"> <span class="number">82</span>: </div><div class="line"> <span class="number">83</span>: <span class="comment">/**</span></div><div class="line"> 84:  * 获得持有消息前N条</div><div class="line"> 85:  *</div><div class="line"> 86:  * <span class="doctag">@param</span> batchSize 条数</div><div class="line"> 87:  * <span class="doctag">@return</span> 消息</div><div class="line"> 88:  */</div><div class="line"> <span class="number">89</span>: <span class="function"><span class="keyword">public</span> List&lt;MessageExt&gt; <span class="title">takeMessags</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> batchSize)</span> </span>&#123;</div><div class="line"> <span class="number">90</span>:     List&lt;MessageExt&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;(batchSize);</div><div class="line"> <span class="number">91</span>:     <span class="keyword">final</span> <span class="keyword">long</span> now = System.currentTimeMillis();</div><div class="line"> <span class="number">92</span>:     <span class="keyword">try</span> &#123;</div><div class="line"> <span class="number">93</span>:         <span class="keyword">this</span>.lockTreeMap.writeLock().lockInterruptibly();</div><div class="line"> <span class="number">94</span>:         <span class="keyword">this</span>.lastConsumeTimestamp = now;</div><div class="line"> <span class="number">95</span>:         <span class="keyword">try</span> &#123;</div><div class="line"> <span class="number">96</span>:             <span class="keyword">if</span> (!<span class="keyword">this</span>.msgTreeMap.isEmpty()) &#123;</div><div class="line"> <span class="number">97</span>:                 <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; batchSize; i++) &#123;</div><div class="line"> <span class="number">98</span>:                     Map.Entry&lt;Long, MessageExt&gt; entry = <span class="keyword">this</span>.msgTreeMap.pollFirstEntry();</div><div class="line"> <span class="number">99</span>:                     <span class="keyword">if</span> (entry != <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">100</span>:                         result.add(entry.getValue());</div><div class="line"><span class="number">101</span>:                         msgTreeMapTemp.put(entry.getKey(), entry.getValue());</div><div class="line"><span class="number">102</span>:                     &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">103</span>:                         <span class="keyword">break</span>;</div><div class="line"><span class="number">104</span>:                     &#125;</div><div class="line"><span class="number">105</span>:                 &#125;</div><div class="line"><span class="number">106</span>:             &#125;</div><div class="line"><span class="number">107</span>: </div><div class="line"><span class="number">108</span>:             <span class="keyword">if</span> (result.isEmpty()) &#123;</div><div class="line"><span class="number">109</span>:                 consuming = <span class="keyword">false</span>;</div><div class="line"><span class="number">110</span>:             &#125;</div><div class="line"><span class="number">111</span>:         &#125; <span class="keyword">finally</span> &#123;</div><div class="line"><span class="number">112</span>:             <span class="keyword">this</span>.lockTreeMap.writeLock().unlock();</div><div class="line"><span class="number">113</span>:         &#125;</div><div class="line"><span class="number">114</span>:     &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line"><span class="number">115</span>:         log.error(<span class="string">"take Messages exception"</span>, e);</div><div class="line"><span class="number">116</span>:     &#125;</div><div class="line"><span class="number">117</span>: </div><div class="line"><span class="number">118</span>:     <span class="keyword">return</span> result;</div><div class="line"><span class="number">119</span>: &#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://www.yunai.me/images/common/wechat_mp.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;🙂🙂🙂关注**微信公众号：【芋艿的后端小屋】**有福利：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Rock
    
    </summary>
    
      <category term="RocketMQ" scheme="http://www.yunai.me/categories/RocketMQ/"/>
    
    
  </entry>
  
  <entry>
    <title>RocketMQ 源码分析 —— Store 初始化与关闭</title>
    <link href="http://www.yunai.me/RocketMQ/store-init-and-shutdown/"/>
    <id>http://www.yunai.me/RocketMQ/store-init-and-shutdown/</id>
    <published>2017-05-11T16:00:00.000Z</published>
    <updated>2017-07-27T16:56:37.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://www.yunai.me/images/common/wechat_mp.jpeg" alt=""></p>
<blockquote>
<p>🙂🙂🙂关注**微信公众号：【芋艿的后端小屋】**有福利：</p>
<ol>
<li>RocketMQ / MyCAT / Sharding-JDBC <strong>所有</strong>源码分析文章列表</li>
<li>RocketMQ / MyCAT / Sharding-JDBC <strong>中文注释源码 GitHub 地址</strong></li>
<li>您对于源码的疑问每条留言<strong>都</strong>将得到<strong>认真</strong>回复。<strong>甚至不知道如何读源码也可以请教噢</strong>。</li>
<li><strong>新的</strong>源码解析文章<strong>实时</strong>收到通知。<strong>每周更新一篇左右</strong>。</li>
<li><strong>认真的</strong>源码交流微信群。</li>
</ol>
</blockquote>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://www.yunai.me/images/common/wechat_mp.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;🙂🙂🙂关注**微信公众号：【芋艿的后端小屋】**有福利：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Rock
    
    </summary>
    
      <category term="RocketMQ" scheme="http://www.yunai.me/categories/RocketMQ/"/>
    
    
  </entry>
  
  <entry>
    <title>RocketMQ 源码分析 —— Message 拉取与消费（下）</title>
    <link href="http://www.yunai.me/RocketMQ/message-pull-and-consume-second/"/>
    <id>http://www.yunai.me/RocketMQ/message-pull-and-consume-second/</id>
    <published>2017-05-10T16:00:00.000Z</published>
    <updated>2017-07-27T16:56:27.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://www.yunai.me/images/common/wechat_mp.jpeg" alt=""></p>
<blockquote>
<p>🙂🙂🙂关注**微信公众号：【芋艿的后端小屋】**有福利：</p>
<ol>
<li>RocketMQ / MyCAT / Sharding-JDBC <strong>所有</strong>源码分析文章列表</li>
<li>RocketMQ / MyCAT / Sharding-JDBC <strong>中文注释源码 GitHub 地址</strong></li>
<li>您对于源码的疑问每条留言<strong>都</strong>将得到<strong>认真</strong>回复。<strong>甚至不知道如何读源码也可以请教噢</strong>。</li>
<li><strong>新的</strong>源码解析文章<strong>实时</strong>收到通知。<strong>每周更新一篇左右</strong>。</li>
<li><strong>认真的</strong>源码交流微信群。</li>
</ol>
</blockquote>
<hr>
<ul>
<li><a href="#">1、概述</a></li>
<li><a href="#">2、Consumer</a></li>
<li><a href="#">3、PushConsumer 一览</a></li>
<li><a href="#">4、PushConsumer 订阅</a>
<ul>
<li><a href="#">DefaultMQPushConsumerImpl#subscribe(...)</a>
<ul>
<li><a href="#">FilterAPI.buildSubscriptionData(...)</a></li>
</ul>
</li>
<li><a href="#">DefaultMQPushConsumer#registerMessageListener(...)</a></li>
</ul>
</li>
<li><a href="#">5、PushConsumer 消息队列分配</a>
<ul>
<li><a href="#">RebalanceService</a></li>
<li><a href="#">MQClientInstance#doRebalance(...)</a></li>
<li><a href="#">DefaultMQPushConsumerImpl#doRebalance(...)</a></li>
<li><a href="#">RebalanceImpl#doRebalance(...)</a>
<ul>
<li><a href="#">RebalanceImpl#rebalanceByTopic(...)</a></li>
<li><a href="#">RebalanceImpl#removeUnnecessaryMessageQueue(...)</a>
<ul>
<li><a href="#">RebalancePushImpl#removeUnnecessaryMessageQueue(...)</a></li>
<li><a href="#">[PullConsumer] RebalancePullImpl#removeUnnecessaryMessageQueue(...)</a></li>
</ul>
</li>
<li><a href="#">RebalancePushImpl#dispatchPullRequest(...)</a>
<ul>
<li><a href="#">DefaultMQPushConsumerImpl#executePullRequestImmediately(...)</a></li>
</ul>
</li>
<li><a href="#">AllocateMessageQueueStrategy</a>
<ul>
<li><a href="#">AllocateMessageQueueAveragely</a></li>
<li><a href="#">AllocateMessageQueueByMachineRoom</a></li>
<li><a href="#">AllocateMessageQueueAveragelyByCircle</a></li>
<li><a href="#">AllocateMessageQueueByConfig</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><a href="#">5、PushConsumer 消费进度读取</a>
<ul>
<li><a href="#">RebalancePushImpl#computePullFromWhere(...)</a></li>
<li><a href="#">[PullConsumer] RebalancePullImpl#computePullFromWhere(...)</a></li>
</ul>
</li>
<li><a href="#">6、PushConsumer 拉取消息</a>
<ul>
<li><a href="#">PullMessageService</a></li>
<li><a href="#">DefaultMQPushConsumerImpl#pullMessage(...)</a>
<ul>
<li><a href="#">PullAPIWrapper#pullKernelImpl(...)</a>
<ul>
<li><a href="#">PullAPIWrapper#recalculatePullFromWhichNode(...)</a></li>
<li><a href="#">MQClientInstance#findBrokerAddressInSubscribe(...)</a></li>
</ul>
</li>
<li><a href="#">PullAPIWrapper#processPullResult(...)</a></li>
<li><a href="#">ProcessQueue#putMessage(...)</a></li>
</ul>
</li>
<li><a href="#">总结</a></li>
</ul>
</li>
<li><a href="#">6、PushConsumer 消费消息</a>
<ul>
<li><a href="#">ConsumeMessageConcurrentlyService 提交消费请求</a>
<ul>
<li><a href="#">ConsumeMessageConcurrentlyService#submitConsumeRequest(...)</a></li>
<li><a href="#">ConsumeMessageConcurrentlyService#submitConsumeRequestLater</a></li>
</ul>
</li>
<li><a href="#">ConsumeRequest</a></li>
<li><a href="#">ConsumeMessageConcurrentlyService#processConsumeResult(...)</a>
<ul>
<li><a href="#">ProcessQueue#removeMessage(...)</a></li>
</ul>
</li>
<li><a href="#">ConsumeMessageConcurrentlyService#cleanExpireMsg(...)</a>
<ul>
<li><a href="#">ProcessQueue#cleanExpiredMsg(...)</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#">7、PushConsumer 发回消费失败消息</a>
<ul>
<li><a href="#">DefaultMQPushConsumerImpl#sendMessageBack(...)</a>
<ul>
<li><a href="#">MQClientAPIImpl#consumerSendMessageBack(...)</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#">8、Consumer 消费进度</a>
<ul>
<li><a href="#">OffsetStore</a>
<ul>
<li><a href="#">OffsetStore#load(...)</a>
<ul>
<li><a href="#">LocalFileOffsetStore#load(...)</a>
<ul>
<li><a href="#">OffsetSerializeWrapper</a></li>
</ul>
</li>
<li><a href="#">RemoteBrokerOffsetStore#load(...)</a></li>
</ul>
</li>
<li><a href="#">OffsetStore#readOffset(...)</a>
<ul>
<li><a href="#">LocalFileOffsetStore#readOffset(...)</a></li>
<li><a href="#">RemoteBrokerOffsetStore#readOffset(...)</a></li>
</ul>
</li>
<li><a href="#">OffsetStore#updateOffset(...)</a></li>
<li><a href="#">OffsetStore#persistAll(...)</a>
<ul>
<li><a href="#">LocalFileOffsetStore#persistAll(...)</a></li>
<li><a href="#">RemoteBrokerOffsetStore#persistAll(...)</a></li>
<li><a href="#">MQClientInstance#persistAllConsumerOffset(...)</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><a href="#">9、结尾</a></li>
</ul>
<hr>
<h1>1、概述</h1>
<p>本文接：<a href="http://www.yunai.me/RocketMQ/message-pull-and-consume-first/">《RocketMQ 源码分析 —— Message 拉取与消费（上）》</a>。</p>
<p>主要解析 <code>Consumer</code> 在 <strong>消费</strong> 逻辑涉及到的源码。</p>
<h1>2、Consumer</h1>
<p>MQ 提供了两类消费者：</p>
<ul>
<li>PushConsumer：
<ul>
<li>在大多数场景下使用。</li>
<li>名字虽然是 <code>Push</code> 开头，实际在实现时，使用 <code>Pull</code> 方式实现。通过 <code>Pull</code> <strong>不断不断不断</strong>轮询 <code>Broker</code> 获取消息。当不存在新消息时，<code>Broker</code> 会<strong>挂起请求</strong>，直到有新消息产生，取消挂起，返回新消息。这样，基本和 <code>Broker</code> 主动 <code>Push</code> 做到<strong>接近</strong>的实时性（当然，还是有相应的实时性损失）。原理类似 <strong><a href="https://www.ibm.com/developerworks/cn/web/wa-lo-comet/" rel="external nofollow noopener noreferrer" target="_blank">长轮询( <code>Long-Polling</code> )</a></strong>。</li>
</ul>
</li>
<li>PullConsumer</li>
</ul>
<p><strong>本文主要讲解<code>PushConsumer</code>，部分讲解<code>PullConsumer</code>，跳过<code>顺序消费</code>。</strong><br>
<strong>本文主要讲解<code>PushConsumer</code>，部分讲解<code>PullConsumer</code>，跳过<code>顺序消费</code>。</strong><br>
<strong>本文主要讲解<code>PushConsumer</code>，部分讲解<code>PullConsumer</code>，跳过<code>顺序消费</code>。</strong></p>
<h1>3、PushConsumer 一览</h1>
<p>先看一张 <code>PushConsumer</code> 包含的组件以及组件之间的交互图：</p>
<p><img src="http://www.yunai.me/images/RocketMQ/2017_05_04/09.png" alt="PushConsumer手绘图.png"></p>
<ul>
<li><code>RebalanceService</code>：均衡消息队列服务，负责分配当前 <code>Consumer</code> 可消费的消息队列( <code>MessageQueue</code> )。当有新的 <code>Consumer</code> 的加入或移除，都会重新分配消息队列。</li>
<li><code>PullMessageService</code>：拉取消息服务，<strong>不断不断不断</strong>从 <code>Broker</code> 拉取消息，并提交消费任务到 <code>ConsumeMessageService</code>。</li>
<li><code>ConsumeMessageService</code>：消费消息服务，<strong>不断不断不断</strong>消费消息，并处理消费结果。</li>
<li><code>RemoteBrokerOffsetStore</code>：<code>Consumer</code> 消费进度管理，负责从 <code>Broker</code> 获取消费进度，同步消费进度到 <code>Broker</code>。</li>
<li><code>ProcessQueue</code> ：消息处理队列。</li>
<li><code>MQClientInstance</code> ：封装对 <code>Namesrv</code>，<code>Broker</code> 的 API调用，提供给 <code>Producer</code>、<code>Consumer</code> 使用。</li>
</ul>
<h1>4、PushConsumer 订阅</h1>
<h2>DefaultMQPushConsumerImpl#subscribe(...)</h2>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(String topic, String subExpression)</span> <span class="keyword">throws</span> MQClientException </span>&#123;</div><div class="line"> <span class="number">2</span>:     <span class="keyword">try</span> &#123;</div><div class="line"> <span class="number">3</span>:         <span class="comment">// 创建订阅数据</span></div><div class="line"> <span class="number">4</span>:         SubscriptionData subscriptionData = FilterAPI.buildSubscriptionData(<span class="keyword">this</span>.defaultMQPushConsumer.getConsumerGroup(), <span class="comment">//</span></div><div class="line"> <span class="number">5</span>:             topic, subExpression);</div><div class="line"> <span class="number">6</span>:         <span class="keyword">this</span>.rebalanceImpl.getSubscriptionInner().put(topic, subscriptionData);</div><div class="line"> <span class="number">7</span>:         <span class="comment">// 通过心跳同步Consumer信息到Broker</span></div><div class="line"> <span class="number">8</span>:         <span class="keyword">if</span> (<span class="keyword">this</span>.mQClientFactory != <span class="keyword">null</span>) &#123;</div><div class="line"> <span class="number">9</span>:             <span class="keyword">this</span>.mQClientFactory.sendHeartbeatToAllBrokerWithLock();</div><div class="line"><span class="number">10</span>:         &#125;</div><div class="line"><span class="number">11</span>:     &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"><span class="number">12</span>:         <span class="keyword">throw</span> <span class="keyword">new</span> MQClientException(<span class="string">"subscription exception"</span>, e);</div><div class="line"><span class="number">13</span>:     &#125;</div><div class="line"><span class="number">14</span>: &#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>说明 ：订阅 <code>Topic</code> 。</li>
<li>第 3 至 6 行 ：创建订阅数据。详细解析见：<a href="#filterapibuildsubscriptiondata">FilterAPI.buildSubscriptionData(...)</a>。</li>
<li>第 7 至 10 行 ：通过心跳同步 <code>Consumer</code> 信息到 <code>Broker</code>。</li>
</ul>
<h3>FilterAPI.buildSubscriptionData(...)</h3>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SubscriptionData <span class="title">buildSubscriptionData</span><span class="params">(<span class="keyword">final</span> String consumerGroup, String topic,</span></span></div><div class="line"> <span class="number">2</span>:     String subString) <span class="keyword">throws</span> Exception &#123;</div><div class="line"> <span class="number">3</span>:     SubscriptionData subscriptionData = <span class="keyword">new</span> SubscriptionData();</div><div class="line"> <span class="number">4</span>:     subscriptionData.setTopic(topic);</div><div class="line"> <span class="number">5</span>:     subscriptionData.setSubString(subString);</div><div class="line"> <span class="number">6</span>:     <span class="comment">// 处理订阅表达式</span></div><div class="line"> <span class="number">7</span>:     <span class="keyword">if</span> (<span class="keyword">null</span> == subString || subString.equals(SubscriptionData.SUB_ALL) || subString.length() == <span class="number">0</span>) &#123;</div><div class="line"> <span class="number">8</span>:         subscriptionData.setSubString(SubscriptionData.SUB_ALL);</div><div class="line"> <span class="number">9</span>:     &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">10</span>:         String[] tags = subString.split(<span class="string">"\\|\\|"</span>);</div><div class="line"><span class="number">11</span>:         <span class="keyword">if</span> (tags.length &gt; <span class="number">0</span>) &#123;</div><div class="line"><span class="number">12</span>:             <span class="keyword">for</span> (String tag : tags) &#123;</div><div class="line"><span class="number">13</span>:                 <span class="keyword">if</span> (tag.length() &gt; <span class="number">0</span>) &#123;</div><div class="line"><span class="number">14</span>:                     String trimString = tag.trim();</div><div class="line"><span class="number">15</span>:                     <span class="keyword">if</span> (trimString.length() &gt; <span class="number">0</span>) &#123;</div><div class="line"><span class="number">16</span>:                         subscriptionData.getTagsSet().add(trimString);</div><div class="line"><span class="number">17</span>:                         subscriptionData.getCodeSet().add(trimString.hashCode());</div><div class="line"><span class="number">18</span>:                     &#125;</div><div class="line"><span class="number">19</span>:                 &#125;</div><div class="line"><span class="number">20</span>:             &#125;</div><div class="line"><span class="number">21</span>:         &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">22</span>:             <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"subString split error"</span>);</div><div class="line"><span class="number">23</span>:         &#125;</div><div class="line"><span class="number">24</span>:     &#125;</div><div class="line"><span class="number">25</span>: </div><div class="line"><span class="number">26</span>:     <span class="keyword">return</span> subscriptionData;</div><div class="line"><span class="number">27</span>: &#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>说明 ：根据 <code>Topic</code> 和 订阅表达式 创建订阅数据</li>
<li>subscriptionData.subVersion = System.currentTimeMillis()。</li>
</ul>
<h2>DefaultMQPushConsumer#registerMessageListener(...)</h2>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="number">1</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerMessageListener</span><span class="params">(MessageListenerConcurrently messageListener)</span> </span>&#123;</div><div class="line"><span class="number">2</span>:     <span class="keyword">this</span>.messageListener = messageListener;</div><div class="line"><span class="number">3</span>:     <span class="keyword">this</span>.defaultMQPushConsumerImpl.registerMessageListener(messageListener);</div><div class="line"><span class="number">4</span>: &#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>说明 ：注册消息监听器。</li>
</ul>
<h1>5、PushConsumer 消息队列分配</h1>
<p><img src="http://www.yunai.me/images/RocketMQ/2017_05_04/10.png" alt="RebalanceService&amp;amp;PushConsumer分配队列"></p>
<h2>RebalanceService</h2>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RebalanceService</span> <span class="keyword">extends</span> <span class="title">ServiceThread</span> </span>&#123;</div><div class="line"> <span class="number">2</span>: </div><div class="line"> <span class="number">3</span>:     <span class="comment">/**</span></div><div class="line"> 4:      * 等待间隔，单位：毫秒</div><div class="line"> 5:      */</div><div class="line"> <span class="number">6</span>:     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> waitInterval =</div><div class="line"> <span class="number">7</span>:         Long.parseLong(System.getProperty(</div><div class="line"> <span class="number">8</span>:             <span class="string">"rocketmq.client.rebalance.waitInterval"</span>, <span class="string">"20000"</span>));</div><div class="line"> <span class="number">9</span>: </div><div class="line"><span class="number">10</span>:     <span class="keyword">private</span> <span class="keyword">final</span> Logger log = ClientLogger.getLog();</div><div class="line"><span class="number">11</span>:     <span class="comment">/**</span></div><div class="line">12:      * MQClient对象</div><div class="line">13:      */</div><div class="line"><span class="number">14</span>:     <span class="keyword">private</span> <span class="keyword">final</span> MQClientInstance mqClientFactory;</div><div class="line"><span class="number">15</span>: </div><div class="line"><span class="number">16</span>:     <span class="function"><span class="keyword">public</span> <span class="title">RebalanceService</span><span class="params">(MQClientInstance mqClientFactory)</span> </span>&#123;</div><div class="line"><span class="number">17</span>:         <span class="keyword">this</span>.mqClientFactory = mqClientFactory;</div><div class="line"><span class="number">18</span>:     &#125;</div><div class="line"><span class="number">19</span>: </div><div class="line"><span class="number">20</span>:     <span class="meta">@Override</span></div><div class="line"><span class="number">21</span>:     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="number">22</span>:         log.info(<span class="keyword">this</span>.getServiceName() + <span class="string">" service started"</span>);</div><div class="line"><span class="number">23</span>: </div><div class="line"><span class="number">24</span>:         <span class="keyword">while</span> (!<span class="keyword">this</span>.isStopped()) &#123;</div><div class="line"><span class="number">25</span>:             <span class="keyword">this</span>.waitForRunning(waitInterval);</div><div class="line"><span class="number">26</span>:             <span class="keyword">this</span>.mqClientFactory.doRebalance();</div><div class="line"><span class="number">27</span>:         &#125;</div><div class="line"><span class="number">28</span>: </div><div class="line"><span class="number">29</span>:         log.info(<span class="keyword">this</span>.getServiceName() + <span class="string">" service end"</span>);</div><div class="line"><span class="number">30</span>:     &#125;</div><div class="line"><span class="number">31</span>: </div><div class="line"><span class="number">32</span>:     <span class="meta">@Override</span></div><div class="line"><span class="number">33</span>:     <span class="function"><span class="keyword">public</span> String <span class="title">getServiceName</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="number">34</span>:         <span class="keyword">return</span> RebalanceService.class.getSimpleName();</div><div class="line"><span class="number">35</span>:     &#125;</div><div class="line"><span class="number">36</span>: &#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>说明 ：均衡消息队列服务，负责分配当前 <code>Consumer</code> 可消费的消息队列( <code>MessageQueue</code> )。</li>
<li>第 26 行 ：调用 <code>MQClientInstance#doRebalance(...)</code> 分配消息队列。目前有三种情况情况下触发：
<ul>
<li>如 <code>第 25 行</code> 等待超时，每 20s 调用一次。</li>
<li><code>PushConsumer</code> 启动时，调用 <code>rebalanceService#wakeup(...)</code> 触发。</li>
<li><code>Broker</code> 通知 <code>Consumer</code> 加入 或 移除时，<code>Consumer</code> 响应通知，调用 <code>rebalanceService#wakeup(...)</code> 触发。</li>
</ul>
</li>
</ul>
<p>详细解析见：<a href="#mqclientinstancedorebalance">MQClientInstance#doRebalance(...)</a>。</p>
<h2>MQClientInstance#doRebalance(...)</h2>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doRebalance</span><span class="params">()</span> </span>&#123;</div><div class="line"> <span class="number">2</span>:     <span class="keyword">for</span> (Map.Entry&lt;String, MQConsumerInner&gt; entry : <span class="keyword">this</span>.consumerTable.entrySet()) &#123;</div><div class="line"> <span class="number">3</span>:         MQConsumerInner impl = entry.getValue();</div><div class="line"> <span class="number">4</span>:         <span class="keyword">if</span> (impl != <span class="keyword">null</span>) &#123;</div><div class="line"> <span class="number">5</span>:             <span class="keyword">try</span> &#123;</div><div class="line"> <span class="number">6</span>:                 impl.doRebalance();</div><div class="line"> <span class="number">7</span>:             &#125; <span class="keyword">catch</span> (Throwable e) &#123;</div><div class="line"> <span class="number">8</span>:                 log.error(<span class="string">"doRebalance exception"</span>, e);</div><div class="line"> <span class="number">9</span>:             &#125;</div><div class="line"><span class="number">10</span>:         &#125;</div><div class="line"><span class="number">11</span>:     &#125;</div><div class="line"><span class="number">12</span>: &#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>说明 ：遍历当前 <code>Client</code> 包含的 <code>consumerTable</code>( <code>Consumer</code>集合 )，执行消息队列分配。</li>
<li><strong>疑问</strong>：目前代码调试下来，<code>consumerTable</code> 只包含 <code>Consumer</code> 自己。😈有大大对这个疑问有解答的，烦请解答下。</li>
<li>第 6 行 ：调用 <code>MQConsumerInner#doRebalance(...)</code> 进行队列分配。<code>DefaultMQPushConsumerImpl</code>、<code>DefaultMQPullConsumerImpl</code> 分别对该接口方法进行了实现。<code>DefaultMQPushConsumerImpl#doRebalance(...)</code> 详细解析见：<a href="defaultmqpushconsumerimpldorebalance">DefaultMQPushConsumerImpl#doRebalance(...)</a>。</li>
</ul>
<h2>DefaultMQPushConsumerImpl#doRebalance(...)</h2>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="number">1</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doRebalance</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="number">2</span>:     <span class="keyword">if</span> (!<span class="keyword">this</span>.pause) &#123;</div><div class="line"><span class="number">3</span>:         <span class="keyword">this</span>.rebalanceImpl.doRebalance(<span class="keyword">this</span>.isConsumeOrderly());</div><div class="line"><span class="number">4</span>:     &#125;</div><div class="line"><span class="number">5</span>: &#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>说明：执行消息队列分配。</li>
<li>第 3 行 ：调用 <code>RebalanceImpl#doRebalance(...)</code> 进行队列分配。详细解析见：<a href="#rebalancepushimpldorebalance">RebalancePushImpl#doRebalance(...)</a>。</li>
</ul>
<h2>RebalanceImpl#doRebalance(...)</h2>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="comment">/**</span></div><div class="line"> 2:  * 执行分配消息队列</div><div class="line"> 3:  *</div><div class="line"> 4:  * <span class="doctag">@param</span> isOrder 是否顺序消息</div><div class="line"> 5:  */</div><div class="line"> <span class="number">6</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doRebalance</span><span class="params">(<span class="keyword">final</span> <span class="keyword">boolean</span> isOrder)</span> </span>&#123;</div><div class="line"> <span class="number">7</span>:     <span class="comment">// 分配每个 topic 的消息队列</span></div><div class="line"> <span class="number">8</span>:     Map&lt;String, SubscriptionData&gt; subTable = <span class="keyword">this</span>.getSubscriptionInner();</div><div class="line"> <span class="number">9</span>:     <span class="keyword">if</span> (subTable != <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">10</span>:         <span class="keyword">for</span> (<span class="keyword">final</span> Map.Entry&lt;String, SubscriptionData&gt; entry : subTable.entrySet()) &#123;</div><div class="line"><span class="number">11</span>:             <span class="keyword">final</span> String topic = entry.getKey();</div><div class="line"><span class="number">12</span>:             <span class="keyword">try</span> &#123;</div><div class="line"><span class="number">13</span>:                 <span class="keyword">this</span>.rebalanceByTopic(topic, isOrder);</div><div class="line"><span class="number">14</span>:             &#125; <span class="keyword">catch</span> (Throwable e) &#123;</div><div class="line"><span class="number">15</span>:                 <span class="keyword">if</span> (!topic.startsWith(MixAll.RETRY_GROUP_TOPIC_PREFIX)) &#123;</div><div class="line"><span class="number">16</span>:                     log.warn(<span class="string">"rebalanceByTopic Exception"</span>, e);</div><div class="line"><span class="number">17</span>:                 &#125;</div><div class="line"><span class="number">18</span>:             &#125;</div><div class="line"><span class="number">19</span>:         &#125;</div><div class="line"><span class="number">20</span>:     &#125;</div><div class="line"><span class="number">21</span>:     <span class="comment">// 移除未订阅的topic对应的消息队列</span></div><div class="line"><span class="number">22</span>:     <span class="keyword">this</span>.truncateMessageQueueNotMyTopic();</div><div class="line"><span class="number">23</span>: &#125;</div><div class="line"><span class="number">24</span>: </div><div class="line"><span class="number">25</span>: <span class="comment">/**</span></div><div class="line">26:  * 移除未订阅的消息队列</div><div class="line">27:  */</div><div class="line"><span class="number">28</span>: <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">truncateMessageQueueNotMyTopic</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="number">29</span>:     Map&lt;String, SubscriptionData&gt; subTable = <span class="keyword">this</span>.getSubscriptionInner();</div><div class="line"><span class="number">30</span>:     <span class="keyword">for</span> (MessageQueue mq : <span class="keyword">this</span>.processQueueTable.keySet()) &#123;</div><div class="line"><span class="number">31</span>:         <span class="keyword">if</span> (!subTable.containsKey(mq.getTopic())) &#123;</div><div class="line"><span class="number">32</span>: </div><div class="line"><span class="number">33</span>:             ProcessQueue pq = <span class="keyword">this</span>.processQueueTable.remove(mq);</div><div class="line"><span class="number">34</span>:             <span class="keyword">if</span> (pq != <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">35</span>:                 pq.setDropped(<span class="keyword">true</span>);</div><div class="line"><span class="number">36</span>:                 log.info(<span class="string">"doRebalance, &#123;&#125;, truncateMessageQueueNotMyTopic remove unnecessary mq, &#123;&#125;"</span>, consumerGroup, mq);</div><div class="line"><span class="number">37</span>:             &#125;</div><div class="line"><span class="number">38</span>:         &#125;</div><div class="line"><span class="number">39</span>:     &#125;</div><div class="line"><span class="number">40</span>: &#125;</div></pre></td></tr></table></figure></p>
<ul>
<li><code>#doRebalance(...)</code> 说明 ：执行分配消息队列。
<ul>
<li>第 7 至 20 行 ：循环订阅主题集合( <code>subscriptionInner</code> )，分配每一个 <code>Topic</code> 的消息队列。</li>
<li>第 22 行 ：移除未订阅的 <code>Topic</code> 的消息队列。</li>
</ul>
</li>
<li><code>#truncateMessageQueueNotMyTopic(...)</code> 说明 ：移除未订阅的消息队列。<strong>当调用 <code>DefaultMQPushConsumer#unsubscribe(topic)</code> 时，只移除订阅主题集合( <code>subscriptionInner</code> )，对应消息队列移除在该方法。</strong></li>
</ul>
<h3>RebalanceImpl#rebalanceByTopic(...)</h3>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">  <span class="number">1</span>: <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rebalanceByTopic</span><span class="params">(<span class="keyword">final</span> String topic, <span class="keyword">final</span> <span class="keyword">boolean</span> isOrder)</span> </span>&#123;</div><div class="line">  <span class="number">2</span>:     <span class="keyword">switch</span> (messageModel) &#123;</div><div class="line">  <span class="number">3</span>:         <span class="keyword">case</span> BROADCASTING: &#123;</div><div class="line">  <span class="number">4</span>:             Set&lt;MessageQueue&gt; mqSet = <span class="keyword">this</span>.topicSubscribeInfoTable.get(topic);</div><div class="line">  <span class="number">5</span>:             <span class="keyword">if</span> (mqSet != <span class="keyword">null</span>) &#123;</div><div class="line">  <span class="number">6</span>:                 <span class="keyword">boolean</span> changed = <span class="keyword">this</span>.updateProcessQueueTableInRebalance(topic, mqSet, isOrder);</div><div class="line">  <span class="number">7</span>:                 <span class="keyword">if</span> (changed) &#123;</div><div class="line">  <span class="number">8</span>:                     <span class="keyword">this</span>.messageQueueChanged(topic, mqSet, mqSet);</div><div class="line">  <span class="number">9</span>:                     log.info(<span class="string">"messageQueueChanged &#123;&#125; &#123;&#125; &#123;&#125; &#123;&#125;"</span>, <span class="comment">//</span></div><div class="line"> <span class="number">10</span>:                         consumerGroup, <span class="comment">//</span></div><div class="line"> <span class="number">11</span>:                         topic, <span class="comment">//</span></div><div class="line"> <span class="number">12</span>:                         mqSet, <span class="comment">//</span></div><div class="line"> <span class="number">13</span>:                         mqSet);</div><div class="line"> <span class="number">14</span>:                 &#125;</div><div class="line"> <span class="number">15</span>:             &#125; <span class="keyword">else</span> &#123;</div><div class="line"> <span class="number">16</span>:                 log.warn(<span class="string">"doRebalance, &#123;&#125;, but the topic[&#123;&#125;] not exist."</span>, consumerGroup, topic);</div><div class="line"> <span class="number">17</span>:             &#125;</div><div class="line"> <span class="number">18</span>:             <span class="keyword">break</span>;</div><div class="line"> <span class="number">19</span>:         &#125;</div><div class="line"> <span class="number">20</span>:         <span class="keyword">case</span> CLUSTERING: &#123;</div><div class="line"> <span class="number">21</span>:             <span class="comment">// 获取 topic 对应的 队列 和 consumer信息</span></div><div class="line"> <span class="number">22</span>:             Set&lt;MessageQueue&gt; mqSet = <span class="keyword">this</span>.topicSubscribeInfoTable.get(topic);</div><div class="line"> <span class="number">23</span>:             List&lt;String&gt; cidAll = <span class="keyword">this</span>.mQClientFactory.findConsumerIdList(topic, consumerGroup);</div><div class="line"> <span class="number">24</span>:             <span class="keyword">if</span> (<span class="keyword">null</span> == mqSet) &#123;</div><div class="line"> <span class="number">25</span>:                 <span class="keyword">if</span> (!topic.startsWith(MixAll.RETRY_GROUP_TOPIC_PREFIX)) &#123;</div><div class="line"> <span class="number">26</span>:                     log.warn(<span class="string">"doRebalance, &#123;&#125;, but the topic[&#123;&#125;] not exist."</span>, consumerGroup, topic);</div><div class="line"> <span class="number">27</span>:                 &#125;</div><div class="line"> <span class="number">28</span>:             &#125;</div><div class="line"> <span class="number">29</span>: </div><div class="line"> <span class="number">30</span>:             <span class="keyword">if</span> (<span class="keyword">null</span> == cidAll) &#123;</div><div class="line"> <span class="number">31</span>:                 log.warn(<span class="string">"doRebalance, &#123;&#125; &#123;&#125;, get consumer id list failed"</span>, consumerGroup, topic);</div><div class="line"> <span class="number">32</span>:             &#125;</div><div class="line"> <span class="number">33</span>: </div><div class="line"> <span class="number">34</span>:             <span class="keyword">if</span> (mqSet != <span class="keyword">null</span> &amp;&amp; cidAll != <span class="keyword">null</span>) &#123;</div><div class="line"> <span class="number">35</span>:                 <span class="comment">// 排序 消息队列 和 消费者数组。因为是在Client进行分配队列，排序后，各Client的顺序才能保持一致。</span></div><div class="line"> <span class="number">36</span>:                 List&lt;MessageQueue&gt; mqAll = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"> <span class="number">37</span>:                 mqAll.addAll(mqSet);</div><div class="line"> <span class="number">38</span>: </div><div class="line"> <span class="number">39</span>:                 Collections.sort(mqAll);</div><div class="line"> <span class="number">40</span>:                 Collections.sort(cidAll);</div><div class="line"> <span class="number">41</span>: </div><div class="line"> <span class="number">42</span>:                 AllocateMessageQueueStrategy strategy = <span class="keyword">this</span>.allocateMessageQueueStrategy;</div><div class="line"> <span class="number">43</span>: </div><div class="line"> <span class="number">44</span>:                 <span class="comment">// 根据 队列分配策略 分配消息队列</span></div><div class="line"> <span class="number">45</span>:                 List&lt;MessageQueue&gt; allocateResult;</div><div class="line"> <span class="number">46</span>:                 <span class="keyword">try</span> &#123;</div><div class="line"> <span class="number">47</span>:                     allocateResult = strategy.allocate(<span class="comment">//</span></div><div class="line"> <span class="number">48</span>:                         <span class="keyword">this</span>.consumerGroup, <span class="comment">//</span></div><div class="line"> <span class="number">49</span>:                         <span class="keyword">this</span>.mQClientFactory.getClientId(), <span class="comment">//</span></div><div class="line"> <span class="number">50</span>:                         mqAll, <span class="comment">//</span></div><div class="line"> <span class="number">51</span>:                         cidAll);</div><div class="line"> <span class="number">52</span>:                 &#125; <span class="keyword">catch</span> (Throwable e) &#123;</div><div class="line"> <span class="number">53</span>:                     log.error(<span class="string">"AllocateMessageQueueStrategy.allocate Exception. allocateMessageQueueStrategyName=&#123;&#125;"</span>, strategy.getName(),</div><div class="line"> <span class="number">54</span>:                         e);</div><div class="line"> <span class="number">55</span>:                     <span class="keyword">return</span>;</div><div class="line"> <span class="number">56</span>:                 &#125;</div><div class="line"> <span class="number">57</span>: </div><div class="line"> <span class="number">58</span>:                 Set&lt;MessageQueue&gt; allocateResultSet = <span class="keyword">new</span> HashSet&lt;&gt;();</div><div class="line"> <span class="number">59</span>:                 <span class="keyword">if</span> (allocateResult != <span class="keyword">null</span>) &#123;</div><div class="line"> <span class="number">60</span>:                     allocateResultSet.addAll(allocateResult);</div><div class="line"> <span class="number">61</span>:                 &#125;</div><div class="line"> <span class="number">62</span>: </div><div class="line"> <span class="number">63</span>:                 <span class="comment">// 更新消息队列</span></div><div class="line"> <span class="number">64</span>:                 <span class="keyword">boolean</span> changed = <span class="keyword">this</span>.updateProcessQueueTableInRebalance(topic, allocateResultSet, isOrder);</div><div class="line"> <span class="number">65</span>:                 <span class="keyword">if</span> (changed) &#123;</div><div class="line"> <span class="number">66</span>:                     log.info(</div><div class="line"> <span class="number">67</span>:                         <span class="string">"rebalanced result changed. allocateMessageQueueStrategyName=&#123;&#125;, group=&#123;&#125;, topic=&#123;&#125;, clientId=&#123;&#125;, mqAllSize=&#123;&#125;, cidAllSize=&#123;&#125;, rebalanceResultSize=&#123;&#125;, rebalanceResultSet=&#123;&#125;"</span>,</div><div class="line"> <span class="number">68</span>:                         strategy.getName(), consumerGroup, topic, <span class="keyword">this</span>.mQClientFactory.getClientId(), mqSet.size(), cidAll.size(),</div><div class="line"> <span class="number">69</span>:                         allocateResultSet.size(), allocateResultSet);</div><div class="line"> <span class="number">70</span>:                     <span class="keyword">this</span>.messageQueueChanged(topic, mqSet, allocateResultSet);</div><div class="line"> <span class="number">71</span>:                 &#125;</div><div class="line"> <span class="number">72</span>:             &#125;</div><div class="line"> <span class="number">73</span>:             <span class="keyword">break</span>;</div><div class="line"> <span class="number">74</span>:         &#125;</div><div class="line"> <span class="number">75</span>:         <span class="keyword">default</span>:</div><div class="line"> <span class="number">76</span>:             <span class="keyword">break</span>;</div><div class="line"> <span class="number">77</span>:     &#125;</div><div class="line"> <span class="number">78</span>: &#125;</div><div class="line"> <span class="number">79</span>: </div><div class="line"> <span class="number">80</span>: <span class="comment">/**</span></div><div class="line"> 81:  * 当负载均衡时，更新 消息处理队列</div><div class="line"> 82:  * - 移除 在processQueueTable &amp;&amp; 不存在于 mqSet 里的消息队列</div><div class="line"> 83:  * - 增加 不在processQueueTable &amp;&amp; 存在于mqSet 里的消息队列</div><div class="line"> 84:  *</div><div class="line"> 85:  * <span class="doctag">@param</span> topic Topic</div><div class="line"> 86:  * <span class="doctag">@param</span> mqSet 负载均衡结果后的消息队列数组</div><div class="line"> 87:  * <span class="doctag">@param</span> isOrder 是否顺序</div><div class="line"> 88:  * <span class="doctag">@return</span> 是否变更</div><div class="line"> 89:  */</div><div class="line"> <span class="number">90</span>: <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">updateProcessQueueTableInRebalance</span><span class="params">(<span class="keyword">final</span> String topic, <span class="keyword">final</span> Set&lt;MessageQueue&gt; mqSet, <span class="keyword">final</span> <span class="keyword">boolean</span> isOrder)</span> </span>&#123;</div><div class="line"> <span class="number">91</span>:     <span class="keyword">boolean</span> changed = <span class="keyword">false</span>;</div><div class="line"> <span class="number">92</span>: </div><div class="line"> <span class="number">93</span>:     <span class="comment">// 移除 在processQueueTable &amp;&amp; 不存在于 mqSet 里的消息队列</span></div><div class="line"> <span class="number">94</span>:     Iterator&lt;Entry&lt;MessageQueue, ProcessQueue&gt;&gt; it = <span class="keyword">this</span>.processQueueTable.entrySet().iterator();</div><div class="line"> <span class="number">95</span>:     <span class="keyword">while</span> (it.hasNext()) &#123; <span class="comment">// TODO 待读：</span></div><div class="line"> <span class="number">96</span>:         Entry&lt;MessageQueue, ProcessQueue&gt; next = it.next();</div><div class="line"> <span class="number">97</span>:         MessageQueue mq = next.getKey();</div><div class="line"> <span class="number">98</span>:         ProcessQueue pq = next.getValue();</div><div class="line"> <span class="number">99</span>: </div><div class="line"><span class="number">100</span>:         <span class="keyword">if</span> (mq.getTopic().equals(topic)) &#123;</div><div class="line"><span class="number">101</span>:             <span class="keyword">if</span> (!mqSet.contains(mq)) &#123; <span class="comment">// 不包含的队列</span></div><div class="line"><span class="number">102</span>:                 pq.setDropped(<span class="keyword">true</span>);</div><div class="line"><span class="number">103</span>:                 <span class="keyword">if</span> (<span class="keyword">this</span>.removeUnnecessaryMessageQueue(mq, pq)) &#123;</div><div class="line"><span class="number">104</span>:                     it.remove();</div><div class="line"><span class="number">105</span>:                     changed = <span class="keyword">true</span>;</div><div class="line"><span class="number">106</span>:                     log.info(<span class="string">"doRebalance, &#123;&#125;, remove unnecessary mq, &#123;&#125;"</span>, consumerGroup, mq);</div><div class="line"><span class="number">107</span>:                 &#125;</div><div class="line"><span class="number">108</span>:             &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pq.isPullExpired()) &#123; <span class="comment">// 队列拉取超时，进行清理</span></div><div class="line"><span class="number">109</span>:                 <span class="keyword">switch</span> (<span class="keyword">this</span>.consumeType()) &#123;</div><div class="line"><span class="number">110</span>:                     <span class="keyword">case</span> CONSUME_ACTIVELY:</div><div class="line"><span class="number">111</span>:                         <span class="keyword">break</span>;</div><div class="line"><span class="number">112</span>:                     <span class="keyword">case</span> CONSUME_PASSIVELY:</div><div class="line"><span class="number">113</span>:                         pq.setDropped(<span class="keyword">true</span>);</div><div class="line"><span class="number">114</span>:                         <span class="keyword">if</span> (<span class="keyword">this</span>.removeUnnecessaryMessageQueue(mq, pq)) &#123;</div><div class="line"><span class="number">115</span>:                             it.remove();</div><div class="line"><span class="number">116</span>:                             changed = <span class="keyword">true</span>;</div><div class="line"><span class="number">117</span>:                             log.error(<span class="string">"[BUG]doRebalance, &#123;&#125;, remove unnecessary mq, &#123;&#125;, because pull is pause, so try to fixed it"</span>,</div><div class="line"><span class="number">118</span>:                                 consumerGroup, mq);</div><div class="line"><span class="number">119</span>:                         &#125;</div><div class="line"><span class="number">120</span>:                         <span class="keyword">break</span>;</div><div class="line"><span class="number">121</span>:                     <span class="keyword">default</span>:</div><div class="line"><span class="number">122</span>:                         <span class="keyword">break</span>;</div><div class="line"><span class="number">123</span>:                 &#125;</div><div class="line"><span class="number">124</span>:             &#125;</div><div class="line"><span class="number">125</span>:         &#125;</div><div class="line"><span class="number">126</span>:     &#125;</div><div class="line"><span class="number">127</span>: </div><div class="line"><span class="number">128</span>:     <span class="comment">// 增加 不在processQueueTable &amp;&amp; 存在于mqSet 里的消息队列。</span></div><div class="line"><span class="number">129</span>:     List&lt;PullRequest&gt; pullRequestList = <span class="keyword">new</span> ArrayList&lt;&gt;(); <span class="comment">// 拉消息请求数组</span></div><div class="line"><span class="number">130</span>:     <span class="keyword">for</span> (MessageQueue mq : mqSet) &#123;</div><div class="line"><span class="number">131</span>:         <span class="keyword">if</span> (!<span class="keyword">this</span>.processQueueTable.containsKey(mq)) &#123;</div><div class="line"><span class="number">132</span>:             <span class="keyword">if</span> (isOrder &amp;&amp; !<span class="keyword">this</span>.lock(mq)) &#123;</div><div class="line"><span class="number">133</span>:                 log.warn(<span class="string">"doRebalance, &#123;&#125;, add a new mq failed, &#123;&#125;, because lock failed"</span>, consumerGroup, mq);</div><div class="line"><span class="number">134</span>:                 <span class="keyword">continue</span>;</div><div class="line"><span class="number">135</span>:             &#125;</div><div class="line"><span class="number">136</span>: </div><div class="line"><span class="number">137</span>:             <span class="keyword">this</span>.removeDirtyOffset(mq);</div><div class="line"><span class="number">138</span>:             ProcessQueue pq = <span class="keyword">new</span> ProcessQueue();</div><div class="line"><span class="number">139</span>:             <span class="keyword">long</span> nextOffset = <span class="keyword">this</span>.computePullFromWhere(mq);</div><div class="line"><span class="number">140</span>:             <span class="keyword">if</span> (nextOffset &gt;= <span class="number">0</span>) &#123;</div><div class="line"><span class="number">141</span>:                 ProcessQueue pre = <span class="keyword">this</span>.processQueueTable.putIfAbsent(mq, pq);</div><div class="line"><span class="number">142</span>:                 <span class="keyword">if</span> (pre != <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">143</span>:                     log.info(<span class="string">"doRebalance, &#123;&#125;, mq already exists, &#123;&#125;"</span>, consumerGroup, mq);</div><div class="line"><span class="number">144</span>:                 &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">145</span>:                     log.info(<span class="string">"doRebalance, &#123;&#125;, add a new mq, &#123;&#125;"</span>, consumerGroup, mq);</div><div class="line"><span class="number">146</span>:                     PullRequest pullRequest = <span class="keyword">new</span> PullRequest();</div><div class="line"><span class="number">147</span>:                     pullRequest.setConsumerGroup(consumerGroup);</div><div class="line"><span class="number">148</span>:                     pullRequest.setNextOffset(nextOffset);</div><div class="line"><span class="number">149</span>:                     pullRequest.setMessageQueue(mq);</div><div class="line"><span class="number">150</span>:                     pullRequest.setProcessQueue(pq);</div><div class="line"><span class="number">151</span>:                     pullRequestList.add(pullRequest);</div><div class="line"><span class="number">152</span>:                     changed = <span class="keyword">true</span>;</div><div class="line"><span class="number">153</span>:                 &#125;</div><div class="line"><span class="number">154</span>:             &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">155</span>:                 log.warn(<span class="string">"doRebalance, &#123;&#125;, add new mq failed, &#123;&#125;"</span>, consumerGroup, mq);</div><div class="line"><span class="number">156</span>:             &#125;</div><div class="line"><span class="number">157</span>:         &#125;</div><div class="line"><span class="number">158</span>:     &#125;</div><div class="line"><span class="number">159</span>: </div><div class="line"><span class="number">160</span>:     <span class="comment">// 发起消息拉取请求</span></div><div class="line"><span class="number">161</span>:     <span class="keyword">this</span>.dispatchPullRequest(pullRequestList);</div><div class="line"><span class="number">162</span>: </div><div class="line"><span class="number">163</span>:     <span class="keyword">return</span> changed;</div><div class="line"><span class="number">164</span>: &#125;</div></pre></td></tr></table></figure></p>
<ul>
<li><code>#rebalanceByTopic(...)</code> 说明 ：分配 <code>Topic</code> 的消息队列。
<ul>
<li>第 3 至 19 行 ：广播模式( <code>BROADCASTING</code> ) 下，分配 <code>Topic</code> 对应的<strong>所有</strong>消息队列。</li>
<li>第 20 至 74 行 ：集群模式( <code>CLUSTERING</code> ) 下，分配 <code>Topic</code> 对应的<strong>部分</strong>消息队列。
<ul>
<li>第 21 至 40 行 ：获取 <code>Topic</code> 对应的消息队列和消费者们，并对其进行排序。因为各 <code>Consumer</code> 是在本地分配消息队列，排序后才能保证各 <code>Consumer</code> 顺序一致。</li>
<li>第 42 至 61 行 ：根据 队列分配策略( <code>AllocateMessageQueueStrategy</code> ) 分配消息队列。详细解析见：<a href="#allocatemessagequeuestrategy">AllocateMessageQueueStrategy</a>。</li>
<li>第 63 至 72 行 ：更新 <code>Topic</code> 对应的消息队列。</li>
</ul>
</li>
</ul>
</li>
<li><code>#updateProcessQueueTableInRebalance(...)</code> 说明 ：当分配队列时，更新 <code>Topic</code> 对应的消息队列，并返回是否有变更。
<ul>
<li>第 93 至 126 行 ：移除不存在于分配的消息队列( <code>mqSet</code> ) 的 消息处理队列( <code>processQueueTable</code> )。
<ul>
<li>第 103 行 ：移除不需要的消息队列。详细解析见：<a href="#rebalancepushimplremoveunnecessarymessagequeue">RebalancePushImpl#removeUnnecessaryMessageQueue(...)</a>。</li>
<li>第 108 至 120 行 ：队列拉取超时，即 <code>当前时间 - 最后一次拉取消息时间 &gt; 120s</code> ( 120s 可配置)，判定发生 <strong>BUG</strong>，过久未进行消息拉取，移除消息队列。移除后，下面**#新增队列逻辑#**可以重新加入新的该消息队列。</li>
</ul>
</li>
<li>第 128 至 158 行 ：增加 分配的消息队列( <code>mqSet</code> ) 新增的消息队列。
<ul>
<li>第 132 至 135 行 ：<code>顺序消费</code> 相关跳过，详细解析见：<a href="http://www.yunai.me/RocketMQ/message-send-and-consume-orderly/">《RocketMQ 源码分析 —— Message 顺序发送与消费》</a>。</li>
<li>第 137 行 ：移除消息队列的消费进度。</li>
<li>第 139 行 ：获取队列消费进度。详细解析见：<a href="#rebalancepushimplcomputepullfromwhere">RebalancePushImpl#computePullFromWhere(...)</a>。</li>
<li>第 140 至 156 行 ：<strong>添加新消费处理队列，添加消费拉取消息请求</strong>。</li>
</ul>
</li>
<li>第 161 行 ：<strong>发起新增的消息队列消息拉取请求</strong>。详细解析见：<a href="#rebalancepushimpldispatchpullrequest">RebalancePushImpl#dispatchPullRequest(...)</a>。</li>
</ul>
</li>
</ul>
<h3>RebalanceImpl#removeUnnecessaryMessageQueue(...)</h3>
<h4>RebalancePushImpl#removeUnnecessaryMessageQueue(...)</h4>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">removeUnnecessaryMessageQueue</span><span class="params">(MessageQueue mq, ProcessQueue pq)</span> </span>&#123;</div><div class="line"> <span class="number">2</span>:     <span class="comment">// 同步队列的消费进度，并移除之。</span></div><div class="line"> <span class="number">3</span>:     <span class="keyword">this</span>.defaultMQPushConsumerImpl.getOffsetStore().persist(mq);</div><div class="line"> <span class="number">4</span>:     <span class="keyword">this</span>.defaultMQPushConsumerImpl.getOffsetStore().removeOffset(mq);</div><div class="line"> <span class="number">5</span>:     <span class="comment">// TODO 顺序消费</span></div><div class="line"> <span class="number">6</span>:     <span class="keyword">if</span> (<span class="keyword">this</span>.defaultMQPushConsumerImpl.isConsumeOrderly()</div><div class="line"> <span class="number">7</span>:         &amp;&amp; MessageModel.CLUSTERING.equals(<span class="keyword">this</span>.defaultMQPushConsumerImpl.messageModel())) &#123;</div><div class="line"> <span class="number">8</span>:         <span class="keyword">try</span> &#123;</div><div class="line"> <span class="number">9</span>:             <span class="keyword">if</span> (pq.getLockConsume().tryLock(<span class="number">1000</span>, TimeUnit.MILLISECONDS)) &#123;</div><div class="line"><span class="number">10</span>:                 <span class="keyword">try</span> &#123;</div><div class="line"><span class="number">11</span>:                     <span class="keyword">return</span> <span class="keyword">this</span>.unlockDelay(mq, pq);</div><div class="line"><span class="number">12</span>:                 &#125; <span class="keyword">finally</span> &#123;</div><div class="line"><span class="number">13</span>:                     pq.getLockConsume().unlock();</div><div class="line"><span class="number">14</span>:                 &#125;</div><div class="line"><span class="number">15</span>:             &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">16</span>:                 log.warn(<span class="string">"[WRONG]mq is consuming, so can not unlock it, &#123;&#125;. maybe hanged for a while, &#123;&#125;"</span>, <span class="comment">//</span></div><div class="line"><span class="number">17</span>:                     mq, <span class="comment">//</span></div><div class="line"><span class="number">18</span>:                     pq.getTryUnlockTimes());</div><div class="line"><span class="number">19</span>: </div><div class="line"><span class="number">20</span>:                 pq.incTryUnlockTimes();</div><div class="line"><span class="number">21</span>:             &#125;</div><div class="line"><span class="number">22</span>:         &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"><span class="number">23</span>:             log.error(<span class="string">"removeUnnecessaryMessageQueue Exception"</span>, e);</div><div class="line"><span class="number">24</span>:         &#125;</div><div class="line"><span class="number">25</span>: </div><div class="line"><span class="number">26</span>:         <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line"><span class="number">27</span>:     &#125;</div><div class="line"><span class="number">28</span>:     <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line"><span class="number">29</span>: &#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>说明 ：移除不需要的消息队列相关的信息，并返回是否移除成功。</li>
<li>第 2 至 4 行 ：<strong>同步</strong>队列的消费进度，并移除之。</li>
<li>第 5 至 27 行 ：<code>顺序消费</code> 相关跳过，详细解析见：<a href="http://www.yunai.me/RocketMQ/message-send-and-consume-orderly/">《RocketMQ 源码分析 —— Message 顺序发送与消费》</a>。</li>
</ul>
<h4><code>[PullConsumer]</code> RebalancePullImpl#removeUnnecessaryMessageQueue(...)</h4>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="number">1</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">removeUnnecessaryMessageQueue</span><span class="params">(MessageQueue mq, ProcessQueue pq)</span> </span>&#123;</div><div class="line"><span class="number">2</span>:     <span class="keyword">this</span>.defaultMQPullConsumerImpl.getOffsetStore().persist(mq);</div><div class="line"><span class="number">3</span>:     <span class="keyword">this</span>.defaultMQPullConsumerImpl.getOffsetStore().removeOffset(mq);</div><div class="line"><span class="number">4</span>:     <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line"><span class="number">5</span>: &#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>说明 ：移除不需要的消息队列相关的信息，并返回移除成功。<strong>和<code>RebalancePushImpl#removeUnnecessaryMessageQueue(...)</code>基本一致。</strong></li>
</ul>
<h3>RebalancePushImpl#dispatchPullRequest(...)</h3>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="number">1</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispatchPullRequest</span><span class="params">(List&lt;PullRequest&gt; pullRequestList)</span> </span>&#123;</div><div class="line"><span class="number">2</span>:     <span class="keyword">for</span> (PullRequest pullRequest : pullRequestList) &#123;</div><div class="line"><span class="number">3</span>:         <span class="keyword">this</span>.defaultMQPushConsumerImpl.executePullRequestImmediately(pullRequest);</div><div class="line"><span class="number">4</span>:         log.info(<span class="string">"doRebalance, &#123;&#125;, add a new pull request &#123;&#125;"</span>, consumerGroup, pullRequest);</div><div class="line"><span class="number">5</span>:     &#125;</div><div class="line"><span class="number">6</span>: &#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>说明 ：发起消息拉取请求。<strong>该调用是<code>PushConsumer</code>不断不断不断拉取消息的起点</strong>。</li>
</ul>
<h4>DefaultMQPushConsumerImpl#executePullRequestImmediately(...)</h4>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="number">1</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">executePullRequestImmediately</span><span class="params">(<span class="keyword">final</span> PullRequest pullRequest)</span> </span>&#123;</div><div class="line"><span class="number">2</span>:     <span class="keyword">this</span>.mQClientFactory.getPullMessageService().executePullRequestImmediately(pullRequest);</div><div class="line"><span class="number">3</span>: &#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>说明 ：提交拉取请求。提交后，<code>PullMessageService</code> <strong>异步执行</strong>，<strong>非阻塞</strong>。详细解析见：<a href="pullmessageservice">PullMessageService</a>。</li>
</ul>
<h3>AllocateMessageQueueStrategy</h3>
<p><img src="http://www.yunai.me/images/RocketMQ/2017_05_04/01.png" alt="AllocateMessageQueueStrategy类图"></p>
<h4>AllocateMessageQueueAveragely</h4>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AllocateMessageQueueAveragely</span> <span class="keyword">implements</span> <span class="title">AllocateMessageQueueStrategy</span> </span>&#123;</div><div class="line"> <span class="number">2</span>:     <span class="keyword">private</span> <span class="keyword">final</span> Logger log = ClientLogger.getLog();</div><div class="line"> <span class="number">3</span>: </div><div class="line"> <span class="number">4</span>:     <span class="meta">@Override</span></div><div class="line"> <span class="number">5</span>:     <span class="function"><span class="keyword">public</span> List&lt;MessageQueue&gt; <span class="title">allocate</span><span class="params">(String consumerGroup, String currentCID, List&lt;MessageQueue&gt; mqAll,</span></span></div><div class="line"> <span class="number">6</span>:         List&lt;String&gt; cidAll) &#123;</div><div class="line"> <span class="number">7</span>:         <span class="comment">// 校验参数是否正确</span></div><div class="line"> <span class="number">8</span>:         <span class="keyword">if</span> (currentCID == <span class="keyword">null</span> || currentCID.length() &lt; <span class="number">1</span>) &#123;</div><div class="line"> <span class="number">9</span>:             <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"currentCID is empty"</span>);</div><div class="line"><span class="number">10</span>:         &#125;</div><div class="line"><span class="number">11</span>:         <span class="keyword">if</span> (mqAll == <span class="keyword">null</span> || mqAll.isEmpty()) &#123;</div><div class="line"><span class="number">12</span>:             <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"mqAll is null or mqAll empty"</span>);</div><div class="line"><span class="number">13</span>:         &#125;</div><div class="line"><span class="number">14</span>:         <span class="keyword">if</span> (cidAll == <span class="keyword">null</span> || cidAll.isEmpty()) &#123;</div><div class="line"><span class="number">15</span>:             <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"cidAll is null or cidAll empty"</span>);</div><div class="line"><span class="number">16</span>:         &#125;</div><div class="line"><span class="number">17</span>: </div><div class="line"><span class="number">18</span>:         List&lt;MessageQueue&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"><span class="number">19</span>:         <span class="keyword">if</span> (!cidAll.contains(currentCID)) &#123;</div><div class="line"><span class="number">20</span>:             log.info(<span class="string">"[BUG] ConsumerGroup: &#123;&#125; The consumerId: &#123;&#125; not in cidAll: &#123;&#125;"</span>,</div><div class="line"><span class="number">21</span>:                 consumerGroup,</div><div class="line"><span class="number">22</span>:                 currentCID,</div><div class="line"><span class="number">23</span>:                 cidAll);</div><div class="line"><span class="number">24</span>:             <span class="keyword">return</span> result;</div><div class="line"><span class="number">25</span>:         &#125;</div><div class="line"><span class="number">26</span>:         <span class="comment">// 平均分配</span></div><div class="line"><span class="number">27</span>:         <span class="keyword">int</span> index = cidAll.indexOf(currentCID); <span class="comment">// 第几个consumer。</span></div><div class="line"><span class="number">28</span>:         <span class="keyword">int</span> mod = mqAll.size() % cidAll.size(); <span class="comment">// 余数，即多少消息队列无法平均分配。</span></div><div class="line"><span class="number">29</span>:         <span class="keyword">int</span> averageSize =</div><div class="line"><span class="number">30</span>:             mqAll.size() &lt;= cidAll.size() ? <span class="number">1</span> : (mod &gt; <span class="number">0</span> &amp;&amp; index &lt; mod ? mqAll.size() / cidAll.size()</div><div class="line"><span class="number">31</span>:                 + <span class="number">1</span> : mqAll.size() / cidAll.size());</div><div class="line"><span class="number">32</span>:         <span class="keyword">int</span> startIndex = (mod &gt; <span class="number">0</span> &amp;&amp; index &lt; mod) ? index * averageSize : index * averageSize + mod; <span class="comment">// 有余数的情况下，[0, mod) 平分余数，即每consumer多分配一个节点；第index开始，跳过前mod余数。</span></div><div class="line"><span class="number">33</span>:         <span class="keyword">int</span> range = Math.min(averageSize, mqAll.size() - startIndex); <span class="comment">// 分配队列数量。之所以要Math.min()的原因是，mqAll.size() &lt;= cidAll.size()，部分consumer分配不到消息队列。</span></div><div class="line"><span class="number">34</span>:         <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; range; i++) &#123;</div><div class="line"><span class="number">35</span>:             result.add(mqAll.get((startIndex + i) % mqAll.size()));</div><div class="line"><span class="number">36</span>:         &#125;</div><div class="line"><span class="number">37</span>:         <span class="keyword">return</span> result;</div><div class="line"><span class="number">38</span>:     &#125;</div><div class="line"><span class="number">39</span>: </div><div class="line"><span class="number">40</span>:     <span class="meta">@Override</span></div><div class="line"><span class="number">41</span>:     <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="number">42</span>:         <span class="keyword">return</span> <span class="string">"AVG"</span>;</div><div class="line"><span class="number">43</span>:     &#125;</div><div class="line"><span class="number">44</span>: &#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>说明 ：<strong>平均</strong>分配队列策略。</li>
<li>第 7 至 25 行 ：参数校验。</li>
<li>第 26 至 36 行 ：平均分配消息队列。
<ul>
<li>第 27 行 ：<code>index</code> ：当前 <code>Consumer</code> 在消费集群里是第几个。这里就是为什么需要对传入的 <code>cidAll</code> 参数必须进行排序的原因。如果不排序，<code>Consumer</code> 在本地计算出来的 <code>index</code> 无法一致，影响计算结果。</li>
<li>第 28 行 ：<code>mod</code> ：余数，即多少消息队列无法平均分配。</li>
<li>第 29 至 31 行 ：<code>averageSize</code> ：代码可以简化成 <code>(mod &gt; 0 &amp;&amp; index &lt; mod ? mqAll.size() / cidAll.size() + 1 : mqAll.size() / cidAll.size())</code>。
<ul>
<li><code>[ 0, mod )</code> ：<code>mqAll.size() / cidAll.size() + 1</code>。前面 <code>mod</code> 个 <code>Consumer</code> 平分余数，多获得 1 个消息队列。</li>
<li><code>[ mod, cidAll.size() )</code> ：<code>mqAll.size() / cidAll.size()</code>。</li>
</ul>
</li>
<li>第 32 行 ：<code>startIndex</code> ：<code>Consumer</code> 分配消息队列开始位置。</li>
<li>第 33 行 ：<code>range</code> ：分配队列数量。之所以要 <code>Math#min(...)</code> 的原因：当 <code>mqAll.size() &lt;= cidAll.size()</code> 时，最后几个 <code>Consumer</code> 分配不到消息队列。</li>
<li>第 34 至 36 行 ：生成分配消息队列结果。</li>
</ul>
</li>
<li>举个例子：</li>
</ul>
<p>固定消息队列长度为<strong>4</strong>。</p>
<table>
<thead>
<tr>
<th></th>
<th>Consumer * 2 <em>可以整除</em></th>
<th>Consumer * 3 <em>不可整除</em></th>
<th>Consumer * 5 <em>无法都分配</em></th>
</tr>
</thead>
<tbody>
<tr>
<td>消息队列[0]</td>
<td>Consumer[0]</td>
<td>Consumer[0]</td>
<td>Consumer[0]</td>
</tr>
<tr>
<td>消息队列[1]</td>
<td>Consumer[0]</td>
<td>Consumer[0]</td>
<td>Consumer[1]</td>
</tr>
<tr>
<td>消息队列[2]</td>
<td>Consumer[1]</td>
<td>Consumer[1]</td>
<td>Consumer[2]</td>
</tr>
<tr>
<td>消息队列[3]</td>
<td>Consumer[1]</td>
<td>Consumer[2]</td>
<td>Consumer[3]</td>
</tr>
</tbody>
</table>
<h4>AllocateMessageQueueByMachineRoom</h4>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AllocateMessageQueueByMachineRoom</span> <span class="keyword">implements</span> <span class="title">AllocateMessageQueueStrategy</span> </span>&#123;</div><div class="line"> <span class="number">2</span>:     <span class="comment">/**</span></div><div class="line"> 3:      * 消费者消费brokerName集合</div><div class="line"> 4:      */</div><div class="line"> <span class="number">5</span>:     <span class="keyword">private</span> Set&lt;String&gt; consumeridcs;</div><div class="line"> <span class="number">6</span>: </div><div class="line"> <span class="number">7</span>:     <span class="meta">@Override</span></div><div class="line"> <span class="number">8</span>:     <span class="function"><span class="keyword">public</span> List&lt;MessageQueue&gt; <span class="title">allocate</span><span class="params">(String consumerGroup, String currentCID, List&lt;MessageQueue&gt; mqAll,</span></span></div><div class="line"> <span class="number">9</span>:         List&lt;String&gt; cidAll) &#123;</div><div class="line"><span class="number">10</span>:         <span class="comment">// 参数校验</span></div><div class="line"><span class="number">11</span>:         List&lt;MessageQueue&gt; result = <span class="keyword">new</span> ArrayList&lt;MessageQueue&gt;();</div><div class="line"><span class="number">12</span>:         <span class="keyword">int</span> currentIndex = cidAll.indexOf(currentCID);</div><div class="line"><span class="number">13</span>:         <span class="keyword">if</span> (currentIndex &lt; <span class="number">0</span>) &#123;</div><div class="line"><span class="number">14</span>:             <span class="keyword">return</span> result;</div><div class="line"><span class="number">15</span>:         &#125;</div><div class="line"><span class="number">16</span>:         <span class="comment">// 计算符合当前配置的消费者数组('consumeridcs')对应的消息队列</span></div><div class="line"><span class="number">17</span>:         List&lt;MessageQueue&gt; premqAll = <span class="keyword">new</span> ArrayList&lt;MessageQueue&gt;();</div><div class="line"><span class="number">18</span>:         <span class="keyword">for</span> (MessageQueue mq : mqAll) &#123;</div><div class="line"><span class="number">19</span>:             String[] temp = mq.getBrokerName().split(<span class="string">"@"</span>);</div><div class="line"><span class="number">20</span>:             <span class="keyword">if</span> (temp.length == <span class="number">2</span> &amp;&amp; consumeridcs.contains(temp[<span class="number">0</span>])) &#123;</div><div class="line"><span class="number">21</span>:                 premqAll.add(mq);</div><div class="line"><span class="number">22</span>:             &#125;</div><div class="line"><span class="number">23</span>:         &#125;</div><div class="line"><span class="number">24</span>:         <span class="comment">// 平均分配</span></div><div class="line"><span class="number">25</span>:         <span class="keyword">int</span> mod = premqAll.size() / cidAll.size();</div><div class="line"><span class="number">26</span>:         <span class="keyword">int</span> rem = premqAll.size() % cidAll.size();</div><div class="line"><span class="number">27</span>:         <span class="keyword">int</span> startIndex = mod * currentIndex;</div><div class="line"><span class="number">28</span>:         <span class="keyword">int</span> endIndex = startIndex + mod;</div><div class="line"><span class="number">29</span>:         <span class="keyword">for</span> (<span class="keyword">int</span> i = startIndex; i &lt; endIndex; i++) &#123;</div><div class="line"><span class="number">30</span>:             result.add(mqAll.get(i));</div><div class="line"><span class="number">31</span>:         &#125;</div><div class="line"><span class="number">32</span>:         <span class="keyword">if</span> (rem &gt; currentIndex) &#123;</div><div class="line"><span class="number">33</span>:             result.add(premqAll.get(currentIndex + mod * cidAll.size()));</div><div class="line"><span class="number">34</span>:         &#125;</div><div class="line"><span class="number">35</span>:         <span class="keyword">return</span> result;</div><div class="line"><span class="number">36</span>:     &#125;</div><div class="line"><span class="number">37</span>: </div><div class="line"><span class="number">38</span>:     <span class="meta">@Override</span></div><div class="line"><span class="number">39</span>:     <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="number">40</span>:         <span class="keyword">return</span> <span class="string">"MACHINE_ROOM"</span>;</div><div class="line"><span class="number">41</span>:     &#125;</div><div class="line"><span class="number">42</span>: </div><div class="line"><span class="number">43</span>:     <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">getConsumeridcs</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="number">44</span>:         <span class="keyword">return</span> consumeridcs;</div><div class="line"><span class="number">45</span>:     &#125;</div><div class="line"><span class="number">46</span>: </div><div class="line"><span class="number">47</span>:     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConsumeridcs</span><span class="params">(Set&lt;String&gt; consumeridcs)</span> </span>&#123;</div><div class="line"><span class="number">48</span>:         <span class="keyword">this</span>.consumeridcs = consumeridcs;</div><div class="line"><span class="number">49</span>:     &#125;</div><div class="line"><span class="number">50</span>: &#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>说明 ：<strong>平均</strong>分配<strong>可消费的</strong> <code>Broker</code> 对应的消息队列。</li>
<li>第 7 至 15 行 ：参数校验。</li>
<li>第 16 至 23 行 ：计算<strong>可消费的</strong> <code>Broker</code> 对应的消息队列。</li>
<li>第 25 至 34 行 ：平均分配消息队列。该<strong>平均分配</strong>方式和 <code>AllocateMessageQueueAveragely</code> 略有不同，其是将多余的结尾部分分配给前 <code>rem</code> 个 <code>Consumer</code>。</li>
<li>疑问：<em>使用该分配策略时，<code>Consumer</code> 和 <code>Broker</code> 分配需要怎么配置</em>。😈等研究<strong>主从</strong>相关源码时，仔细考虑下。</li>
</ul>
<h4>AllocateMessageQueueAveragelyByCircle</h4>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">  <span class="number">1</span>: <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AllocateMessageQueueAveragelyByCircle</span> <span class="keyword">implements</span> <span class="title">AllocateMessageQueueStrategy</span> </span>&#123;</div><div class="line"> <span class="number">2</span>:     <span class="keyword">private</span> <span class="keyword">final</span> Logger log = ClientLogger.getLog();</div><div class="line"> <span class="number">3</span>: </div><div class="line"> <span class="number">4</span>:     <span class="meta">@Override</span></div><div class="line"> <span class="number">5</span>:     <span class="function"><span class="keyword">public</span> List&lt;MessageQueue&gt; <span class="title">allocate</span><span class="params">(String consumerGroup, String currentCID, List&lt;MessageQueue&gt; mqAll,</span></span></div><div class="line"> <span class="number">6</span>:         List&lt;String&gt; cidAll) &#123;</div><div class="line"> <span class="number">7</span>:         <span class="comment">// 校验参数是否正确</span></div><div class="line"> <span class="number">8</span>:         <span class="keyword">if</span> (currentCID == <span class="keyword">null</span> || currentCID.length() &lt; <span class="number">1</span>) &#123;</div><div class="line"> <span class="number">9</span>:             <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"currentCID is empty"</span>);</div><div class="line"><span class="number">10</span>:         &#125;</div><div class="line"><span class="number">11</span>:         <span class="keyword">if</span> (mqAll == <span class="keyword">null</span> || mqAll.isEmpty()) &#123;</div><div class="line"><span class="number">12</span>:             <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"mqAll is null or mqAll empty"</span>);</div><div class="line"><span class="number">13</span>:         &#125;</div><div class="line"><span class="number">14</span>:         <span class="keyword">if</span> (cidAll == <span class="keyword">null</span> || cidAll.isEmpty()) &#123;</div><div class="line"><span class="number">15</span>:             <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"cidAll is null or cidAll empty"</span>);</div><div class="line"><span class="number">16</span>:         &#125;</div><div class="line"><span class="number">17</span>: </div><div class="line"><span class="number">18</span>:         List&lt;MessageQueue&gt; result = <span class="keyword">new</span> ArrayList&lt;MessageQueue&gt;();</div><div class="line"><span class="number">19</span>:         <span class="keyword">if</span> (!cidAll.contains(currentCID)) &#123;</div><div class="line"><span class="number">20</span>:             log.info(<span class="string">"[BUG] ConsumerGroup: &#123;&#125; The consumerId: &#123;&#125; not in cidAll: &#123;&#125;"</span>,</div><div class="line"><span class="number">21</span>:                 consumerGroup,</div><div class="line"><span class="number">22</span>:                 currentCID,</div><div class="line"><span class="number">23</span>:                 cidAll);</div><div class="line"><span class="number">24</span>:             <span class="keyword">return</span> result;</div><div class="line"><span class="number">25</span>:         &#125;</div><div class="line"><span class="number">26</span>: </div><div class="line"><span class="number">27</span>:         <span class="comment">// 环状分配</span></div><div class="line"><span class="number">28</span>:         <span class="keyword">int</span> index = cidAll.indexOf(currentCID);</div><div class="line"><span class="number">29</span>:         <span class="keyword">for</span> (<span class="keyword">int</span> i = index; i &lt; mqAll.size(); i++) &#123;</div><div class="line"><span class="number">30</span>:             <span class="keyword">if</span> (i % cidAll.size() == index) &#123;</div><div class="line"><span class="number">31</span>:                 result.add(mqAll.get(i));</div><div class="line"><span class="number">32</span>:             &#125;</div><div class="line"><span class="number">33</span>:         &#125;</div><div class="line"><span class="number">34</span>:         <span class="keyword">return</span> result;</div><div class="line"><span class="number">35</span>:     &#125;</div><div class="line"><span class="number">36</span>: </div><div class="line"><span class="number">37</span>:     <span class="meta">@Override</span></div><div class="line"><span class="number">38</span>:     <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="number">39</span>:         <span class="keyword">return</span> <span class="string">"AVG_BY_CIRCLE"</span>;</div><div class="line"><span class="number">40</span>:     &#125;</div><div class="line"><span class="number">41</span>: &#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>说明 ：环状分配消息队列。</li>
</ul>
<h4>AllocateMessageQueueByConfig</h4>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AllocateMessageQueueByConfig</span> <span class="keyword">implements</span> <span class="title">AllocateMessageQueueStrategy</span> </span>&#123;</div><div class="line"> <span class="number">2</span>:     <span class="keyword">private</span> List&lt;MessageQueue&gt; messageQueueList;</div><div class="line"> <span class="number">3</span>: </div><div class="line"> <span class="number">4</span>:     <span class="meta">@Override</span></div><div class="line"> <span class="number">5</span>:     <span class="function"><span class="keyword">public</span> List&lt;MessageQueue&gt; <span class="title">allocate</span><span class="params">(String consumerGroup, String currentCID, List&lt;MessageQueue&gt; mqAll,</span></span></div><div class="line"> <span class="number">6</span>:         List&lt;String&gt; cidAll) &#123;</div><div class="line"> <span class="number">7</span>:         <span class="keyword">return</span> <span class="keyword">this</span>.messageQueueList;</div><div class="line"> <span class="number">8</span>:     &#125;</div><div class="line"> <span class="number">9</span>: </div><div class="line"><span class="number">10</span>:     <span class="meta">@Override</span></div><div class="line"><span class="number">11</span>:     <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="number">12</span>:         <span class="keyword">return</span> <span class="string">"CONFIG"</span>;</div><div class="line"><span class="number">13</span>:     &#125;</div><div class="line"><span class="number">14</span>: </div><div class="line"><span class="number">15</span>:     <span class="function"><span class="keyword">public</span> List&lt;MessageQueue&gt; <span class="title">getMessageQueueList</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="number">16</span>:         <span class="keyword">return</span> messageQueueList;</div><div class="line"><span class="number">17</span>:     &#125;</div><div class="line"><span class="number">18</span>: </div><div class="line"><span class="number">19</span>:     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessageQueueList</span><span class="params">(List&lt;MessageQueue&gt; messageQueueList)</span> </span>&#123;</div><div class="line"><span class="number">20</span>:         <span class="keyword">this</span>.messageQueueList = messageQueueList;</div><div class="line"><span class="number">21</span>:     &#125;</div><div class="line"><span class="number">22</span>: &#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>说明 ：分配<strong>配置的</strong>消息队列。</li>
<li>疑问 ：<em>该分配策略的使用场景。</em></li>
</ul>
<h1>5、PushConsumer 消费进度读取</h1>
<h2>RebalancePushImpl#computePullFromWhere(...)</h2>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">computePullFromWhere</span><span class="params">(MessageQueue mq)</span> </span>&#123;</div><div class="line"> <span class="number">2</span>:     <span class="keyword">long</span> result = -<span class="number">1</span>;</div><div class="line"> <span class="number">3</span>:     <span class="keyword">final</span> ConsumeFromWhere consumeFromWhere = <span class="keyword">this</span>.defaultMQPushConsumerImpl.getDefaultMQPushConsumer().getConsumeFromWhere();</div><div class="line"> <span class="number">4</span>:     <span class="keyword">final</span> OffsetStore offsetStore = <span class="keyword">this</span>.defaultMQPushConsumerImpl.getOffsetStore();</div><div class="line"> <span class="number">5</span>:     <span class="keyword">switch</span> (consumeFromWhere) &#123;</div><div class="line"> <span class="number">6</span>:         <span class="keyword">case</span> CONSUME_FROM_LAST_OFFSET_AND_FROM_MIN_WHEN_BOOT_FIRST: <span class="comment">// 废弃</span></div><div class="line"> <span class="number">7</span>:         <span class="keyword">case</span> CONSUME_FROM_MIN_OFFSET: <span class="comment">// 废弃</span></div><div class="line"> <span class="number">8</span>:         <span class="keyword">case</span> CONSUME_FROM_MAX_OFFSET: <span class="comment">// 废弃</span></div><div class="line"> <span class="number">9</span>:         <span class="keyword">case</span> CONSUME_FROM_LAST_OFFSET: &#123;</div><div class="line"><span class="number">10</span>:             <span class="keyword">long</span> lastOffset = offsetStore.readOffset(mq, ReadOffsetType.READ_FROM_STORE);</div><div class="line"><span class="number">11</span>:             <span class="keyword">if</span> (lastOffset &gt;= <span class="number">0</span>) &#123;</div><div class="line"><span class="number">12</span>:                 result = lastOffset;</div><div class="line"><span class="number">13</span>:             &#125;</div><div class="line"><span class="number">14</span>:             <span class="comment">// First start,no offset</span></div><div class="line"><span class="number">15</span>:             <span class="keyword">else</span> <span class="keyword">if</span> (-<span class="number">1</span> == lastOffset) &#123;</div><div class="line"><span class="number">16</span>:                 <span class="keyword">if</span> (mq.getTopic().startsWith(MixAll.RETRY_GROUP_TOPIC_PREFIX)) &#123;</div><div class="line"><span class="number">17</span>:                     result = <span class="number">0L</span>;</div><div class="line"><span class="number">18</span>:                 &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">19</span>:                     <span class="keyword">try</span> &#123;</div><div class="line"><span class="number">20</span>:                         result = <span class="keyword">this</span>.mQClientFactory.getMQAdminImpl().maxOffset(mq);</div><div class="line"><span class="number">21</span>:                     &#125; <span class="keyword">catch</span> (MQClientException e) &#123;</div><div class="line"><span class="number">22</span>:                         result = -<span class="number">1</span>;</div><div class="line"><span class="number">23</span>:                     &#125;</div><div class="line"><span class="number">24</span>:                 &#125;</div><div class="line"><span class="number">25</span>:             &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">26</span>:                 result = -<span class="number">1</span>;</div><div class="line"><span class="number">27</span>:             &#125;</div><div class="line"><span class="number">28</span>:             <span class="keyword">break</span>;</div><div class="line"><span class="number">29</span>:         &#125;</div><div class="line"><span class="number">30</span>:         <span class="keyword">case</span> CONSUME_FROM_FIRST_OFFSET: &#123;</div><div class="line"><span class="number">31</span>:             <span class="keyword">long</span> lastOffset = offsetStore.readOffset(mq, ReadOffsetType.READ_FROM_STORE);</div><div class="line"><span class="number">32</span>:             <span class="keyword">if</span> (lastOffset &gt;= <span class="number">0</span>) &#123;</div><div class="line"><span class="number">33</span>:                 result = lastOffset;</div><div class="line"><span class="number">34</span>:             &#125; <span class="keyword">else</span> <span class="keyword">if</span> (-<span class="number">1</span> == lastOffset) &#123;</div><div class="line"><span class="number">35</span>:                 result = <span class="number">0L</span>;</div><div class="line"><span class="number">36</span>:             &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">37</span>:                 result = -<span class="number">1</span>;</div><div class="line"><span class="number">38</span>:             &#125;</div><div class="line"><span class="number">39</span>:             <span class="keyword">break</span>;</div><div class="line"><span class="number">40</span>:         &#125;</div><div class="line"><span class="number">41</span>:         <span class="keyword">case</span> CONSUME_FROM_TIMESTAMP: &#123;</div><div class="line"><span class="number">42</span>:             <span class="keyword">long</span> lastOffset = offsetStore.readOffset(mq, ReadOffsetType.READ_FROM_STORE);</div><div class="line"><span class="number">43</span>:             <span class="keyword">if</span> (lastOffset &gt;= <span class="number">0</span>) &#123;</div><div class="line"><span class="number">44</span>:                 result = lastOffset;</div><div class="line"><span class="number">45</span>:             &#125; <span class="keyword">else</span> <span class="keyword">if</span> (-<span class="number">1</span> == lastOffset) &#123;</div><div class="line"><span class="number">46</span>:                 <span class="keyword">if</span> (mq.getTopic().startsWith(MixAll.RETRY_GROUP_TOPIC_PREFIX)) &#123;</div><div class="line"><span class="number">47</span>:                     <span class="keyword">try</span> &#123;</div><div class="line"><span class="number">48</span>:                         result = <span class="keyword">this</span>.mQClientFactory.getMQAdminImpl().maxOffset(mq);</div><div class="line"><span class="number">49</span>:                     &#125; <span class="keyword">catch</span> (MQClientException e) &#123;</div><div class="line"><span class="number">50</span>:                         result = -<span class="number">1</span>;</div><div class="line"><span class="number">51</span>:                     &#125;</div><div class="line"><span class="number">52</span>:                 &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">53</span>:                     <span class="keyword">try</span> &#123;</div><div class="line"><span class="number">54</span>:                         <span class="keyword">long</span> timestamp = UtilAll.parseDate(<span class="keyword">this</span>.defaultMQPushConsumerImpl.getDefaultMQPushConsumer().getConsumeTimestamp(),</div><div class="line"><span class="number">55</span>:                             UtilAll.YYYY_MMDD_HHMMSS).getTime();</div><div class="line"><span class="number">56</span>:                         result = <span class="keyword">this</span>.mQClientFactory.getMQAdminImpl().searchOffset(mq, timestamp);</div><div class="line"><span class="number">57</span>:                     &#125; <span class="keyword">catch</span> (MQClientException e) &#123;</div><div class="line"><span class="number">58</span>:                         result = -<span class="number">1</span>;</div><div class="line"><span class="number">59</span>:                     &#125;</div><div class="line"><span class="number">60</span>:                 &#125;</div><div class="line"><span class="number">61</span>:             &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">62</span>:                 result = -<span class="number">1</span>;</div><div class="line"><span class="number">63</span>:             &#125;</div><div class="line"><span class="number">64</span>:             <span class="keyword">break</span>;</div><div class="line"><span class="number">65</span>:         &#125;</div><div class="line"><span class="number">66</span>: </div><div class="line"><span class="number">67</span>:         <span class="keyword">default</span>:</div><div class="line"><span class="number">68</span>:             <span class="keyword">break</span>;</div><div class="line"><span class="number">69</span>:     &#125;</div><div class="line"><span class="number">70</span>: </div><div class="line"><span class="number">71</span>:     <span class="keyword">return</span> result;</div><div class="line"><span class="number">72</span>: &#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>说明 ：计算消息队列开始消费位置。</li>
<li><code>PushConsumer</code> 读取消费进度有三种选项：
<ul>
<li><code>CONSUME_FROM_LAST_OFFSET</code> ：第 6 至 29 行 ：一个新的消费集群第一次启动从<strong>队列的最后位置</strong>开始消费。<strong>后续再启动接着上次消费的进度开始消费</strong>。</li>
<li><code>CONSUME_FROM_FIRST_OFFSET</code> ：第 30 至 40 行 ：一个新的消费集群第一次启动从队列的<strong>最前位置</strong>开始消费。<strong>后续再启动接着上次消费的进度开始消费</strong>。</li>
<li><code>CONSUME_FROM_TIMESTAMP</code> ：第 41 至 65 行 ：一个新的消费集群第一次启动从<strong>指定时间点</strong>开始消费。<strong>后续再启动接着上次消费的进度开始消费</strong>。</li>
</ul>
</li>
</ul>
<h2><code>[PullConsumer]</code> RebalancePullImpl#computePullFromWhere(...)</h2>
<p>暂时跳过。😈</p>
<h1>6、PushConsumer 拉取消息</h1>
<p><img src="http://www.yunai.me/images/RocketMQ/2017_05_04/05.png" alt="DefaultMQPushConsumerImpl拉取消息"></p>
<h2>PullMessageService</h2>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">  <span class="number">1</span>: <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PullMessageService</span> <span class="keyword">extends</span> <span class="title">ServiceThread</span> </span>&#123;</div><div class="line">  <span class="number">2</span>:     <span class="keyword">private</span> <span class="keyword">final</span> Logger log = ClientLogger.getLog();</div><div class="line">  <span class="number">3</span>:     <span class="comment">/**</span></div><div class="line">  4:      * 拉取消息请求队列</div><div class="line">  5:      */</div><div class="line">  <span class="number">6</span>:     <span class="keyword">private</span> <span class="keyword">final</span> LinkedBlockingQueue&lt;PullRequest&gt; pullRequestQueue = <span class="keyword">new</span> LinkedBlockingQueue&lt;&gt;();</div><div class="line">  <span class="number">7</span>:     <span class="comment">/**</span></div><div class="line">  8:      * MQClient对象</div><div class="line">  9:      */</div><div class="line"> <span class="number">10</span>:     <span class="keyword">private</span> <span class="keyword">final</span> MQClientInstance mQClientFactory;</div><div class="line"> <span class="number">11</span>:     <span class="comment">/**</span></div><div class="line"> 12:      * 定时器。用于延迟提交拉取请求</div><div class="line"> 13:      */</div><div class="line"> <span class="number">14</span>:     <span class="keyword">private</span> <span class="keyword">final</span> ScheduledExecutorService scheduledExecutorService = Executors</div><div class="line"> <span class="number">15</span>:         .newSingleThreadScheduledExecutor(<span class="keyword">new</span> ThreadFactory() &#123;</div><div class="line"> <span class="number">16</span>:             <span class="meta">@Override</span></div><div class="line"> <span class="number">17</span>:             <span class="function"><span class="keyword">public</span> Thread <span class="title">newThread</span><span class="params">(Runnable r)</span> </span>&#123;</div><div class="line"> <span class="number">18</span>:                 <span class="keyword">return</span> <span class="keyword">new</span> Thread(r, <span class="string">"PullMessageServiceScheduledThread"</span>);</div><div class="line"> <span class="number">19</span>:             &#125;</div><div class="line"> <span class="number">20</span>:         &#125;);</div><div class="line"> <span class="number">21</span>: </div><div class="line"> <span class="number">22</span>:     <span class="function"><span class="keyword">public</span> <span class="title">PullMessageService</span><span class="params">(MQClientInstance mQClientFactory)</span> </span>&#123;</div><div class="line"> <span class="number">23</span>:         <span class="keyword">this</span>.mQClientFactory = mQClientFactory;</div><div class="line"> <span class="number">24</span>:     &#125;</div><div class="line"> <span class="number">25</span>: </div><div class="line"> <span class="number">26</span>:     <span class="comment">/**</span></div><div class="line"> 27:      * 执行延迟拉取消息请求</div><div class="line"> 28:      *</div><div class="line"> 29:      * <span class="doctag">@param</span> pullRequest 拉取消息请求</div><div class="line"> 30:      * <span class="doctag">@param</span> timeDelay 延迟时长</div><div class="line"> 31:      */</div><div class="line"> <span class="number">32</span>:     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">executePullRequestLater</span><span class="params">(<span class="keyword">final</span> PullRequest pullRequest, <span class="keyword">final</span> <span class="keyword">long</span> timeDelay)</span> </span>&#123;</div><div class="line"> <span class="number">33</span>:         <span class="keyword">this</span>.scheduledExecutorService.schedule(<span class="keyword">new</span> Runnable() &#123;</div><div class="line"> <span class="number">34</span>: </div><div class="line"> <span class="number">35</span>:             <span class="meta">@Override</span></div><div class="line"> <span class="number">36</span>:             <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line"> <span class="number">37</span>:                 PullMessageService.<span class="keyword">this</span>.executePullRequestImmediately(pullRequest);</div><div class="line"> <span class="number">38</span>:             &#125;</div><div class="line"> <span class="number">39</span>:         &#125;, timeDelay, TimeUnit.MILLISECONDS);</div><div class="line"> <span class="number">40</span>:     &#125;</div><div class="line"> <span class="number">41</span>: </div><div class="line"> <span class="number">42</span>:     <span class="comment">/**</span></div><div class="line"> 43:      * 执行立即拉取消息请求</div><div class="line"> 44:      *</div><div class="line"> 45:      * <span class="doctag">@param</span> pullRequest 拉取消息请求</div><div class="line"> 46:      */</div><div class="line"> <span class="number">47</span>:     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">executePullRequestImmediately</span><span class="params">(<span class="keyword">final</span> PullRequest pullRequest)</span> </span>&#123;</div><div class="line"> <span class="number">48</span>:         <span class="keyword">try</span> &#123;</div><div class="line"> <span class="number">49</span>:             <span class="keyword">this</span>.pullRequestQueue.put(pullRequest);</div><div class="line"> <span class="number">50</span>:         &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line"> <span class="number">51</span>:             log.error(<span class="string">"executePullRequestImmediately pullRequestQueue.put"</span>, e);</div><div class="line"> <span class="number">52</span>:         &#125;</div><div class="line"> <span class="number">53</span>:     &#125;</div><div class="line"> <span class="number">54</span>: </div><div class="line"> <span class="number">55</span>:     <span class="comment">/**</span></div><div class="line"> 56:      * 执行延迟任务</div><div class="line"> 57:      *</div><div class="line"> 58:      * <span class="doctag">@param</span> r 任务</div><div class="line"> 59:      * <span class="doctag">@param</span> timeDelay 延迟时长</div><div class="line"> 60:      */</div><div class="line"> <span class="number">61</span>:     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">executeTaskLater</span><span class="params">(<span class="keyword">final</span> Runnable r, <span class="keyword">final</span> <span class="keyword">long</span> timeDelay)</span> </span>&#123;</div><div class="line"> <span class="number">62</span>:         <span class="keyword">this</span>.scheduledExecutorService.schedule(r, timeDelay, TimeUnit.MILLISECONDS);</div><div class="line"> <span class="number">63</span>:     &#125;</div><div class="line"> <span class="number">64</span>: </div><div class="line"> <span class="number">65</span>:     <span class="function"><span class="keyword">public</span> ScheduledExecutorService <span class="title">getScheduledExecutorService</span><span class="params">()</span> </span>&#123;</div><div class="line"> <span class="number">66</span>:         <span class="keyword">return</span> scheduledExecutorService;</div><div class="line"> <span class="number">67</span>:     &#125;</div><div class="line"> <span class="number">68</span>: </div><div class="line"> <span class="number">69</span>:     <span class="comment">/**</span></div><div class="line"> 70:      * 拉取消息</div><div class="line"> 71:      *</div><div class="line"> 72:      * <span class="doctag">@param</span> pullRequest 拉取消息请求</div><div class="line"> 73:      */</div><div class="line"> <span class="number">74</span>:     <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">pullMessage</span><span class="params">(<span class="keyword">final</span> PullRequest pullRequest)</span> </span>&#123;</div><div class="line"> <span class="number">75</span>:         <span class="keyword">final</span> MQConsumerInner consumer = <span class="keyword">this</span>.mQClientFactory.selectConsumer(pullRequest.getConsumerGroup());</div><div class="line"> <span class="number">76</span>:         <span class="keyword">if</span> (consumer != <span class="keyword">null</span>) &#123;</div><div class="line"> <span class="number">77</span>:             DefaultMQPushConsumerImpl impl = (DefaultMQPushConsumerImpl) consumer;</div><div class="line"> <span class="number">78</span>:             impl.pullMessage(pullRequest);</div><div class="line"> <span class="number">79</span>:         &#125; <span class="keyword">else</span> &#123;</div><div class="line"> <span class="number">80</span>:             log.warn(<span class="string">"No matched consumer for the PullRequest &#123;&#125;, drop it"</span>, pullRequest);</div><div class="line"> <span class="number">81</span>:         &#125;</div><div class="line"> <span class="number">82</span>:     &#125;</div><div class="line"> <span class="number">83</span>: </div><div class="line"> <span class="number">84</span>:     <span class="meta">@Override</span></div><div class="line"> <span class="number">85</span>:     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line"> <span class="number">86</span>:         log.info(<span class="keyword">this</span>.getServiceName() + <span class="string">" service started"</span>);</div><div class="line"> <span class="number">87</span>: </div><div class="line"> <span class="number">88</span>:         <span class="keyword">while</span> (!<span class="keyword">this</span>.isStopped()) &#123;</div><div class="line"> <span class="number">89</span>:             <span class="keyword">try</span> &#123;</div><div class="line"> <span class="number">90</span>:                 PullRequest pullRequest = <span class="keyword">this</span>.pullRequestQueue.take();</div><div class="line"> <span class="number">91</span>:                 <span class="keyword">if</span> (pullRequest != <span class="keyword">null</span>) &#123;</div><div class="line"> <span class="number">92</span>:                     <span class="keyword">this</span>.pullMessage(pullRequest);</div><div class="line"> <span class="number">93</span>:                 &#125;</div><div class="line"> <span class="number">94</span>:             &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line"> <span class="number">95</span>:             &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"> <span class="number">96</span>:                 log.error(<span class="string">"Pull Message Service Run Method exception"</span>, e);</div><div class="line"> <span class="number">97</span>:             &#125;</div><div class="line"> <span class="number">98</span>:         &#125;</div><div class="line"> <span class="number">99</span>: </div><div class="line"><span class="number">100</span>:         log.info(<span class="keyword">this</span>.getServiceName() + <span class="string">" service end"</span>);</div><div class="line"><span class="number">101</span>:     &#125;</div><div class="line"><span class="number">102</span>: </div><div class="line"><span class="number">103</span>:     <span class="meta">@Override</span></div><div class="line"><span class="number">104</span>:     <span class="function"><span class="keyword">public</span> String <span class="title">getServiceName</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="number">105</span>:         <span class="keyword">return</span> PullMessageService.class.getSimpleName();</div><div class="line"><span class="number">106</span>:     &#125;</div><div class="line"><span class="number">107</span>: </div><div class="line"><span class="number">108</span>: &#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>说明 ：拉取消息服务，不断不断不断从 <code>Broker</code> 拉取消息，并提交消费任务到 <code>ConsumeMessageService</code>。</li>
<li><code>#executePullRequestLater(...)</code> ：第 26 至 40 行 ： 提交<strong>延迟</strong>拉取消息请求。</li>
<li><code>#executePullRequestImmediately(...)</code> ：第 42 至 53 行 ：提交<strong>立即</strong>拉取消息请求。</li>
<li><code>#executeTaskLater(...)</code> ：第 55 至 63 行 ：提交<strong>延迟任务</strong>。</li>
<li><code>#pullMessage(...)</code> ：第 69 至 82 行 ：执行拉取消息逻辑。详细解析见：<a href="#defaultmqpushconsumerimplpullmessage">DefaultMQPushConsumerImpl#pullMessage(...)</a>。</li>
<li><code>#run(...)</code> ：第 84 至 101 行 ：循环拉取消息请求队列( <code>pullRequestQueue</code> )，进行消息拉取。</li>
</ul>
<h2>DefaultMQPushConsumerImpl#pullMessage(...)</h2>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">  <span class="number">1</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pullMessage</span><span class="params">(<span class="keyword">final</span> PullRequest pullRequest)</span> </span>&#123;</div><div class="line">  <span class="number">2</span>:     <span class="keyword">final</span> ProcessQueue processQueue = pullRequest.getProcessQueue();</div><div class="line">  <span class="number">3</span>:     <span class="keyword">if</span> (processQueue.isDropped()) &#123;</div><div class="line">  <span class="number">4</span>:         log.info(<span class="string">"the pull request[&#123;&#125;] is dropped."</span>, pullRequest.toString());</div><div class="line">  <span class="number">5</span>:         <span class="keyword">return</span>;</div><div class="line">  <span class="number">6</span>:     &#125;</div><div class="line">  <span class="number">7</span>: </div><div class="line">  <span class="number">8</span>:     <span class="comment">// 设置队列最后拉取消息时间</span></div><div class="line">  <span class="number">9</span>:     pullRequest.getProcessQueue().setLastPullTimestamp(System.currentTimeMillis());</div><div class="line"> <span class="number">10</span>: </div><div class="line"> <span class="number">11</span>:     <span class="comment">// 判断consumer状态是否运行中。如果不是，则延迟拉取消息。</span></div><div class="line"> <span class="number">12</span>:     <span class="keyword">try</span> &#123;</div><div class="line"> <span class="number">13</span>:         <span class="keyword">this</span>.makeSureStateOK();</div><div class="line"> <span class="number">14</span>:     &#125; <span class="keyword">catch</span> (MQClientException e) &#123;</div><div class="line"> <span class="number">15</span>:         log.warn(<span class="string">"pullMessage exception, consumer state not ok"</span>, e);</div><div class="line"> <span class="number">16</span>:         <span class="keyword">this</span>.executePullRequestLater(pullRequest, PULL_TIME_DELAY_MILLS_WHEN_EXCEPTION);</div><div class="line"> <span class="number">17</span>:         <span class="keyword">return</span>;</div><div class="line"> <span class="number">18</span>:     &#125;</div><div class="line"> <span class="number">19</span>: </div><div class="line"> <span class="number">20</span>:     <span class="comment">// 判断是否暂停中。</span></div><div class="line"> <span class="number">21</span>:     <span class="keyword">if</span> (<span class="keyword">this</span>.isPause()) &#123;</div><div class="line"> <span class="number">22</span>:         log.warn(<span class="string">"consumer was paused, execute pull request later. instanceName=&#123;&#125;, group=&#123;&#125;"</span>, <span class="keyword">this</span>.defaultMQPushConsumer.getInstanceName(), <span class="keyword">this</span>.defaultMQPushConsumer.getConsumerGroup());</div><div class="line"> <span class="number">23</span>:         <span class="keyword">this</span>.executePullRequestLater(pullRequest, PULL_TIME_DELAY_MILLS_WHEN_SUSPEND);</div><div class="line"> <span class="number">24</span>:         <span class="keyword">return</span>;</div><div class="line"> <span class="number">25</span>:     &#125;</div><div class="line"> <span class="number">26</span>: </div><div class="line"> <span class="number">27</span>:     <span class="comment">// 判断是否超过最大持有消息数量。默认最大值为1000。</span></div><div class="line"> <span class="number">28</span>:     <span class="keyword">long</span> size = processQueue.getMsgCount().get();</div><div class="line"> <span class="number">29</span>:     <span class="keyword">if</span> (size &gt; <span class="keyword">this</span>.defaultMQPushConsumer.getPullThresholdForQueue()) &#123;</div><div class="line"> <span class="number">30</span>:         <span class="keyword">this</span>.executePullRequestLater(pullRequest, PULL_TIME_DELAY_MILLS_WHEN_FLOW_CONTROL); <span class="comment">// 提交延迟消息拉取请求。50ms。</span></div><div class="line"> <span class="number">31</span>:         <span class="keyword">if</span> ((flowControlTimes1++ % <span class="number">1000</span>) == <span class="number">0</span>) &#123;</div><div class="line"> <span class="number">32</span>:             log.warn(</div><div class="line"> <span class="number">33</span>:                 <span class="string">"the consumer message buffer is full, so do flow control, minOffset=&#123;&#125;, maxOffset=&#123;&#125;, size=&#123;&#125;, pullRequest=&#123;&#125;, flowControlTimes=&#123;&#125;"</span>,</div><div class="line"> <span class="number">34</span>:                 processQueue.getMsgTreeMap().firstKey(), processQueue.getMsgTreeMap().lastKey(), size, pullRequest, flowControlTimes1);</div><div class="line"> <span class="number">35</span>:         &#125;</div><div class="line"> <span class="number">36</span>:         <span class="keyword">return</span>;</div><div class="line"> <span class="number">37</span>:     &#125;</div><div class="line"> <span class="number">38</span>: </div><div class="line"> <span class="number">39</span>:     <span class="keyword">if</span> (!<span class="keyword">this</span>.consumeOrderly) &#123; <span class="comment">// 判断消息跨度是否过大。</span></div><div class="line"> <span class="number">40</span>:         <span class="keyword">if</span> (processQueue.getMaxSpan() &gt; <span class="keyword">this</span>.defaultMQPushConsumer.getConsumeConcurrentlyMaxSpan()) &#123;</div><div class="line"> <span class="number">41</span>:             <span class="keyword">this</span>.executePullRequestLater(pullRequest, PULL_TIME_DELAY_MILLS_WHEN_FLOW_CONTROL); <span class="comment">// 提交延迟消息拉取请求。50ms。</span></div><div class="line"> <span class="number">42</span>:             <span class="keyword">if</span> ((flowControlTimes2++ % <span class="number">1000</span>) == <span class="number">0</span>) &#123;</div><div class="line"> <span class="number">43</span>:                 log.warn(</div><div class="line"> <span class="number">44</span>:                     <span class="string">"the queue's messages, span too long, so do flow control, minOffset=&#123;&#125;, maxOffset=&#123;&#125;, maxSpan=&#123;&#125;, pullRequest=&#123;&#125;, flowControlTimes=&#123;&#125;"</span>,</div><div class="line"> <span class="number">45</span>:                     processQueue.getMsgTreeMap().firstKey(), processQueue.getMsgTreeMap().lastKey(), processQueue.getMaxSpan(),</div><div class="line"> <span class="number">46</span>:                     pullRequest, flowControlTimes2);</div><div class="line"> <span class="number">47</span>:             &#125;</div><div class="line"> <span class="number">48</span>:             <span class="keyword">return</span>;</div><div class="line"> <span class="number">49</span>:         &#125;</div><div class="line"> <span class="number">50</span>:     &#125; <span class="keyword">else</span> &#123; <span class="comment">// TODO 顺序消费</span></div><div class="line"> <span class="number">51</span>:         <span class="keyword">if</span> (processQueue.isLocked()) &#123;</div><div class="line"> <span class="number">52</span>:             <span class="keyword">if</span> (!pullRequest.isLockedFirst()) &#123;</div><div class="line"> <span class="number">53</span>:                 <span class="keyword">final</span> <span class="keyword">long</span> offset = <span class="keyword">this</span>.rebalanceImpl.computePullFromWhere(pullRequest.getMessageQueue());</div><div class="line"> <span class="number">54</span>:                 <span class="keyword">boolean</span> brokerBusy = offset &lt; pullRequest.getNextOffset();</div><div class="line"> <span class="number">55</span>:                 log.info(<span class="string">"the first time to pull message, so fix offset from broker. pullRequest: &#123;&#125; NewOffset: &#123;&#125; brokerBusy: &#123;&#125;"</span>,</div><div class="line"> <span class="number">56</span>:                     pullRequest, offset, brokerBusy);</div><div class="line"> <span class="number">57</span>:                 <span class="keyword">if</span> (brokerBusy) &#123;</div><div class="line"> <span class="number">58</span>:                     log.info(<span class="string">"[NOTIFYME]the first time to pull message, but pull request offset larger than broker consume offset. pullRequest: &#123;&#125; NewOffset: &#123;&#125;"</span>,</div><div class="line"> <span class="number">59</span>:                         pullRequest, offset);</div><div class="line"> <span class="number">60</span>:                 &#125;</div><div class="line"> <span class="number">61</span>: </div><div class="line"> <span class="number">62</span>:                 pullRequest.setLockedFirst(<span class="keyword">true</span>);</div><div class="line"> <span class="number">63</span>:                 pullRequest.setNextOffset(offset);</div><div class="line"> <span class="number">64</span>:             &#125;</div><div class="line"> <span class="number">65</span>:         &#125; <span class="keyword">else</span> &#123;</div><div class="line"> <span class="number">66</span>:             <span class="keyword">this</span>.executePullRequestLater(pullRequest, PULL_TIME_DELAY_MILLS_WHEN_EXCEPTION);</div><div class="line"> <span class="number">67</span>:             log.info(<span class="string">"pull message later because not locked in broker, &#123;&#125;"</span>, pullRequest);</div><div class="line"> <span class="number">68</span>:             <span class="keyword">return</span>;</div><div class="line"> <span class="number">69</span>:         &#125;</div><div class="line"> <span class="number">70</span>:     &#125;</div><div class="line"> <span class="number">71</span>: </div><div class="line"> <span class="number">72</span>:     <span class="comment">// 获取Topic 对应的订阅信息。若不存在，则延迟拉取消息</span></div><div class="line"> <span class="number">73</span>:     <span class="keyword">final</span> SubscriptionData subscriptionData = <span class="keyword">this</span>.rebalanceImpl.getSubscriptionInner().get(pullRequest.getMessageQueue().getTopic());</div><div class="line"> <span class="number">74</span>:     <span class="keyword">if</span> (<span class="keyword">null</span> == subscriptionData) &#123;</div><div class="line"> <span class="number">75</span>:         <span class="keyword">this</span>.executePullRequestLater(pullRequest, PULL_TIME_DELAY_MILLS_WHEN_EXCEPTION);</div><div class="line"> <span class="number">76</span>:         log.warn(<span class="string">"find the consumer's subscription failed, &#123;&#125;"</span>, pullRequest);</div><div class="line"> <span class="number">77</span>:         <span class="keyword">return</span>;</div><div class="line"> <span class="number">78</span>:     &#125;</div><div class="line"> <span class="number">79</span>: </div><div class="line"> <span class="number">80</span>:     <span class="keyword">final</span> <span class="keyword">long</span> beginTimestamp = System.currentTimeMillis();</div><div class="line"> <span class="number">81</span>: </div><div class="line"> <span class="number">82</span>:     PullCallback pullCallback = <span class="keyword">new</span> PullCallback() &#123;</div><div class="line"> <span class="number">83</span>:         <span class="meta">@Override</span></div><div class="line"> <span class="number">84</span>:         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(PullResult pullResult)</span> </span>&#123;</div><div class="line"> <span class="number">85</span>:             <span class="keyword">if</span> (pullResult != <span class="keyword">null</span>) &#123;</div><div class="line"> <span class="number">86</span>:                 pullResult = DefaultMQPushConsumerImpl.<span class="keyword">this</span>.pullAPIWrapper.processPullResult(pullRequest.getMessageQueue(), pullResult,</div><div class="line"> <span class="number">87</span>:                     subscriptionData);</div><div class="line"> <span class="number">88</span>: </div><div class="line"> <span class="number">89</span>:                 <span class="keyword">switch</span> (pullResult.getPullStatus()) &#123;</div><div class="line"> <span class="number">90</span>:                     <span class="keyword">case</span> FOUND:</div><div class="line"> <span class="number">91</span>:                         <span class="comment">// 设置下次拉取消息队列位置</span></div><div class="line"> <span class="number">92</span>:                         <span class="keyword">long</span> prevRequestOffset = pullRequest.getNextOffset();</div><div class="line"> <span class="number">93</span>:                         pullRequest.setNextOffset(pullResult.getNextBeginOffset());</div><div class="line"> <span class="number">94</span>: </div><div class="line"> <span class="number">95</span>:                         <span class="comment">// 统计</span></div><div class="line"> <span class="number">96</span>:                         <span class="keyword">long</span> pullRT = System.currentTimeMillis() - beginTimestamp;</div><div class="line"> <span class="number">97</span>:                         DefaultMQPushConsumerImpl.<span class="keyword">this</span>.getConsumerStatsManager().incPullRT(pullRequest.getConsumerGroup(),</div><div class="line"> <span class="number">98</span>:                             pullRequest.getMessageQueue().getTopic(), pullRT);</div><div class="line"> <span class="number">99</span>: </div><div class="line"><span class="number">100</span>:                         <span class="keyword">long</span> firstMsgOffset = Long.MAX_VALUE;</div><div class="line"><span class="number">101</span>:                         <span class="keyword">if</span> (pullResult.getMsgFoundList() == <span class="keyword">null</span> || pullResult.getMsgFoundList().isEmpty()) &#123;</div><div class="line"><span class="number">102</span>:                             DefaultMQPushConsumerImpl.<span class="keyword">this</span>.executePullRequestImmediately(pullRequest);</div><div class="line"><span class="number">103</span>:                         &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">104</span>:                             firstMsgOffset = pullResult.getMsgFoundList().get(<span class="number">0</span>).getQueueOffset();</div><div class="line"><span class="number">105</span>: </div><div class="line"><span class="number">106</span>:                             <span class="comment">// 统计</span></div><div class="line"><span class="number">107</span>:                             DefaultMQPushConsumerImpl.<span class="keyword">this</span>.getConsumerStatsManager().incPullTPS(pullRequest.getConsumerGroup(),</div><div class="line"><span class="number">108</span>:                                 pullRequest.getMessageQueue().getTopic(), pullResult.getMsgFoundList().size());</div><div class="line"><span class="number">109</span>: </div><div class="line"><span class="number">110</span>:                             <span class="comment">// 提交拉取到的消息到消息处理队列</span></div><div class="line"><span class="number">111</span>:                             <span class="keyword">boolean</span> dispathToConsume = processQueue.putMessage(pullResult.getMsgFoundList());</div><div class="line"><span class="number">112</span>: </div><div class="line"><span class="number">113</span>:                             <span class="comment">// 提交消费请求</span></div><div class="line"><span class="number">114</span>:                             DefaultMQPushConsumerImpl.<span class="keyword">this</span>.consumeMessageService.submitConsumeRequest(<span class="comment">//</span></div><div class="line"><span class="number">115</span>:                                 pullResult.getMsgFoundList(), <span class="comment">//</span></div><div class="line"><span class="number">116</span>:                                 processQueue, <span class="comment">//</span></div><div class="line"><span class="number">117</span>:                                 pullRequest.getMessageQueue(), <span class="comment">//</span></div><div class="line"><span class="number">118</span>:                                 dispathToConsume);</div><div class="line"><span class="number">119</span>: </div><div class="line"><span class="number">120</span>:                             <span class="comment">// 提交下次拉取消息请求</span></div><div class="line"><span class="number">121</span>:                             <span class="keyword">if</span> (DefaultMQPushConsumerImpl.<span class="keyword">this</span>.defaultMQPushConsumer.getPullInterval() &gt; <span class="number">0</span>) &#123;</div><div class="line"><span class="number">122</span>:                                 DefaultMQPushConsumerImpl.<span class="keyword">this</span>.executePullRequestLater(pullRequest,</div><div class="line"><span class="number">123</span>:                                     DefaultMQPushConsumerImpl.<span class="keyword">this</span>.defaultMQPushConsumer.getPullInterval());</div><div class="line"><span class="number">124</span>:                             &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">125</span>:                                 DefaultMQPushConsumerImpl.<span class="keyword">this</span>.executePullRequestImmediately(pullRequest);</div><div class="line"><span class="number">126</span>:                             &#125;</div><div class="line"><span class="number">127</span>:                         &#125;</div><div class="line"><span class="number">128</span>: </div><div class="line"><span class="number">129</span>:                         <span class="comment">// 下次拉取消息队列位置小于上次拉取消息队列位置 或者 第一条消息的消息队列位置小于上次拉取消息队列位置，则判定为BUG，输出log</span></div><div class="line"><span class="number">130</span>:                         <span class="keyword">if</span> (pullResult.getNextBeginOffset() &lt; prevRequestOffset<span class="comment">//</span></div><div class="line"><span class="number">131</span>:                             || firstMsgOffset &lt; prevRequestOffset) &#123;</div><div class="line"><span class="number">132</span>:                             log.warn(</div><div class="line"><span class="number">133</span>:                                 <span class="string">"[BUG] pull message result maybe data wrong, nextBeginOffset: &#123;&#125; firstMsgOffset: &#123;&#125; prevRequestOffset: &#123;&#125;"</span>, <span class="comment">//</span></div><div class="line"><span class="number">134</span>:                                 pullResult.getNextBeginOffset(), <span class="comment">//</span></div><div class="line"><span class="number">135</span>:                                 firstMsgOffset, <span class="comment">//</span></div><div class="line"><span class="number">136</span>:                                 prevRequestOffset);</div><div class="line"><span class="number">137</span>:                         &#125;</div><div class="line"><span class="number">138</span>: </div><div class="line"><span class="number">139</span>:                         <span class="keyword">break</span>;</div><div class="line"><span class="number">140</span>:                     <span class="keyword">case</span> NO_NEW_MSG:</div><div class="line"><span class="number">141</span>:                         <span class="comment">// 设置下次拉取消息队列位置</span></div><div class="line"><span class="number">142</span>:                         pullRequest.setNextOffset(pullResult.getNextBeginOffset());</div><div class="line"><span class="number">143</span>: </div><div class="line"><span class="number">144</span>:                         <span class="comment">// 持久化消费进度</span></div><div class="line"><span class="number">145</span>:                         DefaultMQPushConsumerImpl.<span class="keyword">this</span>.correctTagsOffset(pullRequest);</div><div class="line"><span class="number">146</span>: </div><div class="line"><span class="number">147</span>:                         <span class="comment">// 立即提交拉取消息请求</span></div><div class="line"><span class="number">148</span>:                         DefaultMQPushConsumerImpl.<span class="keyword">this</span>.executePullRequestImmediately(pullRequest);</div><div class="line"><span class="number">149</span>:                         <span class="keyword">break</span>;</div><div class="line"><span class="number">150</span>:                     <span class="keyword">case</span> NO_MATCHED_MSG:</div><div class="line"><span class="number">151</span>:                         <span class="comment">// 设置下次拉取消息队列位置</span></div><div class="line"><span class="number">152</span>:                         pullRequest.setNextOffset(pullResult.getNextBeginOffset());</div><div class="line"><span class="number">153</span>: </div><div class="line"><span class="number">154</span>:                         <span class="comment">// 持久化消费进度</span></div><div class="line"><span class="number">155</span>:                         DefaultMQPushConsumerImpl.<span class="keyword">this</span>.correctTagsOffset(pullRequest);</div><div class="line"><span class="number">156</span>: </div><div class="line"><span class="number">157</span>:                         <span class="comment">// 提交立即拉取消息请求</span></div><div class="line"><span class="number">158</span>:                         DefaultMQPushConsumerImpl.<span class="keyword">this</span>.executePullRequestImmediately(pullRequest);</div><div class="line"><span class="number">159</span>:                         <span class="keyword">break</span>;</div><div class="line"><span class="number">160</span>:                     <span class="keyword">case</span> OFFSET_ILLEGAL:</div><div class="line"><span class="number">161</span>:                         log.warn(<span class="string">"the pull request offset illegal, &#123;&#125; &#123;&#125;"</span>, <span class="comment">//</span></div><div class="line"><span class="number">162</span>:                             pullRequest.toString(), pullResult.toString());</div><div class="line"><span class="number">163</span>:                         <span class="comment">// 设置下次拉取消息队列位置</span></div><div class="line"><span class="number">164</span>:                         pullRequest.setNextOffset(pullResult.getNextBeginOffset());</div><div class="line"><span class="number">165</span>: </div><div class="line"><span class="number">166</span>:                         <span class="comment">// 设置消息处理队列为dropped</span></div><div class="line"><span class="number">167</span>:                         pullRequest.getProcessQueue().setDropped(<span class="keyword">true</span>);</div><div class="line"><span class="number">168</span>: </div><div class="line"><span class="number">169</span>:                         <span class="comment">// 提交延迟任务，进行消费处理队列移除。不立即移除的原因：可能有地方正在使用，避免受到影响。</span></div><div class="line"><span class="number">170</span>:                         DefaultMQPushConsumerImpl.<span class="keyword">this</span>.executeTaskLater(<span class="keyword">new</span> Runnable() &#123;</div><div class="line"><span class="number">171</span>: </div><div class="line"><span class="number">172</span>:                             <span class="meta">@Override</span></div><div class="line"><span class="number">173</span>:                             <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="number">174</span>:                                 <span class="keyword">try</span> &#123;</div><div class="line"><span class="number">175</span>:                                     <span class="comment">// 更新消费进度，同步消费进度到Broker</span></div><div class="line"><span class="number">176</span>:                                     DefaultMQPushConsumerImpl.<span class="keyword">this</span>.offsetStore.updateOffset(pullRequest.getMessageQueue(),</div><div class="line"><span class="number">177</span>:                                         pullRequest.getNextOffset(), <span class="keyword">false</span>);</div><div class="line"><span class="number">178</span>:                                     DefaultMQPushConsumerImpl.<span class="keyword">this</span>.offsetStore.persist(pullRequest.getMessageQueue());</div><div class="line"><span class="number">179</span>: </div><div class="line"><span class="number">180</span>:                                     <span class="comment">// 移除消费处理队列</span></div><div class="line"><span class="number">181</span>:                                     DefaultMQPushConsumerImpl.<span class="keyword">this</span>.rebalanceImpl.removeProcessQueue(pullRequest.getMessageQueue());</div><div class="line"><span class="number">182</span>: </div><div class="line"><span class="number">183</span>:                                     log.warn(<span class="string">"fix the pull request offset, &#123;&#125;"</span>, pullRequest);</div><div class="line"><span class="number">184</span>:                                 &#125; <span class="keyword">catch</span> (Throwable e) &#123;</div><div class="line"><span class="number">185</span>:                                     log.error(<span class="string">"executeTaskLater Exception"</span>, e);</div><div class="line"><span class="number">186</span>:                                 &#125;</div><div class="line"><span class="number">187</span>:                             &#125;</div><div class="line"><span class="number">188</span>:                         &#125;, <span class="number">10000</span>);</div><div class="line"><span class="number">189</span>:                         <span class="keyword">break</span>;</div><div class="line"><span class="number">190</span>:                     <span class="keyword">default</span>:</div><div class="line"><span class="number">191</span>:                         <span class="keyword">break</span>;</div><div class="line"><span class="number">192</span>:                 &#125;</div><div class="line"><span class="number">193</span>:             &#125;</div><div class="line"><span class="number">194</span>:         &#125;</div><div class="line"><span class="number">195</span>: </div><div class="line"><span class="number">196</span>:         <span class="meta">@Override</span></div><div class="line"><span class="number">197</span>:         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onException</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line"><span class="number">198</span>:             <span class="keyword">if</span> (!pullRequest.getMessageQueue().getTopic().startsWith(MixAll.RETRY_GROUP_TOPIC_PREFIX)) &#123;</div><div class="line"><span class="number">199</span>:                 log.warn(<span class="string">"execute the pull request exception"</span>, e);</div><div class="line"><span class="number">200</span>:             &#125;</div><div class="line"><span class="number">201</span>: </div><div class="line"><span class="number">202</span>:             <span class="comment">// 提交延迟拉取消息请求</span></div><div class="line"><span class="number">203</span>:             DefaultMQPushConsumerImpl.<span class="keyword">this</span>.executePullRequestLater(pullRequest, PULL_TIME_DELAY_MILLS_WHEN_EXCEPTION);</div><div class="line"><span class="number">204</span>:         &#125;</div><div class="line"><span class="number">205</span>:     &#125;;</div><div class="line"><span class="number">206</span>: </div><div class="line"><span class="number">207</span>:     <span class="comment">// 集群消息模型下，计算提交的消费进度。</span></div><div class="line"><span class="number">208</span>:     <span class="keyword">boolean</span> commitOffsetEnable = <span class="keyword">false</span>;</div><div class="line"><span class="number">209</span>:     <span class="keyword">long</span> commitOffsetValue = <span class="number">0L</span>;</div><div class="line"><span class="number">210</span>:     <span class="keyword">if</span> (MessageModel.CLUSTERING == <span class="keyword">this</span>.defaultMQPushConsumer.getMessageModel()) &#123;</div><div class="line"><span class="number">211</span>:         commitOffsetValue = <span class="keyword">this</span>.offsetStore.readOffset(pullRequest.getMessageQueue(), ReadOffsetType.READ_FROM_MEMORY);</div><div class="line"><span class="number">212</span>:         <span class="keyword">if</span> (commitOffsetValue &gt; <span class="number">0</span>) &#123;</div><div class="line"><span class="number">213</span>:             commitOffsetEnable = <span class="keyword">true</span>;</div><div class="line"><span class="number">214</span>:         &#125;</div><div class="line"><span class="number">215</span>:     &#125;</div><div class="line"><span class="number">216</span>: </div><div class="line"><span class="number">217</span>:     <span class="comment">// 计算请求的 订阅表达式 和 是否进行filtersrv过滤消息</span></div><div class="line"><span class="number">218</span>:     String subExpression = <span class="keyword">null</span>;</div><div class="line"><span class="number">219</span>:     <span class="keyword">boolean</span> classFilter = <span class="keyword">false</span>;</div><div class="line"><span class="number">220</span>:     SubscriptionData sd = <span class="keyword">this</span>.rebalanceImpl.getSubscriptionInner().get(pullRequest.getMessageQueue().getTopic());</div><div class="line"><span class="number">221</span>:     <span class="keyword">if</span> (sd != <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">222</span>:         <span class="keyword">if</span> (<span class="keyword">this</span>.defaultMQPushConsumer.isPostSubscriptionWhenPull() &amp;&amp; !sd.isClassFilterMode()) &#123;</div><div class="line"><span class="number">223</span>:             subExpression = sd.getSubString();</div><div class="line"><span class="number">224</span>:         &#125;</div><div class="line"><span class="number">225</span>: </div><div class="line"><span class="number">226</span>:         classFilter = sd.isClassFilterMode();</div><div class="line"><span class="number">227</span>:     &#125;</div><div class="line"><span class="number">228</span>: </div><div class="line"><span class="number">229</span>:     <span class="comment">// 计算拉取消息系统标识</span></div><div class="line"><span class="number">230</span>:     <span class="keyword">int</span> sysFlag = PullSysFlag.buildSysFlag(<span class="comment">//</span></div><div class="line"><span class="number">231</span>:         commitOffsetEnable, <span class="comment">// commitOffset</span></div><div class="line"><span class="number">232</span>:         <span class="keyword">true</span>, <span class="comment">// suspend</span></div><div class="line"><span class="number">233</span>:         subExpression != <span class="keyword">null</span>, <span class="comment">// subscription</span></div><div class="line"><span class="number">234</span>:         classFilter <span class="comment">// class filter</span></div><div class="line"><span class="number">235</span>:     );</div><div class="line"><span class="number">236</span>: </div><div class="line"><span class="number">237</span>:     <span class="comment">// 执行拉取。如果拉取请求发生异常时，提交延迟拉取消息请求。</span></div><div class="line"><span class="number">238</span>:     <span class="keyword">try</span> &#123;</div><div class="line"><span class="number">239</span>:         <span class="keyword">this</span>.pullAPIWrapper.pullKernelImpl(<span class="comment">//</span></div><div class="line"><span class="number">240</span>:             pullRequest.getMessageQueue(), <span class="comment">// 1</span></div><div class="line"><span class="number">241</span>:             subExpression, <span class="comment">// 2</span></div><div class="line"><span class="number">242</span>:             subscriptionData.getSubVersion(), <span class="comment">// 3</span></div><div class="line"><span class="number">243</span>:             pullRequest.getNextOffset(), <span class="comment">// 4</span></div><div class="line"><span class="number">244</span>:             <span class="keyword">this</span>.defaultMQPushConsumer.getPullBatchSize(), <span class="comment">// 5</span></div><div class="line"><span class="number">245</span>:             sysFlag, <span class="comment">// 6</span></div><div class="line"><span class="number">246</span>:             commitOffsetValue, <span class="comment">// 7</span></div><div class="line"><span class="number">247</span>:             BROKER_SUSPEND_MAX_TIME_MILLIS, <span class="comment">// 8</span></div><div class="line"><span class="number">248</span>:             CONSUMER_TIMEOUT_MILLIS_WHEN_SUSPEND, <span class="comment">// 9</span></div><div class="line"><span class="number">249</span>:             CommunicationMode.ASYNC, <span class="comment">// 10</span></div><div class="line"><span class="number">250</span>:             pullCallback<span class="comment">// 11</span></div><div class="line"><span class="number">251</span>:         );</div><div class="line"><span class="number">252</span>:     &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"><span class="number">253</span>:         log.error(<span class="string">"pullKernelImpl exception"</span>, e);</div><div class="line"><span class="number">254</span>:         <span class="keyword">this</span>.executePullRequestLater(pullRequest, PULL_TIME_DELAY_MILLS_WHEN_EXCEPTION);</div><div class="line"><span class="number">255</span>:     &#125;</div><div class="line"><span class="number">256</span>: &#125;</div><div class="line"><span class="number">257</span>: </div><div class="line"><span class="number">258</span>: <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">correctTagsOffset</span><span class="params">(<span class="keyword">final</span> PullRequest pullRequest)</span> </span>&#123;</div><div class="line"><span class="number">259</span>:     <span class="keyword">if</span> (<span class="number">0L</span> == pullRequest.getProcessQueue().getMsgCount().get()) &#123;</div><div class="line"><span class="number">260</span>:         <span class="keyword">this</span>.offsetStore.updateOffset(pullRequest.getMessageQueue(), pullRequest.getNextOffset(), <span class="keyword">true</span>);</div><div class="line"><span class="number">261</span>:     &#125;</div><div class="line"><span class="number">262</span>: &#125;</div></pre></td></tr></table></figure></p>
<ul>
<li><code>#pullMessage(...)</code> 说明 ：拉取消息。
<ul>
<li>第 3 至 6 行 ：消息处理队列已经终止，不进行消息拉取。</li>
<li>第 9 行 ：设置消息处理队列最后拉取消息时间。</li>
<li>第 11 至 18 行 ：<code>Consumer</code> 未处于运行中状态，不进行消息拉取，提交<strong>延迟</strong>拉取消息请求。</li>
<li>第 20 至 25 行 ： <code>Consumer</code> 处于暂停中，不进行消息拉取，提交<strong>延迟</strong>拉取消息请求。</li>
<li>第 27 至 37 行 ：消息处理队列持有消息超过最大允许值（默认：1000条），不进行消息拉取，提交<strong>延迟</strong>拉取消息请求。</li>
<li>第 39 至 49 行 ：<code>Consumer</code> 为<strong>并发消费</strong> 并且 消息队列持有消息跨度过大（消息跨度 = 持有消息最后一条和第一条的消息位置差，默认：2000），不进行消息拉取，提交<strong>延迟</strong>拉取消息请求。</li>
<li>第 50 至 70 行 ：<code>顺序消费</code> 相关跳过，详细解析见：<a href="http://www.yunai.me/RocketMQ/message-send-and-consume-orderly/">《RocketMQ 源码分析 —— Message 顺序发送与消费》</a>。</li>
<li>第 72 至 78 行 ：<code>Topic</code> 对应的订阅信息不存在，不进行消息拉取，提交<strong>延迟</strong>拉取消息请求。</li>
<li>第 222 至 224 行 ：判断请求是否使用 <code>Consumer</code> <strong>本地</strong>的订阅信息( <code>SubscriptionData</code> )，而不使用 <code>Broker</code> 里的订阅信息。详细解析见：<a href="http://www.yunai.me/RocketMQ/message-pull-and-consume-first/#PullMessageProcessor-processRequest-%E2%80%A6">PullMessageProcessor#processRequest(...) 第 64 至 110 行代码</a>。</li>
<li>第 226 行 ：是否开启过滤类过滤模式。详细解析见：<a href="http://www.yunai.me/RocketMQ/filtersrv/">《RocketMQ 源码分析 —— Filtersrv》</a>。</li>
<li>第 229 至 235 行 ：计算拉取消息请求系统标识。详细解析见：<a href="http://www.yunai.me/RocketMQ/message-pull-and-consume-first/#PullMessageRequestHeader">PullMessageRequestHeader.sysFlag</a>。</li>
<li>第 237 至 255 行 ：
<ul>
<li>执行消息拉取<strong>异步</strong>请求。详细解析见：<a href="#pullapiwrapperpullkernelimpl">PullAPIWrapper#pullKernelImpl(...)</a>。</li>
<li>当发起请求产生异常时，提交<strong>延迟</strong>拉取消息请求。对应 <code>Broker</code> 处理拉取消息逻辑见：<a href="http://www.yunai.me/RocketMQ/message-pull-and-consume-first/#PullMessageProcessor-processRequest-%E2%80%A6">PullMessageProcessor#processRequest(...)</a>。</li>
</ul>
</li>
</ul>
</li>
<li><code>PullCallback</code> ：拉取消息回调：
<ul>
<li>第 86 行 ：处理拉取结果。详细逻辑见：<a href="#pullapiwrapperprocesspullresult">PullAPIWrapper#processPullResult(...)</a>。</li>
<li>第 89 至 192 行 ：处理拉取状态结果：
<ul>
<li>第 90 至 139 行 ：拉取到消息( <code>FOUND</code> ) ：
<ul>
<li>第 91 至 93 行 ：设置下次拉取消息队列位置。</li>
<li>第 95 至 97 行 ：统计。</li>
<li>第 101 至 102 行 ：拉取到消息的消息列表为空，提交<strong>立即</strong>拉取消息请求。为什么会存在拉取到消息，但是消息结果未空呢？原因见：<a href="#pullapiwrapperprocesspullresult">PullAPIWrapper#processPullResult(...)</a>。</li>
<li>第 106 至 108 行 ：统计。</li>
<li>第 111 行 ：提交拉取到的消息到消息处理队列。详细解析见：<a href="#processqueueputmessage">ProcessQueue#putMessage(...)</a>。</li>
<li>第 113 至 118 行 ：提交消费请求到 <code>ConsumeMessageService</code>。详细解析见：<a href="#consumemessageconcurrentlyservice">ConsumeMessageConcurrentlyService</a>。</li>
<li>第 120 至 126 行 ：根据拉取频率( <code>pullInterval</code> )，提交<strong>立即或者延迟</strong>拉取消息请求。默认拉取频率为 0ms ，提交<strong>立即</strong>拉取消息请求。</li>
<li>第 129 至 137 行 ：下次拉取消息队列位置小于上次拉取消息队列位置 或者 第一条消息的消息队列位置小于上次拉取消息队列位置，则判定为<strong>BUG</strong>，输出警告日志。</li>
</ul>
</li>
<li>第 140 至 149 行 ：没有新消息( <code>NO_NEW_MSG</code> ) ：
<ul>
<li>第 142 行 ： 设置下次拉取消息队列位置。</li>
<li>第 145 行 ：更正消费进度。详细解析见：<code>#correctTagsOffset(...)</code>。</li>
<li>第 148 行 ：提交<strong>立即</strong>拉取消息请求。</li>
</ul>
</li>
<li>第 150 至 159 行 ：有新消息但是不匹配( <code>NO_MATCHED_MSG</code> )。逻辑同 <code>NO_NEW_MSG</code> 。</li>
<li>第 160 至 189 行 ：拉取请求的消息队列位置不合法 (<code>OFFSET_ILLEGAL</code>)。
<ul>
<li>第 164 行 ：设置下次拉取消息队列位置。</li>
<li>第 167 行 ：设置消息处理队列为 <code>dropped</code>。</li>
<li>第 169 至 188 行 ：提交延迟任务，进行队列移除。
<ul>
<li>第 175 至 178 行 ：更新消费进度，同步消费进度到 <code>Broker</code>。</li>
<li>第 181 行 ：移除消费处理队列。
<ul>
<li>疑问：为什么不立即移除？？？</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>第 196 至 204 行 ：发生异常，提交<strong>延迟</strong>拉取消息请求。</li>
</ul>
</li>
<li><code>#correctTagsOffset(...)</code> ：更正消费进度。
<ul>
<li>第 258 至 261 行 ： 当消费处理队列持有消息数量为 <strong>0</strong> 时，更新消费进度为拉取请求的拉取消息队列位置。</li>
</ul>
</li>
</ul>
<h3>PullAPIWrapper#pullKernelImpl(...)</h3>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="comment">/**</span></div><div class="line"> 2:  * 拉取消息核心方法</div><div class="line"> 3:  *</div><div class="line"> 4:  * <span class="doctag">@param</span> mq 消息队列</div><div class="line"> 5:  * <span class="doctag">@param</span> subExpression 订阅表达式</div><div class="line"> 6:  * <span class="doctag">@param</span> subVersion 订阅版本号</div><div class="line"> 7:  * <span class="doctag">@param</span> offset 拉取队列开始位置</div><div class="line"> 8:  * <span class="doctag">@param</span> maxNums 拉取消息数量</div><div class="line"> 9:  * <span class="doctag">@param</span> sysFlag 拉取请求系统标识</div><div class="line">10:  * <span class="doctag">@param</span> commitOffset 提交消费进度</div><div class="line">11:  * <span class="doctag">@param</span> brokerSuspendMaxTimeMillis broker挂起请求最大时间</div><div class="line">12:  * <span class="doctag">@param</span> timeoutMillis 请求broker超时时长</div><div class="line">13:  * <span class="doctag">@param</span> communicationMode 通讯模式</div><div class="line">14:  * <span class="doctag">@param</span> pullCallback 拉取回调</div><div class="line">15:  * <span class="doctag">@return</span> 拉取消息结果。只有通讯模式为同步时，才返回结果，否则返回null。</div><div class="line">16:  * <span class="doctag">@throws</span> MQClientException 当寻找不到 broker 时，或发生其他client异常</div><div class="line">17:  * <span class="doctag">@throws</span> RemotingException 当远程调用发生异常时</div><div class="line">18:  * <span class="doctag">@throws</span> MQBrokerException 当 broker 发生异常时。只有通讯模式为同步时才会发生该异常。</div><div class="line">19:  * <span class="doctag">@throws</span> InterruptedException 当发生中断异常时</div><div class="line">20:  */</div><div class="line"><span class="number">21</span>: <span class="function"><span class="keyword">protected</span> PullResult <span class="title">pullKernelImpl</span><span class="params">(</span></span></div><div class="line"><span class="number">22</span>:     <span class="keyword">final</span> MessageQueue mq,</div><div class="line"><span class="number">23</span>:     <span class="keyword">final</span> String subExpression,</div><div class="line"><span class="number">24</span>:     <span class="keyword">final</span> <span class="keyword">long</span> subVersion,</div><div class="line"><span class="number">25</span>:     <span class="keyword">final</span> <span class="keyword">long</span> offset,</div><div class="line"><span class="number">26</span>:     <span class="keyword">final</span> <span class="keyword">int</span> maxNums,</div><div class="line"><span class="number">27</span>:     <span class="keyword">final</span> <span class="keyword">int</span> sysFlag,</div><div class="line"><span class="number">28</span>:     <span class="keyword">final</span> <span class="keyword">long</span> commitOffset,</div><div class="line"><span class="number">29</span>:     <span class="keyword">final</span> <span class="keyword">long</span> brokerSuspendMaxTimeMillis,</div><div class="line"><span class="number">30</span>:     <span class="keyword">final</span> <span class="keyword">long</span> timeoutMillis,</div><div class="line"><span class="number">31</span>:     <span class="keyword">final</span> CommunicationMode communicationMode,</div><div class="line"><span class="number">32</span>:     <span class="keyword">final</span> PullCallback pullCallback</div><div class="line"><span class="number">33</span>: ) <span class="keyword">throws</span> MQClientException, RemotingException, MQBrokerException, InterruptedException &#123;</div><div class="line"><span class="number">34</span>:     <span class="comment">// 获取Broker信息</span></div><div class="line"><span class="number">35</span>:     FindBrokerResult findBrokerResult =</div><div class="line"><span class="number">36</span>:         <span class="keyword">this</span>.mQClientFactory.findBrokerAddressInSubscribe(mq.getBrokerName(),</div><div class="line"><span class="number">37</span>:             <span class="keyword">this</span>.recalculatePullFromWhichNode(mq), <span class="keyword">false</span>);</div><div class="line"><span class="number">38</span>:     <span class="keyword">if</span> (<span class="keyword">null</span> == findBrokerResult) &#123;</div><div class="line"><span class="number">39</span>:         <span class="keyword">this</span>.mQClientFactory.updateTopicRouteInfoFromNameServer(mq.getTopic());</div><div class="line"><span class="number">40</span>:         findBrokerResult =</div><div class="line"><span class="number">41</span>:             <span class="keyword">this</span>.mQClientFactory.findBrokerAddressInSubscribe(mq.getBrokerName(),</div><div class="line"><span class="number">42</span>:                 <span class="keyword">this</span>.recalculatePullFromWhichNode(mq), <span class="keyword">false</span>);</div><div class="line"><span class="number">43</span>:     &#125;</div><div class="line"><span class="number">44</span>: </div><div class="line"><span class="number">45</span>:     <span class="comment">// 请求拉取消息</span></div><div class="line"><span class="number">46</span>:     <span class="keyword">if</span> (findBrokerResult != <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">47</span>:         <span class="keyword">int</span> sysFlagInner = sysFlag;</div><div class="line"><span class="number">48</span>: </div><div class="line"><span class="number">49</span>:         <span class="keyword">if</span> (findBrokerResult.isSlave()) &#123;</div><div class="line"><span class="number">50</span>:             sysFlagInner = PullSysFlag.clearCommitOffsetFlag(sysFlagInner);</div><div class="line"><span class="number">51</span>:         &#125;</div><div class="line"><span class="number">52</span>: </div><div class="line"><span class="number">53</span>:         PullMessageRequestHeader requestHeader = <span class="keyword">new</span> PullMessageRequestHeader();</div><div class="line"><span class="number">54</span>:         requestHeader.setConsumerGroup(<span class="keyword">this</span>.consumerGroup);</div><div class="line"><span class="number">55</span>:         requestHeader.setTopic(mq.getTopic());</div><div class="line"><span class="number">56</span>:         requestHeader.setQueueId(mq.getQueueId());</div><div class="line"><span class="number">57</span>:         requestHeader.setQueueOffset(offset);</div><div class="line"><span class="number">58</span>:         requestHeader.setMaxMsgNums(maxNums);</div><div class="line"><span class="number">59</span>:         requestHeader.setSysFlag(sysFlagInner);</div><div class="line"><span class="number">60</span>:         requestHeader.setCommitOffset(commitOffset);</div><div class="line"><span class="number">61</span>:         requestHeader.setSuspendTimeoutMillis(brokerSuspendMaxTimeMillis);</div><div class="line"><span class="number">62</span>:         requestHeader.setSubscription(subExpression);</div><div class="line"><span class="number">63</span>:         requestHeader.setSubVersion(subVersion);</div><div class="line"><span class="number">64</span>: </div><div class="line"><span class="number">65</span>:         String brokerAddr = findBrokerResult.getBrokerAddr();</div><div class="line"><span class="number">66</span>:         <span class="keyword">if</span> (PullSysFlag.hasClassFilterFlag(sysFlagInner)) &#123; <span class="comment">// TODO filtersrv</span></div><div class="line"><span class="number">67</span>:             brokerAddr = computPullFromWhichFilterServer(mq.getTopic(), brokerAddr);</div><div class="line"><span class="number">68</span>:         &#125;</div><div class="line"><span class="number">69</span>: </div><div class="line"><span class="number">70</span>:         PullResult pullResult = <span class="keyword">this</span>.mQClientFactory.getMQClientAPIImpl().pullMessage(</div><div class="line"><span class="number">71</span>:             brokerAddr,</div><div class="line"><span class="number">72</span>:             requestHeader,</div><div class="line"><span class="number">73</span>:             timeoutMillis,</div><div class="line"><span class="number">74</span>:             communicationMode,</div><div class="line"><span class="number">75</span>:             pullCallback);</div><div class="line"><span class="number">76</span>: </div><div class="line"><span class="number">77</span>:         <span class="keyword">return</span> pullResult;</div><div class="line"><span class="number">78</span>:     &#125;</div><div class="line"><span class="number">79</span>: </div><div class="line"><span class="number">80</span>:     <span class="comment">// Broker信息不存在，则抛出异常</span></div><div class="line"><span class="number">81</span>:     <span class="keyword">throw</span> <span class="keyword">new</span> MQClientException(<span class="string">"The broker["</span> + mq.getBrokerName() + <span class="string">"] not exist"</span>, <span class="keyword">null</span>);</div><div class="line"><span class="number">82</span>: &#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>说明 ：拉取消息核心方法。<strong>该方法参数较多，可以看下代码注释上每个参数的说明</strong>😈。</li>
<li>第 34 至 43 行 ：获取 <code>Broker</code> 信息(<code>Broker</code> 地址、是否为从节点)。
<ul>
<li><a href="#pullapiwrapperrecalculatepullfromwhichnode">#recalculatePullFromWhichNode(...)</a></li>
<li><a href="#mqclientinstancefindbrokeraddressinsubscribe">#MQClientInstance#findBrokerAddressInSubscribe(...)</a></li>
</ul>
</li>
<li>第 45 至 78 行 ：<strong>请求拉取消息</strong>。</li>
<li>第 81 行 ：当 <code>Broker</code> 信息不存在，则抛出异常。</li>
</ul>
<h4>PullAPIWrapper#recalculatePullFromWhichNode(...)</h4>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="comment">/**</span></div><div class="line"> 2:  * 消息队列 与 拉取Broker 的映射</div><div class="line"> 3:  * 当拉取消息时，会通过该映射获取拉取请求对应的Broker</div><div class="line"> 4:  */</div><div class="line"> <span class="number">5</span>: <span class="keyword">private</span> ConcurrentHashMap&lt;MessageQueue, AtomicLong<span class="comment">/* brokerId */</span>&gt; pullFromWhichNodeTable =</div><div class="line"> <span class="number">6</span>:     <span class="keyword">new</span> ConcurrentHashMap&lt;MessageQueue, AtomicLong&gt;(<span class="number">32</span>);</div><div class="line"> <span class="number">7</span>: <span class="comment">/**</span></div><div class="line"> 8:  * 是否使用默认Broker</div><div class="line"> 9:  */</div><div class="line"><span class="number">10</span>: <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> connectBrokerByUser = <span class="keyword">false</span>;</div><div class="line"><span class="number">11</span>: <span class="comment">/**</span></div><div class="line">12:  * 默认Broker编号</div><div class="line">13:  */</div><div class="line"><span class="number">14</span>: <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">long</span> defaultBrokerId = MixAll.MASTER_ID;</div><div class="line"><span class="number">15</span>: </div><div class="line"><span class="number">16</span>: <span class="comment">/**</span></div><div class="line">17:  * 计算消息队列拉取消息对应的Broker编号</div><div class="line">18:  *</div><div class="line">19:  * <span class="doctag">@param</span> mq 消息队列</div><div class="line">20:  * <span class="doctag">@return</span> Broker编号</div><div class="line">21:  */</div><div class="line"><span class="number">22</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">recalculatePullFromWhichNode</span><span class="params">(<span class="keyword">final</span> MessageQueue mq)</span> </span>&#123;</div><div class="line"><span class="number">23</span>:     <span class="comment">// 若开启默认Broker开关，则返回默认Broker编号</span></div><div class="line"><span class="number">24</span>:     <span class="keyword">if</span> (<span class="keyword">this</span>.isConnectBrokerByUser()) &#123;</div><div class="line"><span class="number">25</span>:         <span class="keyword">return</span> <span class="keyword">this</span>.defaultBrokerId;</div><div class="line"><span class="number">26</span>:     &#125;</div><div class="line"><span class="number">27</span>: </div><div class="line"><span class="number">28</span>:     <span class="comment">// 若消息队列映射拉取Broker存在，则返回映射Broker编号</span></div><div class="line"><span class="number">29</span>:     AtomicLong suggest = <span class="keyword">this</span>.pullFromWhichNodeTable.get(mq);</div><div class="line"><span class="number">30</span>:     <span class="keyword">if</span> (suggest != <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">31</span>:         <span class="keyword">return</span> suggest.get();</div><div class="line"><span class="number">32</span>:     &#125;</div><div class="line"><span class="number">33</span>: </div><div class="line"><span class="number">34</span>:     <span class="comment">// 返回Broker主节点编号</span></div><div class="line"><span class="number">35</span>:     <span class="keyword">return</span> MixAll.MASTER_ID;</div><div class="line"><span class="number">36</span>: &#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>说明 ：计算消息队列拉取消息对应的 <code>Broker</code> 编号。</li>
</ul>
<h4>MQClientInstance#findBrokerAddressInSubscribe(...)</h4>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="comment">/**</span></div><div class="line"> 2:  * Broker名字 和 Broker地址相关 Map</div><div class="line"> 3:  */</div><div class="line"> <span class="number">4</span>: <span class="keyword">private</span> <span class="keyword">final</span> ConcurrentHashMap&lt;String<span class="comment">/* Broker Name */</span>, HashMap&lt;Long<span class="comment">/* brokerId */</span>, String<span class="comment">/* address */</span>&gt;&gt; brokerAddrTable =</div><div class="line"> <span class="number">5</span>:         <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</div><div class="line"> <span class="number">6</span>: </div><div class="line"> <span class="number">7</span>: <span class="comment">/**</span></div><div class="line"> 8:  * 获得Broker信息</div><div class="line"> 9:  *</div><div class="line">10:  * <span class="doctag">@param</span> brokerName broker名字</div><div class="line">11:  * <span class="doctag">@param</span> brokerId broker编号</div><div class="line">12:  * <span class="doctag">@param</span> onlyThisBroker 是否必须是该broker</div><div class="line">13:  * <span class="doctag">@return</span> Broker信息</div><div class="line">14:  */</div><div class="line"><span class="number">15</span>: <span class="function"><span class="keyword">public</span> FindBrokerResult <span class="title">findBrokerAddressInSubscribe</span><span class="params">(//</span></span></div><div class="line"><span class="number">16</span>:     <span class="keyword">final</span> String brokerName, //</div><div class="line"><span class="number">17</span>:     <span class="keyword">final</span> <span class="keyword">long</span> brokerId, //</div><div class="line"><span class="number">18</span>:     <span class="keyword">final</span> <span class="keyword">boolean</span> onlyThisBroker//</div><div class="line"><span class="number">19</span>: ) &#123;</div><div class="line"><span class="number">20</span>:     String brokerAddr = <span class="keyword">null</span>; <span class="comment">// broker地址</span></div><div class="line"><span class="number">21</span>:     <span class="keyword">boolean</span> slave = <span class="keyword">false</span>; <span class="comment">// 是否为从节点</span></div><div class="line"><span class="number">22</span>:     <span class="keyword">boolean</span> found = <span class="keyword">false</span>; <span class="comment">// 是否找到</span></div><div class="line"><span class="number">23</span>: </div><div class="line"><span class="number">24</span>:     <span class="comment">// 获得Broker信息</span></div><div class="line"><span class="number">25</span>:     HashMap&lt;Long<span class="comment">/* brokerId */</span>, String<span class="comment">/* address */</span>&gt; map = <span class="keyword">this</span>.brokerAddrTable.get(brokerName);</div><div class="line"><span class="number">26</span>:     <span class="keyword">if</span> (map != <span class="keyword">null</span> &amp;&amp; !map.isEmpty()) &#123;</div><div class="line"><span class="number">27</span>:         brokerAddr = map.get(brokerId);</div><div class="line"><span class="number">28</span>:         slave = brokerId != MixAll.MASTER_ID;</div><div class="line"><span class="number">29</span>:         found = brokerAddr != <span class="keyword">null</span>;</div><div class="line"><span class="number">30</span>: </div><div class="line"><span class="number">31</span>:         <span class="comment">// 如果不强制获得，选择一个Broker</span></div><div class="line"><span class="number">32</span>:         <span class="keyword">if</span> (!found &amp;&amp; !onlyThisBroker) &#123;</div><div class="line"><span class="number">33</span>:             Entry&lt;Long, String&gt; entry = map.entrySet().iterator().next();</div><div class="line"><span class="number">34</span>:             brokerAddr = entry.getValue();</div><div class="line"><span class="number">35</span>:             slave = entry.getKey() != MixAll.MASTER_ID;</div><div class="line"><span class="number">36</span>:             found = <span class="keyword">true</span>;</div><div class="line"><span class="number">37</span>:         &#125;</div><div class="line"><span class="number">38</span>:     &#125;</div><div class="line"><span class="number">39</span>: </div><div class="line"><span class="number">40</span>:     <span class="comment">// 找到broker，则返回信息</span></div><div class="line"><span class="number">41</span>:     <span class="keyword">if</span> (found) &#123;</div><div class="line"><span class="number">42</span>:         <span class="keyword">return</span> <span class="keyword">new</span> FindBrokerResult(brokerAddr, slave);</div><div class="line"><span class="number">43</span>:     &#125;</div><div class="line"><span class="number">44</span>: </div><div class="line"><span class="number">45</span>:     <span class="comment">// 找不到，则返回空</span></div><div class="line"><span class="number">46</span>:     <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line"><span class="number">47</span>: &#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>说明 ：获取 <code>Broker</code> 信息(<code>Broker</code> 地址、是否为从节点)。</li>
</ul>
<h3>PullAPIWrapper#processPullResult(...)</h3>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="comment">/**</span></div><div class="line"> 2:  * 处理拉取结果</div><div class="line"> 3:  * 1. 更新消息队列拉取消息Broker编号的映射</div><div class="line"> 4:  * 2. 解析消息，并根据订阅信息消息tagCode匹配合适消息</div><div class="line"> 5:  *</div><div class="line"> 6:  * <span class="doctag">@param</span> mq 消息队列</div><div class="line"> 7:  * <span class="doctag">@param</span> pullResult 拉取结果</div><div class="line"> 8:  * <span class="doctag">@param</span> subscriptionData 订阅信息</div><div class="line"> 9:  * <span class="doctag">@return</span> 拉取结果</div><div class="line">10:  */</div><div class="line"><span class="number">11</span>: <span class="function"><span class="keyword">public</span> PullResult <span class="title">processPullResult</span><span class="params">(<span class="keyword">final</span> MessageQueue mq, <span class="keyword">final</span> PullResult pullResult,</span></span></div><div class="line"><span class="number">12</span>:     <span class="keyword">final</span> SubscriptionData subscriptionData) &#123;</div><div class="line"><span class="number">13</span>:     PullResultExt pullResultExt = (PullResultExt) pullResult;</div><div class="line"><span class="number">14</span>: </div><div class="line"><span class="number">15</span>:     <span class="comment">// 更新消息队列拉取消息Broker编号的映射</span></div><div class="line"><span class="number">16</span>:     <span class="keyword">this</span>.updatePullFromWhichNode(mq, pullResultExt.getSuggestWhichBrokerId());</div><div class="line"><span class="number">17</span>: </div><div class="line"><span class="number">18</span>:     <span class="comment">// 解析消息，并根据订阅信息消息tagCode匹配合适消息</span></div><div class="line"><span class="number">19</span>:     <span class="keyword">if</span> (PullStatus.FOUND == pullResult.getPullStatus()) &#123;</div><div class="line"><span class="number">20</span>:         <span class="comment">// 解析消息</span></div><div class="line"><span class="number">21</span>:         ByteBuffer byteBuffer = ByteBuffer.wrap(pullResultExt.getMessageBinary());</div><div class="line"><span class="number">22</span>:         List&lt;MessageExt&gt; msgList = MessageDecoder.decodes(byteBuffer);</div><div class="line"><span class="number">23</span>: </div><div class="line"><span class="number">24</span>:         <span class="comment">// 根据订阅信息消息tagCode匹配合适消息</span></div><div class="line"><span class="number">25</span>:         List&lt;MessageExt&gt; msgListFilterAgain = msgList;</div><div class="line"><span class="number">26</span>:         <span class="keyword">if</span> (!subscriptionData.getTagsSet().isEmpty() &amp;&amp; !subscriptionData.isClassFilterMode()) &#123;</div><div class="line"><span class="number">27</span>:             msgListFilterAgain = <span class="keyword">new</span> ArrayList&lt;&gt;(msgList.size());</div><div class="line"><span class="number">28</span>:             <span class="keyword">for</span> (MessageExt msg : msgList) &#123;</div><div class="line"><span class="number">29</span>:                 <span class="keyword">if</span> (msg.getTags() != <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">30</span>:                     <span class="keyword">if</span> (subscriptionData.getTagsSet().contains(msg.getTags())) &#123;</div><div class="line"><span class="number">31</span>:                         msgListFilterAgain.add(msg);</div><div class="line"><span class="number">32</span>:                     &#125;</div><div class="line"><span class="number">33</span>:                 &#125;</div><div class="line"><span class="number">34</span>:             &#125;</div><div class="line"><span class="number">35</span>:         &#125;</div><div class="line"><span class="number">36</span>: </div><div class="line"><span class="number">37</span>:         <span class="comment">// Hook</span></div><div class="line"><span class="number">38</span>:         <span class="keyword">if</span> (<span class="keyword">this</span>.hasHook()) &#123;</div><div class="line"><span class="number">39</span>:             FilterMessageContext filterMessageContext = <span class="keyword">new</span> FilterMessageContext();</div><div class="line"><span class="number">40</span>:             filterMessageContext.setUnitMode(unitMode);</div><div class="line"><span class="number">41</span>:             filterMessageContext.setMsgList(msgListFilterAgain);</div><div class="line"><span class="number">42</span>:             <span class="keyword">this</span>.executeHook(filterMessageContext);</div><div class="line"><span class="number">43</span>:         &#125;</div><div class="line"><span class="number">44</span>: </div><div class="line"><span class="number">45</span>:         <span class="comment">// 设置消息队列当前最小/最大位置到消息拓展字段</span></div><div class="line"><span class="number">46</span>:         <span class="keyword">for</span> (MessageExt msg : msgListFilterAgain) &#123;</div><div class="line"><span class="number">47</span>:             MessageAccessor.putProperty(msg, MessageConst.PROPERTY_MIN_OFFSET,</div><div class="line"><span class="number">48</span>:                 Long.toString(pullResult.getMinOffset()));</div><div class="line"><span class="number">49</span>:             MessageAccessor.putProperty(msg, MessageConst.PROPERTY_MAX_OFFSET,</div><div class="line"><span class="number">50</span>:                 Long.toString(pullResult.getMaxOffset()));</div><div class="line"><span class="number">51</span>:         &#125;</div><div class="line"><span class="number">52</span>: </div><div class="line"><span class="number">53</span>:         <span class="comment">// 设置消息列表</span></div><div class="line"><span class="number">54</span>:         pullResultExt.setMsgFoundList(msgListFilterAgain);</div><div class="line"><span class="number">55</span>:     &#125;</div><div class="line"><span class="number">56</span>: </div><div class="line"><span class="number">57</span>:     <span class="comment">// 清空消息二进制数组</span></div><div class="line"><span class="number">58</span>:     pullResultExt.setMessageBinary(<span class="keyword">null</span>);</div><div class="line"><span class="number">59</span>: </div><div class="line"><span class="number">60</span>:     <span class="keyword">return</span> pullResult;</div><div class="line"><span class="number">61</span>: &#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>说明 ：处理拉取结果。
<ul>
<li>更新消息队列拉取消息 <code>Broker</code> 编号的映射。</li>
<li>解析消息，并根据订阅信息消息 <code>tagCode</code>匹配合适消息。</li>
</ul>
</li>
<li>第 16 行 ：更新消息队列拉取消息 <code>Broker</code> 编号的映射。下次拉取消息时，如果未设置默认拉取的 <code>Broker</code> 编号，会使用更新后的 <code>Broker</code> 编号。</li>
<li>第 18 至 55 行 ：解析消息，并根据订阅信息消息 <code>tagCode</code> 匹配合适消息。
<ul>
<li>第 20 至 22 行 ：解析消息。详细解析见：<a href="http://www.yunai.me/RocketMQ/message/">《RocketMQ 源码分析 —— Message基础》</a> 。</li>
<li>第 24 至 35 行 ：根据订阅信息<code>tagCode</code> 匹配消息。</li>
<li>第 37 至 43 行 ：<code>Hook</code>。</li>
<li>第 45 至 51 行 ：设置消息队列当前最小/最大位置到消息拓展字段。</li>
<li>第 54 行 ：设置消息队列。</li>
</ul>
</li>
<li>第 58 行 ：清空消息二进制数组。</li>
</ul>
<h3>ProcessQueue#putMessage(...)</h3>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>:  <span class="comment">/**</span></div><div class="line"> 2:  * 消息映射读写锁</div><div class="line"> 3:  */</div><div class="line"> <span class="number">4</span>: <span class="keyword">private</span> <span class="keyword">final</span> ReadWriteLock lockTreeMap = <span class="keyword">new</span> ReentrantReadWriteLock();</div><div class="line"> <span class="number">5</span>: <span class="comment">/**</span></div><div class="line"> 6:  * 消息映射</div><div class="line"> 7:  * key：消息队列位置</div><div class="line"> 8:  */</div><div class="line"> <span class="number">9</span>: <span class="keyword">private</span> <span class="keyword">final</span> TreeMap&lt;Long, MessageExt&gt; msgTreeMap = <span class="keyword">new</span> TreeMap&lt;&gt;();</div><div class="line"><span class="number">10</span>: <span class="comment">/**</span></div><div class="line">11:  * 消息数</div><div class="line">12:  */</div><div class="line"><span class="number">13</span>: <span class="keyword">private</span> <span class="keyword">final</span> AtomicLong msgCount = <span class="keyword">new</span> AtomicLong();</div><div class="line"><span class="number">14</span>: <span class="comment">/**</span></div><div class="line">15:  * 添加消息最大队列位置</div><div class="line">16:  */</div><div class="line"><span class="number">17</span>: <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">long</span> queueOffsetMax = <span class="number">0L</span>;</div><div class="line"><span class="number">18</span>: <span class="comment">/**</span></div><div class="line">19:  * 是否正在消费</div><div class="line">20:  */</div><div class="line"><span class="number">21</span>: <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> consuming = <span class="keyword">false</span>;</div><div class="line"><span class="number">22</span>: <span class="comment">/**</span></div><div class="line">23:  * Broker累计消息数量</div><div class="line">24:  * 计算公式 = queueMaxOffset - 新添加消息数组[n - 1].queueOffset</div><div class="line">25:  * Acc = Accumulation</div><div class="line">26:  * cnt = （猜测）对比度</div><div class="line">27:  */</div><div class="line"><span class="number">28</span>: <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">long</span> msgAccCnt = <span class="number">0</span>;</div><div class="line"><span class="number">29</span>: </div><div class="line"><span class="number">30</span>: <span class="comment">/**</span></div><div class="line">31:  * 添加消息，并返回是否提交给消费者</div><div class="line">32:  * 返回true，当有新消息添加成功时，</div><div class="line">33:  *</div><div class="line">34:  * <span class="doctag">@param</span> msgs 消息</div><div class="line">35:  * <span class="doctag">@return</span> 是否提交给消费者</div><div class="line">36:  */</div><div class="line"><span class="number">37</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">putMessage</span><span class="params">(<span class="keyword">final</span> List&lt;MessageExt&gt; msgs)</span> </span>&#123;</div><div class="line"><span class="number">38</span>:     <span class="keyword">boolean</span> dispatchToConsume = <span class="keyword">false</span>;</div><div class="line"><span class="number">39</span>:     <span class="keyword">try</span> &#123;</div><div class="line"><span class="number">40</span>:         <span class="keyword">this</span>.lockTreeMap.writeLock().lockInterruptibly();</div><div class="line"><span class="number">41</span>:         <span class="keyword">try</span> &#123;</div><div class="line"><span class="number">42</span>:             <span class="comment">// 添加消息</span></div><div class="line"><span class="number">43</span>:             <span class="keyword">int</span> validMsgCnt = <span class="number">0</span>;</div><div class="line"><span class="number">44</span>:             <span class="keyword">for</span> (MessageExt msg : msgs) &#123;</div><div class="line"><span class="number">45</span>:                 MessageExt old = msgTreeMap.put(msg.getQueueOffset(), msg);</div><div class="line"><span class="number">46</span>:                 <span class="keyword">if</span> (<span class="keyword">null</span> == old) &#123;</div><div class="line"><span class="number">47</span>:                     validMsgCnt++;</div><div class="line"><span class="number">48</span>:                     <span class="keyword">this</span>.queueOffsetMax = msg.getQueueOffset();</div><div class="line"><span class="number">49</span>:                 &#125;</div><div class="line"><span class="number">50</span>:             &#125;</div><div class="line"><span class="number">51</span>:             msgCount.addAndGet(validMsgCnt);</div><div class="line"><span class="number">52</span>: </div><div class="line"><span class="number">53</span>:             <span class="comment">// 计算是否正在消费</span></div><div class="line"><span class="number">54</span>:             <span class="keyword">if</span> (!msgTreeMap.isEmpty() &amp;&amp; !<span class="keyword">this</span>.consuming) &#123;</div><div class="line"><span class="number">55</span>:                 dispatchToConsume = <span class="keyword">true</span>;</div><div class="line"><span class="number">56</span>:                 <span class="keyword">this</span>.consuming = <span class="keyword">true</span>;</div><div class="line"><span class="number">57</span>:             &#125;</div><div class="line"><span class="number">58</span>: </div><div class="line"><span class="number">59</span>:             <span class="comment">// Broker累计消息数量</span></div><div class="line"><span class="number">60</span>:             <span class="keyword">if</span> (!msgs.isEmpty()) &#123;</div><div class="line"><span class="number">61</span>:                 MessageExt messageExt = msgs.get(msgs.size() - <span class="number">1</span>);</div><div class="line"><span class="number">62</span>:                 String property = messageExt.getProperty(MessageConst.PROPERTY_MAX_OFFSET);</div><div class="line"><span class="number">63</span>:                 <span class="keyword">if</span> (property != <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">64</span>:                     <span class="keyword">long</span> accTotal = Long.parseLong(property) - messageExt.getQueueOffset();</div><div class="line"><span class="number">65</span>:                     <span class="keyword">if</span> (accTotal &gt; <span class="number">0</span>) &#123;</div><div class="line"><span class="number">66</span>:                         <span class="keyword">this</span>.msgAccCnt = accTotal;</div><div class="line"><span class="number">67</span>:                     &#125;</div><div class="line"><span class="number">68</span>:                 &#125;</div><div class="line"><span class="number">69</span>:             &#125;</div><div class="line"><span class="number">70</span>:         &#125; <span class="keyword">finally</span> &#123;</div><div class="line"><span class="number">71</span>:             <span class="keyword">this</span>.lockTreeMap.writeLock().unlock();</div><div class="line"><span class="number">72</span>:         &#125;</div><div class="line"><span class="number">73</span>:     &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line"><span class="number">74</span>:         log.error(<span class="string">"putMessage exception"</span>, e);</div><div class="line"><span class="number">75</span>:     &#125;</div><div class="line"><span class="number">76</span>: </div><div class="line"><span class="number">77</span>:     <span class="keyword">return</span> dispatchToConsume;</div><div class="line"><span class="number">78</span>: &#125;</div></pre></td></tr></table></figure></p>
<h2>总结</h2>
<p>如果用最简单粗暴的方式描述 <code>PullConsumer</code> 拉取消息的过程，那就是如下的代码：</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">    <span class="keyword">if</span> (不满足拉取消息) &#123;</div><div class="line">        Thread.sleep(间隔);</div><div class="line">        <span class="keyword">continue</span>;</div><div class="line">    &#125;</div><div class="line">    主动拉取消息();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1>6、PushConsumer 消费消息</h1>
<p><img src="http://www.yunai.me/images/RocketMQ/2017_05_04/06.png" alt="DefaultMQPushConsumerImpl消费消息"></p>
<h2>ConsumeMessageConcurrentlyService 提交消费请求</h2>
<h3>ConsumeMessageConcurrentlyService#submitConsumeRequest(...)</h3>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="comment">/**</span></div><div class="line"> 2:  * 消费线程池队列</div><div class="line"> 3:  */</div><div class="line"> <span class="number">4</span>: <span class="keyword">private</span> <span class="keyword">final</span> BlockingQueue&lt;Runnable&gt; consumeRequestQueue;</div><div class="line"> <span class="number">5</span>: <span class="comment">/**</span></div><div class="line"> 6:  * 消费线程池</div><div class="line"> 7:  */</div><div class="line"> <span class="number">8</span>: <span class="keyword">private</span> <span class="keyword">final</span> ThreadPoolExecutor consumeExecutor;</div><div class="line"> <span class="number">9</span>: </div><div class="line"><span class="number">10</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">submitConsumeRequest</span><span class="params">(//</span></span></div><div class="line"><span class="number">11</span>:     <span class="keyword">final</span> List&lt;MessageExt&gt; msgs, //</div><div class="line"><span class="number">12</span>:     <span class="keyword">final</span> ProcessQueue processQueue, //</div><div class="line"><span class="number">13</span>:     <span class="keyword">final</span> MessageQueue messageQueue, //</div><div class="line"><span class="number">14</span>:     <span class="keyword">final</span> <span class="keyword">boolean</span> dispatchToConsume) &#123;</div><div class="line"><span class="number">15</span>:     <span class="keyword">final</span> <span class="keyword">int</span> consumeBatchSize = <span class="keyword">this</span>.defaultMQPushConsumer.getConsumeMessageBatchMaxSize();</div><div class="line"><span class="number">16</span>:     <span class="keyword">if</span> (msgs.size() &lt;= consumeBatchSize) &#123; <span class="comment">// 提交消息小于批量消息数，直接提交消费请求</span></div><div class="line"><span class="number">17</span>:         ConsumeRequest consumeRequest = <span class="keyword">new</span> ConsumeRequest(msgs, processQueue, messageQueue);</div><div class="line"><span class="number">18</span>:         <span class="keyword">try</span> &#123;</div><div class="line"><span class="number">19</span>:             <span class="keyword">this</span>.consumeExecutor.submit(consumeRequest);</div><div class="line"><span class="number">20</span>:         &#125; <span class="keyword">catch</span> (RejectedExecutionException e) &#123;</div><div class="line"><span class="number">21</span>:             <span class="keyword">this</span>.submitConsumeRequestLater(consumeRequest);</div><div class="line"><span class="number">22</span>:         &#125;</div><div class="line"><span class="number">23</span>:     &#125; <span class="keyword">else</span> &#123; <span class="comment">// 提交消息大于批量消息数，进行分拆成多个消费请求</span></div><div class="line"><span class="number">24</span>:         <span class="keyword">for</span> (<span class="keyword">int</span> total = <span class="number">0</span>; total &lt; msgs.size(); ) &#123;</div><div class="line"><span class="number">25</span>:             <span class="comment">// 计算当前拆分请求包含的消息</span></div><div class="line"><span class="number">26</span>:             List&lt;MessageExt&gt; msgThis = <span class="keyword">new</span> ArrayList&lt;&gt;(consumeBatchSize);</div><div class="line"><span class="number">27</span>:             <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; consumeBatchSize; i++, total++) &#123;</div><div class="line"><span class="number">28</span>:                 <span class="keyword">if</span> (total &lt; msgs.size()) &#123;</div><div class="line"><span class="number">29</span>:                     msgThis.add(msgs.get(total));</div><div class="line"><span class="number">30</span>:                 &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">31</span>:                     <span class="keyword">break</span>;</div><div class="line"><span class="number">32</span>:                 &#125;</div><div class="line"><span class="number">33</span>:             &#125;</div><div class="line"><span class="number">34</span>: </div><div class="line"><span class="number">35</span>:             <span class="comment">// 提交拆分消费请求</span></div><div class="line"><span class="number">36</span>:             ConsumeRequest consumeRequest = <span class="keyword">new</span> ConsumeRequest(msgThis, processQueue, messageQueue);</div><div class="line"><span class="number">37</span>:             <span class="keyword">try</span> &#123;</div><div class="line"><span class="number">38</span>:                 <span class="keyword">this</span>.consumeExecutor.submit(consumeRequest);</div><div class="line"><span class="number">39</span>:             &#125; <span class="keyword">catch</span> (RejectedExecutionException e) &#123;</div><div class="line"><span class="number">40</span>:                 <span class="comment">// 如果被拒绝，则将当前拆分消息+剩余消息提交延迟消费请求。</span></div><div class="line"><span class="number">41</span>:                 <span class="keyword">for</span> (; total &lt; msgs.size(); total++) &#123;</div><div class="line"><span class="number">42</span>:                     msgThis.add(msgs.get(total));</div><div class="line"><span class="number">43</span>:                 &#125;</div><div class="line"><span class="number">44</span>:                 <span class="keyword">this</span>.submitConsumeRequestLater(consumeRequest);</div><div class="line"><span class="number">45</span>:             &#125;</div><div class="line"><span class="number">46</span>:         &#125;</div><div class="line"><span class="number">47</span>:     &#125;</div><div class="line"><span class="number">48</span>: &#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>说明 ：提交<strong>立即</strong>消费请求。</li>
<li>第 16 至 22 行 ：提交消息小于等于批量消费数，直接提交消费请求。</li>
<li>第 23 至 47 行 ：当提交消息大于批量消费数，进行分拆成多个请求。
<ul>
<li>第 25 至 33 行 ：计算当前拆分请求包含的消息。</li>
<li>第 35 至 38 行 ：提交拆分消费请求。</li>
<li>第 39 至 44 行 ：提交请求被拒绝，则将当前拆分消息 + 剩余消息提交延迟消费请求，结束拆分循环。</li>
</ul>
</li>
</ul>
<h3>ConsumeMessageConcurrentlyService#submitConsumeRequestLater</h3>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">  <span class="number">1</span>: <span class="comment">/**</span></div><div class="line"> 2:  * 提交延迟消费请求</div><div class="line"> 3:  *</div><div class="line"> 4:  * <span class="doctag">@param</span> msgs 消息列表</div><div class="line"> 5:  * <span class="doctag">@param</span> processQueue 消息处理队列</div><div class="line"> 6:  * <span class="doctag">@param</span> messageQueue 消息队列</div><div class="line"> 7:  */</div><div class="line"> <span class="number">8</span>: <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">submitConsumeRequestLater</span><span class="params">(//</span></span></div><div class="line"> <span class="number">9</span>:     <span class="keyword">final</span> List&lt;MessageExt&gt; msgs, //</div><div class="line"><span class="number">10</span>:     <span class="keyword">final</span> ProcessQueue processQueue, //</div><div class="line"><span class="number">11</span>:     <span class="keyword">final</span> MessageQueue messageQueue//</div><div class="line"><span class="number">12</span>: ) &#123;</div><div class="line"><span class="number">13</span>: </div><div class="line"><span class="number">14</span>:     <span class="keyword">this</span>.scheduledExecutorService.schedule(<span class="keyword">new</span> Runnable() &#123;</div><div class="line"><span class="number">15</span>: </div><div class="line"><span class="number">16</span>:         <span class="meta">@Override</span></div><div class="line"><span class="number">17</span>:         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="number">18</span>:             ConsumeMessageConcurrentlyService.<span class="keyword">this</span>.submitConsumeRequest(msgs, processQueue, messageQueue, <span class="keyword">true</span>);</div><div class="line"><span class="number">19</span>:         &#125;</div><div class="line"><span class="number">20</span>:     &#125;, <span class="number">5000</span>, TimeUnit.MILLISECONDS);</div><div class="line"><span class="number">21</span>: &#125;</div><div class="line"><span class="number">22</span>: </div><div class="line"><span class="number">23</span>: <span class="comment">/**</span></div><div class="line">24:  * 提交延迟消费请求</div><div class="line">25:  * <span class="doctag">@param</span> consumeRequest 消费请求</div><div class="line">26:  */</div><div class="line"><span class="number">27</span>: <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">submitConsumeRequestLater</span><span class="params">(<span class="keyword">final</span> ConsumeRequest consumeRequest//</span></span></div><div class="line"><span class="number">28</span>: ) &#123;</div><div class="line"><span class="number">29</span>: </div><div class="line"><span class="number">30</span>:     <span class="keyword">this</span>.scheduledExecutorService.schedule(<span class="keyword">new</span> Runnable() &#123;</div><div class="line"><span class="number">31</span>: </div><div class="line"><span class="number">32</span>:         <span class="meta">@Override</span></div><div class="line"><span class="number">33</span>:         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="number">34</span>:             ConsumeMessageConcurrentlyService.<span class="keyword">this</span>.consumeExecutor.submit(consumeRequest); <span class="comment">// TODO BUG ?</span></div><div class="line"><span class="number">35</span>:         &#125;</div><div class="line"><span class="number">36</span>:     &#125;, <span class="number">5000</span>, TimeUnit.MILLISECONDS);</div><div class="line"><span class="number">37</span>: &#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>说明 ：提交延迟消费请求。</li>
<li>第 34 行 ：直接调用 <code>ConsumeMessageConcurrentlyService.this.consumeExecutor.submit(consumeRequest);</code>。如果消息数超过批量消费上限，会不会是<strong>BUG</strong>。</li>
</ul>
<h2>ConsumeRequest</h2>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">  <span class="number">1</span>: <span class="class"><span class="keyword">class</span> <span class="title">ConsumeRequest</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">  <span class="number">2</span>: </div><div class="line">  <span class="number">3</span>:     <span class="comment">/**</span></div><div class="line">  4:      * 消费消息列表</div><div class="line">  5:      */</div><div class="line">  <span class="number">6</span>:     <span class="keyword">private</span> <span class="keyword">final</span> List&lt;MessageExt&gt; msgs;</div><div class="line">  <span class="number">7</span>:     <span class="comment">/**</span></div><div class="line">  8:      * 消息处理队列</div><div class="line">  9:      */</div><div class="line"> <span class="number">10</span>:     <span class="keyword">private</span> <span class="keyword">final</span> ProcessQueue processQueue;</div><div class="line"> <span class="number">11</span>:     <span class="comment">/**</span></div><div class="line"> 12:      * 消息队列</div><div class="line"> 13:      */</div><div class="line"> <span class="number">14</span>:     <span class="keyword">private</span> <span class="keyword">final</span> MessageQueue messageQueue;</div><div class="line"> <span class="number">15</span>: </div><div class="line"> <span class="number">16</span>:     <span class="function"><span class="keyword">public</span> <span class="title">ConsumeRequest</span><span class="params">(List&lt;MessageExt&gt; msgs, ProcessQueue processQueue, MessageQueue messageQueue)</span> </span>&#123;</div><div class="line"> <span class="number">17</span>:         <span class="keyword">this</span>.msgs = msgs;</div><div class="line"> <span class="number">18</span>:         <span class="keyword">this</span>.processQueue = processQueue;</div><div class="line"> <span class="number">19</span>:         <span class="keyword">this</span>.messageQueue = messageQueue;</div><div class="line"> <span class="number">20</span>:     &#125;</div><div class="line"> <span class="number">21</span>: </div><div class="line"> <span class="number">22</span>:     <span class="meta">@Override</span></div><div class="line"> <span class="number">23</span>:     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line"> <span class="number">24</span>:         <span class="comment">// 废弃队列不进行消费</span></div><div class="line"> <span class="number">25</span>:         <span class="keyword">if</span> (<span class="keyword">this</span>.processQueue.isDropped()) &#123;</div><div class="line"> <span class="number">26</span>:             log.info(<span class="string">"the message queue not be able to consume, because it's dropped. group=&#123;&#125; &#123;&#125;"</span>, ConsumeMessageConcurrentlyService.<span class="keyword">this</span>.consumerGroup, <span class="keyword">this</span>.messageQueue);</div><div class="line"> <span class="number">27</span>:             <span class="keyword">return</span>;</div><div class="line"> <span class="number">28</span>:         &#125;</div><div class="line"> <span class="number">29</span>: </div><div class="line"> <span class="number">30</span>:         MessageListenerConcurrently listener = ConsumeMessageConcurrentlyService.<span class="keyword">this</span>.messageListener; <span class="comment">// 监听器</span></div><div class="line"> <span class="number">31</span>:         ConsumeConcurrentlyContext context = <span class="keyword">new</span> ConsumeConcurrentlyContext(messageQueue); <span class="comment">// 消费Context</span></div><div class="line"> <span class="number">32</span>:         ConsumeConcurrentlyStatus status = <span class="keyword">null</span>; <span class="comment">// 消费结果状态</span></div><div class="line"> <span class="number">33</span>: </div><div class="line"> <span class="number">34</span>:         <span class="comment">// Hook</span></div><div class="line"> <span class="number">35</span>:         ConsumeMessageContext consumeMessageContext = <span class="keyword">null</span>;</div><div class="line"> <span class="number">36</span>:         <span class="keyword">if</span> (ConsumeMessageConcurrentlyService.<span class="keyword">this</span>.defaultMQPushConsumerImpl.hasHook()) &#123;</div><div class="line"> <span class="number">37</span>:             consumeMessageContext = <span class="keyword">new</span> ConsumeMessageContext();</div><div class="line"> <span class="number">38</span>:             consumeMessageContext.setConsumerGroup(defaultMQPushConsumer.getConsumerGroup());</div><div class="line"> <span class="number">39</span>:             consumeMessageContext.setProps(<span class="keyword">new</span> HashMap&lt;String, String&gt;());</div><div class="line"> <span class="number">40</span>:             consumeMessageContext.setMq(messageQueue);</div><div class="line"> <span class="number">41</span>:             consumeMessageContext.setMsgList(msgs);</div><div class="line"> <span class="number">42</span>:             consumeMessageContext.setSuccess(<span class="keyword">false</span>);</div><div class="line"> <span class="number">43</span>:             ConsumeMessageConcurrentlyService.<span class="keyword">this</span>.defaultMQPushConsumerImpl.executeHookBefore(consumeMessageContext);</div><div class="line"> <span class="number">44</span>:         &#125;</div><div class="line"> <span class="number">45</span>: </div><div class="line"> <span class="number">46</span>:         <span class="keyword">long</span> beginTimestamp = System.currentTimeMillis();</div><div class="line"> <span class="number">47</span>:         <span class="keyword">boolean</span> hasException = <span class="keyword">false</span>;</div><div class="line"> <span class="number">48</span>:         ConsumeReturnType returnType = ConsumeReturnType.SUCCESS; <span class="comment">// 消费返回结果类型</span></div><div class="line"> <span class="number">49</span>:         <span class="keyword">try</span> &#123;</div><div class="line"> <span class="number">50</span>:             <span class="comment">// 当消息为重试消息，设置Topic为原始Topic</span></div><div class="line"> <span class="number">51</span>:             ConsumeMessageConcurrentlyService.<span class="keyword">this</span>.resetRetryTopic(msgs);</div><div class="line"> <span class="number">52</span>: </div><div class="line"> <span class="number">53</span>:             <span class="comment">// 设置开始消费时间</span></div><div class="line"> <span class="number">54</span>:             <span class="keyword">if</span> (msgs != <span class="keyword">null</span> &amp;&amp; !msgs.isEmpty()) &#123;</div><div class="line"> <span class="number">55</span>:                 <span class="keyword">for</span> (MessageExt msg : msgs) &#123;</div><div class="line"> <span class="number">56</span>:                     MessageAccessor.setConsumeStartTimeStamp(msg, String.valueOf(System.currentTimeMillis()));</div><div class="line"> <span class="number">57</span>:                 &#125;</div><div class="line"> <span class="number">58</span>:             &#125;</div><div class="line"> <span class="number">59</span>: </div><div class="line"> <span class="number">60</span>:             <span class="comment">// 进行消费</span></div><div class="line"> <span class="number">61</span>:             status = listener.consumeMessage(Collections.unmodifiableList(msgs), context);</div><div class="line"> <span class="number">62</span>:         &#125; <span class="keyword">catch</span> (Throwable e) &#123;</div><div class="line"> <span class="number">63</span>:             log.warn(<span class="string">"consumeMessage exception: &#123;&#125; Group: &#123;&#125; Msgs: &#123;&#125; MQ: &#123;&#125;"</span>,</div><div class="line"> <span class="number">64</span>:                 RemotingHelper.exceptionSimpleDesc(e), <span class="comment">//</span></div><div class="line"> <span class="number">65</span>:                 ConsumeMessageConcurrentlyService.<span class="keyword">this</span>.consumerGroup,</div><div class="line"> <span class="number">66</span>:                 msgs,</div><div class="line"> <span class="number">67</span>:                 messageQueue);</div><div class="line"> <span class="number">68</span>:             hasException = <span class="keyword">true</span>;</div><div class="line"> <span class="number">69</span>:         &#125;</div><div class="line"> <span class="number">70</span>: </div><div class="line"> <span class="number">71</span>:         <span class="comment">// 解析消费返回结果类型</span></div><div class="line"> <span class="number">72</span>:         <span class="keyword">long</span> consumeRT = System.currentTimeMillis() - beginTimestamp;</div><div class="line"> <span class="number">73</span>:         <span class="keyword">if</span> (<span class="keyword">null</span> == status) &#123;</div><div class="line"> <span class="number">74</span>:             <span class="keyword">if</span> (hasException) &#123;</div><div class="line"> <span class="number">75</span>:                 returnType = ConsumeReturnType.EXCEPTION;</div><div class="line"> <span class="number">76</span>:             &#125; <span class="keyword">else</span> &#123;</div><div class="line"> <span class="number">77</span>:                 returnType = ConsumeReturnType.RETURNNULL;</div><div class="line"> <span class="number">78</span>:             &#125;</div><div class="line"> <span class="number">79</span>:         &#125; <span class="keyword">else</span> <span class="keyword">if</span> (consumeRT &gt;= defaultMQPushConsumer.getConsumeTimeout() * <span class="number">60</span> * <span class="number">1000</span>) &#123;</div><div class="line"> <span class="number">80</span>:             returnType = ConsumeReturnType.TIME_OUT;</div><div class="line"> <span class="number">81</span>:         &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ConsumeConcurrentlyStatus.RECONSUME_LATER == status) &#123;</div><div class="line"> <span class="number">82</span>:             returnType = ConsumeReturnType.FAILED;</div><div class="line"> <span class="number">83</span>:         &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ConsumeConcurrentlyStatus.CONSUME_SUCCESS == status) &#123;</div><div class="line"> <span class="number">84</span>:             returnType = ConsumeReturnType.SUCCESS;</div><div class="line"> <span class="number">85</span>:         &#125;</div><div class="line"> <span class="number">86</span>: </div><div class="line"> <span class="number">87</span>:         <span class="comment">// Hook</span></div><div class="line"> <span class="number">88</span>:         <span class="keyword">if</span> (ConsumeMessageConcurrentlyService.<span class="keyword">this</span>.defaultMQPushConsumerImpl.hasHook()) &#123;</div><div class="line"> <span class="number">89</span>:             consumeMessageContext.getProps().put(MixAll.CONSUME_CONTEXT_TYPE, returnType.name());</div><div class="line"> <span class="number">90</span>:         &#125;</div><div class="line"> <span class="number">91</span>: </div><div class="line"> <span class="number">92</span>:         <span class="comment">// 消费结果状态为空时，则设置为稍后重新消费</span></div><div class="line"> <span class="number">93</span>:         <span class="keyword">if</span> (<span class="keyword">null</span> == status) &#123;</div><div class="line"> <span class="number">94</span>:             log.warn(<span class="string">"consumeMessage return null, Group: &#123;&#125; Msgs: &#123;&#125; MQ: &#123;&#125;"</span>,</div><div class="line"> <span class="number">95</span>:                 ConsumeMessageConcurrentlyService.<span class="keyword">this</span>.consumerGroup,</div><div class="line"> <span class="number">96</span>:                 msgs,</div><div class="line"> <span class="number">97</span>:                 messageQueue);</div><div class="line"> <span class="number">98</span>:             status = ConsumeConcurrentlyStatus.RECONSUME_LATER;</div><div class="line"> <span class="number">99</span>:         &#125;</div><div class="line"><span class="number">100</span>: </div><div class="line"><span class="number">101</span>:         <span class="comment">// Hook</span></div><div class="line"><span class="number">102</span>:         <span class="keyword">if</span> (ConsumeMessageConcurrentlyService.<span class="keyword">this</span>.defaultMQPushConsumerImpl.hasHook()) &#123;</div><div class="line"><span class="number">103</span>:             consumeMessageContext.setStatus(status.toString());</div><div class="line"><span class="number">104</span>:             consumeMessageContext.setSuccess(ConsumeConcurrentlyStatus.CONSUME_SUCCESS == status);</div><div class="line"><span class="number">105</span>:             ConsumeMessageConcurrentlyService.<span class="keyword">this</span>.defaultMQPushConsumerImpl.executeHookAfter(consumeMessageContext);</div><div class="line"><span class="number">106</span>:         &#125;</div><div class="line"><span class="number">107</span>: </div><div class="line"><span class="number">108</span>:         <span class="comment">// 统计</span></div><div class="line"><span class="number">109</span>:         ConsumeMessageConcurrentlyService.<span class="keyword">this</span>.getConsumerStatsManager()</div><div class="line"><span class="number">110</span>:             .incConsumeRT(ConsumeMessageConcurrentlyService.<span class="keyword">this</span>.consumerGroup, messageQueue.getTopic(), consumeRT);</div><div class="line"><span class="number">111</span>: </div><div class="line"><span class="number">112</span>:         <span class="comment">// 处理消费结果</span></div><div class="line"><span class="number">113</span>:         <span class="keyword">if</span> (!processQueue.isDropped()) &#123;</div><div class="line"><span class="number">114</span>:             ConsumeMessageConcurrentlyService.<span class="keyword">this</span>.processConsumeResult(status, context, <span class="keyword">this</span>);</div><div class="line"><span class="number">115</span>:         &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">116</span>:             log.warn(<span class="string">"processQueue is dropped without process consume result. messageQueue=&#123;&#125;, msgs=&#123;&#125;"</span>, messageQueue, msgs);</div><div class="line"><span class="number">117</span>:         &#125;</div><div class="line"><span class="number">118</span>:     &#125;</div><div class="line"><span class="number">119</span>: </div><div class="line"><span class="number">120</span>: &#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>说明 ：消费请求。提交请求执行消费。</li>
<li>第 24 至 28 行 ：废弃处理队列不进行消费。</li>
<li>第 34 至 44 行 ：Hook。</li>
<li>第 51 行 ：当消息为重试消息，设置 <code>Topic</code>为原始 <code>Topic</code>。例如：原始 <code>Topic</code> 为 <code>TopicTest</code>，重试时 <code>Topic</code> 为 <code>%RETRY%please_rename_unique_group_name_4</code>，经过该方法，<code>Topic</code> 设置回 <code>TopicTest</code>。</li>
<li>第 53 至 58 行 ：设置开始消费时间。</li>
<li>第 61 行 ：<strong>进行消费</strong>。</li>
<li>第 71 至 85 行 ：解析消费返回结果类型</li>
<li>第 87 至 90 行 ：<code>Hook</code>。</li>
<li>第 92 至 99 行 ：消费结果状态未空时，则设置消费结果状态为稍后消费。</li>
<li>第 101 至 106 行 ：<code>Hook</code>。</li>
<li>第 108 至 110 行 ：统计。</li>
<li>第 112 至 117 行 ：处理消费结果。<strong>如果消费处理队列被移除，恰好消息被消费，则可能导致消息重复消费，因此，消息消费要尽最大可能性实现幂等性</strong>。详细解析见：<a href="#consumemessageconcurrentlyserviceprocessconsumeresult">ConsumeMessageConcurrentlyService#processConsumeResult(...)</a>。</li>
</ul>
<h2>ConsumeMessageConcurrentlyService#processConsumeResult(...)</h2>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processConsumeResult</span><span class="params">(//</span></span></div><div class="line"> <span class="number">2</span>:     <span class="keyword">final</span> ConsumeConcurrentlyStatus status, //</div><div class="line"> <span class="number">3</span>:     <span class="keyword">final</span> ConsumeConcurrentlyContext context, //</div><div class="line"> <span class="number">4</span>:     <span class="keyword">final</span> ConsumeRequest consumeRequest//</div><div class="line"> <span class="number">5</span>: ) &#123;</div><div class="line"> <span class="number">6</span>:     <span class="keyword">int</span> ackIndex = context.getAckIndex();</div><div class="line"> <span class="number">7</span>: </div><div class="line"> <span class="number">8</span>:     <span class="comment">// 消息为空，直接返回</span></div><div class="line"> <span class="number">9</span>:     <span class="keyword">if</span> (consumeRequest.getMsgs().isEmpty())</div><div class="line"><span class="number">10</span>:         <span class="keyword">return</span>;</div><div class="line"><span class="number">11</span>: </div><div class="line"><span class="number">12</span>:     <span class="comment">// 计算从consumeRequest.msgs[0]到consumeRequest.msgs[ackIndex]的消息消费成功</span></div><div class="line"><span class="number">13</span>:     <span class="keyword">switch</span> (status) &#123;</div><div class="line"><span class="number">14</span>:         <span class="keyword">case</span> CONSUME_SUCCESS:</div><div class="line"><span class="number">15</span>:             <span class="keyword">if</span> (ackIndex &gt;= consumeRequest.getMsgs().size()) &#123;</div><div class="line"><span class="number">16</span>:                 ackIndex = consumeRequest.getMsgs().size() - <span class="number">1</span>;</div><div class="line"><span class="number">17</span>:             &#125;</div><div class="line"><span class="number">18</span>:             <span class="comment">// 统计成功/失败数量</span></div><div class="line"><span class="number">19</span>:             <span class="keyword">int</span> ok = ackIndex + <span class="number">1</span>;</div><div class="line"><span class="number">20</span>:             <span class="keyword">int</span> failed = consumeRequest.getMsgs().size() - ok;</div><div class="line"><span class="number">21</span>:             <span class="keyword">this</span>.getConsumerStatsManager().incConsumeOKTPS(consumerGroup, consumeRequest.getMessageQueue().getTopic(), ok);</div><div class="line"><span class="number">22</span>:             <span class="keyword">this</span>.getConsumerStatsManager().incConsumeFailedTPS(consumerGroup, consumeRequest.getMessageQueue().getTopic(), failed);</div><div class="line"><span class="number">23</span>:             <span class="keyword">break</span>;</div><div class="line"><span class="number">24</span>:         <span class="keyword">case</span> RECONSUME_LATER:</div><div class="line"><span class="number">25</span>:             ackIndex = -<span class="number">1</span>;</div><div class="line"><span class="number">26</span>:             <span class="comment">// 统计成功/失败数量</span></div><div class="line"><span class="number">27</span>:             <span class="keyword">this</span>.getConsumerStatsManager().incConsumeFailedTPS(consumerGroup, consumeRequest.getMessageQueue().getTopic(),</div><div class="line"><span class="number">28</span>:                 consumeRequest.getMsgs().size());</div><div class="line"><span class="number">29</span>:             <span class="keyword">break</span>;</div><div class="line"><span class="number">30</span>:         <span class="keyword">default</span>:</div><div class="line"><span class="number">31</span>:             <span class="keyword">break</span>;</div><div class="line"><span class="number">32</span>:     &#125;</div><div class="line"><span class="number">33</span>: </div><div class="line"><span class="number">34</span>:     <span class="comment">// 处理消费失败的消息</span></div><div class="line"><span class="number">35</span>:     <span class="keyword">switch</span> (<span class="keyword">this</span>.defaultMQPushConsumer.getMessageModel()) &#123;</div><div class="line"><span class="number">36</span>:         <span class="keyword">case</span> BROADCASTING: <span class="comment">// 广播模式，无论是否消费失败，不发回消息到Broker，只打印Log</span></div><div class="line"><span class="number">37</span>:             <span class="keyword">for</span> (<span class="keyword">int</span> i = ackIndex + <span class="number">1</span>; i &lt; consumeRequest.getMsgs().size(); i++) &#123;</div><div class="line"><span class="number">38</span>:                 MessageExt msg = consumeRequest.getMsgs().get(i);</div><div class="line"><span class="number">39</span>:                 log.warn(<span class="string">"BROADCASTING, the message consume failed, drop it, &#123;&#125;"</span>, msg.toString());</div><div class="line"><span class="number">40</span>:             &#125;</div><div class="line"><span class="number">41</span>:             <span class="keyword">break</span>;</div><div class="line"><span class="number">42</span>:         <span class="keyword">case</span> CLUSTERING:</div><div class="line"><span class="number">43</span>:             <span class="comment">// 发回消息失败到Broker。</span></div><div class="line"><span class="number">44</span>:             List&lt;MessageExt&gt; msgBackFailed = <span class="keyword">new</span> ArrayList&lt;&gt;(consumeRequest.getMsgs().size());</div><div class="line"><span class="number">45</span>:             <span class="keyword">for</span> (<span class="keyword">int</span> i = ackIndex + <span class="number">1</span>; i &lt; consumeRequest.getMsgs().size(); i++) &#123;</div><div class="line"><span class="number">46</span>:                 MessageExt msg = consumeRequest.getMsgs().get(i);</div><div class="line"><span class="number">47</span>:                 <span class="keyword">boolean</span> result = <span class="keyword">this</span>.sendMessageBack(msg, context);</div><div class="line"><span class="number">48</span>:                 <span class="keyword">if</span> (!result) &#123;</div><div class="line"><span class="number">49</span>:                     msg.setReconsumeTimes(msg.getReconsumeTimes() + <span class="number">1</span>);</div><div class="line"><span class="number">50</span>:                     msgBackFailed.add(msg);</div><div class="line"><span class="number">51</span>:                 &#125;</div><div class="line"><span class="number">52</span>:             &#125;</div><div class="line"><span class="number">53</span>: </div><div class="line"><span class="number">54</span>:             <span class="comment">// 发回Broker失败的消息，直接提交延迟重新消费</span></div><div class="line"><span class="number">55</span>:             <span class="keyword">if</span> (!msgBackFailed.isEmpty()) &#123;</div><div class="line"><span class="number">56</span>:                 consumeRequest.getMsgs().removeAll(msgBackFailed);</div><div class="line"><span class="number">57</span>: </div><div class="line"><span class="number">58</span>:                 <span class="keyword">this</span>.submitConsumeRequestLater(msgBackFailed, consumeRequest.getProcessQueue(), consumeRequest.getMessageQueue());</div><div class="line"><span class="number">59</span>:             &#125;</div><div class="line"><span class="number">60</span>:             <span class="keyword">break</span>;</div><div class="line"><span class="number">61</span>:         <span class="keyword">default</span>:</div><div class="line"><span class="number">62</span>:             <span class="keyword">break</span>;</div><div class="line"><span class="number">63</span>:     &#125;</div><div class="line"><span class="number">64</span>: </div><div class="line"><span class="number">65</span>:     <span class="comment">// 移除消费成功消息，并更新最新消费进度</span></div><div class="line"><span class="number">66</span>:     <span class="keyword">long</span> offset = consumeRequest.getProcessQueue().removeMessage(consumeRequest.getMsgs());</div><div class="line"><span class="number">67</span>:     <span class="keyword">if</span> (offset &gt;= <span class="number">0</span> &amp;&amp; !consumeRequest.getProcessQueue().isDropped()) &#123;</div><div class="line"><span class="number">68</span>:         <span class="keyword">this</span>.defaultMQPushConsumerImpl.getOffsetStore().updateOffset(consumeRequest.getMessageQueue(), offset, <span class="keyword">true</span>);</div><div class="line"><span class="number">69</span>:     &#125;</div><div class="line"><span class="number">70</span>: &#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>说明 ：处理消费结果。</li>
<li>第 8 至 10 行 ：消费请求消息未空时，直接返回。</li>
<li>第 12 至 32 行 ：计算 <code>ackIndex</code> 值。<code>consumeRequest.msgs[0 - ackIndex]</code>为消费成功，需要进行 <code>ack</code> 确认。
<ul>
<li>第 14 至 23 行 ：<code>CONSUME_SUCCESS</code> ：<code>ackIndex = context.getAckIndex()</code>。</li>
<li>第 24 至 29 行 ：<code>RECONSUME_LATER</code> ：<code>ackIndex = -1</code>。</li>
</ul>
</li>
<li>第34 至 63 行 ：处理消费失败的消息。
<ul>
<li>第 36 至 41 行 ：<code>BROADCASTING</code> ：广播模式，无论是否消费失败，不发回消息到 <code>Broker</code>，只打印日志。</li>
<li>第 42 至 60 行 ：<code>CLUSTERING</code> ：集群模式，消费失败的消息发回到 <code>Broker</code>。
<ul>
<li>第 43 至 52 行 ：发回消费失败的消息到 <code>Broker</code>。详细解析见：<a href="#defaultmqpushconsumerimplsendmessageback">DefaultMQPushConsumerImpl#sendMessageBack(...)</a>。</li>
<li>第 54 至 59 行 ：发回 <code>Broker</code> 失败的消息，直接提交延迟重新消费。</li>
<li><strong>如果发回 <code>Broker</code> 成功，结果因为例如网络异常，导致 <code>Consumer</code>以为发回失败，判定消费发回失败，会导致消息重复消费，因此，消息消费要尽最大可能性实现幂等性。</strong></li>
</ul>
</li>
</ul>
</li>
<li>第 65 至 69 行 ：移除**【消费成功】<strong>和</strong>【消费失败但发回<code>Broker</code>成功】**的消息，并更新最新消费进度。
<ul>
<li>为什么会有**【消费失败但发回<code>Broker</code>成功】<strong>的消息？见</strong>第 56 行**。</li>
<li><a href="#processqueueremovemessage">ProcessQueue#removeMessage(...)</a></li>
</ul>
</li>
</ul>
<h3>ProcessQueue#removeMessage(...)</h3>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="comment">/**</span></div><div class="line"> 2:  * 移除消息，并返回第一条消息队列位置</div><div class="line"> 3:  *</div><div class="line"> 4:  * <span class="doctag">@param</span> msgs 消息</div><div class="line"> 5:  * <span class="doctag">@return</span> 消息队列位置</div><div class="line"> 6:  */</div><div class="line"> <span class="number">7</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">removeMessage</span><span class="params">(<span class="keyword">final</span> List&lt;MessageExt&gt; msgs)</span> </span>&#123;</div><div class="line"> <span class="number">8</span>:     <span class="keyword">long</span> result = -<span class="number">1</span>;</div><div class="line"> <span class="number">9</span>:     <span class="keyword">final</span> <span class="keyword">long</span> now = System.currentTimeMillis();</div><div class="line"><span class="number">10</span>:     <span class="keyword">try</span> &#123;</div><div class="line"><span class="number">11</span>:         <span class="keyword">this</span>.lockTreeMap.writeLock().lockInterruptibly();</div><div class="line"><span class="number">12</span>:         <span class="keyword">this</span>.lastConsumeTimestamp = now;</div><div class="line"><span class="number">13</span>:         <span class="keyword">try</span> &#123;</div><div class="line"><span class="number">14</span>:             <span class="keyword">if</span> (!msgTreeMap.isEmpty()) &#123;</div><div class="line"><span class="number">15</span>:                 result = <span class="keyword">this</span>.queueOffsetMax + <span class="number">1</span>; <span class="comment">// 这里+1的原因是：如果msgTreeMap为空时，下一条获得的消息位置为queueOffsetMax+1</span></div><div class="line"><span class="number">16</span>: </div><div class="line"><span class="number">17</span>:                 <span class="comment">// 移除消息</span></div><div class="line"><span class="number">18</span>:                 <span class="keyword">int</span> removedCnt = <span class="number">0</span>;</div><div class="line"><span class="number">19</span>:                 <span class="keyword">for</span> (MessageExt msg : msgs) &#123;</div><div class="line"><span class="number">20</span>:                     MessageExt prev = msgTreeMap.remove(msg.getQueueOffset());</div><div class="line"><span class="number">21</span>:                     <span class="keyword">if</span> (prev != <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">22</span>:                         removedCnt--;</div><div class="line"><span class="number">23</span>:                     &#125;</div><div class="line"><span class="number">24</span>:                 &#125;</div><div class="line"><span class="number">25</span>:                 msgCount.addAndGet(removedCnt);</div><div class="line"><span class="number">26</span>: </div><div class="line"><span class="number">27</span>:                 <span class="keyword">if</span> (!msgTreeMap.isEmpty()) &#123;</div><div class="line"><span class="number">28</span>:                     result = msgTreeMap.firstKey();</div><div class="line"><span class="number">29</span>:                 &#125;</div><div class="line"><span class="number">30</span>:             &#125;</div><div class="line"><span class="number">31</span>:         &#125; <span class="keyword">finally</span> &#123;</div><div class="line"><span class="number">32</span>:             <span class="keyword">this</span>.lockTreeMap.writeLock().unlock();</div><div class="line"><span class="number">33</span>:         &#125;</div><div class="line"><span class="number">34</span>:     &#125; <span class="keyword">catch</span> (Throwable t) &#123;</div><div class="line"><span class="number">35</span>:         log.error(<span class="string">"removeMessage exception"</span>, t);</div><div class="line"><span class="number">36</span>:     &#125;</div><div class="line"><span class="number">37</span>: </div><div class="line"><span class="number">38</span>:     <span class="keyword">return</span> result;</div><div class="line"><span class="number">39</span>: &#125;</div></pre></td></tr></table></figure></p>
<h2>ConsumeMessageConcurrentlyService#cleanExpireMsg(...)</h2>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</div><div class="line"> <span class="number">2</span>:     <span class="keyword">this</span>.cleanExpireMsgExecutors.scheduleAtFixedRate(<span class="keyword">new</span> Runnable() &#123;</div><div class="line"> <span class="number">3</span>: </div><div class="line"> <span class="number">4</span>:         <span class="meta">@Override</span></div><div class="line"> <span class="number">5</span>:         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line"> <span class="number">6</span>:             cleanExpireMsg();</div><div class="line"> <span class="number">7</span>:         &#125;</div><div class="line"> <span class="number">8</span>: </div><div class="line"> <span class="number">9</span>:     &#125;, <span class="keyword">this</span>.defaultMQPushConsumer.getConsumeTimeout(), <span class="keyword">this</span>.defaultMQPushConsumer.getConsumeTimeout(), TimeUnit.MINUTES);</div><div class="line"><span class="number">10</span>: &#125;</div><div class="line"><span class="number">11</span>: </div><div class="line"><span class="number">12</span>: <span class="comment">/**</span></div><div class="line">13:  * 清理过期消息</div><div class="line">14:  */</div><div class="line"><span class="number">15</span>: <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">cleanExpireMsg</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="number">16</span>:     Iterator&lt;Map.Entry&lt;MessageQueue, ProcessQueue&gt;&gt; it =</div><div class="line"><span class="number">17</span>:         <span class="keyword">this</span>.defaultMQPushConsumerImpl.getRebalanceImpl().getProcessQueueTable().entrySet().iterator();</div><div class="line"><span class="number">18</span>:     <span class="keyword">while</span> (it.hasNext()) &#123;</div><div class="line"><span class="number">19</span>:         Map.Entry&lt;MessageQueue, ProcessQueue&gt; next = it.next();</div><div class="line"><span class="number">20</span>:         ProcessQueue pq = next.getValue();</div><div class="line"><span class="number">21</span>:         pq.cleanExpiredMsg(<span class="keyword">this</span>.defaultMQPushConsumer);</div><div class="line"><span class="number">22</span>:     &#125;</div><div class="line"><span class="number">23</span>: &#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>说明 ：定时清理过期消息，默认周期：15min。</li>
</ul>
<h3>ProcessQueue#cleanExpiredMsg(...)</h3>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cleanExpiredMsg</span><span class="params">(DefaultMQPushConsumer pushConsumer)</span> </span>&#123;</div><div class="line"> <span class="number">2</span>:     <span class="comment">// 顺序消费时，直接返回</span></div><div class="line"> <span class="number">3</span>:     <span class="keyword">if</span> (pushConsumer.getDefaultMQPushConsumerImpl().isConsumeOrderly()) &#123;</div><div class="line"> <span class="number">4</span>:         <span class="keyword">return</span>;</div><div class="line"> <span class="number">5</span>:     &#125;</div><div class="line"> <span class="number">6</span>: </div><div class="line"> <span class="number">7</span>:     <span class="comment">// 循环移除消息</span></div><div class="line"> <span class="number">8</span>:     <span class="keyword">int</span> loop = msgTreeMap.size() &lt; <span class="number">16</span> ? msgTreeMap.size() : <span class="number">16</span>; <span class="comment">// 每次循环最多移除16条</span></div><div class="line"> <span class="number">9</span>:     <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; loop; i++) &#123;</div><div class="line"><span class="number">10</span>:         <span class="comment">// 获取第一条消息。判断是否超时，若不超时，则结束循环</span></div><div class="line"><span class="number">11</span>:         MessageExt msg = <span class="keyword">null</span>;</div><div class="line"><span class="number">12</span>:         <span class="keyword">try</span> &#123;</div><div class="line"><span class="number">13</span>:             <span class="keyword">this</span>.lockTreeMap.readLock().lockInterruptibly();</div><div class="line"><span class="number">14</span>:             <span class="keyword">try</span> &#123;</div><div class="line"><span class="number">15</span>:                 <span class="keyword">if</span> (!msgTreeMap.isEmpty() &amp;&amp; System.currentTimeMillis() - Long.parseLong(MessageAccessor.getConsumeStartTimeStamp(msgTreeMap.firstEntry().getValue())) &gt; pushConsumer.getConsumeTimeout() * <span class="number">60</span> * <span class="number">1000</span>) &#123;</div><div class="line"><span class="number">16</span>:                     msg = msgTreeMap.firstEntry().getValue();</div><div class="line"><span class="number">17</span>:                 &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">18</span>:                     <span class="keyword">break</span>;</div><div class="line"><span class="number">19</span>:                 &#125;</div><div class="line"><span class="number">20</span>:             &#125; <span class="keyword">finally</span> &#123;</div><div class="line"><span class="number">21</span>:                 <span class="keyword">this</span>.lockTreeMap.readLock().unlock();</div><div class="line"><span class="number">22</span>:             &#125;</div><div class="line"><span class="number">23</span>:         &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line"><span class="number">24</span>:             log.error(<span class="string">"getExpiredMsg exception"</span>, e);</div><div class="line"><span class="number">25</span>:         &#125;</div><div class="line"><span class="number">26</span>: </div><div class="line"><span class="number">27</span>:         <span class="keyword">try</span> &#123;</div><div class="line"><span class="number">28</span>:             <span class="comment">// 发回超时消息</span></div><div class="line"><span class="number">29</span>:             pushConsumer.sendMessageBack(msg, <span class="number">3</span>);</div><div class="line"><span class="number">30</span>:             log.info(<span class="string">"send expire msg back. topic=&#123;&#125;, msgId=&#123;&#125;, storeHost=&#123;&#125;, queueId=&#123;&#125;, queueOffset=&#123;&#125;"</span>, msg.getTopic(), msg.getMsgId(), msg.getStoreHost(), msg.getQueueId(), msg.getQueueOffset());</div><div class="line"><span class="number">31</span>: </div><div class="line"><span class="number">32</span>:             <span class="comment">// 判断此时消息是否依然是第一条，若是，则进行移除</span></div><div class="line"><span class="number">33</span>:             <span class="keyword">try</span> &#123;</div><div class="line"><span class="number">34</span>:                 <span class="keyword">this</span>.lockTreeMap.writeLock().lockInterruptibly();</div><div class="line"><span class="number">35</span>:                 <span class="keyword">try</span> &#123;</div><div class="line"><span class="number">36</span>:                     <span class="keyword">if</span> (!msgTreeMap.isEmpty() &amp;&amp; msg.getQueueOffset() == msgTreeMap.firstKey()) &#123;</div><div class="line"><span class="number">37</span>:                         <span class="keyword">try</span> &#123;</div><div class="line"><span class="number">38</span>:                             msgTreeMap.remove(msgTreeMap.firstKey());</div><div class="line"><span class="number">39</span>:                         &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"><span class="number">40</span>:                             log.error(<span class="string">"send expired msg exception"</span>, e);</div><div class="line"><span class="number">41</span>:                         &#125;</div><div class="line"><span class="number">42</span>:                     &#125;</div><div class="line"><span class="number">43</span>:                 &#125; <span class="keyword">finally</span> &#123;</div><div class="line"><span class="number">44</span>:                     <span class="keyword">this</span>.lockTreeMap.writeLock().unlock();</div><div class="line"><span class="number">45</span>:                 &#125;</div><div class="line"><span class="number">46</span>:             &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line"><span class="number">47</span>:                 log.error(<span class="string">"getExpiredMsg exception"</span>, e);</div><div class="line"><span class="number">48</span>:             &#125;</div><div class="line"><span class="number">49</span>:         &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"><span class="number">50</span>:             log.error(<span class="string">"send expired msg exception"</span>, e);</div><div class="line"><span class="number">51</span>:         &#125;</div><div class="line"><span class="number">52</span>:     &#125;</div><div class="line"><span class="number">53</span>: &#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>说明 ：移除过期消息。</li>
<li>第 2 至 5 行 ：顺序消费时，直接返回。</li>
<li>第 7 至 9 行 ：循环移除消息。默认最大循环次数：16次。</li>
<li>第 10 至 25 行 ：获取第一条消息。判断是否超时，若不超时，则结束循环。</li>
<li>第 29 行 ：<strong>发回超时消息到<code>Broker</code></strong>。</li>
<li>第 32 至 48 行 ：判断此时消息是否依然是第一条，若是，则进行移除。</li>
</ul>
<h1>7、PushConsumer 发回消费失败消息</h1>
<h2>DefaultMQPushConsumerImpl#sendMessageBack(...)</h2>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessageBack</span><span class="params">(MessageExt msg, <span class="keyword">int</span> delayLevel, <span class="keyword">final</span> String brokerName)</span></span></div><div class="line"> 2:     <span class="keyword">throws</span> RemotingException, MQBrokerException, InterruptedException, MQClientException &#123;</div><div class="line"> <span class="number">3</span>:     <span class="keyword">try</span> &#123;</div><div class="line"> <span class="number">4</span>:         <span class="comment">// Consumer发回消息</span></div><div class="line"> <span class="number">5</span>:         String brokerAddr = (<span class="keyword">null</span> != brokerName) ? <span class="keyword">this</span>.mQClientFactory.findBrokerAddressInPublish(brokerName)</div><div class="line"> <span class="number">6</span>:             : RemotingHelper.parseSocketAddressAddr(msg.getStoreHost());</div><div class="line"> <span class="number">7</span>:         <span class="keyword">this</span>.mQClientFactory.getMQClientAPIImpl().consumerSendMessageBack(brokerAddr, msg,</div><div class="line"> <span class="number">8</span>:             <span class="keyword">this</span>.defaultMQPushConsumer.getConsumerGroup(), delayLevel, <span class="number">5000</span>, getMaxReconsumeTimes());</div><div class="line"> <span class="number">9</span>:     &#125; <span class="keyword">catch</span> (Exception e) &#123; <span class="comment">// TODO 疑问：什么情况下会发生异常</span></div><div class="line"><span class="number">10</span>:         <span class="comment">// 异常时，使用Client内置Producer发回消息</span></div><div class="line"><span class="number">11</span>:         log.error(<span class="string">"sendMessageBack Exception, "</span> + <span class="keyword">this</span>.defaultMQPushConsumer.getConsumerGroup(), e);</div><div class="line"><span class="number">12</span>: </div><div class="line"><span class="number">13</span>:         Message newMsg = <span class="keyword">new</span> Message(MixAll.getRetryTopic(<span class="keyword">this</span>.defaultMQPushConsumer.getConsumerGroup()), msg.getBody());</div><div class="line"><span class="number">14</span>: </div><div class="line"><span class="number">15</span>:         String originMsgId = MessageAccessor.getOriginMessageId(msg);</div><div class="line"><span class="number">16</span>:         MessageAccessor.setOriginMessageId(newMsg, UtilAll.isBlank(originMsgId) ? msg.getMsgId() : originMsgId);</div><div class="line"><span class="number">17</span>: </div><div class="line"><span class="number">18</span>:         newMsg.setFlag(msg.getFlag());</div><div class="line"><span class="number">19</span>:         MessageAccessor.setProperties(newMsg, msg.getProperties());</div><div class="line"><span class="number">20</span>:         MessageAccessor.putProperty(newMsg, MessageConst.PROPERTY_RETRY_TOPIC, msg.getTopic());</div><div class="line"><span class="number">21</span>:         MessageAccessor.setReconsumeTime(newMsg, String.valueOf(msg.getReconsumeTimes() + <span class="number">1</span>));</div><div class="line"><span class="number">22</span>:         MessageAccessor.setMaxReconsumeTimes(newMsg, String.valueOf(getMaxReconsumeTimes()));</div><div class="line"><span class="number">23</span>:         newMsg.setDelayTimeLevel(<span class="number">3</span> + msg.getReconsumeTimes());</div><div class="line"><span class="number">24</span>: </div><div class="line"><span class="number">25</span>:         <span class="keyword">this</span>.mQClientFactory.getDefaultMQProducer().send(newMsg);</div><div class="line"><span class="number">26</span>:     &#125;</div><div class="line"><span class="number">27</span>: &#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>说明 ：发回消息。</li>
<li>第 4 至 8 行 ：<code>Consumer</code> 发回消息。详细解析见：<a href="#mqclientapiimplconsumersendmessageback">MQClientAPIImpl#consumerSendMessageBack(...)</a>。</li>
<li>第 10 至 25 行 ：发生异常时，<code>Consumer</code> 内置默认 <code>Producer</code> 发送消息。
<ul>
<li>😈疑问：什么样的情况下会发生异常呢？</li>
</ul>
</li>
</ul>
<h3>MQClientAPIImpl#consumerSendMessageBack(...)</h3>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="comment">/**</span></div><div class="line"> 2:  * Consumer发回消息</div><div class="line"> 3:  * <span class="doctag">@param</span> addr Broker地址</div><div class="line"> 4:  * <span class="doctag">@param</span> msg 消息</div><div class="line"> 5:  * <span class="doctag">@param</span> consumerGroup 消费分组</div><div class="line"> 6:  * <span class="doctag">@param</span> delayLevel 延迟级别</div><div class="line"> 7:  * <span class="doctag">@param</span> timeoutMillis 超时</div><div class="line"> 8:  * <span class="doctag">@param</span> maxConsumeRetryTimes 消费最大重试次数</div><div class="line"> 9:  * <span class="doctag">@throws</span> RemotingException 当远程调用发生异常时</div><div class="line">10:  * <span class="doctag">@throws</span> MQBrokerException 当Broker发生异常时</div><div class="line">11:  * <span class="doctag">@throws</span> InterruptedException 当线程中断时</div><div class="line">12:  */</div><div class="line"><span class="number">13</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">consumerSendMessageBack</span><span class="params">(</span></span></div><div class="line"><span class="number">14</span>:     <span class="keyword">final</span> String addr,</div><div class="line"><span class="number">15</span>:     <span class="keyword">final</span> MessageExt msg,</div><div class="line"><span class="number">16</span>:     <span class="keyword">final</span> String consumerGroup,</div><div class="line"><span class="number">17</span>:     <span class="keyword">final</span> <span class="keyword">int</span> delayLevel,</div><div class="line"><span class="number">18</span>:     <span class="keyword">final</span> <span class="keyword">long</span> timeoutMillis,</div><div class="line"><span class="number">19</span>:     <span class="keyword">final</span> <span class="keyword">int</span> maxConsumeRetryTimes</div><div class="line"><span class="number">20</span>: ) <span class="keyword">throws</span> RemotingException, MQBrokerException, InterruptedException &#123;</div><div class="line"><span class="number">21</span>:     ConsumerSendMsgBackRequestHeader requestHeader = <span class="keyword">new</span> ConsumerSendMsgBackRequestHeader();</div><div class="line"><span class="number">22</span>:     RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.CONSUMER_SEND_MSG_BACK, requestHeader);</div><div class="line"><span class="number">23</span>: </div><div class="line"><span class="number">24</span>:     requestHeader.setGroup(consumerGroup);</div><div class="line"><span class="number">25</span>:     requestHeader.setOriginTopic(msg.getTopic());</div><div class="line"><span class="number">26</span>:     requestHeader.setOffset(msg.getCommitLogOffset());</div><div class="line"><span class="number">27</span>:     requestHeader.setDelayLevel(delayLevel);</div><div class="line"><span class="number">28</span>:     requestHeader.setOriginMsgId(msg.getMsgId());</div><div class="line"><span class="number">29</span>:     requestHeader.setMaxReconsumeTimes(maxConsumeRetryTimes);</div><div class="line"><span class="number">30</span>: </div><div class="line"><span class="number">31</span>:     RemotingCommand response = <span class="keyword">this</span>.remotingClient.invokeSync(MixAll.brokerVIPChannel(<span class="keyword">this</span>.clientConfig.isVipChannelEnabled(), addr),</div><div class="line"><span class="number">32</span>:         request, timeoutMillis);</div><div class="line"><span class="number">33</span>:     <span class="keyword">assert</span> response != <span class="keyword">null</span>;</div><div class="line"><span class="number">34</span>:     <span class="keyword">switch</span> (response.getCode()) &#123;</div><div class="line"><span class="number">35</span>:         <span class="keyword">case</span> ResponseCode.SUCCESS: &#123;</div><div class="line"><span class="number">36</span>:             <span class="keyword">return</span>;</div><div class="line"><span class="number">37</span>:         &#125;</div><div class="line"><span class="number">38</span>:         <span class="keyword">default</span>:</div><div class="line"><span class="number">39</span>:             <span class="keyword">break</span>;</div><div class="line"><span class="number">40</span>:     &#125;</div><div class="line"><span class="number">41</span>: </div><div class="line"><span class="number">42</span>:     <span class="keyword">throw</span> <span class="keyword">new</span> MQBrokerException(response.getCode(), response.getRemark());</div><div class="line"><span class="number">43</span>: &#125;</div></pre></td></tr></table></figure></p>
<h1>8、Consumer 消费进度</h1>
<h2>OffsetStore</h2>
<p><img src="http://www.yunai.me/images/RocketMQ/2017_05_04/07.png" alt="OffsetStore类图.png"></p>
<ul>
<li><code>RemoteBrokerOffsetStore</code> ：<code>Consumer</code> <strong>集群模式</strong> 下，使用远程 <code>Broker</code> 消费进度。</li>
<li><code>LocalFileOffsetStore</code> ：<code>Consumer</code> <strong>广播模式</strong>下，使用本地 <code>文件</code> 消费进度。</li>
</ul>
<h3>OffsetStore#load(...)</h3>
<h4>LocalFileOffsetStore#load(...)</h4>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="meta">@Override</span></div><div class="line"> <span class="number">2</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">load</span><span class="params">()</span> <span class="keyword">throws</span> MQClientException </span>&#123;</div><div class="line"> <span class="number">3</span>:     <span class="comment">// 从本地硬盘读取消费进度</span></div><div class="line"> <span class="number">4</span>:     OffsetSerializeWrapper offsetSerializeWrapper = <span class="keyword">this</span>.readLocalOffset();</div><div class="line"> <span class="number">5</span>:     <span class="keyword">if</span> (offsetSerializeWrapper != <span class="keyword">null</span> &amp;&amp; offsetSerializeWrapper.getOffsetTable() != <span class="keyword">null</span>) &#123;</div><div class="line"> <span class="number">6</span>:         offsetTable.putAll(offsetSerializeWrapper.getOffsetTable());</div><div class="line"> <span class="number">7</span>: </div><div class="line"> <span class="number">8</span>:         <span class="comment">// 打印每个消息队列的消费进度</span></div><div class="line"> <span class="number">9</span>:         <span class="keyword">for</span> (MessageQueue mq : offsetSerializeWrapper.getOffsetTable().keySet()) &#123;</div><div class="line"><span class="number">10</span>:             AtomicLong offset = offsetSerializeWrapper.getOffsetTable().get(mq);</div><div class="line"><span class="number">11</span>:             log.info(<span class="string">"load consumer's offset, &#123;&#125; &#123;&#125; &#123;&#125;"</span>,</div><div class="line"><span class="number">12</span>:                 <span class="keyword">this</span>.groupName,</div><div class="line"><span class="number">13</span>:                 mq,</div><div class="line"><span class="number">14</span>:                 offset.get());</div><div class="line"><span class="number">15</span>:         &#125;</div><div class="line"><span class="number">16</span>:     &#125;</div><div class="line"><span class="number">17</span>: &#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>说明 ：从本地文件加载消费进度到内存。</li>
</ul>
<h5>OffsetSerializeWrapper</h5>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OffsetSerializeWrapper</span> <span class="keyword">extends</span> <span class="title">RemotingSerializable</span> </span>&#123;</div><div class="line"> <span class="number">2</span>:     <span class="keyword">private</span> ConcurrentHashMap&lt;MessageQueue, AtomicLong&gt; offsetTable =</div><div class="line"> <span class="number">3</span>:             <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</div><div class="line"> <span class="number">4</span>: </div><div class="line"> <span class="number">5</span>:     <span class="function"><span class="keyword">public</span> ConcurrentHashMap&lt;MessageQueue, AtomicLong&gt; <span class="title">getOffsetTable</span><span class="params">()</span> </span>&#123;</div><div class="line"> <span class="number">6</span>:         <span class="keyword">return</span> offsetTable;</div><div class="line"> <span class="number">7</span>:     &#125;</div><div class="line"> <span class="number">8</span>: </div><div class="line"> <span class="number">9</span>:     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOffsetTable</span><span class="params">(ConcurrentHashMap&lt;MessageQueue, AtomicLong&gt; offsetTable)</span> </span>&#123;</div><div class="line"><span class="number">10</span>:         <span class="keyword">this</span>.offsetTable = offsetTable;</div><div class="line"><span class="number">11</span>:     &#125;</div><div class="line"><span class="number">12</span>: &#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>说明 ：本地 <code>Offset</code> 存储序列化。</li>
</ul>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">Yunai-MacdeMacBook-Pro-2:config yunai$ cat /Users/yunai/.rocketmq_offsets/192.168.17.0@DEFAULT/please_rename_unique_group_name_1/offsets.json</div><div class="line">&#123;</div><div class="line">	<span class="string">"offsetTable"</span>:&#123;&#123;</div><div class="line">			<span class="string">"brokerName"</span>:<span class="string">"broker-a"</span>,</div><div class="line">			<span class="string">"queueId"</span>:3,</div><div class="line">			<span class="string">"topic"</span>:<span class="string">"TopicTest"</span></div><div class="line">		&#125;:1470,&#123;</div><div class="line">			<span class="string">"brokerName"</span>:<span class="string">"broker-a"</span>,</div><div class="line">			<span class="string">"queueId"</span>:2,</div><div class="line">			<span class="string">"topic"</span>:<span class="string">"TopicTest"</span></div><div class="line">		&#125;:1471,&#123;</div><div class="line">			<span class="string">"brokerName"</span>:<span class="string">"broker-a"</span>,</div><div class="line">			<span class="string">"queueId"</span>:1,</div><div class="line">			<span class="string">"topic"</span>:<span class="string">"TopicTest"</span></div><div class="line">		&#125;:1470,&#123;</div><div class="line">			<span class="string">"brokerName"</span>:<span class="string">"broker-a"</span>,</div><div class="line">			<span class="string">"queueId"</span>:0,</div><div class="line">			<span class="string">"topic"</span>:<span class="string">"TopicTest"</span></div><div class="line">		&#125;:1470</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4>RemoteBrokerOffsetStore#load(...)</h4>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="number">1</span>: <span class="meta">@Override</span></div><div class="line"><span class="number">2</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">load</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="number">3</span>: &#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>说明 ：不进行加载，实际读取消费进度时，从 <code>Broker</code> 获取。</li>
</ul>
<h3>OffsetStore#readOffset(...)</h3>
<p>读取消费进度类型：</p>
<ul>
<li><code>READ_FROM_MEMORY</code> ：从内存读取。</li>
<li><code>READ_FROM_STORE</code> ：从存储( <code>Broker</code> 或 <code>文件</code> )读取。</li>
<li><code>MEMORY_FIRST_THEN_STORE</code> ：优先从内存读取，读取不到，从存储读取。</li>
</ul>
<h4>LocalFileOffsetStore#readOffset(...)</h4>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="meta">@Override</span></div><div class="line"> <span class="number">2</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">readOffset</span><span class="params">(<span class="keyword">final</span> MessageQueue mq, <span class="keyword">final</span> ReadOffsetType type)</span> </span>&#123;</div><div class="line"> <span class="number">3</span>:     <span class="keyword">if</span> (mq != <span class="keyword">null</span>) &#123;</div><div class="line"> <span class="number">4</span>:         <span class="keyword">switch</span> (type) &#123;</div><div class="line"> <span class="number">5</span>:             <span class="keyword">case</span> MEMORY_FIRST_THEN_STORE:</div><div class="line"> <span class="number">6</span>:             <span class="keyword">case</span> READ_FROM_MEMORY: &#123;</div><div class="line"> <span class="number">7</span>:                 AtomicLong offset = <span class="keyword">this</span>.offsetTable.get(mq);</div><div class="line"> <span class="number">8</span>:                 <span class="keyword">if</span> (offset != <span class="keyword">null</span>) &#123;</div><div class="line"> <span class="number">9</span>:                     <span class="keyword">return</span> offset.get();</div><div class="line"><span class="number">10</span>:                 &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ReadOffsetType.READ_FROM_MEMORY == type) &#123;</div><div class="line"><span class="number">11</span>:                     <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line"><span class="number">12</span>:                 &#125;</div><div class="line"><span class="number">13</span>:             &#125;</div><div class="line"><span class="number">14</span>:             <span class="keyword">case</span> READ_FROM_STORE: &#123;</div><div class="line"><span class="number">15</span>:                 OffsetSerializeWrapper offsetSerializeWrapper;</div><div class="line"><span class="number">16</span>:                 <span class="keyword">try</span> &#123;</div><div class="line"><span class="number">17</span>:                     offsetSerializeWrapper = <span class="keyword">this</span>.readLocalOffset();</div><div class="line"><span class="number">18</span>:                 &#125; <span class="keyword">catch</span> (MQClientException e) &#123;</div><div class="line"><span class="number">19</span>:                     <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line"><span class="number">20</span>:                 &#125;</div><div class="line"><span class="number">21</span>:                 <span class="keyword">if</span> (offsetSerializeWrapper != <span class="keyword">null</span> &amp;&amp; offsetSerializeWrapper.getOffsetTable() != <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">22</span>:                     AtomicLong offset = offsetSerializeWrapper.getOffsetTable().get(mq);</div><div class="line"><span class="number">23</span>:                     <span class="keyword">if</span> (offset != <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">24</span>:                         <span class="keyword">this</span>.updateOffset(mq, offset.get(), <span class="keyword">false</span>);</div><div class="line"><span class="number">25</span>:                         <span class="keyword">return</span> offset.get();</div><div class="line"><span class="number">26</span>:                     &#125;</div><div class="line"><span class="number">27</span>:                 &#125;</div><div class="line"><span class="number">28</span>:             &#125;</div><div class="line"><span class="number">29</span>:             <span class="keyword">default</span>:</div><div class="line"><span class="number">30</span>:                 <span class="keyword">break</span>;</div><div class="line"><span class="number">31</span>:         &#125;</div><div class="line"><span class="number">32</span>:     &#125;</div><div class="line"><span class="number">33</span>: </div><div class="line"><span class="number">34</span>:     <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line"><span class="number">35</span>: &#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>第 16 行 ：从 <code>文件</code> 读取消费进度。</li>
</ul>
<h4>RemoteBrokerOffsetStore#readOffset(...)</h4>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="meta">@Override</span></div><div class="line"> <span class="number">2</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">readOffset</span><span class="params">(<span class="keyword">final</span> MessageQueue mq, <span class="keyword">final</span> ReadOffsetType type)</span> </span>&#123;</div><div class="line"> <span class="number">3</span>:     <span class="keyword">if</span> (mq != <span class="keyword">null</span>) &#123;</div><div class="line"> <span class="number">4</span>:         <span class="keyword">switch</span> (type) &#123;</div><div class="line"> <span class="number">5</span>:             <span class="keyword">case</span> MEMORY_FIRST_THEN_STORE:</div><div class="line"> <span class="number">6</span>:             <span class="keyword">case</span> READ_FROM_MEMORY: &#123;</div><div class="line"> <span class="number">7</span>:                 AtomicLong offset = <span class="keyword">this</span>.offsetTable.get(mq);</div><div class="line"> <span class="number">8</span>:                 <span class="keyword">if</span> (offset != <span class="keyword">null</span>) &#123;</div><div class="line"> <span class="number">9</span>:                     <span class="keyword">return</span> offset.get();</div><div class="line"><span class="number">10</span>:                 &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ReadOffsetType.READ_FROM_MEMORY == type) &#123;</div><div class="line"><span class="number">11</span>:                     <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line"><span class="number">12</span>:                 &#125;</div><div class="line"><span class="number">13</span>:             &#125;</div><div class="line"><span class="number">14</span>:             <span class="keyword">case</span> READ_FROM_STORE: &#123;</div><div class="line"><span class="number">15</span>:                 <span class="keyword">try</span> &#123;</div><div class="line"><span class="number">16</span>:                     <span class="keyword">long</span> brokerOffset = <span class="keyword">this</span>.fetchConsumeOffsetFromBroker(mq);</div><div class="line"><span class="number">17</span>:                     AtomicLong offset = <span class="keyword">new</span> AtomicLong(brokerOffset);</div><div class="line"><span class="number">18</span>:                     <span class="keyword">this</span>.updateOffset(mq, offset.get(), <span class="keyword">false</span>);</div><div class="line"><span class="number">19</span>:                     <span class="keyword">return</span> brokerOffset;</div><div class="line"><span class="number">20</span>:                 &#125;</div><div class="line"><span class="number">21</span>:                 <span class="comment">// No offset in broker</span></div><div class="line"><span class="number">22</span>:                 <span class="keyword">catch</span> (MQBrokerException e) &#123;</div><div class="line"><span class="number">23</span>:                     <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line"><span class="number">24</span>:                 &#125;</div><div class="line"><span class="number">25</span>:                 <span class="comment">//Other exceptions</span></div><div class="line"><span class="number">26</span>:                 <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"><span class="number">27</span>:                     log.warn(<span class="string">"fetchConsumeOffsetFromBroker exception, "</span> + mq, e);</div><div class="line"><span class="number">28</span>:                     <span class="keyword">return</span> -<span class="number">2</span>;</div><div class="line"><span class="number">29</span>:                 &#125;</div><div class="line"><span class="number">30</span>:             &#125;</div><div class="line"><span class="number">31</span>:             <span class="keyword">default</span>:</div><div class="line"><span class="number">32</span>:                 <span class="keyword">break</span>;</div><div class="line"><span class="number">33</span>:         &#125;</div><div class="line"><span class="number">34</span>:     &#125;</div><div class="line"><span class="number">35</span>: </div><div class="line"><span class="number">36</span>:     <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line"><span class="number">37</span>: &#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>第 16 行 ：从 <code>Broker</code> 读取消费进度。</li>
</ul>
<h3>OffsetStore#updateOffset(...)</h3>
<p>该方法 <code>RemoteBrokerOffsetStore</code> 与 <code>LocalFileOffsetStore</code> 实现相同。</p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="meta">@Override</span></div><div class="line"> <span class="number">2</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateOffset</span><span class="params">(MessageQueue mq, <span class="keyword">long</span> offset, <span class="keyword">boolean</span> increaseOnly)</span> </span>&#123;</div><div class="line"> <span class="number">3</span>:     <span class="keyword">if</span> (mq != <span class="keyword">null</span>) &#123;</div><div class="line"> <span class="number">4</span>:         AtomicLong offsetOld = <span class="keyword">this</span>.offsetTable.get(mq);</div><div class="line"> <span class="number">5</span>:         <span class="keyword">if</span> (<span class="keyword">null</span> == offsetOld) &#123;</div><div class="line"> <span class="number">6</span>:             offsetOld = <span class="keyword">this</span>.offsetTable.putIfAbsent(mq, <span class="keyword">new</span> AtomicLong(offset));</div><div class="line"> <span class="number">7</span>:         &#125;</div><div class="line"> <span class="number">8</span>: </div><div class="line"> <span class="number">9</span>:         <span class="keyword">if</span> (<span class="keyword">null</span> != offsetOld) &#123;</div><div class="line"><span class="number">10</span>:             <span class="keyword">if</span> (increaseOnly) &#123;</div><div class="line"><span class="number">11</span>:                 MixAll.compareAndIncreaseOnly(offsetOld, offset);</div><div class="line"><span class="number">12</span>:             &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">13</span>:                 offsetOld.set(offset);</div><div class="line"><span class="number">14</span>:             &#125;</div><div class="line"><span class="number">15</span>:         &#125;</div><div class="line"><span class="number">16</span>:     &#125;</div><div class="line"><span class="number">17</span>: &#125;</div></pre></td></tr></table></figure></p>
<h3>OffsetStore#persistAll(...)</h3>
<h4>LocalFileOffsetStore#persistAll(...)</h4>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="meta">@Override</span></div><div class="line"> <span class="number">2</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">persistAll</span><span class="params">(Set&lt;MessageQueue&gt; mqs)</span> </span>&#123;</div><div class="line"> <span class="number">3</span>:     <span class="keyword">if</span> (<span class="keyword">null</span> == mqs || mqs.isEmpty())</div><div class="line"> <span class="number">4</span>:         <span class="keyword">return</span>;</div><div class="line"> <span class="number">5</span>: </div><div class="line"> <span class="number">6</span>:     OffsetSerializeWrapper offsetSerializeWrapper = <span class="keyword">new</span> OffsetSerializeWrapper();</div><div class="line"> <span class="number">7</span>:     <span class="keyword">for</span> (Map.Entry&lt;MessageQueue, AtomicLong&gt; entry : <span class="keyword">this</span>.offsetTable.entrySet()) &#123;</div><div class="line"> <span class="number">8</span>:         <span class="keyword">if</span> (mqs.contains(entry.getKey())) &#123;</div><div class="line"> <span class="number">9</span>:             AtomicLong offset = entry.getValue();</div><div class="line"><span class="number">10</span>:             offsetSerializeWrapper.getOffsetTable().put(entry.getKey(), offset);</div><div class="line"><span class="number">11</span>:         &#125;</div><div class="line"><span class="number">12</span>:     &#125;</div><div class="line"><span class="number">13</span>: </div><div class="line"><span class="number">14</span>:     String jsonString = offsetSerializeWrapper.toJson(<span class="keyword">true</span>);</div><div class="line"><span class="number">15</span>:     <span class="keyword">if</span> (jsonString != <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">16</span>:         <span class="keyword">try</span> &#123;</div><div class="line"><span class="number">17</span>:             MixAll.string2File(jsonString, <span class="keyword">this</span>.storePath);</div><div class="line"><span class="number">18</span>:         &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line"><span class="number">19</span>:             log.error(<span class="string">"persistAll consumer offset Exception, "</span> + <span class="keyword">this</span>.storePath, e);</div><div class="line"><span class="number">20</span>:         &#125;</div><div class="line"><span class="number">21</span>:     &#125;</div><div class="line"><span class="number">22</span>: &#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>说明 ：持久化消费进度。<strong>将消费进度写入文件</strong>。</li>
</ul>
<h4>RemoteBrokerOffsetStore#persistAll(...)</h4>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="meta">@Override</span></div><div class="line"> <span class="number">2</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">persistAll</span><span class="params">(Set&lt;MessageQueue&gt; mqs)</span> </span>&#123;</div><div class="line"> <span class="number">3</span>:     <span class="keyword">if</span> (<span class="keyword">null</span> == mqs || mqs.isEmpty())</div><div class="line"> <span class="number">4</span>:         <span class="keyword">return</span>;</div><div class="line"> <span class="number">5</span>: </div><div class="line"> <span class="number">6</span>:     <span class="comment">// 持久化消息队列</span></div><div class="line"> <span class="number">7</span>:     <span class="keyword">final</span> HashSet&lt;MessageQueue&gt; unusedMQ = <span class="keyword">new</span> HashSet&lt;&gt;();</div><div class="line"> <span class="number">8</span>:     <span class="keyword">if</span> (!mqs.isEmpty()) &#123;</div><div class="line"> <span class="number">9</span>:         <span class="keyword">for</span> (Map.Entry&lt;MessageQueue, AtomicLong&gt; entry : <span class="keyword">this</span>.offsetTable.entrySet()) &#123;</div><div class="line"><span class="number">10</span>:             MessageQueue mq = entry.getKey();</div><div class="line"><span class="number">11</span>:             AtomicLong offset = entry.getValue();</div><div class="line"><span class="number">12</span>:             <span class="keyword">if</span> (offset != <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">13</span>:                 <span class="keyword">if</span> (mqs.contains(mq)) &#123;</div><div class="line"><span class="number">14</span>:                     <span class="keyword">try</span> &#123;</div><div class="line"><span class="number">15</span>:                         <span class="keyword">this</span>.updateConsumeOffsetToBroker(mq, offset.get());</div><div class="line"><span class="number">16</span>:                         log.info(<span class="string">"[persistAll] Group: &#123;&#125; ClientId: &#123;&#125; updateConsumeOffsetToBroker &#123;&#125; &#123;&#125;"</span>,</div><div class="line"><span class="number">17</span>:                             <span class="keyword">this</span>.groupName,</div><div class="line"><span class="number">18</span>:                             <span class="keyword">this</span>.mQClientFactory.getClientId(),</div><div class="line"><span class="number">19</span>:                             mq,</div><div class="line"><span class="number">20</span>:                             offset.get());</div><div class="line"><span class="number">21</span>:                     &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"><span class="number">22</span>:                         log.error(<span class="string">"updateConsumeOffsetToBroker exception, "</span> + mq.toString(), e);</div><div class="line"><span class="number">23</span>:                     &#125;</div><div class="line"><span class="number">24</span>:                 &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">25</span>:                     unusedMQ.add(mq);</div><div class="line"><span class="number">26</span>:                 &#125;</div><div class="line"><span class="number">27</span>:             &#125;</div><div class="line"><span class="number">28</span>:         &#125;</div><div class="line"><span class="number">29</span>:     &#125;</div><div class="line"><span class="number">30</span>: </div><div class="line"><span class="number">31</span>:     <span class="comment">// 移除不适用的消息队列</span></div><div class="line"><span class="number">32</span>:     <span class="keyword">if</span> (!unusedMQ.isEmpty()) &#123;</div><div class="line"><span class="number">33</span>:         <span class="keyword">for</span> (MessageQueue mq : unusedMQ) &#123;</div><div class="line"><span class="number">34</span>:             <span class="keyword">this</span>.offsetTable.remove(mq);</div><div class="line"><span class="number">35</span>:             log.info(<span class="string">"remove unused mq, &#123;&#125;, &#123;&#125;"</span>, mq, <span class="keyword">this</span>.groupName);</div><div class="line"><span class="number">36</span>:         &#125;</div><div class="line"><span class="number">37</span>:     &#125;</div><div class="line"><span class="number">38</span>: &#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>说明 ：持久化指定消息队列数组的消费进度到 <code>Broker</code>，并移除非指定消息队列。</li>
</ul>
<h4>MQClientInstance#persistAllConsumerOffset(...)</h4>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startScheduledTask</span><span class="params">()</span> </span>&#123;</div><div class="line"> <span class="number">2</span>:     <span class="comment">// 定时同步消费进度</span></div><div class="line"> <span class="number">3</span>:     <span class="keyword">this</span>.scheduledExecutorService.scheduleAtFixedRate(<span class="keyword">new</span> Runnable() &#123;</div><div class="line"> <span class="number">4</span>: </div><div class="line"> <span class="number">5</span>:         <span class="meta">@Override</span></div><div class="line"> <span class="number">6</span>:         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line"> <span class="number">7</span>:             <span class="keyword">try</span> &#123;</div><div class="line"> <span class="number">8</span>:                 MQClientInstance.<span class="keyword">this</span>.cleanOfflineBroker();</div><div class="line"> <span class="number">9</span>:                 MQClientInstance.<span class="keyword">this</span>.sendHeartbeatToAllBrokerWithLock();</div><div class="line"><span class="number">10</span>:             &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"><span class="number">11</span>:                 log.error(<span class="string">"ScheduledTask sendHeartbeatToAllBroker exception"</span>, e);</div><div class="line"><span class="number">12</span>:             &#125;</div><div class="line"><span class="number">13</span>:         &#125;</div><div class="line"><span class="number">14</span>:     &#125;, <span class="number">1000</span>, <span class="keyword">this</span>.clientConfig.getHeartbeatBrokerInterval(), TimeUnit.MILLISECONDS);</div><div class="line"><span class="number">15</span>: &#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>说明 ：定时进行持久化，默认周期：5000ms。</li>
<li><strong>重要说明 ：</strong>
<ul>
<li><strong>消费进度持久化不仅仅只有定时持久化，拉取消息、分配消息队列等等操作，都会进行消费进度持久化。</strong></li>
<li><strong>消费进度持久化不仅仅只有定时持久化，拉取消息、分配消息队列等等操作，都会进行消费进度持久化。</strong></li>
<li><strong>消费进度持久化不仅仅只有定时持久化，拉取消息、分配消息队列等等操作，都会进行消费进度持久化。</strong></li>
</ul>
</li>
</ul>
<h1>9、结尾</h1>
<p>😈可能是本系列最长的一篇文章，如有表达错误和不清晰，请多多见谅。<br>
感谢对本系列的阅读、收藏、点赞、分享，特别是翻到结尾。😜真的有丢丢长。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://www.yunai.me/images/common/wechat_mp.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;🙂🙂🙂关注**微信公众号：【芋艿的后端小屋】**有福利：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Rock
    
    </summary>
    
      <category term="RocketMQ" scheme="http://www.yunai.me/categories/RocketMQ/"/>
    
    
  </entry>
  
  <entry>
    <title>RocketMQ 源码分析 —— Message 拉取与消费（上）</title>
    <link href="http://www.yunai.me/RocketMQ/message-pull-and-consume-first/"/>
    <id>http://www.yunai.me/RocketMQ/message-pull-and-consume-first/</id>
    <published>2017-05-03T16:00:00.000Z</published>
    <updated>2017-07-27T16:55:46.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://www.yunai.me/images/common/wechat_mp.jpeg" alt=""></p>
<blockquote>
<p>🙂🙂🙂关注**微信公众号：【芋艿的后端小屋】**有福利：</p>
<ol>
<li>RocketMQ / MyCAT / Sharding-JDBC <strong>所有</strong>源码分析文章列表</li>
<li>RocketMQ / MyCAT / Sharding-JDBC <strong>中文注释源码 GitHub 地址</strong></li>
<li>您对于源码的疑问每条留言<strong>都</strong>将得到<strong>认真</strong>回复。<strong>甚至不知道如何读源码也可以请教噢</strong>。</li>
<li><strong>新的</strong>源码解析文章<strong>实时</strong>收到通知。<strong>每周更新一篇左右</strong>。</li>
<li><strong>认真的</strong>源码交流微信群。</li>
</ol>
</blockquote>
<hr>
<ul>
<li><a href="#">1、概述</a></li>
<li><a href="#">2、ConsumeQueue 结构</a></li>
<li><a href="#">3、ConsumeQueue 存储</a>
<ul>
<li><a href="#">ReputMessageService</a>
<ul>
<li><a href="#">DefaultMessageStore#doDispatch(...)</a></li>
<li><a href="#">ConsumeQueue#putMessagePositionInfoWrapper(...)</a></li>
</ul>
</li>
<li><a href="#">FlushConsumeQueueService</a></li>
</ul>
</li>
<li><a href="#">4、Broker 提供[拉取消息]接口</a>
<ul>
<li><a href="#">PullMessageRequestHeader</a></li>
<li><a href="#">PullMessageProcessor#processRequest(...)</a></li>
<li><a href="#">MessageStore#getMessage(...)</a></li>
<li><a href="#">DefaultMessageFilter#isMessageMatched(...)</a></li>
<li><a href="#">PullRequestHoldService</a></li>
<li><a href="#">PullMessageProcessor#executeRequestWhenWakeup(...)</a></li>
</ul>
</li>
<li><a href="#">5、Broker 提供[更新消费进度]接口</a>
<ul>
<li><a href="#">BrokerController#initialize(...)</a></li>
<li><a href="#">ConfigManager</a>
<ul>
<li><a href="#">MixAll#string2File(...)</a></li>
</ul>
</li>
<li><a href="#">ConsumerOffsetManager</a></li>
</ul>
</li>
<li><a href="#">6、Broker 提供[发回消息]接口</a>
<ul>
<li><a href="#">SendMessageProcessor#consumerSendMsgBack(...)</a></li>
</ul>
</li>
<li><a href="#">7、结尾</a></li>
</ul>
<h1>1、概述</h1>
<p>本章主要解析 <strong>消费</strong> 逻辑涉及到的源码。
因为篇幅较长，分成上下两篇：</p>
<ol>
<li>上篇：<code>Broker</code> 相关源码。</li>
<li>下篇：<code>Consumer</code> 相关源码。</li>
</ol>
<p><em>本文即是上篇。</em></p>
<hr>
<p>ok，先看第一张关于消费逻辑的图：</p>
<blockquote>
<p><img src="http://www.yunai.me/images/RocketMQ/2017_05_04/13.png" alt="消费逻辑图"></p>
</blockquote>
<p>再看消费逻辑精简的顺序图（实际情况会略有差别）：</p>
<blockquote>
<p><img src="http://www.yunai.me/images/RocketMQ/2017_05_04/04.png" alt="Consumer&amp;amp;Broker消费精简图.png"></p>
</blockquote>
<h1>2、ConsumeQueue 结构</h1>
<p><code>ConsumeQueue</code>、<code>MappedFileQueue</code>、<code>MappedFile</code> 的关系如下：</p>
<blockquote>
<p><img src="http://www.yunai.me/images/RocketMQ/2017_05_04/03.png" alt="ConsumeQueue、MappedFileQueue、MappedFile的关系">
<code>ConsumeQueue</code> : <code>MappedFileQueue</code> : <code>MappedFile</code> = 1 : 1 : N。</p>
</blockquote>
<p>反应到系统文件如下：</p>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">Yunai-MacdeMacBook-Pro-2:consumequeue yunai$ <span class="built_in">pwd</span></div><div class="line">/Users/yunai/store/consumequeue</div><div class="line">Yunai-MacdeMacBook-Pro-2:consumequeue yunai$ <span class="built_in">cd</span> TopicRead3/</div><div class="line">Yunai-MacdeMacBook-Pro-2:TopicRead3 yunai$ ls -ls</div><div class="line">total 0</div><div class="line">0 drwxr-xr-x  3 yunai  staff  102  4 27 21:52 0</div><div class="line">0 drwxr-xr-x  3 yunai  staff  102  4 27 21:55 1</div><div class="line">0 drwxr-xr-x  3 yunai  staff  102  4 27 21:55 2</div><div class="line">0 drwxr-xr-x  3 yunai  staff  102  4 27 21:55 3</div><div class="line">Yunai-MacdeMacBook-Pro-2:TopicRead3 yunai$ <span class="built_in">cd</span> 0/</div><div class="line">Yunai-MacdeMacBook-Pro-2:0 yunai$ ls -ls</div><div class="line">total 11720</div><div class="line">11720 -rw-r--r--  1 yunai  staff  6000000  4 27 21:55 00000000000000000000</div></pre></td></tr></table></figure></p>
<hr>
<p><code>ConsumeQueue</code>、<code>MappedFileQueue</code>、<code>MappedFile</code> 的定义如下：</p>
<ul>
<li><code>MappedFile</code> ：00000000000000000000等文件。</li>
<li><code>MappedFileQueue</code> ：<code>MappedFile</code> 所在的文件夹，对 <code>MappedFile</code> 进行封装成文件队列，对上层提供可无限使用的文件容量。
<ul>
<li>每个 <code>MappedFile</code> 统一文件大小。</li>
<li>文件命名方式：fileName[n] = fileName[n - 1] + mappedFileSize。在 <code>ConsumeQueue</code> 里默认为 6000000B。</li>
</ul>
</li>
<li><code>ConsumeQueue</code> ：针对 <code>MappedFileQueue</code> 的封装使用。
<ul>
<li><code>Store : ConsumeQueue = ConcurrentHashMap&lt;String/* topic */, ConcurrentHashMap&lt;Integer/* queueId */, ConsumeQueue&gt;&gt;</code>。</li>
</ul>
</li>
</ul>
<p><code>ConsumeQueue</code> 存储在 <code>MappedFile</code> 的内容<strong>必须</strong>大小是 20B( <code>ConsumeQueue.CQ_STORE_UNIT_SIZE</code> )，有两种内容类型：</p>
<ol>
<li><code>MESSAGE_POSITION_INFO</code> ：消息位置信息。</li>
<li><code>BLANK</code> : 文件前置空白占位。当历史 <code>Message</code> 被删除时，需要用 <code>BLANK</code>占位被删除的消息。</li>
</ol>
<p><code>MESSAGE_POSITION_INFO</code> 在 <code>ConsumeQueue</code> 存储结构：</p>
<table>
<thead>
<tr>
<th style="text-align:left">第几位</th>
<th style="text-align:left">字段</th>
<th style="text-align:left">说明</th>
<th style="text-align:left">数据类型</th>
<th style="text-align:left">字节数</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left">offset</td>
<td style="text-align:left">消息 <code>CommitLog</code> 存储位置</td>
<td style="text-align:left">Long</td>
<td style="text-align:left">8</td>
</tr>
<tr>
<td style="text-align:left">2</td>
<td style="text-align:left">size</td>
<td style="text-align:left">消息长度</td>
<td style="text-align:left">Int</td>
<td style="text-align:left">4</td>
</tr>
<tr>
<td style="text-align:left">3</td>
<td style="text-align:left">tagsCode</td>
<td style="text-align:left">消息tagsCode</td>
<td style="text-align:left">Long</td>
<td style="text-align:left">8</td>
</tr>
</tbody>
</table>
<p><code>BLANK</code> 在 <code>ConsumeQueue</code> 存储结构：</p>
<table>
<thead>
<tr>
<th style="text-align:left">第几位</th>
<th style="text-align:left">字段</th>
<th style="text-align:left">说明</th>
<th style="text-align:left">数据类型</th>
<th style="text-align:left">字节数</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left"></td>
<td style="text-align:left">0</td>
<td style="text-align:left">Long</td>
<td style="text-align:left">8</td>
</tr>
<tr>
<td style="text-align:left">2</td>
<td style="text-align:left"></td>
<td style="text-align:left">Integer.MAX_VALUE</td>
<td style="text-align:left">Int</td>
<td style="text-align:left">4</td>
</tr>
<tr>
<td style="text-align:left">3</td>
<td style="text-align:left"></td>
<td style="text-align:left">0</td>
<td style="text-align:left">Long</td>
<td style="text-align:left">8</td>
</tr>
</tbody>
</table>
<h1>3、ConsumeQueue 存储</h1>
<p><img src="http://www.yunai.me/images/RocketMQ/2017_05_04/02.png" alt="CommitLog重放ConsumeQueue图"></p>
<p>主要有两个组件：</p>
<ul>
<li><code>ReputMessageService</code> ：write ConsumeQueue。</li>
<li><code>FlushConsumeQueueService</code> ：flush ConsumeQueue。</li>
</ul>
<h2>ReputMessageService</h2>
<p><img src="http://www.yunai.me/images/RocketMQ/2017_05_04/12.png" alt="ReputMessageService顺序图"></p>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">  <span class="number">1</span>: <span class="class"><span class="keyword">class</span> <span class="title">ReputMessageService</span> <span class="keyword">extends</span> <span class="title">ServiceThread</span> </span>&#123;</div><div class="line">  <span class="number">2</span>: </div><div class="line">  <span class="number">3</span>:     <span class="comment">/**</span></div><div class="line">  4:      * 开始重放消息的CommitLog物理位置</div><div class="line">  5:      */</div><div class="line">  <span class="number">6</span>:     <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">long</span> reputFromOffset = <span class="number">0</span>;</div><div class="line">  <span class="number">7</span>: </div><div class="line">  <span class="number">8</span>:     <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getReputFromOffset</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="number">9</span>:         <span class="keyword">return</span> reputFromOffset;</div><div class="line"> <span class="number">10</span>:     &#125;</div><div class="line"> <span class="number">11</span>: </div><div class="line"> <span class="number">12</span>:     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setReputFromOffset</span><span class="params">(<span class="keyword">long</span> reputFromOffset)</span> </span>&#123;</div><div class="line"> <span class="number">13</span>:         <span class="keyword">this</span>.reputFromOffset = reputFromOffset;</div><div class="line"> <span class="number">14</span>:     &#125;</div><div class="line"> <span class="number">15</span>: </div><div class="line"> <span class="number">16</span>:     <span class="meta">@Override</span></div><div class="line"> <span class="number">17</span>:     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span> </span>&#123;</div><div class="line"> <span class="number">18</span>:         <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span> &amp;&amp; <span class="keyword">this</span>.isCommitLogAvailable(); i++) &#123;</div><div class="line"> <span class="number">19</span>:             <span class="keyword">try</span> &#123;</div><div class="line"> <span class="number">20</span>:                 Thread.sleep(<span class="number">100</span>);</div><div class="line"> <span class="number">21</span>:             &#125; <span class="keyword">catch</span> (InterruptedException ignored) &#123;</div><div class="line"> <span class="number">22</span>:             &#125;</div><div class="line"> <span class="number">23</span>:         &#125;</div><div class="line"> <span class="number">24</span>: </div><div class="line"> <span class="number">25</span>:         <span class="keyword">if</span> (<span class="keyword">this</span>.isCommitLogAvailable()) &#123;</div><div class="line"> <span class="number">26</span>:             log.warn(<span class="string">"shutdown ReputMessageService, but commitlog have not finish to be dispatched, CL: &#123;&#125; reputFromOffset: &#123;&#125;"</span>,</div><div class="line"> <span class="number">27</span>:                 DefaultMessageStore.<span class="keyword">this</span>.commitLog.getMaxOffset(), <span class="keyword">this</span>.reputFromOffset);</div><div class="line"> <span class="number">28</span>:         &#125;</div><div class="line"> <span class="number">29</span>: </div><div class="line"> <span class="number">30</span>:         <span class="keyword">super</span>.shutdown();</div><div class="line"> <span class="number">31</span>:     &#125;</div><div class="line"> <span class="number">32</span>: </div><div class="line"> <span class="number">33</span>:     <span class="comment">/**</span></div><div class="line"> 34:      * 剩余需要重放消息字节数</div><div class="line"> 35:      *</div><div class="line"> 36:      * <span class="doctag">@return</span> 字节数</div><div class="line"> 37:      */</div><div class="line"> <span class="number">38</span>:     <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">behind</span><span class="params">()</span> </span>&#123;</div><div class="line"> <span class="number">39</span>:         <span class="keyword">return</span> DefaultMessageStore.<span class="keyword">this</span>.commitLog.getMaxOffset() - <span class="keyword">this</span>.reputFromOffset;</div><div class="line"> <span class="number">40</span>:     &#125;</div><div class="line"> <span class="number">41</span>: </div><div class="line"> <span class="number">42</span>:     <span class="comment">/**</span></div><div class="line"> 43:      * 是否commitLog需要重放消息</div><div class="line"> 44:      *</div><div class="line"> 45:      * <span class="doctag">@return</span> 是否</div><div class="line"> 46:      */</div><div class="line"> <span class="number">47</span>:     <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isCommitLogAvailable</span><span class="params">()</span> </span>&#123;</div><div class="line"> <span class="number">48</span>:         <span class="keyword">return</span> <span class="keyword">this</span>.reputFromOffset &lt; DefaultMessageStore.<span class="keyword">this</span>.commitLog.getMaxOffset();</div><div class="line"> <span class="number">49</span>:     &#125;</div><div class="line"> <span class="number">50</span>: </div><div class="line"> <span class="number">51</span>:     <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doReput</span><span class="params">()</span> </span>&#123;</div><div class="line"> <span class="number">52</span>:         <span class="keyword">for</span> (<span class="keyword">boolean</span> doNext = <span class="keyword">true</span>; <span class="keyword">this</span>.isCommitLogAvailable() &amp;&amp; doNext; ) &#123;</div><div class="line"> <span class="number">53</span>: </div><div class="line"> <span class="number">54</span>:             <span class="comment">// TODO 疑问：这个是啥</span></div><div class="line"> <span class="number">55</span>:             <span class="keyword">if</span> (DefaultMessageStore.<span class="keyword">this</span>.getMessageStoreConfig().isDuplicationEnable() <span class="comment">//</span></div><div class="line"> <span class="number">56</span>:                 &amp;&amp; <span class="keyword">this</span>.reputFromOffset &gt;= DefaultMessageStore.<span class="keyword">this</span>.getConfirmOffset()) &#123;</div><div class="line"> <span class="number">57</span>:                 <span class="keyword">break</span>;</div><div class="line"> <span class="number">58</span>:             &#125;</div><div class="line"> <span class="number">59</span>: </div><div class="line"> <span class="number">60</span>:             <span class="comment">// 获取从reputFromOffset开始的commitLog对应的MappeFile对应的MappedByteBuffer</span></div><div class="line"> <span class="number">61</span>:             SelectMappedBufferResult result = DefaultMessageStore.<span class="keyword">this</span>.commitLog.getData(reputFromOffset);</div><div class="line"> <span class="number">62</span>:             <span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</div><div class="line"> <span class="number">63</span>:                 <span class="keyword">try</span> &#123;</div><div class="line"> <span class="number">64</span>:                     <span class="keyword">this</span>.reputFromOffset = result.getStartOffset();</div><div class="line"> <span class="number">65</span>: </div><div class="line"> <span class="number">66</span>:                     <span class="comment">// 遍历MappedByteBuffer</span></div><div class="line"> <span class="number">67</span>:                     <span class="keyword">for</span> (<span class="keyword">int</span> readSize = <span class="number">0</span>; readSize &lt; result.getSize() &amp;&amp; doNext; ) &#123;</div><div class="line"> <span class="number">68</span>:                         <span class="comment">// 生成重放消息重放调度请求</span></div><div class="line"> <span class="number">69</span>:                         DispatchRequest dispatchRequest = DefaultMessageStore.<span class="keyword">this</span>.commitLog.checkMessageAndReturnSize(result.getByteBuffer(), <span class="keyword">false</span>, <span class="keyword">false</span>);</div><div class="line"> <span class="number">70</span>:                         <span class="keyword">int</span> size = dispatchRequest.getMsgSize(); <span class="comment">// 消息长度</span></div><div class="line"> <span class="number">71</span>:                         <span class="comment">// 根据请求的结果处理</span></div><div class="line"> <span class="number">72</span>:                         <span class="keyword">if</span> (dispatchRequest.isSuccess()) &#123; <span class="comment">// 读取成功</span></div><div class="line"> <span class="number">73</span>:                             <span class="keyword">if</span> (size &gt; <span class="number">0</span>) &#123; <span class="comment">// 读取Message</span></div><div class="line"> <span class="number">74</span>:                                 DefaultMessageStore.<span class="keyword">this</span>.doDispatch(dispatchRequest);</div><div class="line"> <span class="number">75</span>:                                 <span class="comment">// 通知有新消息</span></div><div class="line"> <span class="number">76</span>:                                 <span class="keyword">if</span> (BrokerRole.SLAVE != DefaultMessageStore.<span class="keyword">this</span>.getMessageStoreConfig().getBrokerRole()</div><div class="line"> <span class="number">77</span>:                                     &amp;&amp; DefaultMessageStore.<span class="keyword">this</span>.brokerConfig.isLongPollingEnable()) &#123;</div><div class="line"> <span class="number">78</span>:                                     DefaultMessageStore.<span class="keyword">this</span>.messageArrivingListener.arriving(dispatchRequest.getTopic(),</div><div class="line"> <span class="number">79</span>:                                         dispatchRequest.getQueueId(), dispatchRequest.getConsumeQueueOffset() + <span class="number">1</span>,</div><div class="line"> <span class="number">80</span>:                                         dispatchRequest.getTagsCode());</div><div class="line"> <span class="number">81</span>:                                 &#125;</div><div class="line"> <span class="number">82</span>:                                 <span class="comment">// FIXED BUG By shijia</span></div><div class="line"> <span class="number">83</span>:                                 <span class="keyword">this</span>.reputFromOffset += size;</div><div class="line"> <span class="number">84</span>:                                 readSize += size;</div><div class="line"> <span class="number">85</span>:                                 <span class="comment">// 统计</span></div><div class="line"> <span class="number">86</span>:                                 <span class="keyword">if</span> (DefaultMessageStore.<span class="keyword">this</span>.getMessageStoreConfig().getBrokerRole() == BrokerRole.SLAVE) &#123;</div><div class="line"> <span class="number">87</span>:                                     DefaultMessageStore.<span class="keyword">this</span>.storeStatsService</div><div class="line"> <span class="number">88</span>:                                         .getSinglePutMessageTopicTimesTotal(dispatchRequest.getTopic()).incrementAndGet();</div><div class="line"> <span class="number">89</span>:                                     DefaultMessageStore.<span class="keyword">this</span>.storeStatsService</div><div class="line"> <span class="number">90</span>:                                         .getSinglePutMessageTopicSizeTotal(dispatchRequest.getTopic())</div><div class="line"> <span class="number">91</span>:                                         .addAndGet(dispatchRequest.getMsgSize());</div><div class="line"> <span class="number">92</span>:                                 &#125;</div><div class="line"> <span class="number">93</span>:                             &#125; <span class="keyword">else</span> <span class="keyword">if</span> (size == <span class="number">0</span>) &#123; <span class="comment">// 读取到MappedFile文件尾</span></div><div class="line"> <span class="number">94</span>:                                 <span class="keyword">this</span>.reputFromOffset = DefaultMessageStore.<span class="keyword">this</span>.commitLog.rollNextFile(<span class="keyword">this</span>.reputFromOffset);</div><div class="line"> <span class="number">95</span>:                                 readSize = result.getSize();</div><div class="line"> <span class="number">96</span>:                             &#125;</div><div class="line"> <span class="number">97</span>:                         &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!dispatchRequest.isSuccess()) &#123; <span class="comment">// 读取失败</span></div><div class="line"> <span class="number">98</span>:                             <span class="keyword">if</span> (size &gt; <span class="number">0</span>) &#123; <span class="comment">// 读取到Message却不是Message</span></div><div class="line"> <span class="number">99</span>:                                 log.error(<span class="string">"[BUG]read total count not equals msg total size. reputFromOffset=&#123;&#125;"</span>, reputFromOffset);</div><div class="line"><span class="number">100</span>:                                 <span class="keyword">this</span>.reputFromOffset += size;</div><div class="line"><span class="number">101</span>:                             &#125; <span class="keyword">else</span> &#123; <span class="comment">// 读取到Blank却不是Blank</span></div><div class="line"><span class="number">102</span>:                                 doNext = <span class="keyword">false</span>;</div><div class="line"><span class="number">103</span>:                                 <span class="keyword">if</span> (DefaultMessageStore.<span class="keyword">this</span>.brokerConfig.getBrokerId() == MixAll.MASTER_ID) &#123;</div><div class="line"><span class="number">104</span>:                                     log.error(<span class="string">"[BUG]the master dispatch message to consume queue error, COMMITLOG OFFSET: &#123;&#125;"</span>,</div><div class="line"><span class="number">105</span>:                                         <span class="keyword">this</span>.reputFromOffset);</div><div class="line"><span class="number">106</span>: </div><div class="line"><span class="number">107</span>:                                     <span class="keyword">this</span>.reputFromOffset += result.getSize() - readSize;</div><div class="line"><span class="number">108</span>:                                 &#125;</div><div class="line"><span class="number">109</span>:                             &#125;</div><div class="line"><span class="number">110</span>:                         &#125;</div><div class="line"><span class="number">111</span>:                     &#125;</div><div class="line"><span class="number">112</span>:                 &#125; <span class="keyword">finally</span> &#123;</div><div class="line"><span class="number">113</span>:                     result.release();</div><div class="line"><span class="number">114</span>:                 &#125;</div><div class="line"><span class="number">115</span>:             &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">116</span>:                 doNext = <span class="keyword">false</span>;</div><div class="line"><span class="number">117</span>:             &#125;</div><div class="line"><span class="number">118</span>:         &#125;</div><div class="line"><span class="number">119</span>:     &#125;</div><div class="line"><span class="number">120</span>: </div><div class="line"><span class="number">121</span>:     <span class="meta">@Override</span></div><div class="line"><span class="number">122</span>:     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="number">123</span>:         DefaultMessageStore.log.info(<span class="keyword">this</span>.getServiceName() + <span class="string">" service started"</span>);</div><div class="line"><span class="number">124</span>: </div><div class="line"><span class="number">125</span>:         <span class="keyword">while</span> (!<span class="keyword">this</span>.isStopped()) &#123;</div><div class="line"><span class="number">126</span>:             <span class="keyword">try</span> &#123;</div><div class="line"><span class="number">127</span>:                 Thread.sleep(<span class="number">1</span>);</div><div class="line"><span class="number">128</span>:                 <span class="keyword">this</span>.doReput();</div><div class="line"><span class="number">129</span>:             &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"><span class="number">130</span>:                 DefaultMessageStore.log.warn(<span class="keyword">this</span>.getServiceName() + <span class="string">" service has exception. "</span>, e);</div><div class="line"><span class="number">131</span>:             &#125;</div><div class="line"><span class="number">132</span>:         &#125;</div><div class="line"><span class="number">133</span>: </div><div class="line"><span class="number">134</span>:         DefaultMessageStore.log.info(<span class="keyword">this</span>.getServiceName() + <span class="string">" service end"</span>);</div><div class="line"><span class="number">135</span>:     &#125;</div><div class="line"><span class="number">136</span>: </div><div class="line"><span class="number">137</span>:     <span class="meta">@Override</span></div><div class="line"><span class="number">138</span>:     <span class="function"><span class="keyword">public</span> String <span class="title">getServiceName</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="number">139</span>:         <span class="keyword">return</span> ReputMessageService.class.getSimpleName();</div><div class="line"><span class="number">140</span>:     &#125;</div><div class="line"><span class="number">141</span>: </div><div class="line"><span class="number">142</span>: &#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>说明：重放消息线程服务。
<ul>
<li>该服务不断生成 消息位置信息 到 消费队列(ConsumeQueue)</li>
<li>该服务不断生成 消息索引 到 索引文件(IndexFile)</li>
</ul>
</li>
<li><img src="http://www.yunai.me/images/RocketMQ/2017_05_04/11.png" alt="ReputMessageService用例图">
<ul>
<li>第 61 行 ：获取 <code>reputFromOffset</code> 开始的 <code>CommitLog</code> 对应的 <code>MappedFile</code> 对应的 <code>MappedByteBuffer</code>。</li>
<li>第 67 行 ：遍历 <code>MappedByteBuffer</code>。</li>
<li>第 69 行 ：生成重放消息重放调度请求 (<code>DispatchRequest</code>) 。请求里主要包含一条消息 (<code>Message</code>) 或者 文件尾 (<code>BLANK</code>) 的基本信息。</li>
<li>第 72 至 96 行 ：请求是有效请求，进行逻辑处理。
<ul>
<li>第 75 至 81 行 ：当 <code>Broker</code> 是主节点 &amp;&amp; <code>Broker</code> 开启的是长轮询，通知消费队列有新的消息。<code>NotifyMessageArrivingListener</code> 会 调用 <code>PullRequestHoldService#notifyMessageArriving(...)</code> 方法，详细解析见：<a href="#pullrequestholdservice">PullRequestHoldService</a></li>
</ul>
</li>
<li>第 73 至 92 行 ：请求对应的是 <code>Message</code>，进行调度，生成 <code>ConsumeQueue</code> 和 <code>IndexFile</code> 对应的内容。详细解析见：</li>
<li>第 93 至 96 行 ：请求对应的是 <code>Blank</code>，即文件尾，跳转指向下一个 <code>MappedFile</code>。</li>
<li>第 97 至 110 行 ：请求是无效请求。出现该情况，基本是一个<strong>BUG</strong>。</li>
</ul>
</li>
<li>第 127 至 128 行 ：每 1ms 循环执行重放逻辑。</li>
<li>第 18 至 30 行 ：<code>shutdown</code>时，多次 <code>sleep(100)</code> 直到 <code>CommitLog</code> 回放到最新位置。恩，如果未回放完，会输出警告日志。</li>
</ul>
<h3>DefaultMessageStore#doDispatch(...)</h3>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="comment">/**</span></div><div class="line"> 2:  * 执行调度请求</div><div class="line"> 3:  * 1. 非事务消息 或 事务提交消息 建立 消息位置信息 到 ConsumeQueue</div><div class="line"> 4:  * 2. 建立 索引信息 到 IndexFile</div><div class="line"> 5:  *</div><div class="line"> 6:  * <span class="doctag">@param</span> req 调度请求</div><div class="line"> 7:  */</div><div class="line"> <span class="number">8</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doDispatch</span><span class="params">(DispatchRequest req)</span> </span>&#123;</div><div class="line"> <span class="number">9</span>:     <span class="comment">// 非事务消息 或 事务提交消息 建立 消息位置信息 到 ConsumeQueue</span></div><div class="line"><span class="number">10</span>:     <span class="keyword">final</span> <span class="keyword">int</span> tranType = MessageSysFlag.getTransactionValue(req.getSysFlag());</div><div class="line"><span class="number">11</span>:     <span class="keyword">switch</span> (tranType) &#123;</div><div class="line"><span class="number">12</span>:         <span class="keyword">case</span> MessageSysFlag.TRANSACTION_NOT_TYPE:</div><div class="line"><span class="number">13</span>:         <span class="keyword">case</span> MessageSysFlag.TRANSACTION_COMMIT_TYPE:</div><div class="line"><span class="number">14</span>:             DefaultMessageStore.<span class="keyword">this</span>.putMessagePositionInfo(req.getTopic(), req.getQueueId(), req.getCommitLogOffset(), req.getMsgSize(),</div><div class="line"><span class="number">15</span>:                 req.getTagsCode(), req.getStoreTimestamp(), req.getConsumeQueueOffset());</div><div class="line"><span class="number">16</span>:             <span class="keyword">break</span>;</div><div class="line"><span class="number">17</span>:         <span class="keyword">case</span> MessageSysFlag.TRANSACTION_PREPARED_TYPE:</div><div class="line"><span class="number">18</span>:         <span class="keyword">case</span> MessageSysFlag.TRANSACTION_ROLLBACK_TYPE:</div><div class="line"><span class="number">19</span>:             <span class="keyword">break</span>;</div><div class="line"><span class="number">20</span>:     &#125;</div><div class="line"><span class="number">21</span>:     <span class="comment">// 建立 索引信息 到 IndexFile</span></div><div class="line"><span class="number">22</span>:     <span class="keyword">if</span> (DefaultMessageStore.<span class="keyword">this</span>.getMessageStoreConfig().isMessageIndexEnable()) &#123;</div><div class="line"><span class="number">23</span>:         DefaultMessageStore.<span class="keyword">this</span>.indexService.buildIndex(req);</div><div class="line"><span class="number">24</span>:     &#125;</div><div class="line"><span class="number">25</span>: &#125;</div><div class="line"><span class="number">26</span>: </div><div class="line"><span class="number">27</span>: <span class="comment">/**</span></div><div class="line">28:  * 建立 消息位置信息 到 ConsumeQueue</div><div class="line">29:  *</div><div class="line">30:  * <span class="doctag">@param</span> topic 主题</div><div class="line">31:  * <span class="doctag">@param</span> queueId 队列编号</div><div class="line">32:  * <span class="doctag">@param</span> offset commitLog存储位置</div><div class="line">33:  * <span class="doctag">@param</span> size 消息长度</div><div class="line">34:  * <span class="doctag">@param</span> tagsCode 消息tagsCode</div><div class="line">35:  * <span class="doctag">@param</span> storeTimestamp 存储时间</div><div class="line">36:  * <span class="doctag">@param</span> logicOffset 队列位置</div><div class="line">37:  */</div><div class="line"><span class="number">38</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putMessagePositionInfo</span><span class="params">(String topic, <span class="keyword">int</span> queueId, <span class="keyword">long</span> offset, <span class="keyword">int</span> size, <span class="keyword">long</span> tagsCode, <span class="keyword">long</span> storeTimestamp,</span></span></div><div class="line"><span class="number">39</span>:     <span class="keyword">long</span> logicOffset) &#123;</div><div class="line"><span class="number">40</span>:     ConsumeQueue cq = <span class="keyword">this</span>.findConsumeQueue(topic, queueId);</div><div class="line"><span class="number">41</span>:     cq.putMessagePositionInfoWrapper(offset, size, tagsCode, storeTimestamp, logicOffset);</div><div class="line"><span class="number">42</span>: &#125;</div></pre></td></tr></table></figure></p>
<h3>ConsumeQueue#putMessagePositionInfoWrapper(...)</h3>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">  <span class="number">1</span>: <span class="comment">/**</span></div><div class="line">  2:  * 添加位置信息封装</div><div class="line">  3:  *</div><div class="line">  4:  * <span class="doctag">@param</span> offset commitLog存储位置</div><div class="line">  5:  * <span class="doctag">@param</span> size 消息长度</div><div class="line">  6:  * <span class="doctag">@param</span> tagsCode 消息tagsCode</div><div class="line">  7:  * <span class="doctag">@param</span> storeTimestamp 消息存储时间</div><div class="line">  8:  * <span class="doctag">@param</span> logicOffset 队列位置</div><div class="line">  9:  */</div><div class="line"> <span class="number">10</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putMessagePositionInfoWrapper</span><span class="params">(<span class="keyword">long</span> offset, <span class="keyword">int</span> size, <span class="keyword">long</span> tagsCode, <span class="keyword">long</span> storeTimestamp,</span></span></div><div class="line"> <span class="number">11</span>:     <span class="keyword">long</span> logicOffset) &#123;</div><div class="line"> <span class="number">12</span>:     <span class="keyword">final</span> <span class="keyword">int</span> maxRetries = <span class="number">30</span>;</div><div class="line"> <span class="number">13</span>:     <span class="keyword">boolean</span> canWrite = <span class="keyword">this</span>.defaultMessageStore.getRunningFlags().isWriteable();</div><div class="line"> <span class="number">14</span>:     <span class="comment">// 多次循环写，直到成功</span></div><div class="line"> <span class="number">15</span>:     <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxRetries &amp;&amp; canWrite; i++) &#123;</div><div class="line"> <span class="number">16</span>:         <span class="comment">// 调用添加位置信息</span></div><div class="line"> <span class="number">17</span>:         <span class="keyword">boolean</span> result = <span class="keyword">this</span>.putMessagePositionInfo(offset, size, tagsCode, logicOffset);</div><div class="line"> <span class="number">18</span>:         <span class="keyword">if</span> (result) &#123;</div><div class="line"> <span class="number">19</span>:             <span class="comment">// 添加成功，使用消息存储时间 作为 存储check point。</span></div><div class="line"> <span class="number">20</span>:             <span class="keyword">this</span>.defaultMessageStore.getStoreCheckpoint().setLogicsMsgTimestamp(storeTimestamp);</div><div class="line"> <span class="number">21</span>:             <span class="keyword">return</span>;</div><div class="line"> <span class="number">22</span>:         &#125; <span class="keyword">else</span> &#123;</div><div class="line"> <span class="number">23</span>:             <span class="comment">// <span class="doctag">XXX:</span> warn and notify me</span></div><div class="line"> <span class="number">24</span>:             log.warn(<span class="string">"[BUG]put commit log position info to "</span> + topic + <span class="string">":"</span> + queueId + <span class="string">" "</span> + offset</div><div class="line"> <span class="number">25</span>:                 + <span class="string">" failed, retry "</span> + i + <span class="string">" times"</span>);</div><div class="line"> <span class="number">26</span>: </div><div class="line"> <span class="number">27</span>:             <span class="keyword">try</span> &#123;</div><div class="line"> <span class="number">28</span>:                 Thread.sleep(<span class="number">1000</span>);</div><div class="line"> <span class="number">29</span>:             &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line"> <span class="number">30</span>:                 log.warn(<span class="string">""</span>, e);</div><div class="line"> <span class="number">31</span>:             &#125;</div><div class="line"> <span class="number">32</span>:         &#125;</div><div class="line"> <span class="number">33</span>:     &#125;</div><div class="line"> <span class="number">34</span>: </div><div class="line"> <span class="number">35</span>:     <span class="comment">// <span class="doctag">XXX:</span> warn and notify me 设置异常不可写入</span></div><div class="line"> <span class="number">36</span>:     log.error(<span class="string">"[BUG]consume queue can not write, &#123;&#125; &#123;&#125;"</span>, <span class="keyword">this</span>.topic, <span class="keyword">this</span>.queueId);</div><div class="line"> <span class="number">37</span>:     <span class="keyword">this</span>.defaultMessageStore.getRunningFlags().makeLogicsQueueError();</div><div class="line"> <span class="number">38</span>: &#125;</div><div class="line"> <span class="number">39</span>: </div><div class="line"> <span class="number">40</span>: <span class="comment">/**</span></div><div class="line"> 41:  * 添加位置信息，并返回添加是否成功</div><div class="line"> 42:  *</div><div class="line"> 43:  * <span class="doctag">@param</span> offset commitLog存储位置</div><div class="line"> 44:  * <span class="doctag">@param</span> size 消息长度</div><div class="line"> 45:  * <span class="doctag">@param</span> tagsCode 消息tagsCode</div><div class="line"> 46:  * <span class="doctag">@param</span> cqOffset 队列位置</div><div class="line"> 47:  * <span class="doctag">@return</span> 是否成功</div><div class="line"> 48:  */</div><div class="line"> <span class="number">49</span>: <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">putMessagePositionInfo</span><span class="params">(<span class="keyword">final</span> <span class="keyword">long</span> offset, <span class="keyword">final</span> <span class="keyword">int</span> size, <span class="keyword">final</span> <span class="keyword">long</span> tagsCode,</span></span></div><div class="line"> <span class="number">50</span>:     <span class="keyword">final</span> <span class="keyword">long</span> cqOffset) &#123;</div><div class="line"> <span class="number">51</span>:     <span class="comment">// 如果已经重放过，直接返回成功</span></div><div class="line"> <span class="number">52</span>:     <span class="keyword">if</span> (offset &lt;= <span class="keyword">this</span>.maxPhysicOffset) &#123;</div><div class="line"> <span class="number">53</span>:         <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line"> <span class="number">54</span>:     &#125;</div><div class="line"> <span class="number">55</span>:     <span class="comment">// 写入位置信息到byteBuffer</span></div><div class="line"> <span class="number">56</span>:     <span class="keyword">this</span>.byteBufferIndex.flip();</div><div class="line"> <span class="number">57</span>:     <span class="keyword">this</span>.byteBufferIndex.limit(CQ_STORE_UNIT_SIZE);</div><div class="line"> <span class="number">58</span>:     <span class="keyword">this</span>.byteBufferIndex.putLong(offset);</div><div class="line"> <span class="number">59</span>:     <span class="keyword">this</span>.byteBufferIndex.putInt(size);</div><div class="line"> <span class="number">60</span>:     <span class="keyword">this</span>.byteBufferIndex.putLong(tagsCode);</div><div class="line"> <span class="number">61</span>:     <span class="comment">// 计算consumeQueue存储位置，并获得对应的MappedFile</span></div><div class="line"> <span class="number">62</span>:     <span class="keyword">final</span> <span class="keyword">long</span> expectLogicOffset = cqOffset * CQ_STORE_UNIT_SIZE;</div><div class="line"> <span class="number">63</span>:     MappedFile mappedFile = <span class="keyword">this</span>.mappedFileQueue.getLastMappedFile(expectLogicOffset);</div><div class="line"> <span class="number">64</span>:     <span class="keyword">if</span> (mappedFile != <span class="keyword">null</span>) &#123;</div><div class="line"> <span class="number">65</span>:         <span class="comment">// 当是ConsumeQueue第一个MappedFile &amp;&amp; 队列位置非第一个 &amp;&amp; MappedFile未写入内容，则填充前置空白占位</span></div><div class="line"> <span class="number">66</span>:         <span class="keyword">if</span> (mappedFile.isFirstCreateInQueue() &amp;&amp; cqOffset != <span class="number">0</span> &amp;&amp; mappedFile.getWrotePosition() == <span class="number">0</span>) &#123; <span class="comment">// TODO 疑问：为啥这个操作。目前能够想象到的是，一些老的消息很久没发送，突然发送，这个时候刚好满足。</span></div><div class="line"> <span class="number">67</span>:             <span class="keyword">this</span>.minLogicOffset = expectLogicOffset;</div><div class="line"> <span class="number">68</span>:             <span class="keyword">this</span>.mappedFileQueue.setFlushedWhere(expectLogicOffset);</div><div class="line"> <span class="number">69</span>:             <span class="keyword">this</span>.mappedFileQueue.setCommittedWhere(expectLogicOffset);</div><div class="line"> <span class="number">70</span>:             <span class="keyword">this</span>.fillPreBlank(mappedFile, expectLogicOffset);</div><div class="line"> <span class="number">71</span>:             log.info(<span class="string">"fill pre blank space "</span> + mappedFile.getFileName() + <span class="string">" "</span> + expectLogicOffset + <span class="string">" "</span></div><div class="line"> <span class="number">72</span>:                 + mappedFile.getWrotePosition());</div><div class="line"> <span class="number">73</span>:         &#125;</div><div class="line"> <span class="number">74</span>:         <span class="comment">// 校验consumeQueue存储位置是否合法。TODO 如果不合法，继续写入会不会有问题？</span></div><div class="line"> <span class="number">75</span>:         <span class="keyword">if</span> (cqOffset != <span class="number">0</span>) &#123;</div><div class="line"> <span class="number">76</span>:             <span class="keyword">long</span> currentLogicOffset = mappedFile.getWrotePosition() + mappedFile.getFileFromOffset();</div><div class="line"> <span class="number">77</span>:             <span class="keyword">if</span> (expectLogicOffset != currentLogicOffset) &#123;</div><div class="line"> <span class="number">78</span>:                 LOG_ERROR.warn(</div><div class="line"> <span class="number">79</span>:                     <span class="string">"[BUG]logic queue order maybe wrong, expectLogicOffset: &#123;&#125; currentLogicOffset: &#123;&#125; Topic: &#123;&#125; QID: &#123;&#125; Diff: &#123;&#125;"</span>,</div><div class="line"> <span class="number">80</span>:                     expectLogicOffset,</div><div class="line"> <span class="number">81</span>:                     currentLogicOffset,</div><div class="line"> <span class="number">82</span>:                     <span class="keyword">this</span>.topic,</div><div class="line"> <span class="number">83</span>:                     <span class="keyword">this</span>.queueId,</div><div class="line"> <span class="number">84</span>:                     expectLogicOffset - currentLogicOffset</div><div class="line"> <span class="number">85</span>:                 );</div><div class="line"> <span class="number">86</span>:             &#125;</div><div class="line"> <span class="number">87</span>:         &#125;</div><div class="line"> <span class="number">88</span>:         <span class="comment">// 设置commitLog重放消息到ConsumeQueue位置。</span></div><div class="line"> <span class="number">89</span>:         <span class="keyword">this</span>.maxPhysicOffset = offset;</div><div class="line"> <span class="number">90</span>:         <span class="comment">// 插入mappedFile</span></div><div class="line"> <span class="number">91</span>:         <span class="keyword">return</span> mappedFile.appendMessage(<span class="keyword">this</span>.byteBufferIndex.array());</div><div class="line"> <span class="number">92</span>:     &#125;</div><div class="line"> <span class="number">93</span>:     <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line"> <span class="number">94</span>: &#125;</div><div class="line"> <span class="number">95</span>: </div><div class="line"> <span class="number">96</span>: <span class="comment">/**</span></div><div class="line"> 97:  * 填充前置空白占位</div><div class="line"> 98:  *</div><div class="line"> 99:  * <span class="doctag">@param</span> mappedFile MappedFile</div><div class="line">100:  * <span class="doctag">@param</span> untilWhere consumeQueue存储位置</div><div class="line">101:  */</div><div class="line"><span class="number">102</span>: <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fillPreBlank</span><span class="params">(<span class="keyword">final</span> MappedFile mappedFile, <span class="keyword">final</span> <span class="keyword">long</span> untilWhere)</span> </span>&#123;</div><div class="line"><span class="number">103</span>:     <span class="comment">// 写入前置空白占位到byteBuffer</span></div><div class="line"><span class="number">104</span>:     ByteBuffer byteBuffer = ByteBuffer.allocate(CQ_STORE_UNIT_SIZE);</div><div class="line"><span class="number">105</span>:     byteBuffer.putLong(<span class="number">0L</span>);</div><div class="line"><span class="number">106</span>:     byteBuffer.putInt(Integer.MAX_VALUE);</div><div class="line"><span class="number">107</span>:     byteBuffer.putLong(<span class="number">0L</span>);</div><div class="line"><span class="number">108</span>:     <span class="comment">// 循环填空</span></div><div class="line"><span class="number">109</span>:     <span class="keyword">int</span> until = (<span class="keyword">int</span>) (untilWhere % <span class="keyword">this</span>.mappedFileQueue.getMappedFileSize());</div><div class="line"><span class="number">110</span>:     <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; until; i += CQ_STORE_UNIT_SIZE) &#123;</div><div class="line"><span class="number">111</span>:         mappedFile.appendMessage(byteBuffer.array());</div><div class="line"><span class="number">112</span>:     &#125;</div><div class="line"><span class="number">113</span>: &#125;</div></pre></td></tr></table></figure></p>
<ul>
<li><code>#putMessagePositionInfoWrapper(...)</code> 说明 ：添加位置信息到 <code>ConsumeQueue</code> 的封装，实际需要调用 <code>#putMessagePositionInfo(...)</code> 方法。
<ul>
<li>第 13 行 ：判断 <code>ConsumeQueue</code> 是否允许写入。当发生Bug时，不允许写入。</li>
<li>第 17 行 ：调用 <code>#putMessagePositionInfo(...)</code> 方法，添加位置信息。</li>
<li>第 18 至 21 行 ：添加成功，使用消息存储时间 作为 存储检查点。<code>StoreCheckpoint</code> 的详细解析见：<a href="http://www.yunai.me/RocketMQ/store-init-and-shutdown/">Store初始化与关闭</a>。</li>
<li>第 22 至 32 行 ：添加失败，目前基本可以认为是BUG。</li>
<li>第 35 至 37 行 ：写入失败时，标记 <code>ConsumeQueue</code> 写入异常，不允许继续写入。</li>
</ul>
</li>
<li><code>#putMessagePositionInfo(...)</code> 说明 ：添加位置信息到 <code>ConsumeQueue</code>，并返回添加是否成功。
<ul>
<li>第 51 至 54 行 ：如果 <code>offset</code>(存储位置) 小于等于  <code>maxPhysicOffset</code>(<code>CommitLog</code> 消息重放到 <code>ConsumeQueue</code> 最大的 <code>CommitLog</code> 存储位置)，表示已经重放过，此时，不再重复写入，直接返回写入成功。</li>
<li>第 55 至 60 行 ：写 位置信息到byteBuffer。</li>
<li>第 62 至 63 行 ：计算 <code>ConsumeQueue</code>存储位置，并获得对应的MappedFile。</li>
<li>第 65 至 73 行 ：当 <code>MappedFile</code> 是 <code>ConsumeQueue</code> 当前第一个文件 &amp;&amp; <code>MappedFile</code> 未写入内容 &amp;&amp; 重放消息队列位置大于0，则需要进行 <code>MappedFile</code> 填充前置  <code>BLANK</code>。
<ul>
<li><em>这块比较有疑问，什么场景下会需要。猜测产生的原因：一个 <code>Topic</code> 长期无消息产生，突然N天后进行发送，<code>Topic</code> 对应的历史消息以及和消费队列数据已经被清理，新生成的<code>MappedFile</code>需要前置占位。</em></li>
</ul>
</li>
<li>第 74 至 87 行 ：校验 <code>ConsumeQueue</code> 存储位置是否合法，不合法则输出日志。
<ul>
<li><em>这块比较有疑问，如果计算出来的存储位置不合法，不返回添加失败，继续进行添加位置信息，会不会有问题？？？</em></li>
</ul>
</li>
<li>第 89 行 ：设置 <code>CommitLog</code> 重放消息到 <code>ConsumeQueue</code> 的最大位置。</li>
<li>第 91 行 ：插入消息位置到 <code>MappedFile</code>。</li>
</ul>
</li>
</ul>
<h2>FlushConsumeQueueService</h2>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="class"><span class="keyword">class</span> <span class="title">FlushConsumeQueueService</span> <span class="keyword">extends</span> <span class="title">ServiceThread</span> </span>&#123;</div><div class="line"> <span class="number">2</span>:     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RETRY_TIMES_OVER = <span class="number">3</span>;</div><div class="line"> <span class="number">3</span>:     <span class="comment">/**</span></div><div class="line"> 4:      * 最后flush时间戳</div><div class="line"> 5:      */</div><div class="line"> <span class="number">6</span>:     <span class="keyword">private</span> <span class="keyword">long</span> lastFlushTimestamp = <span class="number">0</span>;</div><div class="line"> <span class="number">7</span>: </div><div class="line"> <span class="number">8</span>:     <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doFlush</span><span class="params">(<span class="keyword">int</span> retryTimes)</span> </span>&#123;</div><div class="line"> <span class="number">9</span>:         <span class="keyword">int</span> flushConsumeQueueLeastPages = DefaultMessageStore.<span class="keyword">this</span>.getMessageStoreConfig().getFlushConsumeQueueLeastPages();</div><div class="line"><span class="number">10</span>: </div><div class="line"><span class="number">11</span>:         <span class="comment">// retryTimes == RETRY_TIMES_OVER时，进行强制flush。主要用于shutdown时。</span></div><div class="line"><span class="number">12</span>:         <span class="keyword">if</span> (retryTimes == RETRY_TIMES_OVER) &#123;</div><div class="line"><span class="number">13</span>:             flushConsumeQueueLeastPages = <span class="number">0</span>;</div><div class="line"><span class="number">14</span>:         &#125;</div><div class="line"><span class="number">15</span>:         <span class="comment">// 当时间满足flushConsumeQueueThoroughInterval时，即使写入的数量不足flushConsumeQueueLeastPages，也进行flush</span></div><div class="line"><span class="number">16</span>:         <span class="keyword">long</span> logicsMsgTimestamp = <span class="number">0</span>;</div><div class="line"><span class="number">17</span>:         <span class="keyword">int</span> flushConsumeQueueThoroughInterval = DefaultMessageStore.<span class="keyword">this</span>.getMessageStoreConfig().getFlushConsumeQueueThoroughInterval();</div><div class="line"><span class="number">18</span>:         <span class="keyword">long</span> currentTimeMillis = System.currentTimeMillis();</div><div class="line"><span class="number">19</span>:         <span class="keyword">if</span> (currentTimeMillis &gt;= (<span class="keyword">this</span>.lastFlushTimestamp + flushConsumeQueueThoroughInterval)) &#123;</div><div class="line"><span class="number">20</span>:             <span class="keyword">this</span>.lastFlushTimestamp = currentTimeMillis;</div><div class="line"><span class="number">21</span>:             flushConsumeQueueLeastPages = <span class="number">0</span>;</div><div class="line"><span class="number">22</span>:             logicsMsgTimestamp = DefaultMessageStore.<span class="keyword">this</span>.getStoreCheckpoint().getLogicsMsgTimestamp();</div><div class="line"><span class="number">23</span>:         &#125;</div><div class="line"><span class="number">24</span>:         <span class="comment">// flush消费队列</span></div><div class="line"><span class="number">25</span>:         ConcurrentHashMap&lt;String, ConcurrentHashMap&lt;Integer, ConsumeQueue&gt;&gt; tables = DefaultMessageStore.<span class="keyword">this</span>.consumeQueueTable;</div><div class="line"><span class="number">26</span>:         <span class="keyword">for</span> (ConcurrentHashMap&lt;Integer, ConsumeQueue&gt; maps : tables.values()) &#123;</div><div class="line"><span class="number">27</span>:             <span class="keyword">for</span> (ConsumeQueue cq : maps.values()) &#123;</div><div class="line"><span class="number">28</span>:                 <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</div><div class="line"><span class="number">29</span>:                 <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; retryTimes &amp;&amp; !result; i++) &#123;</div><div class="line"><span class="number">30</span>:                     result = cq.flush(flushConsumeQueueLeastPages);</div><div class="line"><span class="number">31</span>:                 &#125;</div><div class="line"><span class="number">32</span>:             &#125;</div><div class="line"><span class="number">33</span>:         &#125;</div><div class="line"><span class="number">34</span>:         <span class="comment">// flush 存储 check point</span></div><div class="line"><span class="number">35</span>:         <span class="keyword">if</span> (<span class="number">0</span> == flushConsumeQueueLeastPages) &#123;</div><div class="line"><span class="number">36</span>:             <span class="keyword">if</span> (logicsMsgTimestamp &gt; <span class="number">0</span>) &#123;</div><div class="line"><span class="number">37</span>:                 DefaultMessageStore.<span class="keyword">this</span>.getStoreCheckpoint().setLogicsMsgTimestamp(logicsMsgTimestamp);</div><div class="line"><span class="number">38</span>:             &#125;</div><div class="line"><span class="number">39</span>:             DefaultMessageStore.<span class="keyword">this</span>.getStoreCheckpoint().flush();</div><div class="line"><span class="number">40</span>:         &#125;</div><div class="line"><span class="number">41</span>:     &#125;</div><div class="line"><span class="number">42</span>: </div><div class="line"><span class="number">43</span>:     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="number">44</span>:         DefaultMessageStore.log.info(<span class="keyword">this</span>.getServiceName() + <span class="string">" service started"</span>);</div><div class="line"><span class="number">45</span>: </div><div class="line"><span class="number">46</span>:         <span class="keyword">while</span> (!<span class="keyword">this</span>.isStopped()) &#123;</div><div class="line"><span class="number">47</span>:             <span class="keyword">try</span> &#123;</div><div class="line"><span class="number">48</span>:                 <span class="keyword">int</span> interval = DefaultMessageStore.<span class="keyword">this</span>.getMessageStoreConfig().getFlushIntervalConsumeQueue();</div><div class="line"><span class="number">49</span>:                 <span class="keyword">this</span>.waitForRunning(interval);</div><div class="line"><span class="number">50</span>:                 <span class="keyword">this</span>.doFlush(<span class="number">1</span>);</div><div class="line"><span class="number">51</span>:             &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"><span class="number">52</span>:                 DefaultMessageStore.log.warn(<span class="keyword">this</span>.getServiceName() + <span class="string">" service has exception. "</span>, e);</div><div class="line"><span class="number">53</span>:             &#125;</div><div class="line"><span class="number">54</span>:         &#125;</div><div class="line"><span class="number">55</span>: </div><div class="line"><span class="number">56</span>:         <span class="keyword">this</span>.doFlush(RETRY_TIMES_OVER);</div><div class="line"><span class="number">57</span>: </div><div class="line"><span class="number">58</span>:         DefaultMessageStore.log.info(<span class="keyword">this</span>.getServiceName() + <span class="string">" service end"</span>);</div><div class="line"><span class="number">59</span>:     &#125;</div><div class="line"><span class="number">60</span>: </div><div class="line"><span class="number">61</span>:     <span class="meta">@Override</span></div><div class="line"><span class="number">62</span>:     <span class="function"><span class="keyword">public</span> String <span class="title">getServiceName</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="number">63</span>:         <span class="keyword">return</span> FlushConsumeQueueService.class.getSimpleName();</div><div class="line"><span class="number">64</span>:     &#125;</div><div class="line"><span class="number">65</span>: </div><div class="line"><span class="number">66</span>:     <span class="meta">@Override</span></div><div class="line"><span class="number">67</span>:     <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getJointime</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="number">68</span>:         <span class="keyword">return</span> <span class="number">1000</span> * <span class="number">60</span>;</div><div class="line"><span class="number">69</span>:     &#125;</div><div class="line"><span class="number">70</span>: &#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>说明 ：flush <code>ConsumeQueue</code>(消费队列) 线程服务。</li>
<li>第 11 至 14 行 ：当 <code>retryTimes == RETRY_TIMES_OVER</code> 时，进行强制flush。用于 <code>shutdown</code> 时。</li>
<li>第 15 至 23 行 ：每 flushConsumeQueueThoroughInterval 周期，执行一次 flush 。因为不是每次循环到都能满足 flushConsumeQueueLeastPages 大小，因此，需要一定周期进行一次强制 flush 。当然，不能每次循环都去执行强制 flush，这样性能较差。</li>
<li>第 24 至 33 行 ：flush <code>ConsumeQueue</code>(消费队列)。
<ul>
<li>flush 逻辑：<a href="http://www.yunai.me/RocketMQ/message-store/#MappedFile-%E8%90%BD%E7%9B%98">MappedFile#落盘</a>。</li>
</ul>
</li>
<li>第 34 至 40 行 ：flush <code>StoreCheckpoint</code>。<code>StoreCheckpoint</code> 的详细解析见：<a href="http://www.yunai.me/RocketMQ/store-init-and-shutdown/">Store初始化与关闭</a>。</li>
<li>第 43 至 59 行 ：每 1000ms 执行一次 <code>flush</code>。如果 wakeup() 时，则会立即进行一次 <code>flush</code>。目前，暂时不存在 wakeup() 的调用。</li>
</ul>
<h1>4、Broker 提供[拉取消息]接口</h1>
<h2>PullMessageRequestHeader</h2>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PullMessageRequestHeader</span> <span class="keyword">implements</span> <span class="title">CommandCustomHeader</span> </span>&#123;</div><div class="line"> <span class="number">2</span>:     <span class="comment">/**</span></div><div class="line"> 3:      * 消费者分组</div><div class="line"> 4:      */</div><div class="line"> <span class="number">5</span>:     <span class="meta">@CFNotNull</span></div><div class="line"> <span class="number">6</span>:     <span class="keyword">private</span> String consumerGroup;</div><div class="line"> <span class="number">7</span>:     <span class="comment">/**</span></div><div class="line"> 8:      * Topic</div><div class="line"> 9:      */</div><div class="line"><span class="number">10</span>:     <span class="meta">@CFNotNull</span></div><div class="line"><span class="number">11</span>:     <span class="keyword">private</span> String topic;</div><div class="line"><span class="number">12</span>:     <span class="comment">/**</span></div><div class="line">13:      * 队列编号</div><div class="line">14:      */</div><div class="line"><span class="number">15</span>:     <span class="meta">@CFNotNull</span></div><div class="line"><span class="number">16</span>:     <span class="keyword">private</span> Integer queueId;</div><div class="line"><span class="number">17</span>:     <span class="comment">/**</span></div><div class="line">18:      * 队列开始位置</div><div class="line">19:      */</div><div class="line"><span class="number">20</span>:     <span class="meta">@CFNotNull</span></div><div class="line"><span class="number">21</span>:     <span class="keyword">private</span> Long queueOffset;</div><div class="line"><span class="number">22</span>:     <span class="comment">/**</span></div><div class="line">23:      * 消息数量</div><div class="line">24:      */</div><div class="line"><span class="number">25</span>:     <span class="meta">@CFNotNull</span></div><div class="line"><span class="number">26</span>:     <span class="keyword">private</span> Integer maxMsgNums;</div><div class="line"><span class="number">27</span>:     <span class="comment">/**</span></div><div class="line">28:      * 系统标识</div><div class="line">29:      */</div><div class="line"><span class="number">30</span>:     <span class="meta">@CFNotNull</span></div><div class="line"><span class="number">31</span>:     <span class="keyword">private</span> Integer sysFlag;</div><div class="line"><span class="number">32</span>:     <span class="comment">/**</span></div><div class="line">33:      * 提交消费进度位置</div><div class="line">34:      */</div><div class="line"><span class="number">35</span>:     <span class="meta">@CFNotNull</span></div><div class="line"><span class="number">36</span>:     <span class="keyword">private</span> Long commitOffset;</div><div class="line"><span class="number">37</span>:     <span class="comment">/**</span></div><div class="line">38:      * 挂起超时时间</div><div class="line">39:      */</div><div class="line"><span class="number">40</span>:     <span class="meta">@CFNotNull</span></div><div class="line"><span class="number">41</span>:     <span class="keyword">private</span> Long suspendTimeoutMillis;</div><div class="line"><span class="number">42</span>:     <span class="comment">/**</span></div><div class="line">43:      * 订阅表达式</div><div class="line">44:      */</div><div class="line"><span class="number">45</span>:     <span class="meta">@CFNullable</span></div><div class="line"><span class="number">46</span>:     <span class="keyword">private</span> String subscription;</div><div class="line"><span class="number">47</span>:     <span class="comment">/**</span></div><div class="line">48:      * 订阅版本号</div><div class="line">49:      */</div><div class="line"><span class="number">50</span>:     <span class="meta">@CFNotNull</span></div><div class="line"><span class="number">51</span>:     <span class="keyword">private</span> Long subVersion;</div><div class="line"><span class="number">52</span>: &#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>说明：拉取消息请求Header</li>
<li>topic +  queueId + queueOffset + maxMsgNums</li>
<li>sysFlag ：系统标识。
<ul>
<li>第 0 位 <code>FLAG_COMMIT_OFFSET</code> ：标记请求提交消费进度位置，和 <code>commitOffset</code> 配合。</li>
<li>第 1 位 <code>FLAG_SUSPEND</code> ：标记请求是否挂起请求，和 <code>suspendTimeoutMillis</code> 配合。当拉取不到消息时， <code>Broker</code> 会挂起请求，直到有消息。最大挂起时间：<code>suspendTimeoutMillis</code> 毫秒。</li>
<li>第 2 位 <code>FLAG_SUBSCRIPTION</code> ：是否过滤订阅表达式，和 <code>subscription</code> 配置。</li>
</ul>
</li>
<li>subVersion ：订阅版本号。请求时，如果版本号不对，则无法拉取到消息，需要重新获取订阅信息，使用最新的订阅版本号。</li>
</ul>
<h2>PullMessageProcessor#processRequest(...)</h2>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">  <span class="number">1</span>: <span class="function"><span class="keyword">private</span> RemotingCommand <span class="title">processRequest</span><span class="params">(<span class="keyword">final</span> Channel channel, RemotingCommand request, <span class="keyword">boolean</span> brokerAllowSuspend)</span></span></div><div class="line">  2:     <span class="keyword">throws</span> RemotingCommandException &#123;</div><div class="line">  <span class="number">3</span>:     RemotingCommand response = RemotingCommand.createResponseCommand(PullMessageResponseHeader.class);</div><div class="line">  <span class="number">4</span>:     <span class="keyword">final</span> PullMessageResponseHeader responseHeader = (PullMessageResponseHeader) response.readCustomHeader();</div><div class="line">  <span class="number">5</span>:     <span class="keyword">final</span> PullMessageRequestHeader requestHeader =</div><div class="line">  <span class="number">6</span>:         (PullMessageRequestHeader) request.decodeCommandCustomHeader(PullMessageRequestHeader.class);</div><div class="line">  <span class="number">7</span>: </div><div class="line">  <span class="number">8</span>:     response.setOpaque(request.getOpaque());</div><div class="line">  <span class="number">9</span>: </div><div class="line"> <span class="number">10</span>:     <span class="keyword">if</span> (LOG.isDebugEnabled()) &#123;</div><div class="line"> <span class="number">11</span>:         LOG.debug(<span class="string">"receive PullMessage request command, &#123;&#125;"</span>, request);</div><div class="line"> <span class="number">12</span>:     &#125;</div><div class="line"> <span class="number">13</span>: </div><div class="line"> <span class="number">14</span>:     <span class="comment">// 校验 broker 是否可读</span></div><div class="line"> <span class="number">15</span>:     <span class="keyword">if</span> (!PermName.isReadable(<span class="keyword">this</span>.brokerController.getBrokerConfig().getBrokerPermission())) &#123;</div><div class="line"> <span class="number">16</span>:         response.setCode(ResponseCode.NO_PERMISSION);</div><div class="line"> <span class="number">17</span>:         response.setRemark(String.format(<span class="string">"the broker[%s] pulling message is forbidden"</span>, <span class="keyword">this</span>.brokerController.getBrokerConfig().getBrokerIP1()));</div><div class="line"> <span class="number">18</span>:         <span class="keyword">return</span> response;</div><div class="line"> <span class="number">19</span>:     &#125;</div><div class="line"> <span class="number">20</span>: </div><div class="line"> <span class="number">21</span>:     <span class="comment">// 校验 consumer分组配置 是否存在</span></div><div class="line"> <span class="number">22</span>:     SubscriptionGroupConfig subscriptionGroupConfig = <span class="keyword">this</span>.brokerController.getSubscriptionGroupManager().findSubscriptionGroupConfig(requestHeader.getConsumerGroup());</div><div class="line"> <span class="number">23</span>:     <span class="keyword">if</span> (<span class="keyword">null</span> == subscriptionGroupConfig) &#123;</div><div class="line"> <span class="number">24</span>:         response.setCode(ResponseCode.SUBSCRIPTION_GROUP_NOT_EXIST);</div><div class="line"> <span class="number">25</span>:         response.setRemark(String.format(<span class="string">"subscription group [%s] does not exist, %s"</span>, requestHeader.getConsumerGroup(), FAQUrl.suggestTodo(FAQUrl.SUBSCRIPTION_GROUP_NOT_EXIST)));</div><div class="line"> <span class="number">26</span>:         <span class="keyword">return</span> response;</div><div class="line"> <span class="number">27</span>:     &#125;</div><div class="line"> <span class="number">28</span>:     <span class="comment">// 校验 consumer分组配置 是否可消费</span></div><div class="line"> <span class="number">29</span>:     <span class="keyword">if</span> (!subscriptionGroupConfig.isConsumeEnable()) &#123;</div><div class="line"> <span class="number">30</span>:         response.setCode(ResponseCode.NO_PERMISSION);</div><div class="line"> <span class="number">31</span>:         response.setRemark(<span class="string">"subscription group no permission, "</span> + requestHeader.getConsumerGroup());</div><div class="line"> <span class="number">32</span>:         <span class="keyword">return</span> response;</div><div class="line"> <span class="number">33</span>:     &#125;</div><div class="line"> <span class="number">34</span>: </div><div class="line"> <span class="number">35</span>:     <span class="keyword">final</span> <span class="keyword">boolean</span> hasSuspendFlag = PullSysFlag.hasSuspendFlag(requestHeader.getSysFlag()); <span class="comment">// 是否挂起请求，当没有消息时</span></div><div class="line"> <span class="number">36</span>:     <span class="keyword">final</span> <span class="keyword">boolean</span> hasCommitOffsetFlag = PullSysFlag.hasCommitOffsetFlag(requestHeader.getSysFlag()); <span class="comment">// 是否提交消费进度</span></div><div class="line"> <span class="number">37</span>:     <span class="keyword">final</span> <span class="keyword">boolean</span> hasSubscriptionFlag = PullSysFlag.hasSubscriptionFlag(requestHeader.getSysFlag()); <span class="comment">// 是否过滤订阅表达式(subscription)</span></div><div class="line"> <span class="number">38</span>:     <span class="keyword">final</span> <span class="keyword">long</span> suspendTimeoutMillisLong = hasSuspendFlag ? requestHeader.getSuspendTimeoutMillis() : <span class="number">0</span>; <span class="comment">// 挂起请求超时时长</span></div><div class="line"> <span class="number">39</span>: </div><div class="line"> <span class="number">40</span>:     <span class="comment">// 校验 topic配置 存在</span></div><div class="line"> <span class="number">41</span>:     TopicConfig topicConfig = <span class="keyword">this</span>.brokerController.getTopicConfigManager().selectTopicConfig(requestHeader.getTopic());</div><div class="line"> <span class="number">42</span>:     <span class="keyword">if</span> (<span class="keyword">null</span> == topicConfig) &#123;</div><div class="line"> <span class="number">43</span>:         LOG.error(<span class="string">"The topic &#123;&#125; not exist, consumer: &#123;&#125; "</span>, requestHeader.getTopic(), RemotingHelper.parseChannelRemoteAddr(channel));</div><div class="line"> <span class="number">44</span>:         response.setCode(ResponseCode.TOPIC_NOT_EXIST);</div><div class="line"> <span class="number">45</span>:         response.setRemark(String.format(<span class="string">"topic[%s] not exist, apply first please! %s"</span>, requestHeader.getTopic(), FAQUrl.suggestTodo(FAQUrl.APPLY_TOPIC_URL)));</div><div class="line"> <span class="number">46</span>:         <span class="keyword">return</span> response;</div><div class="line"> <span class="number">47</span>:     &#125;</div><div class="line"> <span class="number">48</span>:     <span class="comment">// 校验 topic配置 权限可读</span></div><div class="line"> <span class="number">49</span>:     <span class="keyword">if</span> (!PermName.isReadable(topicConfig.getPerm())) &#123;</div><div class="line"> <span class="number">50</span>:         response.setCode(ResponseCode.NO_PERMISSION);</div><div class="line"> <span class="number">51</span>:         response.setRemark(<span class="string">"the topic["</span> + requestHeader.getTopic() + <span class="string">"] pulling message is forbidden"</span>);</div><div class="line"> <span class="number">52</span>:         <span class="keyword">return</span> response;</div><div class="line"> <span class="number">53</span>:     &#125;</div><div class="line"> <span class="number">54</span>:     <span class="comment">// 校验 读取队列 在 topic配置 队列范围内</span></div><div class="line"> <span class="number">55</span>:     <span class="keyword">if</span> (requestHeader.getQueueId() &lt; <span class="number">0</span> || requestHeader.getQueueId() &gt;= topicConfig.getReadQueueNums()) &#123;</div><div class="line"> <span class="number">56</span>:         String errorInfo = String.format(<span class="string">"queueId[%d] is illegal, topic:[%s] topicConfig.readQueueNums:[%d] consumer:[%s]"</span>,</div><div class="line"> <span class="number">57</span>:                 requestHeader.getQueueId(), requestHeader.getTopic(), topicConfig.getReadQueueNums(), channel.remoteAddress());</div><div class="line"> <span class="number">58</span>:         LOG.warn(errorInfo);</div><div class="line"> <span class="number">59</span>:         response.setCode(ResponseCode.SYSTEM_ERROR);</div><div class="line"> <span class="number">60</span>:         response.setRemark(errorInfo);</div><div class="line"> <span class="number">61</span>:         <span class="keyword">return</span> response;</div><div class="line"> <span class="number">62</span>:     &#125;</div><div class="line"> <span class="number">63</span>: </div><div class="line"> <span class="number">64</span>:     <span class="comment">// 校验 订阅关系</span></div><div class="line"> <span class="number">65</span>:     SubscriptionData subscriptionData;</div><div class="line"> <span class="number">66</span>:     <span class="keyword">if</span> (hasSubscriptionFlag) &#123;</div><div class="line"> <span class="number">67</span>:         <span class="keyword">try</span> &#123;</div><div class="line"> <span class="number">68</span>:             subscriptionData = FilterAPI.buildSubscriptionData(requestHeader.getConsumerGroup(), requestHeader.getTopic(),</div><div class="line"> <span class="number">69</span>:                 requestHeader.getSubscription());</div><div class="line"> <span class="number">70</span>:         &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"> <span class="number">71</span>:             LOG.warn(<span class="string">"Parse the consumer's subscription[&#123;&#125;] failed, group: &#123;&#125;"</span>, requestHeader.getSubscription(), <span class="comment">//</span></div><div class="line"> <span class="number">72</span>:                     requestHeader.getConsumerGroup());</div><div class="line"> <span class="number">73</span>:             response.setCode(ResponseCode.SUBSCRIPTION_PARSE_FAILED);</div><div class="line"> <span class="number">74</span>:             response.setRemark(<span class="string">"parse the consumer's subscription failed"</span>);</div><div class="line"> <span class="number">75</span>:             <span class="keyword">return</span> response;</div><div class="line"> <span class="number">76</span>:         &#125;</div><div class="line"> <span class="number">77</span>:     &#125; <span class="keyword">else</span> &#123;</div><div class="line"> <span class="number">78</span>:         <span class="comment">// 校验 消费分组信息 是否存在</span></div><div class="line"> <span class="number">79</span>:         ConsumerGroupInfo consumerGroupInfo = <span class="keyword">this</span>.brokerController.getConsumerManager().getConsumerGroupInfo(requestHeader.getConsumerGroup());</div><div class="line"> <span class="number">80</span>:         <span class="keyword">if</span> (<span class="keyword">null</span> == consumerGroupInfo) &#123;</div><div class="line"> <span class="number">81</span>:             LOG.warn(<span class="string">"The consumer's group info not exist, group: &#123;&#125;"</span>, requestHeader.getConsumerGroup());</div><div class="line"> <span class="number">82</span>:             response.setCode(ResponseCode.SUBSCRIPTION_NOT_EXIST);</div><div class="line"> <span class="number">83</span>:             response.setRemark(<span class="string">"the consumer's group info not exist"</span> + FAQUrl.suggestTodo(FAQUrl.SAME_GROUP_DIFFERENT_TOPIC));</div><div class="line"> <span class="number">84</span>:             <span class="keyword">return</span> response;</div><div class="line"> <span class="number">85</span>:         &#125;</div><div class="line"> <span class="number">86</span>:         <span class="comment">// 校验 消费分组信息 消息模型是否匹配</span></div><div class="line"> <span class="number">87</span>:         <span class="keyword">if</span> (!subscriptionGroupConfig.isConsumeBroadcastEnable() <span class="comment">//</span></div><div class="line"> <span class="number">88</span>:             &amp;&amp; consumerGroupInfo.getMessageModel() == MessageModel.BROADCASTING) &#123;</div><div class="line"> <span class="number">89</span>:             response.setCode(ResponseCode.NO_PERMISSION);</div><div class="line"> <span class="number">90</span>:             response.setRemark(<span class="string">"the consumer group["</span> + requestHeader.getConsumerGroup() + <span class="string">"] can not consume by broadcast way"</span>);</div><div class="line"> <span class="number">91</span>:             <span class="keyword">return</span> response;</div><div class="line"> <span class="number">92</span>:         &#125;</div><div class="line"> <span class="number">93</span>: </div><div class="line"> <span class="number">94</span>:         <span class="comment">// 校验 订阅信息 是否存在</span></div><div class="line"> <span class="number">95</span>:         subscriptionData = consumerGroupInfo.findSubscriptionData(requestHeader.getTopic());</div><div class="line"> <span class="number">96</span>:         <span class="keyword">if</span> (<span class="keyword">null</span> == subscriptionData) &#123;</div><div class="line"> <span class="number">97</span>:             LOG.warn(<span class="string">"The consumer's subscription not exist, group: &#123;&#125;, topic:&#123;&#125;"</span>, requestHeader.getConsumerGroup(), requestHeader.getTopic());</div><div class="line"> <span class="number">98</span>:             response.setCode(ResponseCode.SUBSCRIPTION_NOT_EXIST);</div><div class="line"> <span class="number">99</span>:             response.setRemark(<span class="string">"the consumer's subscription not exist"</span> + FAQUrl.suggestTodo(FAQUrl.SAME_GROUP_DIFFERENT_TOPIC));</div><div class="line"><span class="number">100</span>:             <span class="keyword">return</span> response;</div><div class="line"><span class="number">101</span>:         &#125;</div><div class="line"><span class="number">102</span>:         <span class="comment">// 校验 订阅信息版本 是否合法</span></div><div class="line"><span class="number">103</span>:         <span class="keyword">if</span> (subscriptionData.getSubVersion() &lt; requestHeader.getSubVersion()) &#123;</div><div class="line"><span class="number">104</span>:             LOG.warn(<span class="string">"The broker's subscription is not latest, group: &#123;&#125; &#123;&#125;"</span>, requestHeader.getConsumerGroup(),</div><div class="line"><span class="number">105</span>:                     subscriptionData.getSubString());</div><div class="line"><span class="number">106</span>:             response.setCode(ResponseCode.SUBSCRIPTION_NOT_LATEST);</div><div class="line"><span class="number">107</span>:             response.setRemark(<span class="string">"the consumer's subscription not latest"</span>);</div><div class="line"><span class="number">108</span>:             <span class="keyword">return</span> response;</div><div class="line"><span class="number">109</span>:         &#125;</div><div class="line"><span class="number">110</span>:     &#125;</div><div class="line"><span class="number">111</span>: </div><div class="line"><span class="number">112</span>:     <span class="comment">// 获取消息</span></div><div class="line"><span class="number">113</span>:     <span class="keyword">final</span> GetMessageResult getMessageResult = <span class="keyword">this</span>.brokerController.getMessageStore().getMessage(requestHeader.getConsumerGroup(), requestHeader.getTopic(),</div><div class="line"><span class="number">114</span>:             requestHeader.getQueueId(), requestHeader.getQueueOffset(), requestHeader.getMaxMsgNums(), subscriptionData);</div><div class="line"><span class="number">115</span>:     <span class="keyword">if</span> (getMessageResult != <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">116</span>:         response.setRemark(getMessageResult.getStatus().name());</div><div class="line"><span class="number">117</span>:         responseHeader.setNextBeginOffset(getMessageResult.getNextBeginOffset());</div><div class="line"><span class="number">118</span>:         responseHeader.setMinOffset(getMessageResult.getMinOffset());</div><div class="line"><span class="number">119</span>:         responseHeader.setMaxOffset(getMessageResult.getMaxOffset());</div><div class="line"><span class="number">120</span>: </div><div class="line"><span class="number">121</span>:         <span class="comment">// TODO 待读</span></div><div class="line"><span class="number">122</span>:         <span class="comment">// 计算建议读取brokerId</span></div><div class="line"><span class="number">123</span>:         <span class="keyword">if</span> (getMessageResult.isSuggestPullingFromSlave()) &#123;</div><div class="line"><span class="number">124</span>:             responseHeader.setSuggestWhichBrokerId(subscriptionGroupConfig.getWhichBrokerWhenConsumeSlowly());</div><div class="line"><span class="number">125</span>:         &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">126</span>:             responseHeader.setSuggestWhichBrokerId(MixAll.MASTER_ID);</div><div class="line"><span class="number">127</span>:         &#125;</div><div class="line"><span class="number">128</span>: </div><div class="line"><span class="number">129</span>:         <span class="keyword">switch</span> (<span class="keyword">this</span>.brokerController.getMessageStoreConfig().getBrokerRole()) &#123;</div><div class="line"><span class="number">130</span>:             <span class="keyword">case</span> ASYNC_MASTER:</div><div class="line"><span class="number">131</span>:             <span class="keyword">case</span> SYNC_MASTER:</div><div class="line"><span class="number">132</span>:                 <span class="keyword">break</span>;</div><div class="line"><span class="number">133</span>:             <span class="keyword">case</span> SLAVE:</div><div class="line"><span class="number">134</span>:                 <span class="keyword">if</span> (!<span class="keyword">this</span>.brokerController.getBrokerConfig().isSlaveReadEnable()) &#123; <span class="comment">// 从节点不允许读取，告诉consumer读取主节点。</span></div><div class="line"><span class="number">135</span>:                     response.setCode(ResponseCode.PULL_RETRY_IMMEDIATELY);</div><div class="line"><span class="number">136</span>:                     responseHeader.setSuggestWhichBrokerId(MixAll.MASTER_ID);</div><div class="line"><span class="number">137</span>:                 &#125;</div><div class="line"><span class="number">138</span>:                 <span class="keyword">break</span>;</div><div class="line"><span class="number">139</span>:         &#125;</div><div class="line"><span class="number">140</span>: </div><div class="line"><span class="number">141</span>:         <span class="keyword">if</span> (<span class="keyword">this</span>.brokerController.getBrokerConfig().isSlaveReadEnable()) &#123;</div><div class="line"><span class="number">142</span>:             <span class="comment">// consume too slow ,redirect to another machine</span></div><div class="line"><span class="number">143</span>:             <span class="keyword">if</span> (getMessageResult.isSuggestPullingFromSlave()) &#123;</div><div class="line"><span class="number">144</span>:                 responseHeader.setSuggestWhichBrokerId(subscriptionGroupConfig.getWhichBrokerWhenConsumeSlowly());</div><div class="line"><span class="number">145</span>:             &#125;</div><div class="line"><span class="number">146</span>:             <span class="comment">// consume ok</span></div><div class="line"><span class="number">147</span>:             <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">148</span>:                 responseHeader.setSuggestWhichBrokerId(subscriptionGroupConfig.getBrokerId());</div><div class="line"><span class="number">149</span>:             &#125;</div><div class="line"><span class="number">150</span>:         &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">151</span>:             responseHeader.setSuggestWhichBrokerId(MixAll.MASTER_ID);</div><div class="line"><span class="number">152</span>:         &#125;</div><div class="line"><span class="number">153</span>: </div><div class="line"><span class="number">154</span>:         <span class="keyword">switch</span> (getMessageResult.getStatus()) &#123;</div><div class="line"><span class="number">155</span>:             <span class="keyword">case</span> FOUND:</div><div class="line"><span class="number">156</span>:                 response.setCode(ResponseCode.SUCCESS);</div><div class="line"><span class="number">157</span>:                 <span class="keyword">break</span>;</div><div class="line"><span class="number">158</span>:             <span class="keyword">case</span> MESSAGE_WAS_REMOVING:</div><div class="line"><span class="number">159</span>:                 response.setCode(ResponseCode.PULL_RETRY_IMMEDIATELY);</div><div class="line"><span class="number">160</span>:                 <span class="keyword">break</span>;</div><div class="line"><span class="number">161</span>:             <span class="keyword">case</span> NO_MATCHED_LOGIC_QUEUE:</div><div class="line"><span class="number">162</span>:             <span class="keyword">case</span> NO_MESSAGE_IN_QUEUE:</div><div class="line"><span class="number">163</span>:                 <span class="keyword">if</span> (<span class="number">0</span> != requestHeader.getQueueOffset()) &#123;</div><div class="line"><span class="number">164</span>:                     response.setCode(ResponseCode.PULL_OFFSET_MOVED);</div><div class="line"><span class="number">165</span>: </div><div class="line"><span class="number">166</span>:                     <span class="comment">// <span class="doctag">XXX:</span> warn and notify me</span></div><div class="line"><span class="number">167</span>:                     LOG.info(<span class="string">"the broker store no queue data, fix the request offset &#123;&#125; to &#123;&#125;, Topic: &#123;&#125; QueueId: &#123;&#125; Consumer Group: &#123;&#125;"</span>, <span class="comment">//</span></div><div class="line"><span class="number">168</span>:                         requestHeader.getQueueOffset(), <span class="comment">//</span></div><div class="line"><span class="number">169</span>:                         getMessageResult.getNextBeginOffset(), <span class="comment">//</span></div><div class="line"><span class="number">170</span>:                         requestHeader.getTopic(), <span class="comment">//</span></div><div class="line"><span class="number">171</span>:                         requestHeader.getQueueId(), <span class="comment">//</span></div><div class="line"><span class="number">172</span>:                         requestHeader.getConsumerGroup()<span class="comment">//</span></div><div class="line"><span class="number">173</span>:                     );</div><div class="line"><span class="number">174</span>:                 &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">175</span>:                     response.setCode(ResponseCode.PULL_NOT_FOUND);</div><div class="line"><span class="number">176</span>:                 &#125;</div><div class="line"><span class="number">177</span>:                 <span class="keyword">break</span>;</div><div class="line"><span class="number">178</span>:             <span class="keyword">case</span> NO_MATCHED_MESSAGE:</div><div class="line"><span class="number">179</span>:                 response.setCode(ResponseCode.PULL_RETRY_IMMEDIATELY);</div><div class="line"><span class="number">180</span>:                 <span class="keyword">break</span>;</div><div class="line"><span class="number">181</span>:             <span class="keyword">case</span> OFFSET_FOUND_NULL:</div><div class="line"><span class="number">182</span>:                 response.setCode(ResponseCode.PULL_NOT_FOUND);</div><div class="line"><span class="number">183</span>:                 <span class="keyword">break</span>;</div><div class="line"><span class="number">184</span>:             <span class="keyword">case</span> OFFSET_OVERFLOW_BADLY:</div><div class="line"><span class="number">185</span>:                 response.setCode(ResponseCode.PULL_OFFSET_MOVED);</div><div class="line"><span class="number">186</span>:                 <span class="comment">// <span class="doctag">XXX:</span> warn and notify me</span></div><div class="line"><span class="number">187</span>:                 LOG.info(<span class="string">"The request offset:&#123;&#125; over flow badly, broker max offset:&#123;&#125; , consumer: &#123;&#125;"</span>, requestHeader.getQueueOffset(), getMessageResult.getMaxOffset(), channel.remoteAddress());</div><div class="line"><span class="number">188</span>:                 <span class="keyword">break</span>;</div><div class="line"><span class="number">189</span>:             <span class="keyword">case</span> OFFSET_OVERFLOW_ONE:</div><div class="line"><span class="number">190</span>:                 response.setCode(ResponseCode.PULL_NOT_FOUND);</div><div class="line"><span class="number">191</span>:                 <span class="keyword">break</span>;</div><div class="line"><span class="number">192</span>:             <span class="keyword">case</span> OFFSET_TOO_SMALL:</div><div class="line"><span class="number">193</span>:                 response.setCode(ResponseCode.PULL_OFFSET_MOVED);</div><div class="line"><span class="number">194</span>:                 LOG.info(<span class="string">"The request offset is too small. group=&#123;&#125;, topic=&#123;&#125;, requestOffset=&#123;&#125;, brokerMinOffset=&#123;&#125;, clientIp=&#123;&#125;"</span>,</div><div class="line"><span class="number">195</span>:                     requestHeader.getConsumerGroup(), requestHeader.getTopic(), requestHeader.getQueueOffset(),</div><div class="line"><span class="number">196</span>:                     getMessageResult.getMinOffset(), channel.remoteAddress());</div><div class="line"><span class="number">197</span>:                 <span class="keyword">break</span>;</div><div class="line"><span class="number">198</span>:             <span class="keyword">default</span>:</div><div class="line"><span class="number">199</span>:                 <span class="keyword">assert</span> <span class="keyword">false</span>;</div><div class="line"><span class="number">200</span>:                 <span class="keyword">break</span>;</div><div class="line"><span class="number">201</span>:         &#125;</div><div class="line"><span class="number">202</span>: </div><div class="line"><span class="number">203</span>:         <span class="comment">// hook：before</span></div><div class="line"><span class="number">204</span>:         <span class="keyword">if</span> (<span class="keyword">this</span>.hasConsumeMessageHook()) &#123;</div><div class="line"><span class="number">205</span>:             ConsumeMessageContext context = <span class="keyword">new</span> ConsumeMessageContext();</div><div class="line"><span class="number">206</span>:             context.setConsumerGroup(requestHeader.getConsumerGroup());</div><div class="line"><span class="number">207</span>:             context.setTopic(requestHeader.getTopic());</div><div class="line"><span class="number">208</span>:             context.setQueueId(requestHeader.getQueueId());</div><div class="line"><span class="number">209</span>: </div><div class="line"><span class="number">210</span>:             String owner = request.getExtFields().get(BrokerStatsManager.COMMERCIAL_OWNER);</div><div class="line"><span class="number">211</span>: </div><div class="line"><span class="number">212</span>:             <span class="keyword">switch</span> (response.getCode()) &#123;</div><div class="line"><span class="number">213</span>:                 <span class="keyword">case</span> ResponseCode.SUCCESS:</div><div class="line"><span class="number">214</span>:                     <span class="keyword">int</span> commercialBaseCount = brokerController.getBrokerConfig().getCommercialBaseCount();</div><div class="line"><span class="number">215</span>:                     <span class="keyword">int</span> incValue = getMessageResult.getMsgCount4Commercial() * commercialBaseCount;</div><div class="line"><span class="number">216</span>: </div><div class="line"><span class="number">217</span>:                     context.setCommercialRcvStats(BrokerStatsManager.StatsType.RCV_SUCCESS);</div><div class="line"><span class="number">218</span>:                     context.setCommercialRcvTimes(incValue);</div><div class="line"><span class="number">219</span>:                     context.setCommercialRcvSize(getMessageResult.getBufferTotalSize());</div><div class="line"><span class="number">220</span>:                     context.setCommercialOwner(owner);</div><div class="line"><span class="number">221</span>: </div><div class="line"><span class="number">222</span>:                     <span class="keyword">break</span>;</div><div class="line"><span class="number">223</span>:                 <span class="keyword">case</span> ResponseCode.PULL_NOT_FOUND:</div><div class="line"><span class="number">224</span>:                     <span class="keyword">if</span> (!brokerAllowSuspend) &#123;</div><div class="line"><span class="number">225</span>: </div><div class="line"><span class="number">226</span>:                         context.setCommercialRcvStats(BrokerStatsManager.StatsType.RCV_EPOLLS);</div><div class="line"><span class="number">227</span>:                         context.setCommercialRcvTimes(<span class="number">1</span>);</div><div class="line"><span class="number">228</span>:                         context.setCommercialOwner(owner);</div><div class="line"><span class="number">229</span>: </div><div class="line"><span class="number">230</span>:                     &#125;</div><div class="line"><span class="number">231</span>:                     <span class="keyword">break</span>;</div><div class="line"><span class="number">232</span>:                 <span class="keyword">case</span> ResponseCode.PULL_RETRY_IMMEDIATELY:</div><div class="line"><span class="number">233</span>:                 <span class="keyword">case</span> ResponseCode.PULL_OFFSET_MOVED:</div><div class="line"><span class="number">234</span>:                     context.setCommercialRcvStats(BrokerStatsManager.StatsType.RCV_EPOLLS);</div><div class="line"><span class="number">235</span>:                     context.setCommercialRcvTimes(<span class="number">1</span>);</div><div class="line"><span class="number">236</span>:                     context.setCommercialOwner(owner);</div><div class="line"><span class="number">237</span>:                     <span class="keyword">break</span>;</div><div class="line"><span class="number">238</span>:                 <span class="keyword">default</span>:</div><div class="line"><span class="number">239</span>:                     <span class="keyword">assert</span> <span class="keyword">false</span>;</div><div class="line"><span class="number">240</span>:                     <span class="keyword">break</span>;</div><div class="line"><span class="number">241</span>:             &#125;</div><div class="line"><span class="number">242</span>: </div><div class="line"><span class="number">243</span>:             <span class="keyword">this</span>.executeConsumeMessageHookBefore(context);</div><div class="line"><span class="number">244</span>:         &#125;</div><div class="line"><span class="number">245</span>: </div><div class="line"><span class="number">246</span>:         <span class="keyword">switch</span> (response.getCode()) &#123;</div><div class="line"><span class="number">247</span>:             <span class="keyword">case</span> ResponseCode.SUCCESS:</div><div class="line"><span class="number">248</span>: </div><div class="line"><span class="number">249</span>:                 <span class="keyword">this</span>.brokerController.getBrokerStatsManager().incGroupGetNums(requestHeader.getConsumerGroup(), requestHeader.getTopic(),</div><div class="line"><span class="number">250</span>:                     getMessageResult.getMessageCount());</div><div class="line"><span class="number">251</span>:                 <span class="keyword">this</span>.brokerController.getBrokerStatsManager().incGroupGetSize(requestHeader.getConsumerGroup(), requestHeader.getTopic(),</div><div class="line"><span class="number">252</span>:                     getMessageResult.getBufferTotalSize());</div><div class="line"><span class="number">253</span>:                 <span class="keyword">this</span>.brokerController.getBrokerStatsManager().incBrokerGetNums(getMessageResult.getMessageCount());</div><div class="line"><span class="number">254</span>:                 <span class="comment">// 读取消息</span></div><div class="line"><span class="number">255</span>:                 <span class="keyword">if</span> (<span class="keyword">this</span>.brokerController.getBrokerConfig().isTransferMsgByHeap()) &#123; <span class="comment">// 内存中</span></div><div class="line"><span class="number">256</span>:                     <span class="keyword">final</span> <span class="keyword">long</span> beginTimeMills = <span class="keyword">this</span>.brokerController.getMessageStore().now();</div><div class="line"><span class="number">257</span>: </div><div class="line"><span class="number">258</span>:                     <span class="keyword">final</span> <span class="keyword">byte</span>[] r = <span class="keyword">this</span>.readGetMessageResult(getMessageResult, requestHeader.getConsumerGroup(), requestHeader.getTopic(), requestHeader.getQueueId());</div><div class="line"><span class="number">259</span>: </div><div class="line"><span class="number">260</span>:                     <span class="keyword">this</span>.brokerController.getBrokerStatsManager().incGroupGetLatency(requestHeader.getConsumerGroup(),</div><div class="line"><span class="number">261</span>:                         requestHeader.getTopic(), requestHeader.getQueueId(),</div><div class="line"><span class="number">262</span>:                         (<span class="keyword">int</span>) (<span class="keyword">this</span>.brokerController.getMessageStore().now() - beginTimeMills));</div><div class="line"><span class="number">263</span>:                     response.setBody(r);</div><div class="line"><span class="number">264</span>:                 &#125; <span class="keyword">else</span> &#123; <span class="comment">// zero-copy</span></div><div class="line"><span class="number">265</span>:                     <span class="keyword">try</span> &#123;</div><div class="line"><span class="number">266</span>:                         FileRegion fileRegion = <span class="keyword">new</span> ManyMessageTransfer(response.encodeHeader(getMessageResult.getBufferTotalSize()), getMessageResult);</div><div class="line"><span class="number">267</span>:                         channel.writeAndFlush(fileRegion).addListener(<span class="keyword">new</span> ChannelFutureListener() &#123;</div><div class="line"><span class="number">268</span>:                             <span class="meta">@Override</span></div><div class="line"><span class="number">269</span>:                             <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operationComplete</span><span class="params">(ChannelFuture future)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"><span class="number">270</span>:                                 getMessageResult.release();</div><div class="line"><span class="number">271</span>:                                 <span class="keyword">if</span> (!future.isSuccess()) &#123;</div><div class="line"><span class="number">272</span>:                                     LOG.error(<span class="string">"Fail to transfer messages from page cache to &#123;&#125;"</span>, channel.remoteAddress(), future.cause());</div><div class="line"><span class="number">273</span>:                                 &#125;</div><div class="line"><span class="number">274</span>:                             &#125;</div><div class="line"><span class="number">275</span>:                         &#125;);</div><div class="line"><span class="number">276</span>:                     &#125; <span class="keyword">catch</span> (Throwable e) &#123;</div><div class="line"><span class="number">277</span>:                         LOG.error(<span class="string">"Error occurred when transferring messages from page cache"</span>, e);</div><div class="line"><span class="number">278</span>:                         getMessageResult.release();</div><div class="line"><span class="number">279</span>:                     &#125;</div><div class="line"><span class="number">280</span>: </div><div class="line"><span class="number">281</span>:                     response = <span class="keyword">null</span>;</div><div class="line"><span class="number">282</span>:                 &#125;</div><div class="line"><span class="number">283</span>:                 <span class="keyword">break</span>;</div><div class="line"><span class="number">284</span>:             <span class="keyword">case</span> ResponseCode.PULL_NOT_FOUND:</div><div class="line"><span class="number">285</span>:                 <span class="comment">// 消息未查询到 &amp;&amp; broker允许挂起请求 &amp;&amp; 请求允许挂起</span></div><div class="line"><span class="number">286</span>:                 <span class="keyword">if</span> (brokerAllowSuspend &amp;&amp; hasSuspendFlag) &#123;</div><div class="line"><span class="number">287</span>:                     <span class="keyword">long</span> pollingTimeMills = suspendTimeoutMillisLong;</div><div class="line"><span class="number">288</span>:                     <span class="keyword">if</span> (!<span class="keyword">this</span>.brokerController.getBrokerConfig().isLongPollingEnable()) &#123;</div><div class="line"><span class="number">289</span>:                         pollingTimeMills = <span class="keyword">this</span>.brokerController.getBrokerConfig().getShortPollingTimeMills();</div><div class="line"><span class="number">290</span>:                     &#125;</div><div class="line"><span class="number">291</span>: </div><div class="line"><span class="number">292</span>:                     String topic = requestHeader.getTopic();</div><div class="line"><span class="number">293</span>:                     <span class="keyword">long</span> offset = requestHeader.getQueueOffset();</div><div class="line"><span class="number">294</span>:                     <span class="keyword">int</span> queueId = requestHeader.getQueueId();</div><div class="line"><span class="number">295</span>:                     PullRequest pullRequest = <span class="keyword">new</span> PullRequest(request, channel, pollingTimeMills,</div><div class="line"><span class="number">296</span>:                         <span class="keyword">this</span>.brokerController.getMessageStore().now(), offset, subscriptionData);</div><div class="line"><span class="number">297</span>:                     <span class="keyword">this</span>.brokerController.getPullRequestHoldService().suspendPullRequest(topic, queueId, pullRequest);</div><div class="line"><span class="number">298</span>:                     response = <span class="keyword">null</span>;</div><div class="line"><span class="number">299</span>:                     <span class="keyword">break</span>;</div><div class="line"><span class="number">300</span>:                 &#125;</div><div class="line"><span class="number">301</span>: </div><div class="line"><span class="number">302</span>:             <span class="keyword">case</span> ResponseCode.PULL_RETRY_IMMEDIATELY:</div><div class="line"><span class="number">303</span>:                 <span class="keyword">break</span>;</div><div class="line"><span class="number">304</span>:             <span class="keyword">case</span> ResponseCode.PULL_OFFSET_MOVED:</div><div class="line"><span class="number">305</span>:                 <span class="keyword">if</span> (<span class="keyword">this</span>.brokerController.getMessageStoreConfig().getBrokerRole() != BrokerRole.SLAVE</div><div class="line"><span class="number">306</span>:                     || <span class="keyword">this</span>.brokerController.getMessageStoreConfig().isOffsetCheckInSlave()) &#123; <span class="comment">// TODO 待博客补充</span></div><div class="line"><span class="number">307</span>:                     MessageQueue mq = <span class="keyword">new</span> MessageQueue();</div><div class="line"><span class="number">308</span>:                     mq.setTopic(requestHeader.getTopic());</div><div class="line"><span class="number">309</span>:                     mq.setQueueId(requestHeader.getQueueId());</div><div class="line"><span class="number">310</span>:                     mq.setBrokerName(<span class="keyword">this</span>.brokerController.getBrokerConfig().getBrokerName());</div><div class="line"><span class="number">311</span>: </div><div class="line"><span class="number">312</span>:                     OffsetMovedEvent event = <span class="keyword">new</span> OffsetMovedEvent();</div><div class="line"><span class="number">313</span>:                     event.setConsumerGroup(requestHeader.getConsumerGroup());</div><div class="line"><span class="number">314</span>:                     event.setMessageQueue(mq);</div><div class="line"><span class="number">315</span>:                     event.setOffsetRequest(requestHeader.getQueueOffset());</div><div class="line"><span class="number">316</span>:                     event.setOffsetNew(getMessageResult.getNextBeginOffset());</div><div class="line"><span class="number">317</span>:                     <span class="keyword">this</span>.generateOffsetMovedEvent(event);</div><div class="line"><span class="number">318</span>:                     LOG.warn(</div><div class="line"><span class="number">319</span>:                         <span class="string">"PULL_OFFSET_MOVED:correction offset. topic=&#123;&#125;, groupId=&#123;&#125;, requestOffset=&#123;&#125;, newOffset=&#123;&#125;, suggestBrokerId=&#123;&#125;"</span>,</div><div class="line"><span class="number">320</span>:                         requestHeader.getTopic(), requestHeader.getConsumerGroup(), event.getOffsetRequest(), event.getOffsetNew(),</div><div class="line"><span class="number">321</span>:                         responseHeader.getSuggestWhichBrokerId());</div><div class="line"><span class="number">322</span>:                 &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">323</span>:                     responseHeader.setSuggestWhichBrokerId(subscriptionGroupConfig.getBrokerId());</div><div class="line"><span class="number">324</span>:                     response.setCode(ResponseCode.PULL_RETRY_IMMEDIATELY);</div><div class="line"><span class="number">325</span>:                     LOG.warn(<span class="string">"PULL_OFFSET_MOVED:none correction. topic=&#123;&#125;, groupId=&#123;&#125;, requestOffset=&#123;&#125;, suggestBrokerId=&#123;&#125;"</span>,</div><div class="line"><span class="number">326</span>:                         requestHeader.getTopic(), requestHeader.getConsumerGroup(), requestHeader.getQueueOffset(),</div><div class="line"><span class="number">327</span>:                         responseHeader.getSuggestWhichBrokerId());</div><div class="line"><span class="number">328</span>:                 &#125;</div><div class="line"><span class="number">329</span>: </div><div class="line"><span class="number">330</span>:                 <span class="keyword">break</span>;</div><div class="line"><span class="number">331</span>:             <span class="keyword">default</span>:</div><div class="line"><span class="number">332</span>:                 <span class="keyword">assert</span> <span class="keyword">false</span>;</div><div class="line"><span class="number">333</span>:         &#125;</div><div class="line"><span class="number">334</span>:     &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">335</span>:         response.setCode(ResponseCode.SYSTEM_ERROR);</div><div class="line"><span class="number">336</span>:         response.setRemark(<span class="string">"store getMessage return null"</span>);</div><div class="line"><span class="number">337</span>:     &#125;</div><div class="line"><span class="number">338</span>: </div><div class="line"><span class="number">339</span>:     <span class="comment">// 请求要求持久化进度 &amp;&amp; broker非主，进行持久化进度。</span></div><div class="line"><span class="number">340</span>:     <span class="keyword">boolean</span> storeOffsetEnable = brokerAllowSuspend;</div><div class="line"><span class="number">341</span>:     storeOffsetEnable = storeOffsetEnable &amp;&amp; hasCommitOffsetFlag;</div><div class="line"><span class="number">342</span>:     storeOffsetEnable = storeOffsetEnable &amp;&amp; <span class="keyword">this</span>.brokerController.getMessageStoreConfig().getBrokerRole() != BrokerRole.SLAVE;</div><div class="line"><span class="number">343</span>:     <span class="keyword">if</span> (storeOffsetEnable) &#123;</div><div class="line"><span class="number">344</span>:         <span class="keyword">this</span>.brokerController.getConsumerOffsetManager().commitOffset(RemotingHelper.parseChannelRemoteAddr(channel),</div><div class="line"><span class="number">345</span>:             requestHeader.getConsumerGroup(), requestHeader.getTopic(), requestHeader.getQueueId(), requestHeader.getCommitOffset());</div><div class="line"><span class="number">346</span>:     &#125;</div><div class="line"><span class="number">347</span>:     <span class="keyword">return</span> response;</div><div class="line"><span class="number">348</span>: &#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>说明：处理拉取消息请求，返回响应。</li>
<li>第 14 至 19 行 ：校验 <code>Broker</code> 是否可读。</li>
<li>第 21 至 33 行 ：校验 <code>SubscriptionGroupConfig</code>(订阅分组配置) 是否存在 &amp;&amp; 可以消费。</li>
<li>第 35 至 38 行 ：处理 <code>PullMessageRequestHeader.sysFlag</code> 对应的标志位。</li>
<li>第 40 至 62 行 ：校验 <code>TopicConfig</code>(主题配置) 是否存在 &amp;&amp; 可读 &amp;&amp; 队列编号正确。</li>
<li>第 64 至 110 行 ：校验 <code>SubscriptionData</code>(订阅信息) 是否正确。</li>
<li>第 113 行 ：调用 <code>MessageStore#getMessage(...)</code> 获取 <code>GetMessageResult</code>(消息)。详细解析见：<a href="#messagestoregetmessage">MessageStore#getMessage(...)</a>。</li>
<li>第 122 至 152 行 ：计算建议拉取消息 <code>brokerId</code> 。</li>
<li>第 154 至 201 行 ：<img src="http://www.yunai.me/images/RocketMQ/2017_05_04/08.png" alt="PullMessageProcessor拉取消息状态图"></li>
<li>第 204 至 244 行 ：<code>Hook</code> 逻辑，<code>#executeConsumeMessageHookBefore(...)</code> 。</li>
<li>第 247 至 283 行 ：拉取消息成功，即拉取到消息。
<ul>
<li>第 255 至 263 行 ：方式一 ：调用 <code>readGetMessageResult(...)</code> 获取消息内容到堆内内存，设置到 响应<code>body</code>。</li>
<li>第 265 至 281 行 ：方式二 ：基于 <code>zero-copy</code> 实现，直接响应，无需堆内内存，性能更优。<em>TODO ：此处等对zero-copy有研究，再补充一些</em>。</li>
</ul>
</li>
<li>第 284 至 300 行 ：拉取不到消息，当满足条件 (<code>Broker</code> 允许挂起 &amp;&amp; 请求要求挂起)，执行挂起请求。详细解析见：<a href="#pullrequestholdservice">PullRequestHoldService</a>。</li>
<li>第 304 至 328 行 ：<em>TODO ：此处等对<code>tools</code>模块研究后再补充</em>。</li>
<li>第 339 至 346 ：持久化消费进度，当满足 (<code>Broker</code> 非主 &amp;&amp; 请求要求持久化进度)。详细解析见：<a href="#3broker-%E6%8F%90%E4%BE%9B%E6%9B%B4%E6%96%B0%E6%B6%88%E8%B4%B9%E8%BF%9B%E5%BA%A6%E6%8E%A5%E5%8F%A3">更新消费进度</a>。</li>
</ul>
<h2>MessageStore#getMessage(...)</h2>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">  <span class="number">1</span>: <span class="comment">/**</span></div><div class="line">  2:  * 获取消息结果</div><div class="line">  3:  *</div><div class="line">  4:  * <span class="doctag">@param</span> group 消费分组</div><div class="line">  5:  * <span class="doctag">@param</span> topic 主题</div><div class="line">  6:  * <span class="doctag">@param</span> queueId 队列编号</div><div class="line">  7:  * <span class="doctag">@param</span> offset 队列位置</div><div class="line">  8:  * <span class="doctag">@param</span> maxMsgNums 消息数量</div><div class="line">  9:  * <span class="doctag">@param</span> subscriptionData 订阅信息</div><div class="line"> 10:  * <span class="doctag">@return</span> 消息结果</div><div class="line"> 11:  */</div><div class="line"> <span class="number">12</span>: <span class="function"><span class="keyword">public</span> GetMessageResult <span class="title">getMessage</span><span class="params">(<span class="keyword">final</span> String group, <span class="keyword">final</span> String topic, <span class="keyword">final</span> <span class="keyword">int</span> queueId, <span class="keyword">final</span> <span class="keyword">long</span> offset, <span class="keyword">final</span> <span class="keyword">int</span> maxMsgNums,</span></span></div><div class="line"> <span class="number">13</span>:     <span class="keyword">final</span> SubscriptionData subscriptionData) &#123;</div><div class="line"> <span class="number">14</span>:     <span class="comment">// 是否关闭</span></div><div class="line"> <span class="number">15</span>:     <span class="keyword">if</span> (<span class="keyword">this</span>.shutdown) &#123;</div><div class="line"> <span class="number">16</span>:         log.warn(<span class="string">"message store has shutdown, so getMessage is forbidden"</span>);</div><div class="line"> <span class="number">17</span>:         <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line"> <span class="number">18</span>:     &#125;</div><div class="line"> <span class="number">19</span>:     <span class="comment">// 是否可读</span></div><div class="line"> <span class="number">20</span>:     <span class="keyword">if</span> (!<span class="keyword">this</span>.runningFlags.isReadable()) &#123;</div><div class="line"> <span class="number">21</span>:         log.warn(<span class="string">"message store is not readable, so getMessage is forbidden "</span> + <span class="keyword">this</span>.runningFlags.getFlagBits());</div><div class="line"> <span class="number">22</span>:         <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line"> <span class="number">23</span>:     &#125;</div><div class="line"> <span class="number">24</span>: </div><div class="line"> <span class="number">25</span>:     <span class="keyword">long</span> beginTime = <span class="keyword">this</span>.getSystemClock().now();</div><div class="line"> <span class="number">26</span>: </div><div class="line"> <span class="number">27</span>:     GetMessageStatus status = GetMessageStatus.NO_MESSAGE_IN_QUEUE;</div><div class="line"> <span class="number">28</span>:     <span class="keyword">long</span> nextBeginOffset = offset;</div><div class="line"> <span class="number">29</span>:     <span class="keyword">long</span> minOffset = <span class="number">0</span>;</div><div class="line"> <span class="number">30</span>:     <span class="keyword">long</span> maxOffset = <span class="number">0</span>;</div><div class="line"> <span class="number">31</span>: </div><div class="line"> <span class="number">32</span>:     GetMessageResult getResult = <span class="keyword">new</span> GetMessageResult();</div><div class="line"> <span class="number">33</span>: </div><div class="line"> <span class="number">34</span>:     <span class="keyword">final</span> <span class="keyword">long</span> maxOffsetPy = <span class="keyword">this</span>.commitLog.getMaxOffset();</div><div class="line"> <span class="number">35</span>: </div><div class="line"> <span class="number">36</span>:     <span class="comment">// 获取消费队列</span></div><div class="line"> <span class="number">37</span>:     ConsumeQueue consumeQueue = findConsumeQueue(topic, queueId);</div><div class="line"> <span class="number">38</span>:     <span class="keyword">if</span> (consumeQueue != <span class="keyword">null</span>) &#123;</div><div class="line"> <span class="number">39</span>:         minOffset = consumeQueue.getMinOffsetInQueue(); <span class="comment">// 消费队列 最小队列编号</span></div><div class="line"> <span class="number">40</span>:         maxOffset = consumeQueue.getMaxOffsetInQueue(); <span class="comment">// 消费队列 最大队列编号</span></div><div class="line"> <span class="number">41</span>: </div><div class="line"> <span class="number">42</span>:         <span class="comment">// 判断 队列位置(offset)</span></div><div class="line"> <span class="number">43</span>:         <span class="keyword">if</span> (maxOffset == <span class="number">0</span>) &#123; <span class="comment">// 消费队列无消息</span></div><div class="line"> <span class="number">44</span>:             status = GetMessageStatus.NO_MESSAGE_IN_QUEUE;</div><div class="line"> <span class="number">45</span>:             nextBeginOffset = nextOffsetCorrection(offset, <span class="number">0</span>);</div><div class="line"> <span class="number">46</span>:         &#125; <span class="keyword">else</span> <span class="keyword">if</span> (offset &lt; minOffset) &#123; <span class="comment">// 查询offset 太小</span></div><div class="line"> <span class="number">47</span>:             status = GetMessageStatus.OFFSET_TOO_SMALL;</div><div class="line"> <span class="number">48</span>:             nextBeginOffset = nextOffsetCorrection(offset, minOffset);</div><div class="line"> <span class="number">49</span>:         &#125; <span class="keyword">else</span> <span class="keyword">if</span> (offset == maxOffset) &#123; <span class="comment">// 查询offset 超过 消费队列 一个位置</span></div><div class="line"> <span class="number">50</span>:             status = GetMessageStatus.OFFSET_OVERFLOW_ONE;</div><div class="line"> <span class="number">51</span>:             nextBeginOffset = nextOffsetCorrection(offset, offset);</div><div class="line"> <span class="number">52</span>:         &#125; <span class="keyword">else</span> <span class="keyword">if</span> (offset &gt; maxOffset) &#123; <span class="comment">// 查询offset 超过 消费队列 太多(大于一个位置)</span></div><div class="line"> <span class="number">53</span>:             status = GetMessageStatus.OFFSET_OVERFLOW_BADLY;</div><div class="line"> <span class="number">54</span>:             <span class="keyword">if</span> (<span class="number">0</span> == minOffset) &#123; <span class="comment">// TODO blog 这里是？？为啥0 == minOffset做了特殊判断</span></div><div class="line"> <span class="number">55</span>:                 nextBeginOffset = nextOffsetCorrection(offset, minOffset);</div><div class="line"> <span class="number">56</span>:             &#125; <span class="keyword">else</span> &#123;</div><div class="line"> <span class="number">57</span>:                 nextBeginOffset = nextOffsetCorrection(offset, maxOffset);</div><div class="line"> <span class="number">58</span>:             &#125;</div><div class="line"> <span class="number">59</span>:         &#125; <span class="keyword">else</span> &#123;</div><div class="line"> <span class="number">60</span>:             <span class="comment">// 获得 映射Buffer结果(MappedFile)</span></div><div class="line"> <span class="number">61</span>:             SelectMappedBufferResult bufferConsumeQueue = consumeQueue.getIndexBuffer(offset);</div><div class="line"> <span class="number">62</span>:             <span class="keyword">if</span> (bufferConsumeQueue != <span class="keyword">null</span>) &#123;</div><div class="line"> <span class="number">63</span>:                 <span class="keyword">try</span> &#123;</div><div class="line"> <span class="number">64</span>:                     status = GetMessageStatus.NO_MATCHED_MESSAGE;</div><div class="line"> <span class="number">65</span>: </div><div class="line"> <span class="number">66</span>:                     <span class="keyword">long</span> nextPhyFileStartOffset = Long.MIN_VALUE; <span class="comment">// commitLog下一个文件(MappedFile)对应的开始offset。</span></div><div class="line"> <span class="number">67</span>:                     <span class="keyword">long</span> maxPhyOffsetPulling = <span class="number">0</span>; <span class="comment">// 消息物理位置拉取到的最大offset</span></div><div class="line"> <span class="number">68</span>: </div><div class="line"> <span class="number">69</span>:                     <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line"> <span class="number">70</span>:                     <span class="keyword">final</span> <span class="keyword">int</span> maxFilterMessageCount = <span class="number">16000</span>;</div><div class="line"> <span class="number">71</span>:                     <span class="keyword">final</span> <span class="keyword">boolean</span> diskFallRecorded = <span class="keyword">this</span>.messageStoreConfig.isDiskFallRecorded();</div><div class="line"> <span class="number">72</span>:                     <span class="comment">// 循环获取 消息位置信息</span></div><div class="line"> <span class="number">73</span>:                     <span class="keyword">for</span> (; i &lt; bufferConsumeQueue.getSize() &amp;&amp; i &lt; maxFilterMessageCount; i += ConsumeQueue.CQ_STORE_UNIT_SIZE) &#123;</div><div class="line"> <span class="number">74</span>:                         <span class="keyword">long</span> offsetPy = bufferConsumeQueue.getByteBuffer().getLong(); <span class="comment">// 消息物理位置offset</span></div><div class="line"> <span class="number">75</span>:                         <span class="keyword">int</span> sizePy = bufferConsumeQueue.getByteBuffer().getInt(); <span class="comment">// 消息长度</span></div><div class="line"> <span class="number">76</span>:                         <span class="keyword">long</span> tagsCode = bufferConsumeQueue.getByteBuffer().getLong(); <span class="comment">// 消息tagsCode</span></div><div class="line"> <span class="number">77</span>:                         <span class="comment">// 设置消息物理位置拉取到的最大offset</span></div><div class="line"> <span class="number">78</span>:                         maxPhyOffsetPulling = offsetPy;</div><div class="line"> <span class="number">79</span>:                         <span class="comment">// 当 offsetPy 小于 nextPhyFileStartOffset 时，意味着对应的 Message 已经移除，所以直接continue，直到可读取的Message。</span></div><div class="line"> <span class="number">80</span>:                         <span class="keyword">if</span> (nextPhyFileStartOffset != Long.MIN_VALUE) &#123;</div><div class="line"> <span class="number">81</span>:                             <span class="keyword">if</span> (offsetPy &lt; nextPhyFileStartOffset)</div><div class="line"> <span class="number">82</span>:                                 <span class="keyword">continue</span>;</div><div class="line"> <span class="number">83</span>:                         &#125;</div><div class="line"> <span class="number">84</span>:                         <span class="comment">// 校验 commitLog 是否需要硬盘，无法全部放在内存</span></div><div class="line"> <span class="number">85</span>:                         <span class="keyword">boolean</span> isInDisk = checkInDiskByCommitOffset(offsetPy, maxOffsetPy);</div><div class="line"> <span class="number">86</span>:                         <span class="comment">// 是否已经获得足够消息</span></div><div class="line"> <span class="number">87</span>:                         <span class="keyword">if</span> (<span class="keyword">this</span>.isTheBatchFull(sizePy, maxMsgNums, getResult.getBufferTotalSize(), getResult.getMessageCount(),</div><div class="line"> <span class="number">88</span>:                             isInDisk)) &#123;</div><div class="line"> <span class="number">89</span>:                             <span class="keyword">break</span>;</div><div class="line"> <span class="number">90</span>:                         &#125;</div><div class="line"> <span class="number">91</span>:                         <span class="comment">// 判断消息是否符合条件</span></div><div class="line"> <span class="number">92</span>:                         <span class="keyword">if</span> (<span class="keyword">this</span>.messageFilter.isMessageMatched(subscriptionData, tagsCode)) &#123;</div><div class="line"> <span class="number">93</span>:                             <span class="comment">// 从commitLog获取对应消息ByteBuffer</span></div><div class="line"> <span class="number">94</span>:                             SelectMappedBufferResult selectResult = <span class="keyword">this</span>.commitLog.getMessage(offsetPy, sizePy);</div><div class="line"> <span class="number">95</span>:                             <span class="keyword">if</span> (selectResult != <span class="keyword">null</span>) &#123;</div><div class="line"> <span class="number">96</span>:                                 <span class="keyword">this</span>.storeStatsService.getGetMessageTransferedMsgCount().incrementAndGet();</div><div class="line"> <span class="number">97</span>:                                 getResult.addMessage(selectResult);</div><div class="line"> <span class="number">98</span>:                                 status = GetMessageStatus.FOUND;</div><div class="line"> <span class="number">99</span>:                                 nextPhyFileStartOffset = Long.MIN_VALUE;</div><div class="line"><span class="number">100</span>:                             &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">101</span>:                                 <span class="comment">// 从commitLog无法读取到消息，说明该消息对应的文件（MappedFile）已经删除，计算下一个MappedFile的起始位置</span></div><div class="line"><span class="number">102</span>:                                 <span class="keyword">if</span> (getResult.getBufferTotalSize() == <span class="number">0</span>) &#123;</div><div class="line"><span class="number">103</span>:                                     status = GetMessageStatus.MESSAGE_WAS_REMOVING;</div><div class="line"><span class="number">104</span>:                                 &#125;</div><div class="line"><span class="number">105</span>:                                 nextPhyFileStartOffset = <span class="keyword">this</span>.commitLog.rollNextFile(offsetPy);</div><div class="line"><span class="number">106</span>:                             &#125;</div><div class="line"><span class="number">107</span>:                         &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">108</span>:                             <span class="keyword">if</span> (getResult.getBufferTotalSize() == <span class="number">0</span>) &#123;</div><div class="line"><span class="number">109</span>:                                 status = GetMessageStatus.NO_MATCHED_MESSAGE;</div><div class="line"><span class="number">110</span>:                             &#125;</div><div class="line"><span class="number">111</span>: </div><div class="line"><span class="number">112</span>:                             <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</div><div class="line"><span class="number">113</span>:                                 log.debug(<span class="string">"message type not matched, client: "</span> + subscriptionData + <span class="string">" server: "</span> + tagsCode);</div><div class="line"><span class="number">114</span>:                             &#125;</div><div class="line"><span class="number">115</span>:                         &#125;</div><div class="line"><span class="number">116</span>:                     &#125;</div><div class="line"><span class="number">117</span>:                     <span class="comment">// 统计剩余可拉取消息字节数</span></div><div class="line"><span class="number">118</span>:                     <span class="keyword">if</span> (diskFallRecorded) &#123;</div><div class="line"><span class="number">119</span>:                         <span class="keyword">long</span> fallBehind = maxOffsetPy - maxPhyOffsetPulling;</div><div class="line"><span class="number">120</span>:                         brokerStatsManager.recordDiskFallBehindSize(group, topic, queueId, fallBehind);</div><div class="line"><span class="number">121</span>:                     &#125;</div><div class="line"><span class="number">122</span>:                     <span class="comment">// 计算下次拉取消息的消息队列编号</span></div><div class="line"><span class="number">123</span>:                     nextBeginOffset = offset + (i / ConsumeQueue.CQ_STORE_UNIT_SIZE);</div><div class="line"><span class="number">124</span>:                     <span class="comment">// 根据剩余可拉取消息字节数与内存判断是否建议读取从节点</span></div><div class="line"><span class="number">125</span>:                     <span class="keyword">long</span> diff = maxOffsetPy - maxPhyOffsetPulling;</div><div class="line"><span class="number">126</span>:                     <span class="keyword">long</span> memory = (<span class="keyword">long</span>) (StoreUtil.TOTAL_PHYSICAL_MEMORY_SIZE</div><div class="line"><span class="number">127</span>:                             * (<span class="keyword">this</span>.messageStoreConfig.getAccessMessageInMemoryMaxRatio() / <span class="number">100.0</span>));</div><div class="line"><span class="number">128</span>:                     getResult.setSuggestPullingFromSlave(diff &gt; memory);</div><div class="line"><span class="number">129</span>:                 &#125; <span class="keyword">finally</span> &#123;</div><div class="line"><span class="number">130</span>:                     bufferConsumeQueue.release();</div><div class="line"><span class="number">131</span>:                 &#125;</div><div class="line"><span class="number">132</span>:             &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">133</span>:                 status = GetMessageStatus.OFFSET_FOUND_NULL;</div><div class="line"><span class="number">134</span>:                 nextBeginOffset = nextOffsetCorrection(offset, consumeQueue.rollNextFile(offset));</div><div class="line"><span class="number">135</span>:                 log.warn(<span class="string">"consumer request topic: "</span> + topic + <span class="string">"offset: "</span> + offset + <span class="string">" minOffset: "</span> + minOffset + <span class="string">" maxOffset: "</span></div><div class="line"><span class="number">136</span>:                     + maxOffset + <span class="string">", but access logic queue failed."</span>);</div><div class="line"><span class="number">137</span>:             &#125;</div><div class="line"><span class="number">138</span>:         &#125;</div><div class="line"><span class="number">139</span>:     &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">140</span>:         status = GetMessageStatus.NO_MATCHED_LOGIC_QUEUE;</div><div class="line"><span class="number">141</span>:         nextBeginOffset = nextOffsetCorrection(offset, <span class="number">0</span>);</div><div class="line"><span class="number">142</span>:     &#125;</div><div class="line"><span class="number">143</span>:     <span class="comment">// 统计</span></div><div class="line"><span class="number">144</span>:     <span class="keyword">if</span> (GetMessageStatus.FOUND == status) &#123;</div><div class="line"><span class="number">145</span>:         <span class="keyword">this</span>.storeStatsService.getGetMessageTimesTotalFound().incrementAndGet();</div><div class="line"><span class="number">146</span>:     &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">147</span>:         <span class="keyword">this</span>.storeStatsService.getGetMessageTimesTotalMiss().incrementAndGet();</div><div class="line"><span class="number">148</span>:     &#125;</div><div class="line"><span class="number">149</span>:     <span class="keyword">long</span> eclipseTime = <span class="keyword">this</span>.getSystemClock().now() - beginTime;</div><div class="line"><span class="number">150</span>:     <span class="keyword">this</span>.storeStatsService.setGetMessageEntireTimeMax(eclipseTime);</div><div class="line"><span class="number">151</span>:     <span class="comment">// 设置返回结果</span></div><div class="line"><span class="number">152</span>:     getResult.setStatus(status);</div><div class="line"><span class="number">153</span>:     getResult.setNextBeginOffset(nextBeginOffset);</div><div class="line"><span class="number">154</span>:     getResult.setMaxOffset(maxOffset);</div><div class="line"><span class="number">155</span>:     getResult.setMinOffset(minOffset);</div><div class="line"><span class="number">156</span>:     <span class="keyword">return</span> getResult;</div><div class="line"><span class="number">157</span>: &#125;</div><div class="line"><span class="number">158</span>: </div><div class="line"><span class="number">159</span>: <span class="comment">/**</span></div><div class="line">160:  * 根据 主题 + 队列编号 获取 消费队列</div><div class="line">161:  *</div><div class="line">162:  * <span class="doctag">@param</span> topic 主题</div><div class="line">163:  * <span class="doctag">@param</span> queueId 队列编号</div><div class="line">164:  * <span class="doctag">@return</span> 消费队列</div><div class="line">165:  */</div><div class="line"><span class="number">166</span>: <span class="function"><span class="keyword">public</span> ConsumeQueue <span class="title">findConsumeQueue</span><span class="params">(String topic, <span class="keyword">int</span> queueId)</span> </span>&#123;</div><div class="line"><span class="number">167</span>:     <span class="comment">// 获取 topic 对应的 所有消费队列</span></div><div class="line"><span class="number">168</span>:     ConcurrentHashMap&lt;Integer, ConsumeQueue&gt; map = consumeQueueTable.get(topic);</div><div class="line"><span class="number">169</span>:     <span class="keyword">if</span> (<span class="keyword">null</span> == map) &#123;</div><div class="line"><span class="number">170</span>:         ConcurrentHashMap&lt;Integer, ConsumeQueue&gt; newMap = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;(<span class="number">128</span>);</div><div class="line"><span class="number">171</span>:         ConcurrentHashMap&lt;Integer, ConsumeQueue&gt; oldMap = consumeQueueTable.putIfAbsent(topic, newMap);</div><div class="line"><span class="number">172</span>:         <span class="keyword">if</span> (oldMap != <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">173</span>:             map = oldMap;</div><div class="line"><span class="number">174</span>:         &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">175</span>:             map = newMap;</div><div class="line"><span class="number">176</span>:         &#125;</div><div class="line"><span class="number">177</span>:     &#125;</div><div class="line"><span class="number">178</span>:     <span class="comment">// 获取 queueId 对应的 消费队列</span></div><div class="line"><span class="number">179</span>:     ConsumeQueue logic = map.get(queueId);</div><div class="line"><span class="number">180</span>:     <span class="keyword">if</span> (<span class="keyword">null</span> == logic) &#123;</div><div class="line"><span class="number">181</span>:         ConsumeQueue newLogic = <span class="keyword">new</span> ConsumeQueue(<span class="comment">//</span></div><div class="line"><span class="number">182</span>:             topic, <span class="comment">//</span></div><div class="line"><span class="number">183</span>:             queueId, <span class="comment">//</span></div><div class="line"><span class="number">184</span>:             StorePathConfigHelper.getStorePathConsumeQueue(<span class="keyword">this</span>.messageStoreConfig.getStorePathRootDir()), <span class="comment">//</span></div><div class="line"><span class="number">185</span>:             <span class="keyword">this</span>.getMessageStoreConfig().getMapedFileSizeConsumeQueue(), <span class="comment">//</span></div><div class="line"><span class="number">186</span>:             <span class="keyword">this</span>);</div><div class="line"><span class="number">187</span>:         ConsumeQueue oldLogic = map.putIfAbsent(queueId, newLogic);</div><div class="line"><span class="number">188</span>:         <span class="keyword">if</span> (oldLogic != <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">189</span>:             logic = oldLogic;</div><div class="line"><span class="number">190</span>:         &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">191</span>:             logic = newLogic;</div><div class="line"><span class="number">192</span>:         &#125;</div><div class="line"><span class="number">193</span>:     &#125;</div><div class="line"><span class="number">194</span>: </div><div class="line"><span class="number">195</span>:     <span class="keyword">return</span> logic;</div><div class="line"><span class="number">196</span>: &#125;</div><div class="line"><span class="number">197</span>: </div><div class="line"><span class="number">198</span>: <span class="comment">/**</span></div><div class="line">199:  * 下一个获取队列offset修正</div><div class="line">200:  * 修正条件：主节点 或者 从节点开启校验offset开关</div><div class="line">201:  *</div><div class="line">202:  * <span class="doctag">@param</span> oldOffset 老队列offset</div><div class="line">203:  * <span class="doctag">@param</span> newOffset 新队列offset</div><div class="line">204:  * <span class="doctag">@return</span> 修正后的队列offset</div><div class="line">205:  */</div><div class="line"><span class="number">206</span>: <span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">nextOffsetCorrection</span><span class="params">(<span class="keyword">long</span> oldOffset, <span class="keyword">long</span> newOffset)</span> </span>&#123;</div><div class="line"><span class="number">207</span>:     <span class="keyword">long</span> nextOffset = oldOffset;</div><div class="line"><span class="number">208</span>:     <span class="keyword">if</span> (<span class="keyword">this</span>.getMessageStoreConfig().getBrokerRole() != BrokerRole.SLAVE || <span class="keyword">this</span>.getMessageStoreConfig().isOffsetCheckInSlave()) &#123;</div><div class="line"><span class="number">209</span>:         nextOffset = newOffset;</div><div class="line"><span class="number">210</span>:     &#125;</div><div class="line"><span class="number">211</span>:     <span class="keyword">return</span> nextOffset;</div><div class="line"><span class="number">212</span>: &#125;</div><div class="line"><span class="number">213</span>: </div><div class="line"><span class="number">214</span>: <span class="comment">/**</span></div><div class="line">215:  * 校验 commitLog 是否需要硬盘，无法全部放在内存</div><div class="line">216:  *</div><div class="line">217:  * <span class="doctag">@param</span> offsetPy commitLog 指定offset</div><div class="line">218:  * <span class="doctag">@param</span> maxOffsetPy commitLog 最大offset</div><div class="line">219:  * <span class="doctag">@return</span> 是否需要硬盘</div><div class="line">220:  */</div><div class="line"><span class="number">221</span>: <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">checkInDiskByCommitOffset</span><span class="params">(<span class="keyword">long</span> offsetPy, <span class="keyword">long</span> maxOffsetPy)</span> </span>&#123;</div><div class="line"><span class="number">222</span>:     <span class="keyword">long</span> memory = (<span class="keyword">long</span>) (StoreUtil.TOTAL_PHYSICAL_MEMORY_SIZE * (<span class="keyword">this</span>.messageStoreConfig.getAccessMessageInMemoryMaxRatio() / <span class="number">100.0</span>));</div><div class="line"><span class="number">223</span>:     <span class="keyword">return</span> (maxOffsetPy - offsetPy) &gt; memory;</div><div class="line"><span class="number">224</span>: &#125;</div><div class="line"><span class="number">225</span>: </div><div class="line"><span class="number">226</span>: <span class="comment">/**</span></div><div class="line">227:  * 判断获取消息是否已经满</div><div class="line">228:  *</div><div class="line">229:  * <span class="doctag">@param</span> sizePy 字节数</div><div class="line">230:  * <span class="doctag">@param</span> maxMsgNums 最大消息数</div><div class="line">231:  * <span class="doctag">@param</span> bufferTotal 目前已经计算字节数</div><div class="line">232:  * <span class="doctag">@param</span> messageTotal 目前已经计算消息数</div><div class="line">233:  * <span class="doctag">@param</span> isInDisk 是否在硬盘中</div><div class="line">234:  * <span class="doctag">@return</span> 是否已满</div><div class="line">235:  */</div><div class="line"><span class="number">236</span>: <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isTheBatchFull</span><span class="params">(<span class="keyword">int</span> sizePy, <span class="keyword">int</span> maxMsgNums, <span class="keyword">int</span> bufferTotal, <span class="keyword">int</span> messageTotal, <span class="keyword">boolean</span> isInDisk)</span> </span>&#123;</div><div class="line"><span class="number">237</span>:     <span class="keyword">if</span> (<span class="number">0</span> == bufferTotal || <span class="number">0</span> == messageTotal) &#123;</div><div class="line"><span class="number">238</span>:         <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line"><span class="number">239</span>:     &#125;</div><div class="line"><span class="number">240</span>:     <span class="comment">// 消息数量已经满足请求数量(maxMsgNums)</span></div><div class="line"><span class="number">241</span>:     <span class="keyword">if</span> ((messageTotal + <span class="number">1</span>) &gt;= maxMsgNums) &#123;</div><div class="line"><span class="number">242</span>:         <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line"><span class="number">243</span>:     &#125;</div><div class="line"><span class="number">244</span>:     <span class="comment">// 根据消息存储配置的最大传输字节数、最大传输消息数是否已满</span></div><div class="line"><span class="number">245</span>:     <span class="keyword">if</span> (isInDisk) &#123;</div><div class="line"><span class="number">246</span>:         <span class="keyword">if</span> ((bufferTotal + sizePy) &gt; <span class="keyword">this</span>.messageStoreConfig.getMaxTransferBytesOnMessageInDisk()) &#123;</div><div class="line"><span class="number">247</span>:             <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line"><span class="number">248</span>:         &#125;</div><div class="line"><span class="number">249</span>: </div><div class="line"><span class="number">250</span>:         <span class="keyword">if</span> ((messageTotal + <span class="number">1</span>) &gt; <span class="keyword">this</span>.messageStoreConfig.getMaxTransferCountOnMessageInDisk()) &#123;</div><div class="line"><span class="number">251</span>:             <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line"><span class="number">252</span>:         &#125;</div><div class="line"><span class="number">253</span>:     &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">254</span>:         <span class="keyword">if</span> ((bufferTotal + sizePy) &gt; <span class="keyword">this</span>.messageStoreConfig.getMaxTransferBytesOnMessageInMemory()) &#123;</div><div class="line"><span class="number">255</span>:             <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line"><span class="number">256</span>:         &#125;</div><div class="line"><span class="number">257</span>: </div><div class="line"><span class="number">258</span>:         <span class="keyword">if</span> ((messageTotal + <span class="number">1</span>) &gt; <span class="keyword">this</span>.messageStoreConfig.getMaxTransferCountOnMessageInMemory()) &#123;</div><div class="line"><span class="number">259</span>:             <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line"><span class="number">260</span>:         &#125;</div><div class="line"><span class="number">261</span>:     &#125;</div><div class="line"><span class="number">262</span>: </div><div class="line"><span class="number">263</span>:     <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line"><span class="number">264</span>: &#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>说明 ：根据 消息分组(<code>group</code>) + 主题(<code>Topic</code>) + 队列编号(<code>queueId</code>) + 队列位置(<code>offset</code>) + 订阅信息(<code>subscriptionData</code>) 获取 指定条数(<code>maxMsgNums</code>) 消息(<code>Message</code>)。</li>
<li>第 14 至 18 行 ：判断 <code>Store</code> 是否处于关闭状态，若关闭，则无法获取消息。</li>
<li>第 19 至 23 行 ：判断当前运行状态是否可读，若不可读，则无法获取消息。</li>
<li>第 37 行 ：根据 主题(<code>Topic</code>) + 队列编号(<code>queueId</code>) 获取 消息队列(<code>ConsumeQueue</code>)。
<ul>
<li><code>#findConsumeQueue(...)</code> ：第 159 至 196 行。</li>
</ul>
</li>
<li>第 43 至 58 行 ：各种队列位置(<code>offset</code>) 无法读取消息，并针对对应的情况，计算下一次 <code>Client</code> 队列拉取位置。
<ul>
<li>第 43 至 45 行 ：消息队列无消息。</li>
<li>第 46 至 48 行 ：查询的消息队列位置（<code>offset</code>） 太小。</li>
<li>第 49 至 51 行 ：查询的消息队列位置（<code>offset</code>） 恰好等于 消息队列最大的队列位置。该情况是正常现象，相当于查询最新的消息。</li>
<li>第 52 至 58 行 ：查询的消息队列位置（<code>offset</code>） 超过过多。</li>
<li><code>#nextOffsetCorrection(...)</code> ：第 198 至 212 行。</li>
</ul>
</li>
<li>第 61 行 ：根据 消费队列位置(<code>offset</code>) 获取 对应的<code>MappedFile</code>。</li>
<li>第 72 至 128 行 ：<strong>循环</strong>获取 <code>消息位置信息</code>。
<ul>
<li>第 74 至 76 行 ：读取每一个 <code>消息位置信息</code>。</li>
<li>第 79 至 83 行 ：当 <code>offsetPy</code> 小于 <code>nextPhyFileStartOffset</code> 时，意味着对
应的 <code>Message</code> 已经移除，所以直接continue，直到可读取的 <code>Message</code>。</li>
<li>第 84 至 90 行 ：判断是否已经获得足够的消息。
<ul>
<li><code>#checkInDiskByCommitOffset(...)</code> ：第 214 至 224 行。</li>
<li><code>#isTheBatchFull(...)</code> ：第 226 至 264 行。</li>
</ul>
</li>
</ul>
</li>
<li>第 92 行 ：判断消息是否符合条件。详细解析见：<a href="defaultmessagefilterismessagematched">DefaultMessageFilter#isMessageMatched(...)</a>。</li>
<li>第 94 行 ：从 <code>CommitLog</code> 获取对应 消息的<code>MappedByteBuffer</code>。</li>
<li>第 95 至 99 行 ：获取 <code>消息MappedByteBuffer</code> 成功。</li>
<li>第 100 至 106 行 ：获取 <code>消息MappedByteBuffer</code> 失败。从 <code>CommitLog</code> 无法读取到消息，说明 该消息对应的文件(<code>MappedFile</code>) 已经删除，此时计算下一个<code>MappedFile</code>的起始位置。<strong>该逻辑需要配合（第 79 至 83 行）一起理解。</strong></li>
<li>第 117 至 120 行 ：统计剩余可拉取消息字节数。</li>
<li>第 123 行 ：计算下次拉取消息的消息队列编号。</li>
<li>第 124 至 128 行 ：根据剩余可拉取消息字节数与内存判断是否建议读取从节点。</li>
<li>第 130 行 ：释放 <code>bufferConsumeQueue</code> 对 <code>MappedFile</code> 的指向。此处 <code>MappedFile</code> 是 <code>ConsumeQueue</code> 里的文件，不是 <code>CommitLog</code> 下的文件。</li>
<li>第 133 至 136 行 ：获得消费队列位置(<code>offset</code>) 获取 对应的<code>MappedFile</code> 为<strong>空</strong>，计算<code>ConsumeQueue</code> 从 <code>offset</code> 开始的下一个 <code>MappedFile</code> 对应的位置。</li>
<li>第 143 至 150 行 ：记录统计信息：消耗时间、拉取到消息/未拉取到消息次数。</li>
<li>第 151 至 156 行 ：设置返回结果并返回。</li>
</ul>
<h2>DefaultMessageFilter#isMessageMatched(...)</h2>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultMessageFilter</span> <span class="keyword">implements</span> <span class="title">MessageFilter</span> </span>&#123;</div><div class="line"> <span class="number">2</span>: </div><div class="line"> <span class="number">3</span>:     <span class="meta">@Override</span></div><div class="line"> <span class="number">4</span>:     <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isMessageMatched</span><span class="params">(SubscriptionData subscriptionData, Long tagsCode)</span> </span>&#123;</div><div class="line"> <span class="number">5</span>:         <span class="comment">// 消息tagsCode 空</span></div><div class="line"> <span class="number">6</span>:         <span class="keyword">if</span> (tagsCode == <span class="keyword">null</span>) &#123;</div><div class="line"> <span class="number">7</span>:             <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line"> <span class="number">8</span>:         &#125;</div><div class="line"> <span class="number">9</span>:         <span class="comment">// 订阅数据 空</span></div><div class="line"><span class="number">10</span>:         <span class="keyword">if</span> (<span class="keyword">null</span> == subscriptionData) &#123;</div><div class="line"><span class="number">11</span>:             <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line"><span class="number">12</span>:         &#125;</div><div class="line"><span class="number">13</span>:         <span class="comment">// classFilter</span></div><div class="line"><span class="number">14</span>:         <span class="keyword">if</span> (subscriptionData.isClassFilterMode())</div><div class="line"><span class="number">15</span>:             <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line"><span class="number">16</span>:         <span class="comment">// 订阅表达式 全匹配</span></div><div class="line"><span class="number">17</span>:         <span class="keyword">if</span> (subscriptionData.getSubString().equals(SubscriptionData.SUB_ALL)) &#123;</div><div class="line"><span class="number">18</span>:             <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line"><span class="number">19</span>:         &#125;</div><div class="line"><span class="number">20</span>:         <span class="comment">// 订阅数据code数组 是否包含 消息tagsCode</span></div><div class="line"><span class="number">21</span>:         <span class="keyword">return</span> subscriptionData.getCodeSet().contains(tagsCode.intValue());</div><div class="line"><span class="number">22</span>:     &#125;</div><div class="line"><span class="number">23</span>: </div><div class="line"><span class="number">24</span>: &#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>说明 ：消息过滤器默认实现。</li>
</ul>
<h2>PullRequestHoldService</h2>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">  <span class="number">1</span>: <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PullRequestHoldService</span> <span class="keyword">extends</span> <span class="title">ServiceThread</span> </span>&#123;</div><div class="line">  <span class="number">2</span>: </div><div class="line">  <span class="number">3</span>:     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);</div><div class="line">  <span class="number">4</span>: </div><div class="line">  <span class="number">5</span>:     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TOPIC_QUEUEID_SEPARATOR = <span class="string">"@"</span>;</div><div class="line">  <span class="number">6</span>: </div><div class="line">  <span class="number">7</span>:     <span class="keyword">private</span> <span class="keyword">final</span> BrokerController brokerController;</div><div class="line">  <span class="number">8</span>: </div><div class="line">  <span class="number">9</span>:     <span class="keyword">private</span> <span class="keyword">final</span> SystemClock systemClock = <span class="keyword">new</span> SystemClock();</div><div class="line"> <span class="number">10</span>:     <span class="comment">/**</span></div><div class="line"> 11:      * 消息过滤器</div><div class="line"> 12:      */</div><div class="line"> <span class="number">13</span>:     <span class="keyword">private</span> <span class="keyword">final</span> MessageFilter messageFilter = <span class="keyword">new</span> DefaultMessageFilter();</div><div class="line"> <span class="number">14</span>:     <span class="comment">/**</span></div><div class="line"> 15:      * 拉取消息请求集合</div><div class="line"> 16:      */</div><div class="line"> <span class="number">17</span>:     <span class="keyword">private</span> ConcurrentHashMap&lt;String<span class="comment">/* topic@queueId */</span>, ManyPullRequest&gt; pullRequestTable =</div><div class="line"> <span class="number">18</span>:             <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;(<span class="number">1024</span>);</div><div class="line"> <span class="number">19</span>: </div><div class="line"> <span class="number">20</span>:     <span class="function"><span class="keyword">public</span> <span class="title">PullRequestHoldService</span><span class="params">(<span class="keyword">final</span> BrokerController brokerController)</span> </span>&#123;</div><div class="line"> <span class="number">21</span>:         <span class="keyword">this</span>.brokerController = brokerController;</div><div class="line"> <span class="number">22</span>:     &#125;</div><div class="line"> <span class="number">23</span>: </div><div class="line"> <span class="number">24</span>:     <span class="comment">/**</span></div><div class="line"> 25:      * 添加拉取消息挂起请求</div><div class="line"> 26:      *</div><div class="line"> 27:      * <span class="doctag">@param</span> topic 主题</div><div class="line"> 28:      * <span class="doctag">@param</span> queueId 队列编号</div><div class="line"> 29:      * <span class="doctag">@param</span> pullRequest 拉取消息请求</div><div class="line"> 30:      */</div><div class="line"> <span class="number">31</span>:     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">suspendPullRequest</span><span class="params">(<span class="keyword">final</span> String topic, <span class="keyword">final</span> <span class="keyword">int</span> queueId, <span class="keyword">final</span> PullRequest pullRequest)</span> </span>&#123;</div><div class="line"> <span class="number">32</span>:         String key = <span class="keyword">this</span>.buildKey(topic, queueId);</div><div class="line"> <span class="number">33</span>:         ManyPullRequest mpr = <span class="keyword">this</span>.pullRequestTable.get(key);</div><div class="line"> <span class="number">34</span>:         <span class="keyword">if</span> (<span class="keyword">null</span> == mpr) &#123;</div><div class="line"> <span class="number">35</span>:             mpr = <span class="keyword">new</span> ManyPullRequest();</div><div class="line"> <span class="number">36</span>:             ManyPullRequest prev = <span class="keyword">this</span>.pullRequestTable.putIfAbsent(key, mpr);</div><div class="line"> <span class="number">37</span>:             <span class="keyword">if</span> (prev != <span class="keyword">null</span>) &#123;</div><div class="line"> <span class="number">38</span>:                 mpr = prev;</div><div class="line"> <span class="number">39</span>:             &#125;</div><div class="line"> <span class="number">40</span>:         &#125;</div><div class="line"> <span class="number">41</span>: </div><div class="line"> <span class="number">42</span>:         mpr.addPullRequest(pullRequest);</div><div class="line"> <span class="number">43</span>:     &#125;</div><div class="line"> <span class="number">44</span>: </div><div class="line"> <span class="number">45</span>:     <span class="comment">/**</span></div><div class="line"> 46:      * 根据 主题 + 队列编号 创建唯一标识</div><div class="line"> 47:      *</div><div class="line"> 48:      * <span class="doctag">@param</span> topic 主题</div><div class="line"> 49:      * <span class="doctag">@param</span> queueId 队列编号</div><div class="line"> 50:      * <span class="doctag">@return</span> key</div><div class="line"> 51:      */</div><div class="line"> <span class="number">52</span>:     <span class="function"><span class="keyword">private</span> String <span class="title">buildKey</span><span class="params">(<span class="keyword">final</span> String topic, <span class="keyword">final</span> <span class="keyword">int</span> queueId)</span> </span>&#123;</div><div class="line"> <span class="number">53</span>:         StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line"> <span class="number">54</span>:         sb.append(topic);</div><div class="line"> <span class="number">55</span>:         sb.append(TOPIC_QUEUEID_SEPARATOR);</div><div class="line"> <span class="number">56</span>:         sb.append(queueId);</div><div class="line"> <span class="number">57</span>:         <span class="keyword">return</span> sb.toString();</div><div class="line"> <span class="number">58</span>:     &#125;</div><div class="line"> <span class="number">59</span>: </div><div class="line"> <span class="number">60</span>:     <span class="meta">@Override</span></div><div class="line"> <span class="number">61</span>:     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line"> <span class="number">62</span>:         log.info(<span class="string">"&#123;&#125; service started"</span>, <span class="keyword">this</span>.getServiceName());</div><div class="line"> <span class="number">63</span>:         <span class="keyword">while</span> (!<span class="keyword">this</span>.isStopped()) &#123;</div><div class="line"> <span class="number">64</span>:             <span class="keyword">try</span> &#123;</div><div class="line"> <span class="number">65</span>:                 <span class="comment">// 根据 长轮训 还是 短轮训 设置不同的等待时间</span></div><div class="line"> <span class="number">66</span>:                 <span class="keyword">if</span> (<span class="keyword">this</span>.brokerController.getBrokerConfig().isLongPollingEnable()) &#123;</div><div class="line"> <span class="number">67</span>:                     <span class="keyword">this</span>.waitForRunning(<span class="number">5</span> * <span class="number">1000</span>);</div><div class="line"> <span class="number">68</span>:                 &#125; <span class="keyword">else</span> &#123;</div><div class="line"> <span class="number">69</span>:                     <span class="keyword">this</span>.waitForRunning(<span class="keyword">this</span>.brokerController.getBrokerConfig().getShortPollingTimeMills());</div><div class="line"> <span class="number">70</span>:                 &#125;</div><div class="line"> <span class="number">71</span>:                 <span class="comment">// 检查挂起请求是否有需要通知的</span></div><div class="line"> <span class="number">72</span>:                 <span class="keyword">long</span> beginLockTimestamp = <span class="keyword">this</span>.systemClock.now();</div><div class="line"> <span class="number">73</span>:                 <span class="keyword">this</span>.checkHoldRequest();</div><div class="line"> <span class="number">74</span>:                 <span class="keyword">long</span> costTime = <span class="keyword">this</span>.systemClock.now() - beginLockTimestamp;</div><div class="line"> <span class="number">75</span>:                 <span class="keyword">if</span> (costTime &gt; <span class="number">5</span> * <span class="number">1000</span>) &#123;</div><div class="line"> <span class="number">76</span>:                     log.info(<span class="string">"[NOTIFYME] check hold request cost &#123;&#125; ms."</span>, costTime);</div><div class="line"> <span class="number">77</span>:                 &#125;</div><div class="line"> <span class="number">78</span>:             &#125; <span class="keyword">catch</span> (Throwable e) &#123;</div><div class="line"> <span class="number">79</span>:                 log.warn(<span class="keyword">this</span>.getServiceName() + <span class="string">" service has exception. "</span>, e);</div><div class="line"> <span class="number">80</span>:             &#125;</div><div class="line"> <span class="number">81</span>:         &#125;</div><div class="line"> <span class="number">82</span>: </div><div class="line"> <span class="number">83</span>:         log.info(<span class="string">"&#123;&#125; service end"</span>, <span class="keyword">this</span>.getServiceName());</div><div class="line"> <span class="number">84</span>:     &#125;</div><div class="line"> <span class="number">85</span>: </div><div class="line"> <span class="number">86</span>:     <span class="meta">@Override</span></div><div class="line"> <span class="number">87</span>:     <span class="function"><span class="keyword">public</span> String <span class="title">getServiceName</span><span class="params">()</span> </span>&#123;</div><div class="line"> <span class="number">88</span>:         <span class="keyword">return</span> PullRequestHoldService.class.getSimpleName();</div><div class="line"> <span class="number">89</span>:     &#125;</div><div class="line"> <span class="number">90</span>: </div><div class="line"> <span class="number">91</span>:     <span class="comment">/**</span></div><div class="line"> 92:      * 遍历挂起请求，检查是否有需要通知的请求。</div><div class="line"> 93:      */</div><div class="line"> <span class="number">94</span>:     <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkHoldRequest</span><span class="params">()</span> </span>&#123;</div><div class="line"> <span class="number">95</span>:         <span class="keyword">for</span> (String key : <span class="keyword">this</span>.pullRequestTable.keySet()) &#123;</div><div class="line"> <span class="number">96</span>:             String[] kArray = key.split(TOPIC_QUEUEID_SEPARATOR);</div><div class="line"> <span class="number">97</span>:             <span class="keyword">if</span> (<span class="number">2</span> == kArray.length) &#123;</div><div class="line"> <span class="number">98</span>:                 String topic = kArray[<span class="number">0</span>];</div><div class="line"> <span class="number">99</span>:                 <span class="keyword">int</span> queueId = Integer.parseInt(kArray[<span class="number">1</span>]);</div><div class="line"><span class="number">100</span>:                 <span class="keyword">final</span> <span class="keyword">long</span> offset = <span class="keyword">this</span>.brokerController.getMessageStore().getMaxOffsetInQuque(topic, queueId);</div><div class="line"><span class="number">101</span>:                 <span class="keyword">try</span> &#123;</div><div class="line"><span class="number">102</span>:                     <span class="keyword">this</span>.notifyMessageArriving(topic, queueId, offset);</div><div class="line"><span class="number">103</span>:                 &#125; <span class="keyword">catch</span> (Throwable e) &#123;</div><div class="line"><span class="number">104</span>:                     log.error(<span class="string">"check hold request failed. topic=&#123;&#125;, queueId=&#123;&#125;"</span>, topic, queueId, e);</div><div class="line"><span class="number">105</span>:                 &#125;</div><div class="line"><span class="number">106</span>:             &#125;</div><div class="line"><span class="number">107</span>:         &#125;</div><div class="line"><span class="number">108</span>:     &#125;</div><div class="line"><span class="number">109</span>: </div><div class="line"><span class="number">110</span>:     <span class="comment">/**</span></div><div class="line">111:      * 检查是否有需要通知的请求</div><div class="line">112:      *</div><div class="line">113:      * <span class="doctag">@param</span> topic 主题</div><div class="line">114:      * <span class="doctag">@param</span> queueId 队列编号</div><div class="line">115:      * <span class="doctag">@param</span> maxOffset 消费队列最大offset</div><div class="line">116:      */</div><div class="line"><span class="number">117</span>:     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyMessageArriving</span><span class="params">(<span class="keyword">final</span> String topic, <span class="keyword">final</span> <span class="keyword">int</span> queueId, <span class="keyword">final</span> <span class="keyword">long</span> maxOffset)</span> </span>&#123;</div><div class="line"><span class="number">118</span>:         notifyMessageArriving(topic, queueId, maxOffset, <span class="keyword">null</span>);</div><div class="line"><span class="number">119</span>:     &#125;</div><div class="line"><span class="number">120</span>: </div><div class="line"><span class="number">121</span>:     <span class="comment">/**</span></div><div class="line">122:      * 检查是否有需要通知的请求</div><div class="line">123:      *</div><div class="line">124:      * <span class="doctag">@param</span> topic 主题</div><div class="line">125:      * <span class="doctag">@param</span> queueId 队列编号</div><div class="line">126:      * <span class="doctag">@param</span> maxOffset 消费队列最大offset</div><div class="line">127:      * <span class="doctag">@param</span> tagsCode 过滤tagsCode</div><div class="line">128:      */</div><div class="line"><span class="number">129</span>:     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyMessageArriving</span><span class="params">(<span class="keyword">final</span> String topic, <span class="keyword">final</span> <span class="keyword">int</span> queueId, <span class="keyword">final</span> <span class="keyword">long</span> maxOffset, <span class="keyword">final</span> Long tagsCode)</span> </span>&#123;</div><div class="line"><span class="number">130</span>:         String key = <span class="keyword">this</span>.buildKey(topic, queueId);</div><div class="line"><span class="number">131</span>:         ManyPullRequest mpr = <span class="keyword">this</span>.pullRequestTable.get(key);</div><div class="line"><span class="number">132</span>:         <span class="keyword">if</span> (mpr != <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">133</span>:             <span class="comment">//</span></div><div class="line"><span class="number">134</span>:             List&lt;PullRequest&gt; requestList = mpr.cloneListAndClear();</div><div class="line"><span class="number">135</span>:             <span class="keyword">if</span> (requestList != <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">136</span>:                 List&lt;PullRequest&gt; replayList = <span class="keyword">new</span> ArrayList&lt;&gt;(); <span class="comment">// 不符合唤醒的请求数组</span></div><div class="line"><span class="number">137</span>: </div><div class="line"><span class="number">138</span>:                 <span class="keyword">for</span> (PullRequest request : requestList) &#123;</div><div class="line"><span class="number">139</span>:                     <span class="comment">// 如果 maxOffset 过小，则重新读取一次。</span></div><div class="line"><span class="number">140</span>:                     <span class="keyword">long</span> newestOffset = maxOffset;</div><div class="line"><span class="number">141</span>:                     <span class="keyword">if</span> (newestOffset &lt;= request.getPullFromThisOffset()) &#123;</div><div class="line"><span class="number">142</span>:                         newestOffset = <span class="keyword">this</span>.brokerController.getMessageStore().getMaxOffsetInQuque(topic, queueId);</div><div class="line"><span class="number">143</span>:                     &#125;</div><div class="line"><span class="number">144</span>:                     <span class="comment">// 有新的匹配消息，唤醒请求，即再次拉取消息。</span></div><div class="line"><span class="number">145</span>:                     <span class="keyword">if</span> (newestOffset &gt; request.getPullFromThisOffset()) &#123;</div><div class="line"><span class="number">146</span>:                         <span class="keyword">if</span> (<span class="keyword">this</span>.messageFilter.isMessageMatched(request.getSubscriptionData(), tagsCode)) &#123;</div><div class="line"><span class="number">147</span>:                             <span class="keyword">try</span> &#123;</div><div class="line"><span class="number">148</span>:                                 <span class="keyword">this</span>.brokerController.getPullMessageProcessor().executeRequestWhenWakeup(request.getClientChannel(),</div><div class="line"><span class="number">149</span>:                                     request.getRequestCommand());</div><div class="line"><span class="number">150</span>:                             &#125; <span class="keyword">catch</span> (Throwable e) &#123;</div><div class="line"><span class="number">151</span>:                                 log.error(<span class="string">"execute request when wakeup failed."</span>, e);</div><div class="line"><span class="number">152</span>:                             &#125;</div><div class="line"><span class="number">153</span>:                             <span class="keyword">continue</span>;</div><div class="line"><span class="number">154</span>:                         &#125;</div><div class="line"><span class="number">155</span>:                     &#125;</div><div class="line"><span class="number">156</span>:                     <span class="comment">// 超过挂起时间，唤醒请求，即再次拉取消息。</span></div><div class="line"><span class="number">157</span>:                     <span class="keyword">if</span> (System.currentTimeMillis() &gt;= (request.getSuspendTimestamp() + request.getTimeoutMillis())) &#123;</div><div class="line"><span class="number">158</span>:                         <span class="keyword">try</span> &#123;</div><div class="line"><span class="number">159</span>:                             <span class="keyword">this</span>.brokerController.getPullMessageProcessor().executeRequestWhenWakeup(request.getClientChannel(),</div><div class="line"><span class="number">160</span>:                                 request.getRequestCommand());</div><div class="line"><span class="number">161</span>:                         &#125; <span class="keyword">catch</span> (Throwable e) &#123;</div><div class="line"><span class="number">162</span>:                             log.error(<span class="string">"execute request when wakeup failed."</span>, e);</div><div class="line"><span class="number">163</span>:                         &#125;</div><div class="line"><span class="number">164</span>:                         <span class="keyword">continue</span>;</div><div class="line"><span class="number">165</span>:                     &#125;</div><div class="line"><span class="number">166</span>:                     <span class="comment">// 不符合再次拉取的请求，再次添加回去</span></div><div class="line"><span class="number">167</span>:                     replayList.add(request);</div><div class="line"><span class="number">168</span>:                 &#125;</div><div class="line"><span class="number">169</span>:                 <span class="comment">// 添加回去</span></div><div class="line"><span class="number">170</span>:                 <span class="keyword">if</span> (!replayList.isEmpty()) &#123;</div><div class="line"><span class="number">171</span>:                     mpr.addPullRequest(replayList);</div><div class="line"><span class="number">172</span>:                 &#125;</div><div class="line"><span class="number">173</span>:             &#125;</div><div class="line"><span class="number">174</span>:         &#125;</div><div class="line"><span class="number">175</span>:     &#125;</div><div class="line"><span class="number">176</span>: &#125;</div></pre></td></tr></table></figure></p>
<ul>
<li><code>PullRequestHoldService</code> 说明 ：拉取消息请求挂起维护线程服务。
<ul>
<li>当拉取消息请求获得不了消息时，则会将请求进行挂起，添加到该服务。</li>
<li>当有符合条件信息时 或 挂起超时时，重新执行获取消息逻辑。</li>
</ul>
</li>
<li><code>#suspendPullRequest(...)</code> 说明 ：添加拉取消息挂起请求到集合( <code>pullRequestTable</code> )。</li>
<li><code>#run(...)</code> 说明 ：<strong>定时</strong>检查挂起请求是否有需要通知重新拉取消息并进行通知。
<ul>
<li>第 65 至 70 行 ：根据<code>长轮训</code>or<code>短轮训</code>设置不同的等待时间。</li>
<li>第 71 至 77 行 ：检查挂起请求是否有需要通知的。</li>
</ul>
</li>
<li><code>#checkHoldRequest(...)</code> 说明 ：遍历挂起请求，检查是否有需要通知的。</li>
<li><code>#notifyMessageArriving(...)</code> 说明 ：检查<strong>指定队列</strong>是否有需要通知的请求。
<ul>
<li>第 139 至 143 行 ：如果 <code>maxOffset</code> 过小，重新获取一次最新的。</li>
<li>第 144 至 155 行 ：有新的匹配消息，唤醒请求，即再次拉取消息。</li>
<li>第 156 至 165 行 ：超过挂起时间，唤醒请求，即再次拉取消息。</li>
<li>第 148 || 159 行 ：唤醒请求，再次拉取消息。原先担心拉取消息时间过长，导致影响整个挂起请求的遍历，后面查看<code>#executeRequestWhenWakeup(...)</code>，实际是丢到线程池进行一步的消息拉取，不会有性能上的问题。详细解析见：<a href="pullmessageprocessorexecuterequestwhenwakeup">PullMessageProcessor#executeRequestWhenWakeup(...)</a>。</li>
<li>第 166 至 172 行 ：不符合唤醒的请求重新添加到集合(<code>pullRequestTable</code>)。</li>
</ul>
</li>
</ul>
<h2>PullMessageProcessor#executeRequestWhenWakeup(...)</h2>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">executeRequestWhenWakeup</span><span class="params">(<span class="keyword">final</span> Channel channel, <span class="keyword">final</span> RemotingCommand request)</span> <span class="keyword">throws</span> RemotingCommandException </span>&#123;</div><div class="line"> <span class="number">2</span>:     Runnable run = <span class="keyword">new</span> Runnable() &#123;</div><div class="line"> <span class="number">3</span>:         <span class="meta">@Override</span></div><div class="line"> <span class="number">4</span>:         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line"> <span class="number">5</span>:             <span class="keyword">try</span> &#123;</div><div class="line"> <span class="number">6</span>:                 <span class="comment">// 调用拉取请求。本次调用，设置不挂起请求。</span></div><div class="line"> <span class="number">7</span>:                 <span class="keyword">final</span> RemotingCommand response = PullMessageProcessor.<span class="keyword">this</span>.processRequest(channel, request, <span class="keyword">false</span>);</div><div class="line"> <span class="number">8</span>: </div><div class="line"> <span class="number">9</span>:                 <span class="keyword">if</span> (response != <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">10</span>:                     response.setOpaque(request.getOpaque());</div><div class="line"><span class="number">11</span>:                     response.markResponseType();</div><div class="line"><span class="number">12</span>:                     <span class="keyword">try</span> &#123;</div><div class="line"><span class="number">13</span>:                         channel.writeAndFlush(response).addListener(<span class="keyword">new</span> ChannelFutureListener() &#123;</div><div class="line"><span class="number">14</span>:                             <span class="meta">@Override</span></div><div class="line"><span class="number">15</span>:                             <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operationComplete</span><span class="params">(ChannelFuture future)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"><span class="number">16</span>:                                 <span class="keyword">if</span> (!future.isSuccess()) &#123;</div><div class="line"><span class="number">17</span>:                                     LOG.error(<span class="string">"ProcessRequestWrapper response to &#123;&#125; failed"</span>, future.channel().remoteAddress(), future.cause());</div><div class="line"><span class="number">18</span>:                                     LOG.error(request.toString());</div><div class="line"><span class="number">19</span>:                                     LOG.error(response.toString());</div><div class="line"><span class="number">20</span>:                                 &#125;</div><div class="line"><span class="number">21</span>:                             &#125;</div><div class="line"><span class="number">22</span>:                         &#125;);</div><div class="line"><span class="number">23</span>:                     &#125; <span class="keyword">catch</span> (Throwable e) &#123;</div><div class="line"><span class="number">24</span>:                         LOG.error(<span class="string">"ProcessRequestWrapper process request over, but response failed"</span>, e);</div><div class="line"><span class="number">25</span>:                         LOG.error(request.toString());</div><div class="line"><span class="number">26</span>:                         LOG.error(response.toString());</div><div class="line"><span class="number">27</span>:                     &#125;</div><div class="line"><span class="number">28</span>:                 &#125;</div><div class="line"><span class="number">29</span>:             &#125; <span class="keyword">catch</span> (RemotingCommandException e1) &#123;</div><div class="line"><span class="number">30</span>:                 LOG.error(<span class="string">"ExecuteRequestWhenWakeup run"</span>, e1);</div><div class="line"><span class="number">31</span>:             &#125;</div><div class="line"><span class="number">32</span>:         &#125;</div><div class="line"><span class="number">33</span>:     &#125;;</div><div class="line"><span class="number">34</span>:     <span class="comment">// 提交拉取请求到线程池</span></div><div class="line"><span class="number">35</span>:     <span class="keyword">this</span>.brokerController.getPullMessageExecutor().submit(<span class="keyword">new</span> RequestTask(run, channel, request));</div><div class="line"><span class="number">36</span>: &#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>说明 ：执行请求唤醒，即再次拉取消息。该方法调用线程池，因此，不会阻塞。</li>
<li>第 7 行 ：调用拉取消息请求。本次调用，设置即使请求不到消息，也不挂起请求。如果不设置，请求可能被无限挂起，被 <code>Broker</code> 无限循环。</li>
<li>第 35 行 ：<strong>提交拉取消息请求到线程池</strong>。</li>
</ul>
<h1>5、Broker 提供[更新消费进度]接口</h1>
<p><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">Yunai-MacdeMacBook-Pro-2:config yunai$ <span class="built_in">pwd</span></div><div class="line">/Users/yunai/store/config</div><div class="line">Yunai-MacdeMacBook-Pro-2:config yunai$ ls -ls</div><div class="line">total 40</div><div class="line">8 -rw-r--r--  1 yunai  staff    21  4 28 16:58 consumerOffset.json</div><div class="line">8 -rw-r--r--  1 yunai  staff    21  4 28 16:58 consumerOffset.json.bak</div><div class="line">8 -rw-r--r--  1 yunai  staff    21  4 28 16:58 delayOffset.json</div><div class="line">8 -rw-r--r--  1 yunai  staff    21  4 28 16:58 delayOffset.json.bak</div><div class="line">8 -rw-r--r--  1 yunai  staff  1401  4 27 21:51 topics.json</div><div class="line">Yunai-MacdeMacBook-Pro-2:config yunai$ cat consumerOffset.json</div><div class="line">&#123;</div><div class="line">	<span class="string">"offsetTable"</span>:&#123;</div><div class="line">		<span class="string">"%RETRY%please_rename_unique_group_name_4@please_rename_unique_group_name_4"</span>:&#123;0:0</div><div class="line">		&#125;,</div><div class="line">		<span class="string">"TopicRead3@please_rename_unique_group_name_4"</span>:&#123;1:5</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li><code>consumerOffset.json</code> ：消费进度存储文件。</li>
<li><code>consumerOffset.json.bak</code> ：消费进度存储文件备份。</li>
<li>每次写入 <code>consumerOffset.json</code>，将原内容备份到 <code>consumerOffset.json.bak</code>。实现见：<a href="mixallstring2file">MixAll#string2File(...)</a>。</li>
</ul>
<h2>BrokerController#initialize(...)</h2>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>:<span class="keyword">this</span>.scheduledExecutorService.scheduleAtFixedRate(<span class="keyword">new</span> Runnable() &#123;</div><div class="line"> <span class="number">2</span>:    <span class="meta">@Override</span></div><div class="line"> <span class="number">3</span>:    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line"> <span class="number">4</span>:        <span class="keyword">try</span> &#123;</div><div class="line"> <span class="number">5</span>:            BrokerController.<span class="keyword">this</span>.consumerOffsetManager.persist();</div><div class="line"> <span class="number">6</span>:        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</div><div class="line"> <span class="number">7</span>:            log.error(<span class="string">"schedule persist consumerOffset error."</span>, e);</div><div class="line"> <span class="number">8</span>:        &#125;</div><div class="line"> <span class="number">9</span>:    &#125;</div><div class="line"><span class="number">10</span>:&#125;, <span class="number">1000</span> * <span class="number">10</span>, <span class="keyword">this</span>.brokerConfig.getFlushConsumerOffsetInterval(), TimeUnit.MILLISECONDS);</div></pre></td></tr></table></figure></p>
<ul>
<li>说明 ：每 5s 执行一次持久化逻辑。</li>
</ul>
<h2>ConfigManager</h2>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigManager</span> </span>&#123;</div><div class="line"> <span class="number">2</span>: <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger PLOG = LoggerFactory.getLogger(LoggerName.COMMON_LOGGER_NAME);</div><div class="line"> <span class="number">3</span>: </div><div class="line"> <span class="number">4</span>: <span class="comment">/**</span></div><div class="line"> 5:  * 编码内容</div><div class="line"> 6:  * <span class="doctag">@return</span> 编码后的内容</div><div class="line"> 7:  */</div><div class="line"> <span class="number">8</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">encode</span><span class="params">()</span></span>;</div><div class="line"> <span class="number">9</span>: </div><div class="line"><span class="number">10</span>: <span class="comment">/**</span></div><div class="line">11:  * 加载文件</div><div class="line">12:  *</div><div class="line">13:  * <span class="doctag">@return</span> 加载是否成功</div><div class="line">14:  */</div><div class="line"><span class="number">15</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">load</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="number">16</span>:     String fileName = <span class="keyword">null</span>;</div><div class="line"><span class="number">17</span>:     <span class="keyword">try</span> &#123;</div><div class="line"><span class="number">18</span>:         fileName = <span class="keyword">this</span>.configFilePath();</div><div class="line"><span class="number">19</span>:         String jsonString = MixAll.file2String(fileName);</div><div class="line"><span class="number">20</span>:         <span class="comment">// 如果内容不存在，则加载备份文件</span></div><div class="line"><span class="number">21</span>:         <span class="keyword">if</span> (<span class="keyword">null</span> == jsonString || jsonString.length() == <span class="number">0</span>) &#123;</div><div class="line"><span class="number">22</span>:             <span class="keyword">return</span> <span class="keyword">this</span>.loadBak();</div><div class="line"><span class="number">23</span>:         &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">24</span>:             <span class="keyword">this</span>.decode(jsonString);</div><div class="line"><span class="number">25</span>:             PLOG.info(<span class="string">"load &#123;&#125; OK"</span>, fileName);</div><div class="line"><span class="number">26</span>:             <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line"><span class="number">27</span>:         &#125;</div><div class="line"><span class="number">28</span>:     &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"><span class="number">29</span>:         PLOG.error(<span class="string">"load "</span> + fileName + <span class="string">" Failed, and try to load backup file"</span>, e);</div><div class="line"><span class="number">30</span>:         <span class="keyword">return</span> <span class="keyword">this</span>.loadBak();</div><div class="line"><span class="number">31</span>:     &#125;</div><div class="line"><span class="number">32</span>: &#125;</div><div class="line"><span class="number">33</span>: </div><div class="line"><span class="number">34</span>: <span class="comment">/**</span></div><div class="line">35:  * 配置文件地址</div><div class="line">36:  *</div><div class="line">37:  * <span class="doctag">@return</span> 配置文件地址</div><div class="line">38:  */</div><div class="line"><span class="number">39</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">configFilePath</span><span class="params">()</span></span>;</div><div class="line"><span class="number">40</span>: </div><div class="line"><span class="number">41</span>: <span class="comment">/**</span></div><div class="line">42:  * 加载备份文件</div><div class="line">43:  *</div><div class="line">44:  * <span class="doctag">@return</span> 是否成功</div><div class="line">45:  */</div><div class="line"><span class="number">46</span>: <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">loadBak</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="number">47</span>:     String fileName = <span class="keyword">null</span>;</div><div class="line"><span class="number">48</span>:     <span class="keyword">try</span> &#123;</div><div class="line"><span class="number">49</span>:         fileName = <span class="keyword">this</span>.configFilePath();</div><div class="line"><span class="number">50</span>:         String jsonString = MixAll.file2String(fileName + <span class="string">".bak"</span>);</div><div class="line"><span class="number">51</span>:         <span class="keyword">if</span> (jsonString != <span class="keyword">null</span> &amp;&amp; jsonString.length() &gt; <span class="number">0</span>) &#123;</div><div class="line"><span class="number">52</span>:             <span class="keyword">this</span>.decode(jsonString);</div><div class="line"><span class="number">53</span>:             PLOG.info(<span class="string">"load "</span> + fileName + <span class="string">" OK"</span>);</div><div class="line"><span class="number">54</span>:             <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line"><span class="number">55</span>:         &#125;</div><div class="line"><span class="number">56</span>:     &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"><span class="number">57</span>:         PLOG.error(<span class="string">"load "</span> + fileName + <span class="string">" Failed"</span>, e);</div><div class="line"><span class="number">58</span>:         <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line"><span class="number">59</span>:     &#125;</div><div class="line"><span class="number">60</span>: </div><div class="line"><span class="number">61</span>:     <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line"><span class="number">62</span>: &#125;</div><div class="line"><span class="number">63</span>: </div><div class="line"><span class="number">64</span>: <span class="comment">/**</span></div><div class="line">65:  * 解码内容</div><div class="line">66:  *</div><div class="line">67:  * <span class="doctag">@param</span> jsonString 内容</div><div class="line">68:  */</div><div class="line"><span class="number">69</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">decode</span><span class="params">(<span class="keyword">final</span> String jsonString)</span></span>;</div><div class="line"><span class="number">70</span>: </div><div class="line"><span class="number">71</span>: <span class="comment">/**</span></div><div class="line">72:  * 持久化</div><div class="line">73:  */</div><div class="line"><span class="number">74</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">persist</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="number">75</span>:     String jsonString = <span class="keyword">this</span>.encode(<span class="keyword">true</span>);</div><div class="line"><span class="number">76</span>:     <span class="keyword">if</span> (jsonString != <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">77</span>:         String fileName = <span class="keyword">this</span>.configFilePath();</div><div class="line"><span class="number">78</span>:         <span class="keyword">try</span> &#123;</div><div class="line"><span class="number">79</span>:             MixAll.string2File(jsonString, fileName);</div><div class="line"><span class="number">80</span>:         &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line"><span class="number">81</span>:             PLOG.error(<span class="string">"persist file Exception, "</span> + fileName, e);</div><div class="line"><span class="number">82</span>:         &#125;</div><div class="line"><span class="number">83</span>:     &#125;</div><div class="line"><span class="number">84</span>: &#125;</div><div class="line"><span class="number">85</span>: </div><div class="line"><span class="number">86</span>: <span class="comment">/**</span></div><div class="line">87:  * 编码存储内容</div><div class="line">88:  *</div><div class="line">89:  * <span class="doctag">@param</span> prettyFormat 是否格式化</div><div class="line">90:  * <span class="doctag">@return</span> 内容</div><div class="line">91:  */</div><div class="line"><span class="number">92</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">encode</span><span class="params">(<span class="keyword">final</span> <span class="keyword">boolean</span> prettyFormat)</span></span>;</div><div class="line"><span class="number">93</span>: &#125;</div></pre></td></tr></table></figure></p>
<h3>MixAll#string2File(...)</h3>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="comment">/**</span></div><div class="line"> 2:  * 将内容写到文件</div><div class="line"> 3:  * 安全写</div><div class="line"> 4:  * 1. 写到.tmp文件</div><div class="line"> 5:  * 2. 备份准备写入文件到.bak文件</div><div class="line"> 6:  * 3. 删除原文件，将.tmp修改成文件</div><div class="line"> 7:  *</div><div class="line"> 8:  * <span class="doctag">@param</span> str 内容</div><div class="line"> 9:  * <span class="doctag">@param</span> fileName 文件名</div><div class="line">10:  * <span class="doctag">@throws</span> IOException 当IO发生异常时</div><div class="line">11:  */</div><div class="line"><span class="number">12</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">string2File</span><span class="params">(<span class="keyword">final</span> String str, <span class="keyword">final</span> String fileName)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line"><span class="number">13</span>:     <span class="comment">// 写到 tmp文件</span></div><div class="line"><span class="number">14</span>:     String tmpFile = fileName + <span class="string">".tmp"</span>;</div><div class="line"><span class="number">15</span>:     string2FileNotSafe(str, tmpFile);</div><div class="line"><span class="number">16</span>:     <span class="comment">//</span></div><div class="line"><span class="number">17</span>:     String bakFile = fileName + <span class="string">".bak"</span>;</div><div class="line"><span class="number">18</span>:     String prevContent = file2String(fileName);</div><div class="line"><span class="number">19</span>:     <span class="keyword">if</span> (prevContent != <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">20</span>:         string2FileNotSafe(prevContent, bakFile);</div><div class="line"><span class="number">21</span>:     &#125;</div><div class="line"><span class="number">22</span>: </div><div class="line"><span class="number">23</span>:     File file = <span class="keyword">new</span> File(fileName);</div><div class="line"><span class="number">24</span>:     file.delete();</div><div class="line"><span class="number">25</span>: </div><div class="line"><span class="number">26</span>:     file = <span class="keyword">new</span> File(tmpFile);</div><div class="line"><span class="number">27</span>:     file.renameTo(<span class="keyword">new</span> File(fileName));</div><div class="line"><span class="number">28</span>: &#125;</div><div class="line"><span class="number">29</span>: </div><div class="line"><span class="number">30</span>: <span class="comment">/**</span></div><div class="line">31:  * 将内容写到文件</div><div class="line">32:  * 非安全写</div><div class="line">33:  *</div><div class="line">34:  * <span class="doctag">@param</span> str 内容</div><div class="line">35:  * <span class="doctag">@param</span> fileName 文件内容</div><div class="line">36:  * <span class="doctag">@throws</span> IOException 当IO发生异常时</div><div class="line">37:  */</div><div class="line"><span class="number">38</span>: <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">string2FileNotSafe</span><span class="params">(<span class="keyword">final</span> String str, <span class="keyword">final</span> String fileName)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line"><span class="number">39</span>:     File file = <span class="keyword">new</span> File(fileName);</div><div class="line"><span class="number">40</span>:     <span class="comment">// 创建上级目录</span></div><div class="line"><span class="number">41</span>:     File fileParent = file.getParentFile();</div><div class="line"><span class="number">42</span>:     <span class="keyword">if</span> (fileParent != <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">43</span>:         fileParent.mkdirs();</div><div class="line"><span class="number">44</span>:     &#125;</div><div class="line"><span class="number">45</span>:     <span class="comment">// 写内容</span></div><div class="line"><span class="number">46</span>:     FileWriter fileWriter = <span class="keyword">null</span>;</div><div class="line"><span class="number">47</span>:     <span class="keyword">try</span> &#123;</div><div class="line"><span class="number">48</span>:         fileWriter = <span class="keyword">new</span> FileWriter(file);</div><div class="line"><span class="number">49</span>:         fileWriter.write(str);</div><div class="line"><span class="number">50</span>:     &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line"><span class="number">51</span>:         <span class="keyword">throw</span> e;</div><div class="line"><span class="number">52</span>:     &#125; <span class="keyword">finally</span> &#123;</div><div class="line"><span class="number">53</span>:         <span class="keyword">if</span> (fileWriter != <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">54</span>:             fileWriter.close();</div><div class="line"><span class="number">55</span>:         &#125;</div><div class="line"><span class="number">56</span>:     &#125;</div><div class="line"><span class="number">57</span>: &#125;</div></pre></td></tr></table></figure></p>
<h2>ConsumerOffsetManager</h2>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"> <span class="number">1</span>: <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerOffsetManager</span> <span class="keyword">extends</span> <span class="title">ConfigManager</span> </span>&#123;</div><div class="line"> <span class="number">2</span>:     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(LoggerName.BROKER_LOGGER_NAME);</div><div class="line"> <span class="number">3</span>:     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TOPIC_GROUP_SEPARATOR = <span class="string">"@"</span>;</div><div class="line"> <span class="number">4</span>: </div><div class="line"> <span class="number">5</span>:     <span class="comment">/**</span></div><div class="line"> 6:      * 消费进度集合</div><div class="line"> 7:      */</div><div class="line"> <span class="number">8</span>:     <span class="keyword">private</span> ConcurrentHashMap&lt;String<span class="comment">/* topic@group */</span>, ConcurrentHashMap&lt;Integer, Long&gt;&gt; offsetTable = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;(<span class="number">512</span>);</div><div class="line"> <span class="number">9</span>: </div><div class="line"><span class="number">10</span>:     <span class="keyword">private</span> <span class="keyword">transient</span> BrokerController brokerController;</div><div class="line"><span class="number">11</span>: </div><div class="line"><span class="number">12</span>:     <span class="function"><span class="keyword">public</span> <span class="title">ConsumerOffsetManager</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="number">13</span>:     &#125;</div><div class="line"><span class="number">14</span>: </div><div class="line"><span class="number">15</span>:     <span class="function"><span class="keyword">public</span> <span class="title">ConsumerOffsetManager</span><span class="params">(BrokerController brokerController)</span> </span>&#123;</div><div class="line"><span class="number">16</span>:         <span class="keyword">this</span>.brokerController = brokerController;</div><div class="line"><span class="number">17</span>:     &#125;</div><div class="line"><span class="number">18</span>: </div><div class="line"><span class="number">19</span>:     <span class="comment">/**</span></div><div class="line">20:      * 提交消费进度</div><div class="line">21:      *</div><div class="line">22:      * <span class="doctag">@param</span> clientHost 提交client地址</div><div class="line">23:      * <span class="doctag">@param</span> group 消费分组</div><div class="line">24:      * <span class="doctag">@param</span> topic 主题</div><div class="line">25:      * <span class="doctag">@param</span> queueId 队列编号</div><div class="line">26:      * <span class="doctag">@param</span> offset 进度（队列位置）</div><div class="line">27:      */</div><div class="line"><span class="number">28</span>:     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commitOffset</span><span class="params">(<span class="keyword">final</span> String clientHost, <span class="keyword">final</span> String group, <span class="keyword">final</span> String topic, <span class="keyword">final</span> <span class="keyword">int</span> queueId, <span class="keyword">final</span> <span class="keyword">long</span> offset)</span> </span>&#123;</div><div class="line"><span class="number">29</span>:         <span class="comment">// topic@group</span></div><div class="line"><span class="number">30</span>:         String key = topic + TOPIC_GROUP_SEPARATOR + group;</div><div class="line"><span class="number">31</span>:         <span class="keyword">this</span>.commitOffset(clientHost, key, queueId, offset);</div><div class="line"><span class="number">32</span>:     &#125;</div><div class="line"><span class="number">33</span>: </div><div class="line"><span class="number">34</span>:     <span class="comment">/**</span></div><div class="line">35:      * 提交消费进度</div><div class="line">36:      *</div><div class="line">37:      * <span class="doctag">@param</span> clientHost 提交client地址</div><div class="line">38:      * <span class="doctag">@param</span> key 主题@消费分组</div><div class="line">39:      * <span class="doctag">@param</span> queueId 队列编号</div><div class="line">40:      * <span class="doctag">@param</span> offset 进度（队列位置）</div><div class="line">41:      */</div><div class="line"><span class="number">42</span>:     <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">commitOffset</span><span class="params">(<span class="keyword">final</span> String clientHost, <span class="keyword">final</span> String key, <span class="keyword">final</span> <span class="keyword">int</span> queueId, <span class="keyword">final</span> <span class="keyword">long</span> offset)</span> </span>&#123;</div><div class="line"><span class="number">43</span>:         ConcurrentHashMap&lt;Integer, Long&gt; map = <span class="keyword">this</span>.offsetTable.get(key);</div><div class="line"><span class="number">44</span>:         <span class="keyword">if</span> (<span class="keyword">null</span> == map) &#123;</div><div class="line"><span class="number">45</span>:             map = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;(<span class="number">32</span>);</div><div class="line"><span class="number">46</span>:             map.put(queueId, offset);</div><div class="line"><span class="number">47</span>:             <span class="keyword">this</span>.offsetTable.put(key, map);</div><div class="line"><span class="number">48</span>:         &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">49</span>:             Long storeOffset = map.put(queueId, offset);</div><div class="line"><span class="number">50</span>:             <span class="keyword">if</span> (storeOffset != <span class="keyword">null</span> &amp;&amp; offset &lt; storeOffset) &#123;</div><div class="line"><span class="number">51</span>:                 log.warn(<span class="string">"[NOTIFYME]update consumer offset less than store. clientHost=&#123;&#125;, key=&#123;&#125;, queueId=&#123;&#125;, requestOffset=&#123;&#125;, storeOffset=&#123;&#125;"</span>, clientHost, key, queueId, offset, storeOffset);</div><div class="line"><span class="number">52</span>:             &#125;</div><div class="line"><span class="number">53</span>:         &#125;</div><div class="line"><span class="number">54</span>:     &#125;</div><div class="line"><span class="number">55</span>: </div><div class="line"><span class="number">56</span>:     <span class="function"><span class="keyword">public</span> String <span class="title">encode</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="number">57</span>:         <span class="keyword">return</span> <span class="keyword">this</span>.encode(<span class="keyword">false</span>);</div><div class="line"><span class="number">58</span>:     &#125;</div><div class="line"><span class="number">59</span>: </div><div class="line"><span class="number">60</span>:     <span class="meta">@Override</span></div><div class="line"><span class="number">61</span>:     <span class="function"><span class="keyword">public</span> String <span class="title">configFilePath</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="number">62</span>:         <span class="keyword">return</span> BrokerPathConfigHelper.getConsumerOffsetPath(<span class="keyword">this</span>.brokerController.getMessageStoreConfig().getStorePathRootDir());</div><div class="line"><span class="number">63</span>:     &#125;</div><div class="line"><span class="number">64</span>: </div><div class="line"><span class="number">65</span>:     <span class="comment">/**</span></div><div class="line">66:      * 解码内容</div><div class="line">67:      * 格式:JSON</div><div class="line">68:      *</div><div class="line">69:      * <span class="doctag">@param</span> jsonString 内容</div><div class="line">70:      */</div><div class="line"><span class="number">71</span>:     <span class="meta">@Override</span></div><div class="line"><span class="number">72</span>:     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">decode</span><span class="params">(String jsonString)</span> </span>&#123;</div><div class="line"><span class="number">73</span>:         <span class="keyword">if</span> (jsonString != <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">74</span>:             ConsumerOffsetManager obj = RemotingSerializable.fromJson(jsonString, ConsumerOffsetManager.class);</div><div class="line"><span class="number">75</span>:             <span class="keyword">if</span> (obj != <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">76</span>:                 <span class="keyword">this</span>.offsetTable = obj.offsetTable;</div><div class="line"><span class="number">77</span>:             &#125;</div><div class="line"><span class="number">78</span>:         &#125;</div><div class="line"><span class="number">79</span>:     &#125;</div><div class="line"><span class="number">80</span>: </div><div class="line"><span class="number">81</span>:     <span class="comment">/**</span></div><div class="line">82:      * 编码内容</div><div class="line">83:      * 格式为JSON</div><div class="line">84:      *</div><div class="line">85:      * <span class="doctag">@param</span> prettyFormat 是否格式化</div><div class="line">86:      * <span class="doctag">@return</span> 编码后的内容</div><div class="line">87:      */</div><div class="line"><span class="number">88</span>:     <span class="function"><span class="keyword">public</span> String <span class="title">encode</span><span class="params">(<span class="keyword">final</span> <span class="keyword">boolean</span> prettyFormat)</span> </span>&#123;</div><div class="line"><span class="number">89</span>:         <span class="keyword">return</span> RemotingSerializable.toJson(<span class="keyword">this</span>, prettyFormat);</div><div class="line"><span class="number">90</span>:     &#125;</div><div class="line"><span class="number">91</span>: </div><div class="line"><span class="number">92</span>: &#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>说明 ：消费进度管理器。</li>
</ul>
<h1>6、Broker 提供[发回消息]接口</h1>
<p>大部分逻辑和 <a href="http://www.yunai.me/RocketMQ/message-send-and-receive/#3%E3%80%81Broker-%E6%8E%A5%E6%94%B6%E6%B6%88%E6%81%AF"><code>Broker</code> 提供[接收消息]接口</a> 类似，可以先看下相关内容。</p>
<h2>SendMessageProcessor#consumerSendMsgBack(...)</h2>
<p><figure class="highlight java"><table><tr><td class="code"><pre><div class="line">  <span class="number">1</span>: <span class="function"><span class="keyword">private</span> RemotingCommand <span class="title">consumerSendMsgBack</span><span class="params">(<span class="keyword">final</span> ChannelHandlerContext ctx, <span class="keyword">final</span> RemotingCommand request)</span></span></div><div class="line">  2:     <span class="keyword">throws</span> RemotingCommandException &#123;</div><div class="line">  <span class="number">3</span>: </div><div class="line">  <span class="number">4</span>:     <span class="comment">// 初始化响应</span></div><div class="line">  <span class="number">5</span>:     <span class="keyword">final</span> RemotingCommand response = RemotingCommand.createResponseCommand(<span class="keyword">null</span>);</div><div class="line">  <span class="number">6</span>:     <span class="keyword">final</span> ConsumerSendMsgBackRequestHeader requestHeader =</div><div class="line">  <span class="number">7</span>:         (ConsumerSendMsgBackRequestHeader) request.decodeCommandCustomHeader(ConsumerSendMsgBackRequestHeader.class);</div><div class="line">  <span class="number">8</span>: </div><div class="line">  <span class="number">9</span>:     <span class="comment">// hook（独有）</span></div><div class="line"> <span class="number">10</span>:     <span class="keyword">if</span> (<span class="keyword">this</span>.hasConsumeMessageHook() &amp;&amp; !UtilAll.isBlank(requestHeader.getOriginMsgId())) &#123;</div><div class="line"> <span class="number">11</span>: </div><div class="line"> <span class="number">12</span>:         ConsumeMessageContext context = <span class="keyword">new</span> ConsumeMessageContext();</div><div class="line"> <span class="number">13</span>:         context.setConsumerGroup(requestHeader.getGroup());</div><div class="line"> <span class="number">14</span>:         context.setTopic(requestHeader.getOriginTopic());</div><div class="line"> <span class="number">15</span>:         context.setCommercialRcvStats(BrokerStatsManager.StatsType.SEND_BACK);</div><div class="line"> <span class="number">16</span>:         context.setCommercialRcvTimes(<span class="number">1</span>);</div><div class="line"> <span class="number">17</span>:         context.setCommercialOwner(request.getExtFields().get(BrokerStatsManager.COMMERCIAL_OWNER));</div><div class="line"> <span class="number">18</span>: </div><div class="line"> <span class="number">19</span>:         <span class="keyword">this</span>.executeConsumeMessageHookAfter(context);</div><div class="line"> <span class="number">20</span>:     &#125;</div><div class="line"> <span class="number">21</span>: </div><div class="line"> <span class="number">22</span>:     <span class="comment">// 判断消费分组是否存在（独有）</span></div><div class="line"> <span class="number">23</span>:     SubscriptionGroupConfig subscriptionGroupConfig =</div><div class="line"> <span class="number">24</span>:         <span class="keyword">this</span>.brokerController.getSubscriptionGroupManager().findSubscriptionGroupConfig(requestHeader.getGroup());</div><div class="line"> <span class="number">25</span>:     <span class="keyword">if</span> (<span class="keyword">null</span> == subscriptionGroupConfig) &#123;</div><div class="line"> <span class="number">26</span>:         response.setCode(ResponseCode.SUBSCRIPTION_GROUP_NOT_EXIST);</div><div class="line"> <span class="number">27</span>:         response.setRemark(<span class="string">"subscription group not exist, "</span> + requestHeader.getGroup() + <span class="string">" "</span></div><div class="line"> <span class="number">28</span>:             + FAQUrl.suggestTodo(FAQUrl.SUBSCRIPTION_GROUP_NOT_EXIST));</div><div class="line"> <span class="number">29</span>:         <span class="keyword">return</span> response;</div><div class="line"> <span class="number">30</span>:     &#125;</div><div class="line"> <span class="number">31</span>: </div><div class="line"> <span class="number">32</span>:     <span class="comment">// 检查 broker 是否有写入权限</span></div><div class="line"> <span class="number">33</span>:     <span class="keyword">if</span> (!PermName.isWriteable(<span class="keyword">this</span>.brokerController.getBrokerConfig().getBrokerPermission())) &#123;</div><div class="line"> <span class="number">34</span>:         response.setCode(ResponseCode.NO_PERMISSION);</div><div class="line"> <span class="number">35</span>:         response.setRemark(<span class="string">"the broker["</span> + <span class="keyword">this</span>.brokerController.getBrokerConfig().getBrokerIP1() + <span class="string">"] sending message is forbidden"</span>);</div><div class="line"> <span class="number">36</span>:         <span class="keyword">return</span> response;</div><div class="line"> <span class="number">37</span>:     &#125;</div><div class="line"> <span class="number">38</span>: </div><div class="line"> <span class="number">39</span>:     <span class="comment">// 检查 重试队列数 是否大于0（独有）</span></div><div class="line"> <span class="number">40</span>:     <span class="keyword">if</span> (subscriptionGroupConfig.getRetryQueueNums() &lt;= <span class="number">0</span>) &#123;</div><div class="line"> <span class="number">41</span>:         response.setCode(ResponseCode.SUCCESS);</div><div class="line"> <span class="number">42</span>:         response.setRemark(<span class="keyword">null</span>);</div><div class="line"> <span class="number">43</span>:         <span class="keyword">return</span> response;</div><div class="line"> <span class="number">44</span>:     &#125;</div><div class="line"> <span class="number">45</span>: </div><div class="line"> <span class="number">46</span>:     <span class="comment">// 计算retry Topic</span></div><div class="line"> <span class="number">47</span>:     String newTopic = MixAll.getRetryTopic(requestHeader.getGroup());</div><div class="line"> <span class="number">48</span>: </div><div class="line"> <span class="number">49</span>:     <span class="comment">// 计算队列编号（独有）</span></div><div class="line"> <span class="number">50</span>:     <span class="keyword">int</span> queueIdInt = Math.abs(<span class="keyword">this</span>.random.nextInt() % <span class="number">99999999</span>) % subscriptionGroupConfig.getRetryQueueNums();</div><div class="line"> <span class="number">51</span>: </div><div class="line"> <span class="number">52</span>:     <span class="comment">// 计算sysFlag（独有）</span></div><div class="line"> <span class="number">53</span>:     <span class="keyword">int</span> topicSysFlag = <span class="number">0</span>;</div><div class="line"> <span class="number">54</span>:     <span class="keyword">if</span> (requestHeader.isUnitMode()) &#123;</div><div class="line"> <span class="number">55</span>:         topicSysFlag = TopicSysFlag.buildSysFlag(<span class="keyword">false</span>, <span class="keyword">true</span>);</div><div class="line"> <span class="number">56</span>:     &#125;</div><div class="line"> <span class="number">57</span>: </div><div class="line"> <span class="number">58</span>:     <span class="comment">// 获取topicConfig。如果获取不到，则进行创建</span></div><div class="line"> <span class="number">59</span>:     TopicConfig topicConfig = <span class="keyword">this</span>.brokerController.getTopicConfigManager().createTopicInSendMessageBackMethod(<span class="comment">//</span></div><div class="line"> <span class="number">60</span>:         newTopic, <span class="comment">//</span></div><div class="line"> <span class="number">61</span>:         subscriptionGroupConfig.getRetryQueueNums(), <span class="comment">//</span></div><div class="line"> <span class="number">62</span>:         PermName.PERM_WRITE | PermName.PERM_READ, topicSysFlag);</div><div class="line"> <span class="number">63</span>:     <span class="keyword">if</span> (<span class="keyword">null</span> == topicConfig) &#123; <span class="comment">// 没有配置</span></div><div class="line"> <span class="number">64</span>:         response.setCode(ResponseCode.SYSTEM_ERROR);</div><div class="line"> <span class="number">65</span>:         response.setRemark(<span class="string">"topic["</span> + newTopic + <span class="string">"] not exist"</span>);</div><div class="line"> <span class="number">66</span>:         <span class="keyword">return</span> response;</div><div class="line"> <span class="number">67</span>:     &#125;</div><div class="line"> <span class="number">68</span>:     <span class="keyword">if</span> (!PermName.isWriteable(topicConfig.getPerm())) &#123; <span class="comment">// 不允许写入</span></div><div class="line"> <span class="number">69</span>:         response.setCode(ResponseCode.NO_PERMISSION);</div><div class="line"> <span class="number">70</span>:         response.setRemark(String.format(<span class="string">"the topic[%s] sending message is forbidden"</span>, newTopic));</div><div class="line"> <span class="number">71</span>:         <span class="keyword">return</span> response;</div><div class="line"> <span class="number">72</span>:     &#125;</div><div class="line"> <span class="number">73</span>: </div><div class="line"> <span class="number">74</span>:     <span class="comment">// 查询消息。若不存在，返回异常错误。（独有）</span></div><div class="line"> <span class="number">75</span>:     MessageExt msgExt = <span class="keyword">this</span>.brokerController.getMessageStore().lookMessageByOffset(requestHeader.getOffset());</div><div class="line"> <span class="number">76</span>:     <span class="keyword">if</span> (<span class="keyword">null</span> == msgExt) &#123;</div><div class="line"> <span class="number">77</span>:         response.setCode(ResponseCode.SYSTEM_ERROR);</div><div class="line"> <span class="number">78</span>:         response.setRemark(<span class="string">"look message by offset failed, "</span> + requestHeader.getOffset());</div><div class="line"> <span class="number">79</span>:         <span class="keyword">return</span> response;</div><div class="line"> <span class="number">80</span>:     &#125;</div><div class="line"> <span class="number">81</span>: </div><div class="line"> <span class="number">82</span>:     <span class="comment">// 设置retryTopic到拓展属性（独有）</span></div><div class="line"> <span class="number">83</span>:     <span class="keyword">final</span> String retryTopic = msgExt.getProperty(MessageConst.PROPERTY_RETRY_TOPIC);</div><div class="line"> <span class="number">84</span>:     <span class="keyword">if</span> (<span class="keyword">null</span> == retryTopic) &#123;</div><div class="line"> <span class="number">85</span>:         MessageAccessor.putProperty(msgExt, MessageConst.PROPERTY_RETRY_TOPIC, msgExt.getTopic());</div><div class="line"> <span class="number">86</span>:     &#125;</div><div class="line"> <span class="number">87</span>: </div><div class="line"> <span class="number">88</span>:     <span class="comment">// 设置消息不等待存储完成（独有） TODO 疑问：如果设置成不等待存储，broker设置成同步落盘，岂不是不能批量提交了？</span></div><div class="line"> <span class="number">89</span>:     msgExt.setWaitStoreMsgOK(<span class="keyword">false</span>);</div><div class="line"> <span class="number">90</span>: </div><div class="line"> <span class="number">91</span>:     <span class="comment">// 处理 delayLevel（独有）。</span></div><div class="line"> <span class="number">92</span>:     <span class="keyword">int</span> delayLevel = requestHeader.getDelayLevel();</div><div class="line"> <span class="number">93</span>:     <span class="keyword">int</span> maxReconsumeTimes = subscriptionGroupConfig.getRetryMaxTimes();</div><div class="line"> <span class="number">94</span>:     <span class="keyword">if</span> (request.getVersion() &gt;= MQVersion.Version.V3_4_9.ordinal()) &#123;</div><div class="line"> <span class="number">95</span>:         maxReconsumeTimes = requestHeader.getMaxReconsumeTimes();</div><div class="line"> <span class="number">96</span>:     &#125;</div><div class="line"> <span class="number">97</span>:     <span class="keyword">if</span> (msgExt.getReconsumeTimes() &gt;= maxReconsumeTimes<span class="comment">//</span></div><div class="line"> <span class="number">98</span>:         || delayLevel &lt; <span class="number">0</span>) &#123; <span class="comment">// 如果超过最大消费次数，则topic修改成"%DLQ%" + 分组名，即加入 死信队列(Dead Letter Queue)</span></div><div class="line"> <span class="number">99</span>:         newTopic = MixAll.getDLQTopic(requestHeader.getGroup());</div><div class="line"><span class="number">100</span>:         queueIdInt = Math.abs(<span class="keyword">this</span>.random.nextInt() % <span class="number">99999999</span>) % DLQ_NUMS_PER_GROUP;</div><div class="line"><span class="number">101</span>: </div><div class="line"><span class="number">102</span>:         topicConfig = <span class="keyword">this</span>.brokerController.getTopicConfigManager().createTopicInSendMessageBackMethod(newTopic, <span class="comment">//</span></div><div class="line"><span class="number">103</span>:             DLQ_NUMS_PER_GROUP, <span class="comment">//</span></div><div class="line"><span class="number">104</span>:             PermName.PERM_WRITE, <span class="number">0</span></div><div class="line"><span class="number">105</span>:         );</div><div class="line"><span class="number">106</span>:         <span class="keyword">if</span> (<span class="keyword">null</span> == topicConfig) &#123;</div><div class="line"><span class="number">107</span>:             response.setCode(ResponseCode.SYSTEM_ERROR);</div><div class="line"><span class="number">108</span>:             response.setRemark(<span class="string">"topic["</span> + newTopic + <span class="string">"] not exist"</span>);</div><div class="line"><span class="number">109</span>:             <span class="keyword">return</span> response;</div><div class="line"><span class="number">110</span>:         &#125;</div><div class="line"><span class="number">111</span>:     &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="number">112</span>:         <span class="keyword">if</span> (<span class="number">0</span> == delayLevel) &#123;</div><div class="line"><span class="number">113</span>:             delayLevel = <span class="number">3</span> + msgExt.getReconsumeTimes();</div><div class="line"><span class="number">114</span>:         &#125;</div><div class="line"><span class="number">115</span>:         msgExt.setDelayTimeLevel(delayLevel);</div><div class="line"><span class="number">116</span>:     &#125;</div><div class="line"><span class="number">117</span>: </div><div class="line"><span class="number">118</span>:     <span class="comment">// 创建MessageExtBrokerInner</span></div><div class="line"><span class="number">119</span>:     MessageExtBrokerInner msgInner = <span class="keyword">new</span> MessageExtBrokerInner();</div><div class="line"><span class="number">120</span>:     msgInner.setTopic(newTopic);</div><div class="line"><span class="number">121</span>:     msgInner.setBody(msgExt.getBody());</div><div class="line"><span class="number">122</span>:     msgInner.setFlag(msgExt.getFlag());</div><div class="line"><span class="number">123</span>:     MessageAccessor.setProperties(msgInner, msgExt.getProperties());</div><div class="line"><span class="number">124</span>:     msgInner.setPropertiesString(MessageDecoder.messageProperties2String(msgExt.getProperties()));</div><div class="line"><span class="number">125</span>:     msgInner.setTagsCode(MessageExtBrokerInner.tagsString2tagsCode(<span class="keyword">null</span>, msgExt.getTags()));</div><div class="line"><span class="number">126</span>:     msgInner.setQueueId(queueIdInt);</div><div class="line"><span class="number">127</span>:     msgInner.setSysFlag(msgExt.getSysFlag());</div><div class="line"><span class="number">128</span>:     msgInner.setBornTimestamp(msgExt.getBornTimestamp());</div><div class="line"><span class="number">129</span>:     msgInner.setBornHost(msgExt.getBornHost());</div><div class="line"><span class="number">130</span>:     msgInner.setStoreHost(<span class="keyword">this</span>.getStoreHost());</div><div class="line"><span class="number">131</span>:     msgInner.setReconsumeTimes(msgExt.getReconsumeTimes() + <span class="number">1</span>);</div><div class="line"><span class="number">132</span>: </div><div class="line"><span class="number">133</span>:     <span class="comment">// 设置原始消息编号到拓展字段（独有）</span></div><div class="line"><span class="number">134</span>:     String originMsgId = MessageAccessor.getOriginMessageId(msgExt);</div><div class="line"><span class="number">135</span>:     MessageAccessor.setOriginMessageId(msgInner, UtilAll.isBlank(originMsgId) ? msgExt.getMsgId() : originMsgId);</div><div class="line"><span class="number">136</span>: </div><div class="line"><span class="number">137</span>:     <span class="comment">// 添加消息</span></div><div class="line"><span class="number">138</span>:     PutMessageResult putMessageResult = <span class="keyword">this</span>.brokerController.getMessageStore().putMessage(msgInner);</div><div class="line"><span class="number">139</span>:     <span class="keyword">if</span> (putMessageResult != <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">140</span>:         <span class="keyword">switch</span> (putMessageResult.getPutMessageStatus()) &#123;</div><div class="line"><span class="number">141</span>:             <span class="keyword">case</span> PUT_OK:</div><div class="line"><span class="number">142</span>:                 String backTopic = msgExt.getTopic();</div><div class="line"><span class="number">143</span>:                 String correctTopic = msgExt.getProperty(MessageConst.PROPERTY_RETRY_TOPIC);</div><div class="line"><span class="number">144</span>:                 <span class="keyword">if</span> (correctTopic != <span class="keyword">null</span>) &#123;</div><div class="line"><span class="number">145</span>:                     backTopic = correctTopic;</div><div class="line"><span class="number">146</span>:                 &#125;</div><div class="line"><span class="number">147</span>: </div><div class="line"><span class="number">148</span>:                 <span class="keyword">this</span>.brokerController.getBrokerStatsManager().incSendBackNums(requestHeader.getGroup(), backTopic);</div><div class="line"><span class="number">149</span>: </div><div class="line"><span class="number">150</span>:                 response.setCode(ResponseCode.SUCCESS);</div><div class="line"><span class="number">151</span>:                 response.setRemark(<span class="keyword">null</span>);</div><div class="line"><span class="number">152</span>: </div><div class="line"><span class="number">153</span>:                 <span class="keyword">return</span> response;</div><div class="line"><span class="number">154</span>:             <span class="keyword">default</span>:</div><div class="line"><span class="number">155</span>:                 <span class="keyword">break</span>;</div><div class="line"><span class="number">156</span>:         &#125;</div><div class="line"><span class="number">157</span>: </div><div class="line"><span class="number">158</span>:         response.setCode(ResponseCode.SYSTEM_ERROR);</div><div class="line"><span class="number">159</span>:         response.setRemark(putMessageResult.getPutMessageStatus().name());</div><div class="line"><span class="number">160</span>:         <span class="keyword">return</span> response;</div><div class="line"><span class="number">161</span>:     &#125;</div><div class="line"><span class="number">162</span>: </div><div class="line"><span class="number">163</span>:     response.setCode(ResponseCode.SYSTEM_ERROR);</div><div class="line"><span class="number">164</span>:     response.setRemark(<span class="string">"putMessageResult is null"</span>);</div><div class="line"><span class="number">165</span>:     <span class="keyword">return</span> response;</div><div class="line"><span class="number">166</span>: &#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>说明 ：当 <code>Consumer</code> 消费某条消息失败时，会调用该接口发回消息。<code>Broker</code> 会存储发回的消息。这样，下次 <code>Consumer</code> 拉取该消息，能够从 <code>CommitLog</code> 和 <code>ConsumeQueue</code> 顺序读取。</li>
<li>[x] 因为大多数逻辑和 <strong><code>Broker</code> 接收普通消息</strong> 很相似，时候 <code>TODO</code> 标记成独有的逻辑。</li>
<li>第 4 至 7 行 ：初始化响应。</li>
<li>[x] 第 9 至 20 行 ：Hook逻辑。</li>
<li>[x] 第22 至 30 行 ：判断消费分组是否存在。</li>
<li>第 32 至 37 行 ：检查 <code>Broker</code> 是否有写入权限。</li>
<li>[x] 第 39 至 44 行 ：检查重试队列数是否大于0。</li>
<li>第 47 行 ：计算 retry topic。</li>
<li>[x] 第 50 行 ：随机分配队列编号，依赖 <code>retryQueueNums</code>。</li>
<li>[x] 第 52 至 56 行 ：计算 <code>sysFlag</code>。</li>
<li>第 58 至 72 行 ：获取 <code>TopicConfig</code>。如果不存在，则创建。</li>
<li>[x] 第 74 至 80 行 ：查询消息。若不存在，返回异常错误。</li>
<li>[x] 第 82 至 86 行 ：设置 <code>retryTopic</code> 到消息拓展属性。</li>
<li>[x] 第 89 行 ：设置消息不等待存储完成。
<ul>
<li>当 <code>Broker</code> 刷盘方式为同步，会导致同步落盘不能批量提交，这样会不会存在问题？有知道的同学麻烦告知下。😈。</li>
</ul>
</li>
<li>[x] 第 91 至 116 行 ：处理 <code>delayLevel</code> 。</li>
<li>第 118 至 131 行 ：创建 <code>MessageExtBrokerInner</code> 。</li>
<li>[x] 第 133 至 135 行 ：设置原始消息编号到拓展属性。</li>
<li>第 137 至 161 行 ：添加消息。</li>
</ul>
<h1>7、结尾</h1>
<p>感谢同学们对本文的阅读、收藏、点赞。</p>
<p>😈如果解析存在问题或者表达误解的，表示抱歉。如果方便的话，可以加下 <strong>QQ：7685413</strong>。让我们来一场 1 ：1 交流（搞基）。</p>
<p>再次表示十分感谢。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://www.yunai.me/images/common/wechat_mp.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;🙂🙂🙂关注**微信公众号：【芋艿的后端小屋】**有福利：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Rock
    
    </summary>
    
      <category term="RocketMQ" scheme="http://www.yunai.me/categories/RocketMQ/"/>
    
    
  </entry>
  
</feed>
